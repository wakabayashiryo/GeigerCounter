

Microchip Technology PIC LITE Macro Assembler V1.41 build -162212810 
                                                                                               Wed Jun 28 21:42:15 2017

Microchip Technology Omniscient Code Generator v1.41 (Free mode) build 201701250102
     1                           	processor	16F1827
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK1,global,class=CODE,delta=2
     5                           	psect	idataBANK2,global,class=CODE,delta=2
     6                           	psect	stringtext,global,class=STRCODE,delta=2
     7                           	psect	cinit,global,class=CODE,merge=1,delta=2
     8                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    11                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	dataBANK2,global,class=BANK2,space=1,delta=1
    13                           	psect	inittext,global,class=CODE,delta=2
    14                           	psect	clrtext,global,class=CODE,delta=2
    15                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    16                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    17                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    18                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    19                           	psect	text1,local,class=CODE,merge=1,delta=2
    20                           	psect	text2,local,class=CODE,merge=1,delta=2
    21                           	psect	text3,local,class=CODE,merge=1,delta=2,group=2
    22                           	psect	text4,local,class=CODE,merge=1,delta=2,group=2
    23                           	psect	text5,local,class=CODE,merge=1,delta=2,group=2
    24                           	psect	text6,local,class=CODE,merge=1,delta=2
    25                           	psect	text7,local,class=CODE,merge=1,delta=2
    26                           	psect	text8,local,class=CODE,merge=1,delta=2
    27                           	psect	text9,local,class=CODE,merge=1,delta=2
    28                           	psect	text10,local,class=CODE,merge=1,delta=2
    29                           	psect	text11,local,class=CODE,merge=1,delta=2
    30                           	psect	text12,local,class=CODE,merge=1,delta=2
    31                           	psect	text13,local,class=CODE,merge=1,delta=2
    32                           	psect	text14,local,class=CODE,merge=1,delta=2
    33                           	psect	text15,local,class=CODE,merge=1,delta=2
    34                           	psect	text16,local,class=CODE,merge=1,delta=2
    35                           	psect	text17,local,class=CODE,merge=1,delta=2
    36                           	psect	text18,local,class=CODE,merge=1,delta=2
    37                           	psect	text19,local,class=CODE,merge=1,delta=2
    38                           	psect	text20,local,class=CODE,merge=1,delta=2,group=2
    39                           	psect	text21,local,class=CODE,merge=1,delta=2,group=2
    40                           	psect	text22,local,class=CODE,merge=1,delta=2
    41                           	psect	text23,local,class=CODE,merge=1,delta=2
    42                           	psect	text24,local,class=CODE,merge=1,delta=2
    43                           	psect	text25,local,class=CODE,merge=1,delta=2
    44                           	psect	text26,local,class=CODE,merge=1,delta=2
    45                           	psect	text27,local,class=CODE,merge=1,delta=2
    46                           	psect	text28,local,class=CODE,merge=1,delta=2
    47                           	psect	text29,local,class=CODE,merge=1,delta=2
    48                           	psect	text30,local,class=CODE,merge=1,delta=2
    49                           	psect	text31,local,class=CODE,merge=1,delta=2
    50                           	psect	text32,local,class=CODE,merge=1,delta=2
    51                           	psect	text33,local,class=CODE,merge=1,delta=2
    52                           	psect	text34,local,class=CODE,merge=1,delta=2
    53                           	psect	intentry,global,class=CODE,delta=2
    54                           	psect	text36,local,class=CODE,merge=1,delta=2
    55                           	psect	text37,local,class=CODE,merge=1,delta=2
    56                           	psect	text38,local,class=CODE,merge=1,delta=2
    57                           	psect	text39,local,class=CODE,merge=1,delta=2
    58                           	psect	text40,local,class=CODE,merge=1,delta=2
    59                           	psect	text41,local,class=CODE,merge=1,delta=2
    60                           	psect	text42,local,class=CODE,merge=1,delta=2
    61                           	psect	text43,local,class=CODE,merge=1,delta=2
    62                           	psect	text44,local,class=CODE,merge=1,delta=2
    63                           	psect	text45,local,class=CODE,merge=1,delta=2
    64                           	dabs	1,0x7E,2
    65  0000                     
    66                           ; Version 1.41
    67                           ; Generated 25/01/2017 GMT
    68                           ; 
    69                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    70                           ; All rights reserved.
    71                           ; 
    72                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    73                           ; 
    74                           ; Redistribution and use in source and binary forms, with or without modification, are
    75                           ; permitted provided that the following conditions are met:
    76                           ; 
    77                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    78                           ;        conditions and the following disclaimer.
    79                           ; 
    80                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    81                           ;        of conditions and the following disclaimer in the documentation and/or other
    82                           ;        materials provided with the distribution.
    83                           ; 
    84                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    85                           ;        software without specific prior written permission.
    86                           ; 
    87                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    88                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    89                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    90                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    91                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    92                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    93                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    94                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    95                           ; 
    96                           ; 
    97                           ; Code-generator required, PIC16F1827 Definitions
    98                           ; 
    99                           ; SFR Addresses
   100  0000                     	;# 
   101  0001                     	;# 
   102  0002                     	;# 
   103  0003                     	;# 
   104  0004                     	;# 
   105  0005                     	;# 
   106  0006                     	;# 
   107  0007                     	;# 
   108  0008                     	;# 
   109  0009                     	;# 
   110  000A                     	;# 
   111  000B                     	;# 
   112  000C                     	;# 
   113  000D                     	;# 
   114  0011                     	;# 
   115  0012                     	;# 
   116  0013                     	;# 
   117  0014                     	;# 
   118  0015                     	;# 
   119  0016                     	;# 
   120  0016                     	;# 
   121  0017                     	;# 
   122  0018                     	;# 
   123  0019                     	;# 
   124  001A                     	;# 
   125  001B                     	;# 
   126  001C                     	;# 
   127  001E                     	;# 
   128  001F                     	;# 
   129  008C                     	;# 
   130  008D                     	;# 
   131  0091                     	;# 
   132  0092                     	;# 
   133  0093                     	;# 
   134  0094                     	;# 
   135  0095                     	;# 
   136  0096                     	;# 
   137  0097                     	;# 
   138  0098                     	;# 
   139  0099                     	;# 
   140  009A                     	;# 
   141  009B                     	;# 
   142  009B                     	;# 
   143  009C                     	;# 
   144  009D                     	;# 
   145  009E                     	;# 
   146  010C                     	;# 
   147  010D                     	;# 
   148  0111                     	;# 
   149  0112                     	;# 
   150  0113                     	;# 
   151  0114                     	;# 
   152  0115                     	;# 
   153  0116                     	;# 
   154  0117                     	;# 
   155  0118                     	;# 
   156  0119                     	;# 
   157  011A                     	;# 
   158  011B                     	;# 
   159  011D                     	;# 
   160  011E                     	;# 
   161  018C                     	;# 
   162  018D                     	;# 
   163  0191                     	;# 
   164  0191                     	;# 
   165  0192                     	;# 
   166  0193                     	;# 
   167  0193                     	;# 
   168  0193                     	;# 
   169  0194                     	;# 
   170  0195                     	;# 
   171  0196                     	;# 
   172  0199                     	;# 
   173  019A                     	;# 
   174  019B                     	;# 
   175  019B                     	;# 
   176  019B                     	;# 
   177  019B                     	;# 
   178  019C                     	;# 
   179  019C                     	;# 
   180  019D                     	;# 
   181  019E                     	;# 
   182  019F                     	;# 
   183  020C                     	;# 
   184  020D                     	;# 
   185  0211                     	;# 
   186  0211                     	;# 
   187  0212                     	;# 
   188  0212                     	;# 
   189  0213                     	;# 
   190  0213                     	;# 
   191  0214                     	;# 
   192  0214                     	;# 
   193  0215                     	;# 
   194  0215                     	;# 
   195  0215                     	;# 
   196  0216                     	;# 
   197  0216                     	;# 
   198  0217                     	;# 
   199  0217                     	;# 
   200  0219                     	;# 
   201  021A                     	;# 
   202  021B                     	;# 
   203  021C                     	;# 
   204  021D                     	;# 
   205  021E                     	;# 
   206  021F                     	;# 
   207  0291                     	;# 
   208  0291                     	;# 
   209  0292                     	;# 
   210  0293                     	;# 
   211  0294                     	;# 
   212  0295                     	;# 
   213  0295                     	;# 
   214  0296                     	;# 
   215  0298                     	;# 
   216  0298                     	;# 
   217  0299                     	;# 
   218  029A                     	;# 
   219  029B                     	;# 
   220  029C                     	;# 
   221  029C                     	;# 
   222  029D                     	;# 
   223  029E                     	;# 
   224  029E                     	;# 
   225  0311                     	;# 
   226  0311                     	;# 
   227  0312                     	;# 
   228  0313                     	;# 
   229  0318                     	;# 
   230  0318                     	;# 
   231  0319                     	;# 
   232  031A                     	;# 
   233  0394                     	;# 
   234  0395                     	;# 
   235  0396                     	;# 
   236  039A                     	;# 
   237  039C                     	;# 
   238  039D                     	;# 
   239  039E                     	;# 
   240  039F                     	;# 
   241  0415                     	;# 
   242  0416                     	;# 
   243  0417                     	;# 
   244  041C                     	;# 
   245  041D                     	;# 
   246  041E                     	;# 
   247  0FE4                     	;# 
   248  0FE5                     	;# 
   249  0FE6                     	;# 
   250  0FE7                     	;# 
   251  0FE8                     	;# 
   252  0FE9                     	;# 
   253  0FEA                     	;# 
   254  0FEB                     	;# 
   255  0FED                     	;# 
   256  0FEE                     	;# 
   257  0FEF                     	;# 
   258  0000                     	;# 
   259  0001                     	;# 
   260  0002                     	;# 
   261  0003                     	;# 
   262  0004                     	;# 
   263  0005                     	;# 
   264  0006                     	;# 
   265  0007                     	;# 
   266  0008                     	;# 
   267  0009                     	;# 
   268  000A                     	;# 
   269  000B                     	;# 
   270  000C                     	;# 
   271  000D                     	;# 
   272  0011                     	;# 
   273  0012                     	;# 
   274  0013                     	;# 
   275  0014                     	;# 
   276  0015                     	;# 
   277  0016                     	;# 
   278  0016                     	;# 
   279  0017                     	;# 
   280  0018                     	;# 
   281  0019                     	;# 
   282  001A                     	;# 
   283  001B                     	;# 
   284  001C                     	;# 
   285  001E                     	;# 
   286  001F                     	;# 
   287  008C                     	;# 
   288  008D                     	;# 
   289  0091                     	;# 
   290  0092                     	;# 
   291  0093                     	;# 
   292  0094                     	;# 
   293  0095                     	;# 
   294  0096                     	;# 
   295  0097                     	;# 
   296  0098                     	;# 
   297  0099                     	;# 
   298  009A                     	;# 
   299  009B                     	;# 
   300  009B                     	;# 
   301  009C                     	;# 
   302  009D                     	;# 
   303  009E                     	;# 
   304  010C                     	;# 
   305  010D                     	;# 
   306  0111                     	;# 
   307  0112                     	;# 
   308  0113                     	;# 
   309  0114                     	;# 
   310  0115                     	;# 
   311  0116                     	;# 
   312  0117                     	;# 
   313  0118                     	;# 
   314  0119                     	;# 
   315  011A                     	;# 
   316  011B                     	;# 
   317  011D                     	;# 
   318  011E                     	;# 
   319  018C                     	;# 
   320  018D                     	;# 
   321  0191                     	;# 
   322  0191                     	;# 
   323  0192                     	;# 
   324  0193                     	;# 
   325  0193                     	;# 
   326  0193                     	;# 
   327  0194                     	;# 
   328  0195                     	;# 
   329  0196                     	;# 
   330  0199                     	;# 
   331  019A                     	;# 
   332  019B                     	;# 
   333  019B                     	;# 
   334  019B                     	;# 
   335  019B                     	;# 
   336  019C                     	;# 
   337  019C                     	;# 
   338  019D                     	;# 
   339  019E                     	;# 
   340  019F                     	;# 
   341  020C                     	;# 
   342  020D                     	;# 
   343  0211                     	;# 
   344  0211                     	;# 
   345  0212                     	;# 
   346  0212                     	;# 
   347  0213                     	;# 
   348  0213                     	;# 
   349  0214                     	;# 
   350  0214                     	;# 
   351  0215                     	;# 
   352  0215                     	;# 
   353  0215                     	;# 
   354  0216                     	;# 
   355  0216                     	;# 
   356  0217                     	;# 
   357  0217                     	;# 
   358  0219                     	;# 
   359  021A                     	;# 
   360  021B                     	;# 
   361  021C                     	;# 
   362  021D                     	;# 
   363  021E                     	;# 
   364  021F                     	;# 
   365  0291                     	;# 
   366  0291                     	;# 
   367  0292                     	;# 
   368  0293                     	;# 
   369  0294                     	;# 
   370  0295                     	;# 
   371  0295                     	;# 
   372  0296                     	;# 
   373  0298                     	;# 
   374  0298                     	;# 
   375  0299                     	;# 
   376  029A                     	;# 
   377  029B                     	;# 
   378  029C                     	;# 
   379  029C                     	;# 
   380  029D                     	;# 
   381  029E                     	;# 
   382  029E                     	;# 
   383  0311                     	;# 
   384  0311                     	;# 
   385  0312                     	;# 
   386  0313                     	;# 
   387  0318                     	;# 
   388  0318                     	;# 
   389  0319                     	;# 
   390  031A                     	;# 
   391  0394                     	;# 
   392  0395                     	;# 
   393  0396                     	;# 
   394  039A                     	;# 
   395  039C                     	;# 
   396  039D                     	;# 
   397  039E                     	;# 
   398  039F                     	;# 
   399  0415                     	;# 
   400  0416                     	;# 
   401  0417                     	;# 
   402  041C                     	;# 
   403  041D                     	;# 
   404  041E                     	;# 
   405  0FE4                     	;# 
   406  0FE5                     	;# 
   407  0FE6                     	;# 
   408  0FE7                     	;# 
   409  0FE8                     	;# 
   410  0FE9                     	;# 
   411  0FEA                     	;# 
   412  0FEB                     	;# 
   413  0FED                     	;# 
   414  0FEE                     	;# 
   415  0FEF                     	;# 
   416  0000                     	;# 
   417  0001                     	;# 
   418  0002                     	;# 
   419  0003                     	;# 
   420  0004                     	;# 
   421  0005                     	;# 
   422  0006                     	;# 
   423  0007                     	;# 
   424  0008                     	;# 
   425  0009                     	;# 
   426  000A                     	;# 
   427  000B                     	;# 
   428  000C                     	;# 
   429  000D                     	;# 
   430  0011                     	;# 
   431  0012                     	;# 
   432  0013                     	;# 
   433  0014                     	;# 
   434  0015                     	;# 
   435  0016                     	;# 
   436  0016                     	;# 
   437  0017                     	;# 
   438  0018                     	;# 
   439  0019                     	;# 
   440  001A                     	;# 
   441  001B                     	;# 
   442  001C                     	;# 
   443  001E                     	;# 
   444  001F                     	;# 
   445  008C                     	;# 
   446  008D                     	;# 
   447  0091                     	;# 
   448  0092                     	;# 
   449  0093                     	;# 
   450  0094                     	;# 
   451  0095                     	;# 
   452  0096                     	;# 
   453  0097                     	;# 
   454  0098                     	;# 
   455  0099                     	;# 
   456  009A                     	;# 
   457  009B                     	;# 
   458  009B                     	;# 
   459  009C                     	;# 
   460  009D                     	;# 
   461  009E                     	;# 
   462  010C                     	;# 
   463  010D                     	;# 
   464  0111                     	;# 
   465  0112                     	;# 
   466  0113                     	;# 
   467  0114                     	;# 
   468  0115                     	;# 
   469  0116                     	;# 
   470  0117                     	;# 
   471  0118                     	;# 
   472  0119                     	;# 
   473  011A                     	;# 
   474  011B                     	;# 
   475  011D                     	;# 
   476  011E                     	;# 
   477  018C                     	;# 
   478  018D                     	;# 
   479  0191                     	;# 
   480  0191                     	;# 
   481  0192                     	;# 
   482  0193                     	;# 
   483  0193                     	;# 
   484  0193                     	;# 
   485  0194                     	;# 
   486  0195                     	;# 
   487  0196                     	;# 
   488  0199                     	;# 
   489  019A                     	;# 
   490  019B                     	;# 
   491  019B                     	;# 
   492  019B                     	;# 
   493  019B                     	;# 
   494  019C                     	;# 
   495  019C                     	;# 
   496  019D                     	;# 
   497  019E                     	;# 
   498  019F                     	;# 
   499  020C                     	;# 
   500  020D                     	;# 
   501  0211                     	;# 
   502  0211                     	;# 
   503  0212                     	;# 
   504  0212                     	;# 
   505  0213                     	;# 
   506  0213                     	;# 
   507  0214                     	;# 
   508  0214                     	;# 
   509  0215                     	;# 
   510  0215                     	;# 
   511  0215                     	;# 
   512  0216                     	;# 
   513  0216                     	;# 
   514  0217                     	;# 
   515  0217                     	;# 
   516  0219                     	;# 
   517  021A                     	;# 
   518  021B                     	;# 
   519  021C                     	;# 
   520  021D                     	;# 
   521  021E                     	;# 
   522  021F                     	;# 
   523  0291                     	;# 
   524  0291                     	;# 
   525  0292                     	;# 
   526  0293                     	;# 
   527  0294                     	;# 
   528  0295                     	;# 
   529  0295                     	;# 
   530  0296                     	;# 
   531  0298                     	;# 
   532  0298                     	;# 
   533  0299                     	;# 
   534  029A                     	;# 
   535  029B                     	;# 
   536  029C                     	;# 
   537  029C                     	;# 
   538  029D                     	;# 
   539  029E                     	;# 
   540  029E                     	;# 
   541  0311                     	;# 
   542  0311                     	;# 
   543  0312                     	;# 
   544  0313                     	;# 
   545  0318                     	;# 
   546  0318                     	;# 
   547  0319                     	;# 
   548  031A                     	;# 
   549  0394                     	;# 
   550  0395                     	;# 
   551  0396                     	;# 
   552  039A                     	;# 
   553  039C                     	;# 
   554  039D                     	;# 
   555  039E                     	;# 
   556  039F                     	;# 
   557  0415                     	;# 
   558  0416                     	;# 
   559  0417                     	;# 
   560  041C                     	;# 
   561  041D                     	;# 
   562  041E                     	;# 
   563  0FE4                     	;# 
   564  0FE5                     	;# 
   565  0FE6                     	;# 
   566  0FE7                     	;# 
   567  0FE8                     	;# 
   568  0FE9                     	;# 
   569  0FEA                     	;# 
   570  0FEB                     	;# 
   571  0FED                     	;# 
   572  0FEE                     	;# 
   573  0FEF                     	;# 
   574  0000                     	;# 
   575  0001                     	;# 
   576  0002                     	;# 
   577  0003                     	;# 
   578  0004                     	;# 
   579  0005                     	;# 
   580  0006                     	;# 
   581  0007                     	;# 
   582  0008                     	;# 
   583  0009                     	;# 
   584  000A                     	;# 
   585  000B                     	;# 
   586  000C                     	;# 
   587  000D                     	;# 
   588  0011                     	;# 
   589  0012                     	;# 
   590  0013                     	;# 
   591  0014                     	;# 
   592  0015                     	;# 
   593  0016                     	;# 
   594  0016                     	;# 
   595  0017                     	;# 
   596  0018                     	;# 
   597  0019                     	;# 
   598  001A                     	;# 
   599  001B                     	;# 
   600  001C                     	;# 
   601  001E                     	;# 
   602  001F                     	;# 
   603  008C                     	;# 
   604  008D                     	;# 
   605  0091                     	;# 
   606  0092                     	;# 
   607  0093                     	;# 
   608  0094                     	;# 
   609  0095                     	;# 
   610  0096                     	;# 
   611  0097                     	;# 
   612  0098                     	;# 
   613  0099                     	;# 
   614  009A                     	;# 
   615  009B                     	;# 
   616  009B                     	;# 
   617  009C                     	;# 
   618  009D                     	;# 
   619  009E                     	;# 
   620  010C                     	;# 
   621  010D                     	;# 
   622  0111                     	;# 
   623  0112                     	;# 
   624  0113                     	;# 
   625  0114                     	;# 
   626  0115                     	;# 
   627  0116                     	;# 
   628  0117                     	;# 
   629  0118                     	;# 
   630  0119                     	;# 
   631  011A                     	;# 
   632  011B                     	;# 
   633  011D                     	;# 
   634  011E                     	;# 
   635  018C                     	;# 
   636  018D                     	;# 
   637  0191                     	;# 
   638  0191                     	;# 
   639  0192                     	;# 
   640  0193                     	;# 
   641  0193                     	;# 
   642  0193                     	;# 
   643  0194                     	;# 
   644  0195                     	;# 
   645  0196                     	;# 
   646  0199                     	;# 
   647  019A                     	;# 
   648  019B                     	;# 
   649  019B                     	;# 
   650  019B                     	;# 
   651  019B                     	;# 
   652  019C                     	;# 
   653  019C                     	;# 
   654  019D                     	;# 
   655  019E                     	;# 
   656  019F                     	;# 
   657  020C                     	;# 
   658  020D                     	;# 
   659  0211                     	;# 
   660  0211                     	;# 
   661  0212                     	;# 
   662  0212                     	;# 
   663  0213                     	;# 
   664  0213                     	;# 
   665  0214                     	;# 
   666  0214                     	;# 
   667  0215                     	;# 
   668  0215                     	;# 
   669  0215                     	;# 
   670  0216                     	;# 
   671  0216                     	;# 
   672  0217                     	;# 
   673  0217                     	;# 
   674  0219                     	;# 
   675  021A                     	;# 
   676  021B                     	;# 
   677  021C                     	;# 
   678  021D                     	;# 
   679  021E                     	;# 
   680  021F                     	;# 
   681  0291                     	;# 
   682  0291                     	;# 
   683  0292                     	;# 
   684  0293                     	;# 
   685  0294                     	;# 
   686  0295                     	;# 
   687  0295                     	;# 
   688  0296                     	;# 
   689  0298                     	;# 
   690  0298                     	;# 
   691  0299                     	;# 
   692  029A                     	;# 
   693  029B                     	;# 
   694  029C                     	;# 
   695  029C                     	;# 
   696  029D                     	;# 
   697  029E                     	;# 
   698  029E                     	;# 
   699  0311                     	;# 
   700  0311                     	;# 
   701  0312                     	;# 
   702  0313                     	;# 
   703  0318                     	;# 
   704  0318                     	;# 
   705  0319                     	;# 
   706  031A                     	;# 
   707  0394                     	;# 
   708  0395                     	;# 
   709  0396                     	;# 
   710  039A                     	;# 
   711  039C                     	;# 
   712  039D                     	;# 
   713  039E                     	;# 
   714  039F                     	;# 
   715  0415                     	;# 
   716  0416                     	;# 
   717  0417                     	;# 
   718  041C                     	;# 
   719  041D                     	;# 
   720  041E                     	;# 
   721  0FE4                     	;# 
   722  0FE5                     	;# 
   723  0FE6                     	;# 
   724  0FE7                     	;# 
   725  0FE8                     	;# 
   726  0FE9                     	;# 
   727  0FEA                     	;# 
   728  0FEB                     	;# 
   729  0FED                     	;# 
   730  0FEE                     	;# 
   731  0FEF                     	;# 
   732  0000                     	;# 
   733  0001                     	;# 
   734  0002                     	;# 
   735  0003                     	;# 
   736  0004                     	;# 
   737  0005                     	;# 
   738  0006                     	;# 
   739  0007                     	;# 
   740  0008                     	;# 
   741  0009                     	;# 
   742  000A                     	;# 
   743  000B                     	;# 
   744  000C                     	;# 
   745  000D                     	;# 
   746  0011                     	;# 
   747  0012                     	;# 
   748  0013                     	;# 
   749  0014                     	;# 
   750  0015                     	;# 
   751  0016                     	;# 
   752  0016                     	;# 
   753  0017                     	;# 
   754  0018                     	;# 
   755  0019                     	;# 
   756  001A                     	;# 
   757  001B                     	;# 
   758  001C                     	;# 
   759  001E                     	;# 
   760  001F                     	;# 
   761  008C                     	;# 
   762  008D                     	;# 
   763  0091                     	;# 
   764  0092                     	;# 
   765  0093                     	;# 
   766  0094                     	;# 
   767  0095                     	;# 
   768  0096                     	;# 
   769  0097                     	;# 
   770  0098                     	;# 
   771  0099                     	;# 
   772  009A                     	;# 
   773  009B                     	;# 
   774  009B                     	;# 
   775  009C                     	;# 
   776  009D                     	;# 
   777  009E                     	;# 
   778  010C                     	;# 
   779  010D                     	;# 
   780  0111                     	;# 
   781  0112                     	;# 
   782  0113                     	;# 
   783  0114                     	;# 
   784  0115                     	;# 
   785  0116                     	;# 
   786  0117                     	;# 
   787  0118                     	;# 
   788  0119                     	;# 
   789  011A                     	;# 
   790  011B                     	;# 
   791  011D                     	;# 
   792  011E                     	;# 
   793  018C                     	;# 
   794  018D                     	;# 
   795  0191                     	;# 
   796  0191                     	;# 
   797  0192                     	;# 
   798  0193                     	;# 
   799  0193                     	;# 
   800  0193                     	;# 
   801  0194                     	;# 
   802  0195                     	;# 
   803  0196                     	;# 
   804  0199                     	;# 
   805  019A                     	;# 
   806  019B                     	;# 
   807  019B                     	;# 
   808  019B                     	;# 
   809  019B                     	;# 
   810  019C                     	;# 
   811  019C                     	;# 
   812  019D                     	;# 
   813  019E                     	;# 
   814  019F                     	;# 
   815  020C                     	;# 
   816  020D                     	;# 
   817  0211                     	;# 
   818  0211                     	;# 
   819  0212                     	;# 
   820  0212                     	;# 
   821  0213                     	;# 
   822  0213                     	;# 
   823  0214                     	;# 
   824  0214                     	;# 
   825  0215                     	;# 
   826  0215                     	;# 
   827  0215                     	;# 
   828  0216                     	;# 
   829  0216                     	;# 
   830  0217                     	;# 
   831  0217                     	;# 
   832  0219                     	;# 
   833  021A                     	;# 
   834  021B                     	;# 
   835  021C                     	;# 
   836  021D                     	;# 
   837  021E                     	;# 
   838  021F                     	;# 
   839  0291                     	;# 
   840  0291                     	;# 
   841  0292                     	;# 
   842  0293                     	;# 
   843  0294                     	;# 
   844  0295                     	;# 
   845  0295                     	;# 
   846  0296                     	;# 
   847  0298                     	;# 
   848  0298                     	;# 
   849  0299                     	;# 
   850  029A                     	;# 
   851  029B                     	;# 
   852  029C                     	;# 
   853  029C                     	;# 
   854  029D                     	;# 
   855  029E                     	;# 
   856  029E                     	;# 
   857  0311                     	;# 
   858  0311                     	;# 
   859  0312                     	;# 
   860  0313                     	;# 
   861  0318                     	;# 
   862  0318                     	;# 
   863  0319                     	;# 
   864  031A                     	;# 
   865  0394                     	;# 
   866  0395                     	;# 
   867  0396                     	;# 
   868  039A                     	;# 
   869  039C                     	;# 
   870  039D                     	;# 
   871  039E                     	;# 
   872  039F                     	;# 
   873  0415                     	;# 
   874  0416                     	;# 
   875  0417                     	;# 
   876  041C                     	;# 
   877  041D                     	;# 
   878  041E                     	;# 
   879  0FE4                     	;# 
   880  0FE5                     	;# 
   881  0FE6                     	;# 
   882  0FE7                     	;# 
   883  0FE8                     	;# 
   884  0FE9                     	;# 
   885  0FEA                     	;# 
   886  0FEB                     	;# 
   887  0FED                     	;# 
   888  0FEE                     	;# 
   889  0FEF                     	;# 
   890  0000                     	;# 
   891  0001                     	;# 
   892  0002                     	;# 
   893  0003                     	;# 
   894  0004                     	;# 
   895  0005                     	;# 
   896  0006                     	;# 
   897  0007                     	;# 
   898  0008                     	;# 
   899  0009                     	;# 
   900  000A                     	;# 
   901  000B                     	;# 
   902  000C                     	;# 
   903  000D                     	;# 
   904  0011                     	;# 
   905  0012                     	;# 
   906  0013                     	;# 
   907  0014                     	;# 
   908  0015                     	;# 
   909  0016                     	;# 
   910  0016                     	;# 
   911  0017                     	;# 
   912  0018                     	;# 
   913  0019                     	;# 
   914  001A                     	;# 
   915  001B                     	;# 
   916  001C                     	;# 
   917  001E                     	;# 
   918  001F                     	;# 
   919  008C                     	;# 
   920  008D                     	;# 
   921  0091                     	;# 
   922  0092                     	;# 
   923  0093                     	;# 
   924  0094                     	;# 
   925  0095                     	;# 
   926  0096                     	;# 
   927  0097                     	;# 
   928  0098                     	;# 
   929  0099                     	;# 
   930  009A                     	;# 
   931  009B                     	;# 
   932  009B                     	;# 
   933  009C                     	;# 
   934  009D                     	;# 
   935  009E                     	;# 
   936  010C                     	;# 
   937  010D                     	;# 
   938  0111                     	;# 
   939  0112                     	;# 
   940  0113                     	;# 
   941  0114                     	;# 
   942  0115                     	;# 
   943  0116                     	;# 
   944  0117                     	;# 
   945  0118                     	;# 
   946  0119                     	;# 
   947  011A                     	;# 
   948  011B                     	;# 
   949  011D                     	;# 
   950  011E                     	;# 
   951  018C                     	;# 
   952  018D                     	;# 
   953  0191                     	;# 
   954  0191                     	;# 
   955  0192                     	;# 
   956  0193                     	;# 
   957  0193                     	;# 
   958  0193                     	;# 
   959  0194                     	;# 
   960  0195                     	;# 
   961  0196                     	;# 
   962  0199                     	;# 
   963  019A                     	;# 
   964  019B                     	;# 
   965  019B                     	;# 
   966  019B                     	;# 
   967  019B                     	;# 
   968  019C                     	;# 
   969  019C                     	;# 
   970  019D                     	;# 
   971  019E                     	;# 
   972  019F                     	;# 
   973  020C                     	;# 
   974  020D                     	;# 
   975  0211                     	;# 
   976  0211                     	;# 
   977  0212                     	;# 
   978  0212                     	;# 
   979  0213                     	;# 
   980  0213                     	;# 
   981  0214                     	;# 
   982  0214                     	;# 
   983  0215                     	;# 
   984  0215                     	;# 
   985  0215                     	;# 
   986  0216                     	;# 
   987  0216                     	;# 
   988  0217                     	;# 
   989  0217                     	;# 
   990  0219                     	;# 
   991  021A                     	;# 
   992  021B                     	;# 
   993  021C                     	;# 
   994  021D                     	;# 
   995  021E                     	;# 
   996  021F                     	;# 
   997  0291                     	;# 
   998  0291                     	;# 
   999  0292                     	;# 
  1000  0293                     	;# 
  1001  0294                     	;# 
  1002  0295                     	;# 
  1003  0295                     	;# 
  1004  0296                     	;# 
  1005  0298                     	;# 
  1006  0298                     	;# 
  1007  0299                     	;# 
  1008  029A                     	;# 
  1009  029B                     	;# 
  1010  029C                     	;# 
  1011  029C                     	;# 
  1012  029D                     	;# 
  1013  029E                     	;# 
  1014  029E                     	;# 
  1015  0311                     	;# 
  1016  0311                     	;# 
  1017  0312                     	;# 
  1018  0313                     	;# 
  1019  0318                     	;# 
  1020  0318                     	;# 
  1021  0319                     	;# 
  1022  031A                     	;# 
  1023  0394                     	;# 
  1024  0395                     	;# 
  1025  0396                     	;# 
  1026  039A                     	;# 
  1027  039C                     	;# 
  1028  039D                     	;# 
  1029  039E                     	;# 
  1030  039F                     	;# 
  1031  0415                     	;# 
  1032  0416                     	;# 
  1033  0417                     	;# 
  1034  041C                     	;# 
  1035  041D                     	;# 
  1036  041E                     	;# 
  1037  0FE4                     	;# 
  1038  0FE5                     	;# 
  1039  0FE6                     	;# 
  1040  0FE7                     	;# 
  1041  0FE8                     	;# 
  1042  0FE9                     	;# 
  1043  0FEA                     	;# 
  1044  0FEB                     	;# 
  1045  0FED                     	;# 
  1046  0FEE                     	;# 
  1047  0FEF                     	;# 
  1048  0000                     	;# 
  1049  0001                     	;# 
  1050  0002                     	;# 
  1051  0003                     	;# 
  1052  0004                     	;# 
  1053  0005                     	;# 
  1054  0006                     	;# 
  1055  0007                     	;# 
  1056  0008                     	;# 
  1057  0009                     	;# 
  1058  000A                     	;# 
  1059  000B                     	;# 
  1060  000C                     	;# 
  1061  000D                     	;# 
  1062  0011                     	;# 
  1063  0012                     	;# 
  1064  0013                     	;# 
  1065  0014                     	;# 
  1066  0015                     	;# 
  1067  0016                     	;# 
  1068  0016                     	;# 
  1069  0017                     	;# 
  1070  0018                     	;# 
  1071  0019                     	;# 
  1072  001A                     	;# 
  1073  001B                     	;# 
  1074  001C                     	;# 
  1075  001E                     	;# 
  1076  001F                     	;# 
  1077  008C                     	;# 
  1078  008D                     	;# 
  1079  0091                     	;# 
  1080  0092                     	;# 
  1081  0093                     	;# 
  1082  0094                     	;# 
  1083  0095                     	;# 
  1084  0096                     	;# 
  1085  0097                     	;# 
  1086  0098                     	;# 
  1087  0099                     	;# 
  1088  009A                     	;# 
  1089  009B                     	;# 
  1090  009B                     	;# 
  1091  009C                     	;# 
  1092  009D                     	;# 
  1093  009E                     	;# 
  1094  010C                     	;# 
  1095  010D                     	;# 
  1096  0111                     	;# 
  1097  0112                     	;# 
  1098  0113                     	;# 
  1099  0114                     	;# 
  1100  0115                     	;# 
  1101  0116                     	;# 
  1102  0117                     	;# 
  1103  0118                     	;# 
  1104  0119                     	;# 
  1105  011A                     	;# 
  1106  011B                     	;# 
  1107  011D                     	;# 
  1108  011E                     	;# 
  1109  018C                     	;# 
  1110  018D                     	;# 
  1111  0191                     	;# 
  1112  0191                     	;# 
  1113  0192                     	;# 
  1114  0193                     	;# 
  1115  0193                     	;# 
  1116  0193                     	;# 
  1117  0194                     	;# 
  1118  0195                     	;# 
  1119  0196                     	;# 
  1120  0199                     	;# 
  1121  019A                     	;# 
  1122  019B                     	;# 
  1123  019B                     	;# 
  1124  019B                     	;# 
  1125  019B                     	;# 
  1126  019C                     	;# 
  1127  019C                     	;# 
  1128  019D                     	;# 
  1129  019E                     	;# 
  1130  019F                     	;# 
  1131  020C                     	;# 
  1132  020D                     	;# 
  1133  0211                     	;# 
  1134  0211                     	;# 
  1135  0212                     	;# 
  1136  0212                     	;# 
  1137  0213                     	;# 
  1138  0213                     	;# 
  1139  0214                     	;# 
  1140  0214                     	;# 
  1141  0215                     	;# 
  1142  0215                     	;# 
  1143  0215                     	;# 
  1144  0216                     	;# 
  1145  0216                     	;# 
  1146  0217                     	;# 
  1147  0217                     	;# 
  1148  0219                     	;# 
  1149  021A                     	;# 
  1150  021B                     	;# 
  1151  021C                     	;# 
  1152  021D                     	;# 
  1153  021E                     	;# 
  1154  021F                     	;# 
  1155  0291                     	;# 
  1156  0291                     	;# 
  1157  0292                     	;# 
  1158  0293                     	;# 
  1159  0294                     	;# 
  1160  0295                     	;# 
  1161  0295                     	;# 
  1162  0296                     	;# 
  1163  0298                     	;# 
  1164  0298                     	;# 
  1165  0299                     	;# 
  1166  029A                     	;# 
  1167  029B                     	;# 
  1168  029C                     	;# 
  1169  029C                     	;# 
  1170  029D                     	;# 
  1171  029E                     	;# 
  1172  029E                     	;# 
  1173  0311                     	;# 
  1174  0311                     	;# 
  1175  0312                     	;# 
  1176  0313                     	;# 
  1177  0318                     	;# 
  1178  0318                     	;# 
  1179  0319                     	;# 
  1180  031A                     	;# 
  1181  0394                     	;# 
  1182  0395                     	;# 
  1183  0396                     	;# 
  1184  039A                     	;# 
  1185  039C                     	;# 
  1186  039D                     	;# 
  1187  039E                     	;# 
  1188  039F                     	;# 
  1189  0415                     	;# 
  1190  0416                     	;# 
  1191  0417                     	;# 
  1192  041C                     	;# 
  1193  041D                     	;# 
  1194  041E                     	;# 
  1195  0FE4                     	;# 
  1196  0FE5                     	;# 
  1197  0FE6                     	;# 
  1198  0FE7                     	;# 
  1199  0FE8                     	;# 
  1200  0FE9                     	;# 
  1201  0FEA                     	;# 
  1202  0FEB                     	;# 
  1203  0FED                     	;# 
  1204  0FEE                     	;# 
  1205  0FEF                     	;# 
  1206  0000                     	;# 
  1207  0001                     	;# 
  1208  0002                     	;# 
  1209  0003                     	;# 
  1210  0004                     	;# 
  1211  0005                     	;# 
  1212  0006                     	;# 
  1213  0007                     	;# 
  1214  0008                     	;# 
  1215  0009                     	;# 
  1216  000A                     	;# 
  1217  000B                     	;# 
  1218  000C                     	;# 
  1219  000D                     	;# 
  1220  0011                     	;# 
  1221  0012                     	;# 
  1222  0013                     	;# 
  1223  0014                     	;# 
  1224  0015                     	;# 
  1225  0016                     	;# 
  1226  0016                     	;# 
  1227  0017                     	;# 
  1228  0018                     	;# 
  1229  0019                     	;# 
  1230  001A                     	;# 
  1231  001B                     	;# 
  1232  001C                     	;# 
  1233  001E                     	;# 
  1234  001F                     	;# 
  1235  008C                     	;# 
  1236  008D                     	;# 
  1237  0091                     	;# 
  1238  0092                     	;# 
  1239  0093                     	;# 
  1240  0094                     	;# 
  1241  0095                     	;# 
  1242  0096                     	;# 
  1243  0097                     	;# 
  1244  0098                     	;# 
  1245  0099                     	;# 
  1246  009A                     	;# 
  1247  009B                     	;# 
  1248  009B                     	;# 
  1249  009C                     	;# 
  1250  009D                     	;# 
  1251  009E                     	;# 
  1252  010C                     	;# 
  1253  010D                     	;# 
  1254  0111                     	;# 
  1255  0112                     	;# 
  1256  0113                     	;# 
  1257  0114                     	;# 
  1258  0115                     	;# 
  1259  0116                     	;# 
  1260  0117                     	;# 
  1261  0118                     	;# 
  1262  0119                     	;# 
  1263  011A                     	;# 
  1264  011B                     	;# 
  1265  011D                     	;# 
  1266  011E                     	;# 
  1267  018C                     	;# 
  1268  018D                     	;# 
  1269  0191                     	;# 
  1270  0191                     	;# 
  1271  0192                     	;# 
  1272  0193                     	;# 
  1273  0193                     	;# 
  1274  0193                     	;# 
  1275  0194                     	;# 
  1276  0195                     	;# 
  1277  0196                     	;# 
  1278  0199                     	;# 
  1279  019A                     	;# 
  1280  019B                     	;# 
  1281  019B                     	;# 
  1282  019B                     	;# 
  1283  019B                     	;# 
  1284  019C                     	;# 
  1285  019C                     	;# 
  1286  019D                     	;# 
  1287  019E                     	;# 
  1288  019F                     	;# 
  1289  020C                     	;# 
  1290  020D                     	;# 
  1291  0211                     	;# 
  1292  0211                     	;# 
  1293  0212                     	;# 
  1294  0212                     	;# 
  1295  0213                     	;# 
  1296  0213                     	;# 
  1297  0214                     	;# 
  1298  0214                     	;# 
  1299  0215                     	;# 
  1300  0215                     	;# 
  1301  0215                     	;# 
  1302  0216                     	;# 
  1303  0216                     	;# 
  1304  0217                     	;# 
  1305  0217                     	;# 
  1306  0219                     	;# 
  1307  021A                     	;# 
  1308  021B                     	;# 
  1309  021C                     	;# 
  1310  021D                     	;# 
  1311  021E                     	;# 
  1312  021F                     	;# 
  1313  0291                     	;# 
  1314  0291                     	;# 
  1315  0292                     	;# 
  1316  0293                     	;# 
  1317  0294                     	;# 
  1318  0295                     	;# 
  1319  0295                     	;# 
  1320  0296                     	;# 
  1321  0298                     	;# 
  1322  0298                     	;# 
  1323  0299                     	;# 
  1324  029A                     	;# 
  1325  029B                     	;# 
  1326  029C                     	;# 
  1327  029C                     	;# 
  1328  029D                     	;# 
  1329  029E                     	;# 
  1330  029E                     	;# 
  1331  0311                     	;# 
  1332  0311                     	;# 
  1333  0312                     	;# 
  1334  0313                     	;# 
  1335  0318                     	;# 
  1336  0318                     	;# 
  1337  0319                     	;# 
  1338  031A                     	;# 
  1339  0394                     	;# 
  1340  0395                     	;# 
  1341  0396                     	;# 
  1342  039A                     	;# 
  1343  039C                     	;# 
  1344  039D                     	;# 
  1345  039E                     	;# 
  1346  039F                     	;# 
  1347  0415                     	;# 
  1348  0416                     	;# 
  1349  0417                     	;# 
  1350  041C                     	;# 
  1351  041D                     	;# 
  1352  041E                     	;# 
  1353  0FE4                     	;# 
  1354  0FE5                     	;# 
  1355  0FE6                     	;# 
  1356  0FE7                     	;# 
  1357  0FE8                     	;# 
  1358  0FE9                     	;# 
  1359  0FEA                     	;# 
  1360  0FEB                     	;# 
  1361  0FED                     	;# 
  1362  0FEE                     	;# 
  1363  0FEF                     	;# 
  1364  0000                     	;# 
  1365  0001                     	;# 
  1366  0002                     	;# 
  1367  0003                     	;# 
  1368  0004                     	;# 
  1369  0005                     	;# 
  1370  0006                     	;# 
  1371  0007                     	;# 
  1372  0008                     	;# 
  1373  0009                     	;# 
  1374  000A                     	;# 
  1375  000B                     	;# 
  1376  000C                     	;# 
  1377  000D                     	;# 
  1378  0011                     	;# 
  1379  0012                     	;# 
  1380  0013                     	;# 
  1381  0014                     	;# 
  1382  0015                     	;# 
  1383  0016                     	;# 
  1384  0016                     	;# 
  1385  0017                     	;# 
  1386  0018                     	;# 
  1387  0019                     	;# 
  1388  001A                     	;# 
  1389  001B                     	;# 
  1390  001C                     	;# 
  1391  001E                     	;# 
  1392  001F                     	;# 
  1393  008C                     	;# 
  1394  008D                     	;# 
  1395  0091                     	;# 
  1396  0092                     	;# 
  1397  0093                     	;# 
  1398  0094                     	;# 
  1399  0095                     	;# 
  1400  0096                     	;# 
  1401  0097                     	;# 
  1402  0098                     	;# 
  1403  0099                     	;# 
  1404  009A                     	;# 
  1405  009B                     	;# 
  1406  009B                     	;# 
  1407  009C                     	;# 
  1408  009D                     	;# 
  1409  009E                     	;# 
  1410  010C                     	;# 
  1411  010D                     	;# 
  1412  0111                     	;# 
  1413  0112                     	;# 
  1414  0113                     	;# 
  1415  0114                     	;# 
  1416  0115                     	;# 
  1417  0116                     	;# 
  1418  0117                     	;# 
  1419  0118                     	;# 
  1420  0119                     	;# 
  1421  011A                     	;# 
  1422  011B                     	;# 
  1423  011D                     	;# 
  1424  011E                     	;# 
  1425  018C                     	;# 
  1426  018D                     	;# 
  1427  0191                     	;# 
  1428  0191                     	;# 
  1429  0192                     	;# 
  1430  0193                     	;# 
  1431  0193                     	;# 
  1432  0193                     	;# 
  1433  0194                     	;# 
  1434  0195                     	;# 
  1435  0196                     	;# 
  1436  0199                     	;# 
  1437  019A                     	;# 
  1438  019B                     	;# 
  1439  019B                     	;# 
  1440  019B                     	;# 
  1441  019B                     	;# 
  1442  019C                     	;# 
  1443  019C                     	;# 
  1444  019D                     	;# 
  1445  019E                     	;# 
  1446  019F                     	;# 
  1447  020C                     	;# 
  1448  020D                     	;# 
  1449  0211                     	;# 
  1450  0211                     	;# 
  1451  0212                     	;# 
  1452  0212                     	;# 
  1453  0213                     	;# 
  1454  0213                     	;# 
  1455  0214                     	;# 
  1456  0214                     	;# 
  1457  0215                     	;# 
  1458  0215                     	;# 
  1459  0215                     	;# 
  1460  0216                     	;# 
  1461  0216                     	;# 
  1462  0217                     	;# 
  1463  0217                     	;# 
  1464  0219                     	;# 
  1465  021A                     	;# 
  1466  021B                     	;# 
  1467  021C                     	;# 
  1468  021D                     	;# 
  1469  021E                     	;# 
  1470  021F                     	;# 
  1471  0291                     	;# 
  1472  0291                     	;# 
  1473  0292                     	;# 
  1474  0293                     	;# 
  1475  0294                     	;# 
  1476  0295                     	;# 
  1477  0295                     	;# 
  1478  0296                     	;# 
  1479  0298                     	;# 
  1480  0298                     	;# 
  1481  0299                     	;# 
  1482  029A                     	;# 
  1483  029B                     	;# 
  1484  029C                     	;# 
  1485  029C                     	;# 
  1486  029D                     	;# 
  1487  029E                     	;# 
  1488  029E                     	;# 
  1489  0311                     	;# 
  1490  0311                     	;# 
  1491  0312                     	;# 
  1492  0313                     	;# 
  1493  0318                     	;# 
  1494  0318                     	;# 
  1495  0319                     	;# 
  1496  031A                     	;# 
  1497  0394                     	;# 
  1498  0395                     	;# 
  1499  0396                     	;# 
  1500  039A                     	;# 
  1501  039C                     	;# 
  1502  039D                     	;# 
  1503  039E                     	;# 
  1504  039F                     	;# 
  1505  0415                     	;# 
  1506  0416                     	;# 
  1507  0417                     	;# 
  1508  041C                     	;# 
  1509  041D                     	;# 
  1510  041E                     	;# 
  1511  0FE4                     	;# 
  1512  0FE5                     	;# 
  1513  0FE6                     	;# 
  1514  0FE7                     	;# 
  1515  0FE8                     	;# 
  1516  0FE9                     	;# 
  1517  0FEA                     	;# 
  1518  0FEB                     	;# 
  1519  0FED                     	;# 
  1520  0FEE                     	;# 
  1521  0FEF                     	;# 
  1522  0000                     	;# 
  1523  0001                     	;# 
  1524  0002                     	;# 
  1525  0003                     	;# 
  1526  0004                     	;# 
  1527  0005                     	;# 
  1528  0006                     	;# 
  1529  0007                     	;# 
  1530  0008                     	;# 
  1531  0009                     	;# 
  1532  000A                     	;# 
  1533  000B                     	;# 
  1534  000C                     	;# 
  1535  000D                     	;# 
  1536  0011                     	;# 
  1537  0012                     	;# 
  1538  0013                     	;# 
  1539  0014                     	;# 
  1540  0015                     	;# 
  1541  0016                     	;# 
  1542  0016                     	;# 
  1543  0017                     	;# 
  1544  0018                     	;# 
  1545  0019                     	;# 
  1546  001A                     	;# 
  1547  001B                     	;# 
  1548  001C                     	;# 
  1549  001E                     	;# 
  1550  001F                     	;# 
  1551  008C                     	;# 
  1552  008D                     	;# 
  1553  0091                     	;# 
  1554  0092                     	;# 
  1555  0093                     	;# 
  1556  0094                     	;# 
  1557  0095                     	;# 
  1558  0096                     	;# 
  1559  0097                     	;# 
  1560  0098                     	;# 
  1561  0099                     	;# 
  1562  009A                     	;# 
  1563  009B                     	;# 
  1564  009B                     	;# 
  1565  009C                     	;# 
  1566  009D                     	;# 
  1567  009E                     	;# 
  1568  010C                     	;# 
  1569  010D                     	;# 
  1570  0111                     	;# 
  1571  0112                     	;# 
  1572  0113                     	;# 
  1573  0114                     	;# 
  1574  0115                     	;# 
  1575  0116                     	;# 
  1576  0117                     	;# 
  1577  0118                     	;# 
  1578  0119                     	;# 
  1579  011A                     	;# 
  1580  011B                     	;# 
  1581  011D                     	;# 
  1582  011E                     	;# 
  1583  018C                     	;# 
  1584  018D                     	;# 
  1585  0191                     	;# 
  1586  0191                     	;# 
  1587  0192                     	;# 
  1588  0193                     	;# 
  1589  0193                     	;# 
  1590  0193                     	;# 
  1591  0194                     	;# 
  1592  0195                     	;# 
  1593  0196                     	;# 
  1594  0199                     	;# 
  1595  019A                     	;# 
  1596  019B                     	;# 
  1597  019B                     	;# 
  1598  019B                     	;# 
  1599  019B                     	;# 
  1600  019C                     	;# 
  1601  019C                     	;# 
  1602  019D                     	;# 
  1603  019E                     	;# 
  1604  019F                     	;# 
  1605  020C                     	;# 
  1606  020D                     	;# 
  1607  0211                     	;# 
  1608  0211                     	;# 
  1609  0212                     	;# 
  1610  0212                     	;# 
  1611  0213                     	;# 
  1612  0213                     	;# 
  1613  0214                     	;# 
  1614  0214                     	;# 
  1615  0215                     	;# 
  1616  0215                     	;# 
  1617  0215                     	;# 
  1618  0216                     	;# 
  1619  0216                     	;# 
  1620  0217                     	;# 
  1621  0217                     	;# 
  1622  0219                     	;# 
  1623  021A                     	;# 
  1624  021B                     	;# 
  1625  021C                     	;# 
  1626  021D                     	;# 
  1627  021E                     	;# 
  1628  021F                     	;# 
  1629  0291                     	;# 
  1630  0291                     	;# 
  1631  0292                     	;# 
  1632  0293                     	;# 
  1633  0294                     	;# 
  1634  0295                     	;# 
  1635  0295                     	;# 
  1636  0296                     	;# 
  1637  0298                     	;# 
  1638  0298                     	;# 
  1639  0299                     	;# 
  1640  029A                     	;# 
  1641  029B                     	;# 
  1642  029C                     	;# 
  1643  029C                     	;# 
  1644  029D                     	;# 
  1645  029E                     	;# 
  1646  029E                     	;# 
  1647  0311                     	;# 
  1648  0311                     	;# 
  1649  0312                     	;# 
  1650  0313                     	;# 
  1651  0318                     	;# 
  1652  0318                     	;# 
  1653  0319                     	;# 
  1654  031A                     	;# 
  1655  0394                     	;# 
  1656  0395                     	;# 
  1657  0396                     	;# 
  1658  039A                     	;# 
  1659  039C                     	;# 
  1660  039D                     	;# 
  1661  039E                     	;# 
  1662  039F                     	;# 
  1663  0415                     	;# 
  1664  0416                     	;# 
  1665  0417                     	;# 
  1666  041C                     	;# 
  1667  041D                     	;# 
  1668  041E                     	;# 
  1669  0FE4                     	;# 
  1670  0FE5                     	;# 
  1671  0FE6                     	;# 
  1672  0FE7                     	;# 
  1673  0FE8                     	;# 
  1674  0FE9                     	;# 
  1675  0FEA                     	;# 
  1676  0FEB                     	;# 
  1677  0FED                     	;# 
  1678  0FEE                     	;# 
  1679  0FEF                     	;# 
  1680  0000                     	;# 
  1681  0001                     	;# 
  1682  0002                     	;# 
  1683  0003                     	;# 
  1684  0004                     	;# 
  1685  0005                     	;# 
  1686  0006                     	;# 
  1687  0007                     	;# 
  1688  0008                     	;# 
  1689  0009                     	;# 
  1690  000A                     	;# 
  1691  000B                     	;# 
  1692  000C                     	;# 
  1693  000D                     	;# 
  1694  0011                     	;# 
  1695  0012                     	;# 
  1696  0013                     	;# 
  1697  0014                     	;# 
  1698  0015                     	;# 
  1699  0016                     	;# 
  1700  0016                     	;# 
  1701  0017                     	;# 
  1702  0018                     	;# 
  1703  0019                     	;# 
  1704  001A                     	;# 
  1705  001B                     	;# 
  1706  001C                     	;# 
  1707  001E                     	;# 
  1708  001F                     	;# 
  1709  008C                     	;# 
  1710  008D                     	;# 
  1711  0091                     	;# 
  1712  0092                     	;# 
  1713  0093                     	;# 
  1714  0094                     	;# 
  1715  0095                     	;# 
  1716  0096                     	;# 
  1717  0097                     	;# 
  1718  0098                     	;# 
  1719  0099                     	;# 
  1720  009A                     	;# 
  1721  009B                     	;# 
  1722  009B                     	;# 
  1723  009C                     	;# 
  1724  009D                     	;# 
  1725  009E                     	;# 
  1726  010C                     	;# 
  1727  010D                     	;# 
  1728  0111                     	;# 
  1729  0112                     	;# 
  1730  0113                     	;# 
  1731  0114                     	;# 
  1732  0115                     	;# 
  1733  0116                     	;# 
  1734  0117                     	;# 
  1735  0118                     	;# 
  1736  0119                     	;# 
  1737  011A                     	;# 
  1738  011B                     	;# 
  1739  011D                     	;# 
  1740  011E                     	;# 
  1741  018C                     	;# 
  1742  018D                     	;# 
  1743  0191                     	;# 
  1744  0191                     	;# 
  1745  0192                     	;# 
  1746  0193                     	;# 
  1747  0193                     	;# 
  1748  0193                     	;# 
  1749  0194                     	;# 
  1750  0195                     	;# 
  1751  0196                     	;# 
  1752  0199                     	;# 
  1753  019A                     	;# 
  1754  019B                     	;# 
  1755  019B                     	;# 
  1756  019B                     	;# 
  1757  019B                     	;# 
  1758  019C                     	;# 
  1759  019C                     	;# 
  1760  019D                     	;# 
  1761  019E                     	;# 
  1762  019F                     	;# 
  1763  020C                     	;# 
  1764  020D                     	;# 
  1765  0211                     	;# 
  1766  0211                     	;# 
  1767  0212                     	;# 
  1768  0212                     	;# 
  1769  0213                     	;# 
  1770  0213                     	;# 
  1771  0214                     	;# 
  1772  0214                     	;# 
  1773  0215                     	;# 
  1774  0215                     	;# 
  1775  0215                     	;# 
  1776  0216                     	;# 
  1777  0216                     	;# 
  1778  0217                     	;# 
  1779  0217                     	;# 
  1780  0219                     	;# 
  1781  021A                     	;# 
  1782  021B                     	;# 
  1783  021C                     	;# 
  1784  021D                     	;# 
  1785  021E                     	;# 
  1786  021F                     	;# 
  1787  0291                     	;# 
  1788  0291                     	;# 
  1789  0292                     	;# 
  1790  0293                     	;# 
  1791  0294                     	;# 
  1792  0295                     	;# 
  1793  0295                     	;# 
  1794  0296                     	;# 
  1795  0298                     	;# 
  1796  0298                     	;# 
  1797  0299                     	;# 
  1798  029A                     	;# 
  1799  029B                     	;# 
  1800  029C                     	;# 
  1801  029C                     	;# 
  1802  029D                     	;# 
  1803  029E                     	;# 
  1804  029E                     	;# 
  1805  0311                     	;# 
  1806  0311                     	;# 
  1807  0312                     	;# 
  1808  0313                     	;# 
  1809  0318                     	;# 
  1810  0318                     	;# 
  1811  0319                     	;# 
  1812  031A                     	;# 
  1813  0394                     	;# 
  1814  0395                     	;# 
  1815  0396                     	;# 
  1816  039A                     	;# 
  1817  039C                     	;# 
  1818  039D                     	;# 
  1819  039E                     	;# 
  1820  039F                     	;# 
  1821  0415                     	;# 
  1822  0416                     	;# 
  1823  0417                     	;# 
  1824  041C                     	;# 
  1825  041D                     	;# 
  1826  041E                     	;# 
  1827  0FE4                     	;# 
  1828  0FE5                     	;# 
  1829  0FE6                     	;# 
  1830  0FE7                     	;# 
  1831  0FE8                     	;# 
  1832  0FE9                     	;# 
  1833  0FEA                     	;# 
  1834  0FEB                     	;# 
  1835  0FED                     	;# 
  1836  0FEE                     	;# 
  1837  0FEF                     	;# 
  1838                           
  1839                           	psect	idataBANK1
  1840  07E1                     __pidataBANK1:	
  1841                           
  1842                           ;initializer for _DAC_VoltageTable
  1843  07E1  34A3               	retlw	low (STR_7| (0+32768))
  1844  07E2  3483               	retlw	high (STR_7| (0+32768))
  1845  07E3  3453               	retlw	low (STR_8| (0+32768))
  1846  07E4  3483               	retlw	high (STR_8| (0+32768))
  1847  07E5  34A8               	retlw	low (STR_9| (0+32768))
  1848  07E6  3483               	retlw	high (STR_9| (0+32768))
  1849  07E7  3459               	retlw	low (STR_10| (0+32768))
  1850  07E8  3483               	retlw	high (STR_10| (0+32768))
  1851  07E9  34AD               	retlw	low (STR_11| (0+32768))
  1852  07EA  3483               	retlw	high (STR_11| (0+32768))
  1853  07EB  345F               	retlw	low (STR_12| (0+32768))
  1854  07EC  3483               	retlw	high (STR_12| (0+32768))
  1855  07ED  34B2               	retlw	low (STR_13| (0+32768))
  1856  07EE  3483               	retlw	high (STR_13| (0+32768))
  1857  07EF  3465               	retlw	low (STR_14| (0+32768))
  1858  07F0  3483               	retlw	high (STR_14| (0+32768))
  1859  07F1  34B7               	retlw	low (STR_15| (0+32768))
  1860  07F2  3483               	retlw	high (STR_15| (0+32768))
  1861  07F3  346B               	retlw	low (STR_16| (0+32768))
  1862  07F4  3483               	retlw	high (STR_16| (0+32768))
  1863  07F5  3494               	retlw	low (STR_17| (0+32768))
  1864  07F6  3483               	retlw	high (STR_17| (0+32768))
  1865  07F7  3447               	retlw	low (STR_18| (0+32768))
  1866  07F8  3483               	retlw	high (STR_18| (0+32768))
  1867  07F9  3499               	retlw	low (STR_19| (0+32768))
  1868  07FA  3483               	retlw	high (STR_19| (0+32768))
  1869  07FB  344D               	retlw	low (STR_20| (0+32768))
  1870  07FC  3483               	retlw	high (STR_20| (0+32768))
  1871  07FD  349E               	retlw	low (STR_21| (0+32768))
  1872  07FE  3483               	retlw	high (STR_21| (0+32768))
  1873                           
  1874                           	psect	idataBANK2
  1875  07A5                     __pidataBANK2:	
  1876                           
  1877                           ;initializer for _H7826_01_Gain
  1878  07A5  3471               	retlw	low (STR_37| (0+32768))
  1879  07A6  3483               	retlw	high (STR_37| (0+32768))
  1880  07A7  3476               	retlw	low (STR_38| (0+32768))
  1881  07A8  3483               	retlw	high (STR_38| (0+32768))
  1882  07A9  348A               	retlw	low (STR_39| (0+32768))
  1883  07AA  3483               	retlw	high (STR_39| (0+32768))
  1884  07AB  347B               	retlw	low (STR_40| (0+32768))
  1885  07AC  3483               	retlw	high (STR_40| (0+32768))
  1886  07AD  3429               	retlw	low (STR_41| (0+32768))
  1887  07AE  3483               	retlw	high (STR_41| (0+32768))
  1888  07AF  342F               	retlw	low (STR_42| (0+32768))
  1889  07B0  3483               	retlw	high (STR_42| (0+32768))
  1890  07B1  3435               	retlw	low (STR_43| (0+32768))
  1891  07B2  3483               	retlw	high (STR_43| (0+32768))
  1892  07B3  341D               	retlw	low (STR_44| (0+32768))
  1893  07B4  3483               	retlw	high (STR_44| (0+32768))
  1894  07B5  34D8               	retlw	low (STR_45| (0+32768))
  1895  07B6  3482               	retlw	high (STR_45| (0+32768))
  1896  07B7  3402               	retlw	low (STR_46| (0+32768))
  1897  07B8  3483               	retlw	high (STR_46| (0+32768))
  1898  07B9  34DF               	retlw	low (STR_47| (0+32768))
  1899  07BA  3482               	retlw	high (STR_47| (0+32768))
  1900  07BB  34E6               	retlw	low (STR_48| (0+32768))
  1901  07BC  3482               	retlw	high (STR_48| (0+32768))
  1902  07BD  3410               	retlw	low (STR_49| (0+32768))
  1903  07BE  3483               	retlw	high (STR_49| (0+32768))
  1904  07BF  34CA               	retlw	low (STR_50| (0+32768))
  1905  07C0  3482               	retlw	high (STR_50| (0+32768))
  1906  07C1  34D1               	retlw	low (STR_51| (0+32768))
  1907  07C2  3482               	retlw	high (STR_51| (0+32768))
  1908                           
  1909                           ;initializer for _H7826_Gain
  1910  07C3  3485               	retlw	low (STR_22| (0+32768))
  1911  07C4  3483               	retlw	high (STR_22| (0+32768))
  1912  07C5  3480               	retlw	low (STR_23| (0+32768))
  1913  07C6  3483               	retlw	high (STR_23| (0+32768))
  1914  07C7  348F               	retlw	low (STR_24| (0+32768))
  1915  07C8  3483               	retlw	high (STR_24| (0+32768))
  1916  07C9  3441               	retlw	low (STR_25| (0+32768))
  1917  07CA  3483               	retlw	high (STR_25| (0+32768))
  1918  07CB  3417               	retlw	low (STR_26| (0+32768))
  1919  07CC  3483               	retlw	high (STR_26| (0+32768))
  1920  07CD  3423               	retlw	low (STR_27| (0+32768))
  1921  07CE  3483               	retlw	high (STR_27| (0+32768))
  1922  07CF  343B               	retlw	low (STR_28| (0+32768))
  1923  07D0  3483               	retlw	high (STR_28| (0+32768))
  1924  07D1  34F4               	retlw	low (STR_29| (0+32768))
  1925  07D2  3482               	retlw	high (STR_29| (0+32768))
  1926  07D3  34ED               	retlw	low (STR_30| (0+32768))
  1927  07D4  3482               	retlw	high (STR_30| (0+32768))
  1928  07D5  34FB               	retlw	low (STR_31| (0+32768))
  1929  07D6  3482               	retlw	high (STR_31| (0+32768))
  1930  07D7  34C3               	retlw	low (STR_32| (0+32768))
  1931  07D8  3482               	retlw	high (STR_32| (0+32768))
  1932  07D9  3409               	retlw	low (STR_33| (0+32768))
  1933  07DA  3483               	retlw	high (STR_33| (0+32768))
  1934  07DB  34BB               	retlw	low (STR_34| (0+32768))
  1935  07DC  3482               	retlw	high (STR_34| (0+32768))
  1936  07DD  34B3               	retlw	low (STR_35| (0+32768))
  1937  07DE  3482               	retlw	high (STR_35| (0+32768))
  1938  07DF  34AB               	retlw	low (STR_36| (0+32768))
  1939  07E0  3482               	retlw	high (STR_36| (0+32768))
  1940                           
  1941                           	psect	stringtext
  1942  0226                     __pstringtext:	
  1943  0226                     _dpowers:	
  1944  0226  3401               	retlw	1
  1945  0227  3400               	retlw	0
  1946  0228  3400               	retlw	0
  1947  0229  3400               	retlw	0
  1948  022A  340A               	retlw	10
  1949  022B  3400               	retlw	0
  1950  022C  3400               	retlw	0
  1951  022D  3400               	retlw	0
  1952  022E  3464               	retlw	100
  1953  022F  3400               	retlw	0
  1954  0230  3400               	retlw	0
  1955  0231  3400               	retlw	0
  1956  0232  34E8               	retlw	232
  1957  0233  3403               	retlw	3
  1958  0234  3400               	retlw	0
  1959  0235  3400               	retlw	0
  1960  0236  3410               	retlw	16
  1961  0237  3427               	retlw	39
  1962  0238  3400               	retlw	0
  1963  0239  3400               	retlw	0
  1964  023A  34A0               	retlw	160
  1965  023B  3486               	retlw	134
  1966  023C  3401               	retlw	1
  1967  023D  3400               	retlw	0
  1968  023E  3440               	retlw	64
  1969  023F  3442               	retlw	66
  1970  0240  340F               	retlw	15
  1971  0241  3400               	retlw	0
  1972  0242  3480               	retlw	128
  1973  0243  3496               	retlw	150
  1974  0244  3498               	retlw	152
  1975  0245  3400               	retlw	0
  1976  0246  3400               	retlw	0
  1977  0247  34E1               	retlw	225
  1978  0248  34F5               	retlw	245
  1979  0249  3405               	retlw	5
  1980  024A  3400               	retlw	0
  1981  024B  34CA               	retlw	202
  1982  024C  349A               	retlw	154
  1983  024D  343B               	retlw	59
  1984  024E                     __end_of_dpowers:	
  1985  024E                     _DAC_DataTable:	
  1986  024E  3499               	retlw	153
  1987  024F  3401               	retlw	1
  1988  0250  34C2               	retlw	194
  1989  0251  3401               	retlw	1
  1990  0252  34EB               	retlw	235
  1991  0253  3401               	retlw	1
  1992  0254  3414               	retlw	20
  1993  0255  3402               	retlw	2
  1994  0256  343D               	retlw	61
  1995  0257  3402               	retlw	2
  1996  0258  3466               	retlw	102
  1997  0259  3402               	retlw	2
  1998  025A  348F               	retlw	143
  1999  025B  3402               	retlw	2
  2000  025C  34B8               	retlw	184
  2001  025D  3402               	retlw	2
  2002  025E  34E1               	retlw	225
  2003  025F  3402               	retlw	2
  2004  0260  340A               	retlw	10
  2005  0261  3403               	retlw	3
  2006  0262  3433               	retlw	51
  2007  0263  3403               	retlw	3
  2008  0264  345B               	retlw	91
  2009  0265  3403               	retlw	3
  2010  0266  3484               	retlw	132
  2011  0267  3403               	retlw	3
  2012  0268  34AD               	retlw	173
  2013  0269  3403               	retlw	3
  2014  026A  34D6               	retlw	214
  2015  026B  3403               	retlw	3
  2016  026C                     __end_of_DAC_DataTable:	
  2017  026C                     _sense_parameter:	
  2018  026C  3464               	retlw	100
  2019  026D  3464               	retlw	100
  2020  026E  3464               	retlw	100
  2021  026F                     __end_of_sense_parameter:	
  2022  0016                     _TMR1	set	22
  2023  000C                     _PORTA	set	12
  2024  001F                     _CPSCON1	set	31
  2025  001E                     _CPSCON0	set	30
  2026  0015                     _TMR0	set	21
  2027  0019                     _T1GCON	set	25
  2028  0018                     _T1CON	set	24
  2029  000D                     _PORTB	set	13
  2030  001B                     _PR2	set	27
  2031  001A                     _TMR2	set	26
  2032  001C                     _T2CON	set	28
  2033  009B                     _TMR6IF	set	155
  2034  0088                     _TMR1IF	set	136
  2035  00C0                     _TMR1ON	set	192
  2036  005F                     _GIE	set	95
  2037  005E                     _PEIE	set	94
  2038  00A1                     _BCL2IF	set	161
  2039  00A0                     _SSP2IF	set	160
  2040  0099                     _OSCCON	set	153
  2041  0095                     _OPTION_REG	set	149
  2042  008D                     _TRISB	set	141
  2043  008C                     _TRISA	set	140
  2044  049B                     _TMR6IE	set	1179
  2045  0488                     _TMR1IE	set	1160
  2046  04A1                     _BCL2IE	set	1185
  2047  04A0                     _SSP2IE	set	1184
  2048  011E                     _APFCON1	set	286
  2049  011D                     _APFCON0	set	285
  2050  0866                     _LATA6	set	2150
  2051  0863                     _LATA3	set	2147
  2052  0864                     _LATA4	set	2148
  2053  018D                     _ANSELB	set	397
  2054  018C                     _ANSELA	set	396
  2055  020D                     _WPUB	set	525
  2056  021C                     _SSP2STATbits	set	540
  2057  0219                     _SSP2BUF	set	537
  2058  021E                     _SSP2CON2	set	542
  2059  021B                     _SSP2MSK	set	539
  2060  021E                     _SSP2CON2bits	set	542
  2061  021D                     _SSP2CON1bits	set	541
  2062  021A                     _SSP2ADD	set	538
  2063  021C                     _SSP2STAT	set	540
  2064  021D                     _SSP2CON1	set	541
  2065  0298                     _CCPR2L	set	664
  2066  029E                     _CCPTMRS	set	670
  2067  029A                     _CCP2CON	set	666
  2068  041E                     _T6CON	set	1054
  2069  041C                     _TMR6	set	1052
  2070  041D                     _PR6	set	1053
  2071  026F                     STR_1:	
  2072  026F  3420               	retlw	32	;' '
  2073  0270  3420               	retlw	32	;' '
  2074  0271  3443               	retlw	67	;'C'
  2075  0272  346F               	retlw	111	;'o'
  2076  0273  3475               	retlw	117	;'u'
  2077  0274  346E               	retlw	110	;'n'
  2078  0275  3474               	retlw	116	;'t'
  2079  0276  3474               	retlw	116	;'t'
  2080  0277  3469               	retlw	105	;'i'
  2081  0278  346E               	retlw	110	;'n'
  2082  0279  3467               	retlw	103	;'g'
  2083  027A  342E               	retlw	46	;'.'
  2084  027B  342E               	retlw	46	;'.'
  2085  027C  342E               	retlw	46	;'.'
  2086  027D  3420               	retlw	32	;' '
  2087  027E  3420               	retlw	32	;' '
  2088  027F  3400               	retlw	0
  2089  0280                     STR_2:	
  2090  0280  3420               	retlw	32	;' '
  2091  0281  3425               	retlw	37	;'%'
  2092  0282  3437               	retlw	55	;'7'
  2093  0283  346C               	retlw	108	;'l'
  2094  0284  3475               	retlw	117	;'u'
  2095  0285  3420               	retlw	32	;' '
  2096  0286  3420               	retlw	32	;' '
  2097  0287  3425               	retlw	37	;'%'
  2098  0288  3430               	retlw	48	;'0'
  2099  0289  3432               	retlw	50	;'2'
  2100  028A  3464               	retlw	100	;'d'
  2101  028B  343A               	retlw	58	;':'
  2102  028C  3425               	retlw	37	;'%'
  2103  028D  3430               	retlw	48	;'0'
  2104  028E  3432               	retlw	50	;'2'
  2105  028F  3464               	retlw	100	;'d'
  2106  0290  3400               	retlw	0
  2107  0291                     STR_3:	
  2108  0291  3420               	retlw	32	;' '
  2109  0292  3443               	retlw	67	;'C'
  2110  0293  346F               	retlw	111	;'o'
  2111  0294  3475               	retlw	117	;'u'
  2112  0295  346E               	retlw	110	;'n'
  2113  0296  3474               	retlw	116	;'t'
  2114  0297  3420               	retlw	32	;' '
  2115  0298  3453               	retlw	83	;'S'
  2116  0299  3474               	retlw	116	;'t'
  2117  029A  346F               	retlw	111	;'o'
  2118  029B  3470               	retlw	112	;'p'
  2119  029C  3470               	retlw	112	;'p'
  2120  029D  3465               	retlw	101	;'e'
  2121  029E  3464               	retlw	100	;'d'
  2122  029F  3420               	retlw	32	;' '
  2123  02A0  3400               	retlw	0
  2124  02A1                     STR_5:	
  2125  02A1  3425               	retlw	37	;'%'
  2126  02A2  3437               	retlw	55	;'7'
  2127  02A3  346C               	retlw	108	;'l'
  2128  02A4  3475               	retlw	117	;'u'
  2129  02A5  3420               	retlw	32	;' '
  2130  02A6  3425               	retlw	37	;'%'
  2131  02A7  3437               	retlw	55	;'7'
  2132  02A8  346C               	retlw	108	;'l'
  2133  02A9  3475               	retlw	117	;'u'
  2134  02AA  3400               	retlw	0
  2135  02AB                     STR_36:	
  2136  02AB  3432               	retlw	50	;'2'
  2137  02AC  3437               	retlw	55	;'7'
  2138  02AD  3437               	retlw	55	;'7'
  2139  02AE  3434               	retlw	52	;'4'
  2140  02AF  3435               	retlw	53	;'5'
  2141  02B0  3436               	retlw	54	;'6'
  2142  02B1  3432               	retlw	50	;'2'
  2143  02B2  3400               	retlw	0
  2144  02B3                     STR_35:	
  2145  02B3  3431               	retlw	49	;'1'
  2146  02B4  3439               	retlw	57	;'9'
  2147  02B5  3434               	retlw	52	;'4'
  2148  02B6  3430               	retlw	48	;'0'
  2149  02B7  3436               	retlw	54	;'6'
  2150  02B8  3437               	retlw	55	;'7'
  2151  02B9  3433               	retlw	51	;'3'
  2152  02BA  3400               	retlw	0
  2153  02BB                     STR_34:	
  2154  02BB  3431               	retlw	49	;'1'
  2155  02BC  3433               	retlw	51	;'3'
  2156  02BD  3433               	retlw	51	;'3'
  2157  02BE  3436               	retlw	54	;'6'
  2158  02BF  3430               	retlw	48	;'0'
  2159  02C0  3430               	retlw	48	;'0'
  2160  02C1  3436               	retlw	54	;'6'
  2161  02C2  3400               	retlw	0
  2162  02C3                     STR_32:	
  2163  02C3  3436               	retlw	54	;'6'
  2164  02C4  3430               	retlw	48	;'0'
  2165  02C5  3430               	retlw	48	;'0'
  2166  02C6  3430               	retlw	48	;'0'
  2167  02C7  3430               	retlw	48	;'0'
  2168  02C8  3430               	retlw	48	;'0'
  2169  02C9  3400               	retlw	0
  2170  02CA                     STR_50:	
  2171  02CA  3437               	retlw	55	;'7'
  2172  02CB  3430               	retlw	48	;'0'
  2173  02CC  3430               	retlw	48	;'0'
  2174  02CD  3438               	retlw	56	;'8'
  2175  02CE  3439               	retlw	57	;'9'
  2176  02CF  3430               	retlw	48	;'0'
  2177  02D0  3400               	retlw	0
  2178  02D1                     STR_51:	
  2179  02D1  3439               	retlw	57	;'9'
  2180  02D2  3436               	retlw	54	;'6'
  2181  02D3  3438               	retlw	56	;'8'
  2182  02D4  3434               	retlw	52	;'4'
  2183  02D5  3437               	retlw	55	;'7'
  2184  02D6  3432               	retlw	50	;'2'
  2185  02D7  3400               	retlw	0
  2186  02D8                     STR_45:	
  2187  02D8  3431               	retlw	49	;'1'
  2188  02D9  3430               	retlw	48	;'0'
  2189  02DA  3438               	retlw	56	;'8'
  2190  02DB  3438               	retlw	56	;'8'
  2191  02DC  3434               	retlw	52	;'4'
  2192  02DD  3433               	retlw	51	;'3'
  2193  02DE  3400               	retlw	0
  2194  02DF                     STR_47:	
  2195  02DF  3432               	retlw	50	;'2'
  2196  02E0  3434               	retlw	52	;'4'
  2197  02E1  3432               	retlw	50	;'2'
  2198  02E2  3433               	retlw	51	;'3'
  2199  02E3  3436               	retlw	54	;'6'
  2200  02E4  3434               	retlw	52	;'4'
  2201  02E5  3400               	retlw	0
  2202  02E6                     STR_48:	
  2203  02E6  3433               	retlw	51	;'3'
  2204  02E7  3435               	retlw	53	;'5'
  2205  02E8  3431               	retlw	49	;'1'
  2206  02E9  3431               	retlw	49	;'1'
  2207  02EA  3432               	retlw	50	;'2'
  2208  02EB  3437               	retlw	55	;'7'
  2209  02EC  3400               	retlw	0
  2210  02ED                     STR_30:	
  2211  02ED  3432               	retlw	50	;'2'
  2212  02EE  3434               	retlw	52	;'4'
  2213  02EF  3437               	retlw	55	;'7'
  2214  02F0  3436               	retlw	54	;'6'
  2215  02F1  3434               	retlw	52	;'4'
  2216  02F2  3437               	retlw	55	;'7'
  2217  02F3  3400               	retlw	0
  2218  02F4                     STR_29:	
  2219  02F4  3431               	retlw	49	;'1'
  2220  02F5  3435               	retlw	53	;'5'
  2221  02F6  3433               	retlw	51	;'3'
  2222  02F7  3432               	retlw	50	;'2'
  2223  02F8  3432               	retlw	50	;'2'
  2224  02F9  3438               	retlw	56	;'8'
  2225  02FA  3400               	retlw	0
  2226  02FB                     STR_31:	
  2227  02FB  3433               	retlw	51	;'3'
  2228  02FC  3438               	retlw	56	;'8'
  2229  02FD  3439               	retlw	57	;'9'
  2230  02FE  3439               	retlw	57	;'9'
  2231  02FF  3438               	retlw	56	;'8'
  2232  0300  3438               	retlw	56	;'8'
  2233  0301  3400               	retlw	0
  2234  0302                     STR_46:	
  2235  0302  3431               	retlw	49	;'1'
  2236  0303  3436               	retlw	54	;'6'
  2237  0304  3434               	retlw	52	;'4'
  2238  0305  3431               	retlw	49	;'1'
  2239  0306  3433               	retlw	51	;'3'
  2240  0307  3439               	retlw	57	;'9'
  2241  0308  3400               	retlw	0
  2242  0309                     STR_33:	
  2243  0309  3439               	retlw	57	;'9'
  2244  030A  3430               	retlw	48	;'0'
  2245  030B  3433               	retlw	51	;'3'
  2246  030C  3438               	retlw	56	;'8'
  2247  030D  3439               	retlw	57	;'9'
  2248  030E  3439               	retlw	57	;'9'
  2249  030F  3400               	retlw	0
  2250  0310                     STR_49:	
  2251  0310  3434               	retlw	52	;'4'
  2252  0311  3439               	retlw	57	;'9'
  2253  0312  3439               	retlw	57	;'9'
  2254  0313  3439               	retlw	57	;'9'
  2255  0314  3439               	retlw	57	;'9'
  2256  0315  3439               	retlw	57	;'9'
  2257  0316  3400               	retlw	0
  2258  0317                     STR_26:	
  2259  0317  3433               	retlw	51	;'3'
  2260  0318  3430               	retlw	48	;'0'
  2261  0319  3430               	retlw	48	;'0'
  2262  031A  3430               	retlw	48	;'0'
  2263  031B  3430               	retlw	48	;'0'
  2264  031C  3400               	retlw	0
  2265  031D                     STR_44:	
  2266  031D  3437               	retlw	55	;'7'
  2267  031E  3430               	retlw	48	;'0'
  2268  031F  3435               	retlw	53	;'5'
  2269  0320  3430               	retlw	48	;'0'
  2270  0321  3430               	retlw	48	;'0'
  2271  0322  3400               	retlw	0
  2272  0323                     STR_27:	
  2273  0323  3435               	retlw	53	;'5'
  2274  0324  3433               	retlw	51	;'3'
  2275  0325  3435               	retlw	53	;'5'
  2276  0326  3435               	retlw	53	;'5'
  2277  0327  3433               	retlw	51	;'3'
  2278  0328  3400               	retlw	0
  2279  0329                     STR_41:	
  2280  0329  3431               	retlw	49	;'1'
  2281  032A  3436               	retlw	54	;'6'
  2282  032B  3431               	retlw	49	;'1'
  2283  032C  3432               	retlw	50	;'2'
  2284  032D  3435               	retlw	53	;'5'
  2285  032E  3400               	retlw	0
  2286  032F                     STR_42:	
  2287  032F  3432               	retlw	50	;'2'
  2288  0330  3437               	retlw	55	;'7'
  2289  0331  3432               	retlw	50	;'2'
  2290  0332  3433               	retlw	51	;'3'
  2291  0333  3438               	retlw	56	;'8'
  2292  0334  3400               	retlw	0
  2293  0335                     STR_43:	
  2294  0335  3434               	retlw	52	;'4'
  2295  0336  3434               	retlw	52	;'4'
  2296  0337  3434               	retlw	52	;'4'
  2297  0338  3437               	retlw	55	;'7'
  2298  0339  3438               	retlw	56	;'8'
  2299  033A  3400               	retlw	0
  2300  033B                     STR_28:	
  2301  033B  3439               	retlw	57	;'9'
  2302  033C  3432               	retlw	50	;'2'
  2303  033D  3430               	retlw	48	;'0'
  2304  033E  3438               	retlw	56	;'8'
  2305  033F  3438               	retlw	56	;'8'
  2306  0340  3400               	retlw	0
  2307  0341                     STR_25:	
  2308  0341  3431               	retlw	49	;'1'
  2309  0342  3436               	retlw	54	;'6'
  2310  0343  3430               	retlw	48	;'0'
  2311  0344  3439               	retlw	57	;'9'
  2312  0345  3439               	retlw	57	;'9'
  2313  0346  3400               	retlw	0
  2314  0347                     STR_18:	
  2315  0347  3431               	retlw	49	;'1'
  2316  0348  342E               	retlw	46	;'.'
  2317  0349  3430               	retlw	48	;'0'
  2318  034A  3435               	retlw	53	;'5'
  2319  034B  3456               	retlw	86	;'V'
  2320  034C  3400               	retlw	0
  2321  034D                     STR_20:	
  2322  034D  3431               	retlw	49	;'1'
  2323  034E  342E               	retlw	46	;'.'
  2324  034F  3431               	retlw	49	;'1'
  2325  0350  3435               	retlw	53	;'5'
  2326  0351  3456               	retlw	86	;'V'
  2327  0352  3400               	retlw	0
  2328  0353                     STR_8:	
  2329  0353  3430               	retlw	48	;'0'
  2330  0354  342E               	retlw	46	;'.'
  2331  0355  3435               	retlw	53	;'5'
  2332  0356  3435               	retlw	53	;'5'
  2333  0357  3456               	retlw	86	;'V'
  2334  0358  3400               	retlw	0
  2335  0359                     STR_10:	
  2336  0359  3430               	retlw	48	;'0'
  2337  035A  342E               	retlw	46	;'.'
  2338  035B  3436               	retlw	54	;'6'
  2339  035C  3435               	retlw	53	;'5'
  2340  035D  3456               	retlw	86	;'V'
  2341  035E  3400               	retlw	0
  2342  035F                     STR_12:	
  2343  035F  3430               	retlw	48	;'0'
  2344  0360  342E               	retlw	46	;'.'
  2345  0361  3437               	retlw	55	;'7'
  2346  0362  3435               	retlw	53	;'5'
  2347  0363  3456               	retlw	86	;'V'
  2348  0364  3400               	retlw	0
  2349  0365                     STR_14:	
  2350  0365  3430               	retlw	48	;'0'
  2351  0366  342E               	retlw	46	;'.'
  2352  0367  3438               	retlw	56	;'8'
  2353  0368  3435               	retlw	53	;'5'
  2354  0369  3456               	retlw	86	;'V'
  2355  036A  3400               	retlw	0
  2356  036B                     STR_16:	
  2357  036B  3430               	retlw	48	;'0'
  2358  036C  342E               	retlw	46	;'.'
  2359  036D  3439               	retlw	57	;'9'
  2360  036E  3435               	retlw	53	;'5'
  2361  036F  3456               	retlw	86	;'V'
  2362  0370  3400               	retlw	0
  2363  0371                     STR_37:	
  2364  0371  3431               	retlw	49	;'1'
  2365  0372  3432               	retlw	50	;'2'
  2366  0373  3435               	retlw	53	;'5'
  2367  0374  3430               	retlw	48	;'0'
  2368  0375  3400               	retlw	0
  2369  0376                     STR_38:	
  2370  0376  3432               	retlw	50	;'2'
  2371  0377  3435               	retlw	53	;'5'
  2372  0378  3438               	retlw	56	;'8'
  2373  0379  3430               	retlw	48	;'0'
  2374  037A  3400               	retlw	0
  2375  037B                     STR_40:	
  2376  037B  3439               	retlw	57	;'9'
  2377  037C  3431               	retlw	49	;'1'
  2378  037D  3438               	retlw	56	;'8'
  2379  037E  3432               	retlw	50	;'2'
  2380  037F  3400               	retlw	0
  2381  0380                     STR_23:	
  2382  0380  3433               	retlw	51	;'3'
  2383  0381  3439               	retlw	57	;'9'
  2384  0382  3435               	retlw	53	;'5'
  2385  0383  3437               	retlw	55	;'7'
  2386  0384  3400               	retlw	0
  2387  0385                     STR_22:	
  2388  0385  3431               	retlw	49	;'1'
  2389  0386  3437               	retlw	55	;'7'
  2390  0387  3437               	retlw	55	;'7'
  2391  0388  3437               	retlw	55	;'7'
  2392  0389  3400               	retlw	0
  2393  038A                     STR_39:	
  2394  038A  3434               	retlw	52	;'4'
  2395  038B  3439               	retlw	57	;'9'
  2396  038C  3439               	retlw	57	;'9'
  2397  038D  3438               	retlw	56	;'8'
  2398  038E  3400               	retlw	0
  2399  038F                     STR_24:	
  2400  038F  3438               	retlw	56	;'8'
  2401  0390  3432               	retlw	50	;'2'
  2402  0391  3431               	retlw	49	;'1'
  2403  0392  3439               	retlw	57	;'9'
  2404  0393  3400               	retlw	0
  2405  0394                     STR_17:	
  2406  0394  3431               	retlw	49	;'1'
  2407  0395  342E               	retlw	46	;'.'
  2408  0396  3430               	retlw	48	;'0'
  2409  0397  3456               	retlw	86	;'V'
  2410  0398  3400               	retlw	0
  2411  0399                     STR_19:	
  2412  0399  3431               	retlw	49	;'1'
  2413  039A  342E               	retlw	46	;'.'
  2414  039B  3431               	retlw	49	;'1'
  2415  039C  3456               	retlw	86	;'V'
  2416  039D  3400               	retlw	0
  2417  039E                     STR_21:	
  2418  039E  3431               	retlw	49	;'1'
  2419  039F  342E               	retlw	46	;'.'
  2420  03A0  3432               	retlw	50	;'2'
  2421  03A1  3456               	retlw	86	;'V'
  2422  03A2  3400               	retlw	0
  2423  03A3                     STR_7:	
  2424  03A3  3430               	retlw	48	;'0'
  2425  03A4  342E               	retlw	46	;'.'
  2426  03A5  3435               	retlw	53	;'5'
  2427  03A6  3456               	retlw	86	;'V'
  2428  03A7  3400               	retlw	0
  2429  03A8                     STR_9:	
  2430  03A8  3430               	retlw	48	;'0'
  2431  03A9  342E               	retlw	46	;'.'
  2432  03AA  3436               	retlw	54	;'6'
  2433  03AB  3456               	retlw	86	;'V'
  2434  03AC  3400               	retlw	0
  2435  03AD                     STR_11:	
  2436  03AD  3430               	retlw	48	;'0'
  2437  03AE  342E               	retlw	46	;'.'
  2438  03AF  3437               	retlw	55	;'7'
  2439  03B0  3456               	retlw	86	;'V'
  2440  03B1  3400               	retlw	0
  2441  03B2                     STR_13:	
  2442  03B2  3430               	retlw	48	;'0'
  2443  03B3  342E               	retlw	46	;'.'
  2444  03B4  3438               	retlw	56	;'8'
  2445  03B5  3456               	retlw	86	;'V'
  2446  03B6  3400               	retlw	0
  2447  03B7                     STR_15:	
  2448  03B7  3430               	retlw	48	;'0'
  2449  03B8  342E               	retlw	46	;'.'
  2450  03B9  3439               	retlw	57	;'9'
  2451  03BA  3456               	retlw	86	;'V'
  2452  03BB  3400               	retlw	0
  2453  0280                     
  2454                           ; #config settings
  2455  0000                     
  2456                           	psect	cinit
  2457  002D                     start_initialization:	
  2458  002D                     __initialization:	
  2459                           
  2460                           ; Initialize objects allocated to BANK1
  2461  002D  30E1               	movlw	low __pidataBANK1
  2462  002E  0084               	movwf	4
  2463  002F  3087               	movlw	(high __pidataBANK1)| (0+128)
  2464  0030  0085               	movwf	5
  2465  0031  30A0               	movlw	low __pdataBANK1
  2466  0032  0086               	movwf	6
  2467  0033  3000               	movlw	high __pdataBANK1
  2468  0034  0087               	movwf	7
  2469  0035  301E               	movlw	30
  2470  0036  318D  252B  3180   	fcall	init_ram
  2471                           
  2472                           ; Initialize objects allocated to BANK2
  2473  0039  30A5               	movlw	low __pidataBANK2
  2474  003A  0084               	movwf	4
  2475  003B  3087               	movlw	(high __pidataBANK2)| (0+128)
  2476  003C  0085               	movwf	5
  2477  003D  3020               	movlw	low __pdataBANK2
  2478  003E  0086               	movwf	6
  2479  003F  3001               	movlw	high __pdataBANK2
  2480  0040  0087               	movwf	7
  2481  0041  303C               	movlw	60
  2482  0042  318D  252B  3180   	fcall	init_ram
  2483                           
  2484                           ; Clear objects allocated to COMMON
  2485  0045  01F0               	clrf	__pbssCOMMON& (0+127)
  2486  0046  01F1               	clrf	(__pbssCOMMON+1)& (0+127)
  2487  0047  01F2               	clrf	(__pbssCOMMON+2)& (0+127)
  2488  0048  01F3               	clrf	(__pbssCOMMON+3)& (0+127)
  2489  0049  01F4               	clrf	(__pbssCOMMON+4)& (0+127)
  2490  004A  01F5               	clrf	(__pbssCOMMON+5)& (0+127)
  2491                           
  2492                           ; Clear objects allocated to BANK0
  2493  004B  3061               	movlw	low __pbssBANK0
  2494  004C  0084               	movwf	4
  2495  004D  3000               	movlw	high __pbssBANK0
  2496  004E  0085               	movwf	5
  2497  004F  300C               	movlw	12
  2498  0050  318D  2525  3180   	fcall	clear_ram0
  2499                           
  2500                           ; Clear objects allocated to BANK1
  2501  0053  30BE               	movlw	low __pbssBANK1
  2502  0054  0084               	movwf	4
  2503  0055  3000               	movlw	high __pbssBANK1
  2504  0056  0085               	movwf	5
  2505  0057  301D               	movlw	29
  2506  0058  318D  2525         	fcall	clear_ram0
  2507  005A                     end_of_initialization:	
  2508                           ;End of C runtime variable initialization code
  2509                           
  2510  005A                     __end_of__initialization:	
  2511  005A  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  2512  005B  0020               	movlb	0
  2513  005C  3183  2BBC         	ljmp	_main	;jump to C main() function
  2514                           
  2515                           	psect	bssCOMMON
  2516  0070                     __pbssCOMMON:	
  2517  0070                     _mTouch_Interval:	
  2518  0070                     	ds	3
  2519  0073                     _count:	
  2520  0073                     	ds	2
  2521  0075                     mTouch_Read@channel:	
  2522  0075                     	ds	1
  2523                           
  2524                           	psect	bssBANK0
  2525  0061                     __pbssBANK0:	
  2526  0061                     _tcnt:	
  2527  0061                     	ds	8
  2528  0069                     _state_mode:	
  2529  0069                     	ds	1
  2530  006A                     _VoltageReg:	
  2531  006A                     	ds	2
  2532  006C                     _ConfigReg:	
  2533  006C                     	ds	1
  2534                           
  2535                           	psect	bssBANK1
  2536  00BE                     __pbssBANK1:	
  2537  00BE                     _cnts:	
  2538  00BE                     	ds	4
  2539  00C2                     _CPS_PreData:	
  2540  00C2                     	ds	3
  2541  00C5                     _CPS_Data:	
  2542  00C5                     	ds	3
  2543  00C8                     _I2C2_Config:	
  2544  00C8                     	ds	19
  2545                           
  2546                           	psect	dataBANK1
  2547  00A0                     __pdataBANK1:	
  2548  00A0                     _DAC_VoltageTable:	
  2549  00A0                     	ds	30
  2550                           
  2551                           	psect	dataBANK2
  2552  0120                     __pdataBANK2:	
  2553  0120                     _H7826_01_Gain:	
  2554  0120                     	ds	30
  2555  013E                     _H7826_Gain:	
  2556  013E                     	ds	30
  2557                           
  2558                           	psect	inittext
  2559  0D2B                     init_ram:	
  2560  0D2B  00FE               	movwf	126
  2561  0D2C                     initloop:	
  2562  0D2C  0012               	moviw fsr0++
  2563  0D2D  001E               	movwi fsr1++
  2564  0D2E  0BFE               	decfsz	126,f
  2565  0D2F  2D2C               	goto	initloop
  2566  0D30  3400               	retlw	0
  2567                           
  2568                           	psect	clrtext
  2569  0D25                     clear_ram0:	
  2570                           ;	Called with FSR0 containing the base address, and
  2571                           ;	WREG with the size to clear
  2572                           
  2573  0D25  0064               	clrwdt	;clear the watchdog before getting into this loop
  2574  0D26                     clrloop0:	
  2575  0D26  0180               	clrf	0	;clear RAM location pointed to by FSR
  2576  0D27  3101               	addfsr 0,1
  2577  0D28  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  2578  0D29  2D26               	goto	clrloop0	;have we reached the end yet?
  2579  0D2A  3400               	retlw	0	;all done for this memory range, return
  2580                           
  2581                           	psect	cstackBANK1
  2582  00DB                     __pcstackBANK1:	
  2583  00DB                     ??_main:	
  2584                           
  2585                           ; 1 bytes @ 0x0
  2586  00DB                     	ds	4
  2587                           
  2588                           	psect	cstackCOMMON
  2589  0076                     __pcstackCOMMON:	
  2590  0076                     ?_isdigit:	
  2591  0076                     ?_LCD_DisplayClear:	
  2592                           ; 1 bit 
  2593                           
  2594  0076                     ?_Timer1_ClearRecord:	
  2595                           ; 1 bytes @ 0x0
  2596                           
  2597  0076                     ?_Basic_Init:	
  2598                           ; 1 bytes @ 0x0
  2599                           
  2600  0076                     ?_Buzzer_Init:	
  2601                           ; 1 bytes @ 0x0
  2602                           
  2603  0076                     ?_Buzzer_SetDuty:	
  2604                           ; 1 bytes @ 0x0
  2605                           
  2606  0076                     ?_Buzzer_Count1ms:	
  2607                           ; 1 bytes @ 0x0
  2608                           
  2609  0076                     ?_I2C2_PinInit:	
  2610                           ; 1 bytes @ 0x0
  2611                           
  2612  0076                     ?_I2C2_Interrupt:	
  2613                           ; 1 bytes @ 0x0
  2614                           
  2615  0076                     ??_I2C2_Interrupt:	
  2616                           ; 1 bytes @ 0x0
  2617                           
  2618  0076                     ?_I2C_CommonInterrupt:	
  2619                           ; 1 bytes @ 0x0
  2620                           
  2621  0076                     ?_LCD_WriteData:	
  2622                           ; 1 bytes @ 0x0
  2623                           
  2624  0076                     ?_LCD_Init:	
  2625                           ; 1 bytes @ 0x0
  2626                           
  2627  0076                     ?_putch:	
  2628                           ; 1 bytes @ 0x0
  2629                           
  2630  0076                     ?_DAC_Initialize:	
  2631                           ; 1 bytes @ 0x0
  2632                           
  2633  0076                     ?_Timer1_Init:	
  2634                           ; 1 bytes @ 0x0
  2635                           
  2636  0076                     ?_Timer1_StartCount:	
  2637                           ; 1 bytes @ 0x0
  2638                           
  2639  0076                     ?_Timer1_StopCount:	
  2640                           ; 1 bytes @ 0x0
  2641                           
  2642  0076                     ?_Timer1_GetSecond:	
  2643                           ; 1 bytes @ 0x0
  2644                           
  2645  0076                     ?_Timer1_GetMinute:	
  2646                           ; 1 bytes @ 0x0
  2647                           
  2648  0076                     ?_Timer1_Count1ms:	
  2649                           ; 1 bytes @ 0x0
  2650                           
  2651  0076                     ?_Timer1_DetectAssignCount:	
  2652                           ; 1 bytes @ 0x0
  2653                           
  2654  0076                     ??_Timer1_DetectAssignCount:	
  2655                           ; 1 bytes @ 0x0
  2656                           
  2657  0076                     ?_Timer6_Init:	
  2658                           ; 1 bytes @ 0x0
  2659                           
  2660  0076                     ?_Timer6_CheckFlag:	
  2661                           ; 1 bytes @ 0x0
  2662                           
  2663  0076                     ??_Timer6_CheckFlag:	
  2664                           ; 1 bytes @ 0x0
  2665                           
  2666  0076                     ?_mTouch_PortInit:	
  2667                           ; 1 bytes @ 0x0
  2668                           
  2669  0076                     ?_mTouch_Init:	
  2670                           ; 1 bytes @ 0x0
  2671                           
  2672  0076                     ?_mTouch_Read:	
  2673                           ; 1 bytes @ 0x0
  2674                           
  2675  0076                     ??_mTouch_Read:	
  2676                           ; 1 bytes @ 0x0
  2677                           
  2678  0076                     ?_mTouch_IntervalDecrement:	
  2679                           ; 1 bytes @ 0x0
  2680                           
  2681  0076                     ??_mTouch_IntervalDecrement:	
  2682                           ; 1 bytes @ 0x0
  2683                           
  2684  0076                     ?_mTouch_Check:	
  2685                           ; 1 bytes @ 0x0
  2686                           
  2687  0076                     ?_main:	
  2688                           ; 1 bytes @ 0x0
  2689                           
  2690  0076                     ?_Handler:	
  2691                           ; 1 bytes @ 0x0
  2692                           
  2693  0076                     ?i1_Buzzer_MiliSecond:	
  2694                           ; 1 bytes @ 0x0
  2695                           
  2696  0076                     Buzzer_SetDuty@duty:	
  2697                           ; 1 bytes @ 0x0
  2698                           
  2699  0076                     i1Buzzer_MiliSecond@time:	
  2700                           ; 2 bytes @ 0x0
  2701                           
  2702                           
  2703                           ; 2 bytes @ 0x0
  2704  0076                     	ds	1
  2705  0077                     ??_I2C_CommonInterrupt:	
  2706                           
  2707                           ; 1 bytes @ 0x1
  2708  0077                     	ds	1
  2709  0078                     ??_Buzzer_SetDuty:	
  2710  0078                     ??_Timer1_Count1ms:	
  2711                           ; 1 bytes @ 0x2
  2712                           
  2713  0078                     ??i1_Buzzer_MiliSecond:	
  2714                           ; 1 bytes @ 0x2
  2715                           
  2716                           
  2717                           ; 1 bytes @ 0x2
  2718  0078                     	ds	2
  2719  007A                     Buzzer_SetDuty@CCP2CON_Pre:	
  2720                           
  2721                           ; 1 bytes @ 0x4
  2722  007A                     	ds	1
  2723  007B                     ??_Buzzer_Count1ms:	
  2724  007B                     ??_Handler:	
  2725                           ; 1 bytes @ 0x5
  2726                           
  2727                           
  2728                           ; 1 bytes @ 0x5
  2729  007B                     	ds	1
  2730                           
  2731                           	psect	cstackBANK0
  2732  0020                     __pcstackBANK0:	
  2733  0020                     ??_Timer1_ClearRecord:	
  2734  0020                     ??_Basic_Init:	
  2735                           ; 1 bytes @ 0x0
  2736                           
  2737  0020                     ??_isdigit:	
  2738                           ; 1 bytes @ 0x0
  2739                           
  2740  0020                     ??_Buzzer_Init:	
  2741                           ; 1 bytes @ 0x0
  2742                           
  2743  0020                     ?_Buzzer_MiliSecond:	
  2744                           ; 1 bytes @ 0x0
  2745                           
  2746  0020                     ??_I2C2_PinInit:	
  2747                           ; 1 bytes @ 0x0
  2748                           
  2749  0020                     ?_I2C2_Transmit:	
  2750                           ; 1 bytes @ 0x0
  2751                           
  2752  0020                     ??_LCD_WriteData:	
  2753                           ; 1 bytes @ 0x0
  2754                           
  2755  0020                     ??_Timer1_Init:	
  2756                           ; 1 bytes @ 0x0
  2757                           
  2758  0020                     ??_Timer1_StartCount:	
  2759                           ; 1 bytes @ 0x0
  2760                           
  2761  0020                     ??_Timer1_StopCount:	
  2762                           ; 1 bytes @ 0x0
  2763                           
  2764  0020                     ??_Timer1_GetSecond:	
  2765                           ; 1 bytes @ 0x0
  2766                           
  2767  0020                     ??_Timer1_GetMinute:	
  2768                           ; 1 bytes @ 0x0
  2769                           
  2770  0020                     ??_Timer6_Init:	
  2771                           ; 1 bytes @ 0x0
  2772                           
  2773  0020                     ??_mTouch_PortInit:	
  2774                           ; 1 bytes @ 0x0
  2775                           
  2776  0020                     ?___wmul:	
  2777                           ; 1 bytes @ 0x0
  2778                           
  2779  0020                     ?_Timer1_GetCountSum:	
  2780                           ; 2 bytes @ 0x0
  2781                           
  2782  0020                     ?___lmul:	
  2783                           ; 4 bytes @ 0x0
  2784                           
  2785  0020                     I2C2_Transmit@pData:	
  2786                           ; 4 bytes @ 0x0
  2787                           
  2788  0020                     _isdigit$775:	
  2789                           ; 1 bytes @ 0x0
  2790                           
  2791  0020                     Buzzer_MiliSecond@time:	
  2792                           ; 1 bytes @ 0x0
  2793                           
  2794  0020                     ___wmul@multiplier:	
  2795                           ; 2 bytes @ 0x0
  2796                           
  2797  0020                     ___lmul@multiplier:	
  2798                           ; 2 bytes @ 0x0
  2799                           
  2800                           
  2801                           ; 4 bytes @ 0x0
  2802  0020                     	ds	1
  2803  0021                     ?_I2C2_Setting:	
  2804  0021                     ??_mTouch_Init:	
  2805                           ; 1 bytes @ 0x1
  2806                           
  2807  0021                     I2C2_Setting@mode:	
  2808                           ; 1 bytes @ 0x1
  2809                           
  2810  0021                     I2C2_Transmit@size:	
  2811                           ; 1 bytes @ 0x1
  2812                           
  2813  0021                     isdigit@c:	
  2814                           ; 1 bytes @ 0x1
  2815                           
  2816                           
  2817                           ; 1 bytes @ 0x1
  2818  0021                     	ds	1
  2819  0022                     ??_Buzzer_MiliSecond:	
  2820  0022                     ??_I2C2_Transmit:	
  2821                           ; 1 bytes @ 0x2
  2822                           
  2823  0022                     ??_mTouch_Check:	
  2824                           ; 1 bytes @ 0x2
  2825                           
  2826  0022                     I2C2_Setting@Speed:	
  2827                           ; 1 bytes @ 0x2
  2828                           
  2829  0022                     LCD_WriteData@point:	
  2830                           ; 1 bytes @ 0x2
  2831                           
  2832  0022                     ___wmul@multiplicand:	
  2833                           ; 1 bytes @ 0x2
  2834                           
  2835                           
  2836                           ; 2 bytes @ 0x2
  2837  0022                     	ds	1
  2838  0023                     ??_LCD_DisplayClear:	
  2839  0023                     ??_I2C2_Setting:	
  2840                           ; 1 bytes @ 0x3
  2841                           
  2842  0023                     ??_putch:	
  2843                           ; 1 bytes @ 0x3
  2844                           
  2845  0023                     ?_LCD_CursorPosition:	
  2846                           ; 1 bytes @ 0x3
  2847                           
  2848  0023                     putch@c:	
  2849                           ; 1 bytes @ 0x3
  2850                           
  2851  0023                     LCD_CursorPosition@ty:	
  2852                           ; 1 bytes @ 0x3
  2853                           
  2854                           
  2855                           ; 1 bytes @ 0x3
  2856  0023                     	ds	1
  2857  0024                     ??_LCD_Init:	
  2858  0024                     ??_LCD_CursorPosition:	
  2859                           ; 1 bytes @ 0x4
  2860                           
  2861  0024                     ??_Timer1_GetCountSum:	
  2862                           ; 1 bytes @ 0x4
  2863                           
  2864  0024                     ??___wmul:	
  2865                           ; 1 bytes @ 0x4
  2866                           
  2867  0024                     I2C2_Setting@address:	
  2868                           ; 1 bytes @ 0x4
  2869                           
  2870  0024                     I2C2_Transmit@address:	
  2871                           ; 1 bytes @ 0x4
  2872                           
  2873  0024                     ___wmul@product:	
  2874                           ; 1 bytes @ 0x4
  2875                           
  2876  0024                     ___lmul@multiplicand:	
  2877                           ; 2 bytes @ 0x4
  2878                           
  2879                           
  2880                           ; 4 bytes @ 0x4
  2881  0024                     	ds	1
  2882  0025                     ?_I2C_Init:	
  2883  0025                     I2C2_Transmit@i:	
  2884                           ; 1 bytes @ 0x5
  2885                           
  2886  0025                     I2C_Init@address:	
  2887                           ; 1 bytes @ 0x5
  2888                           
  2889  0025                     LCD_CursorPosition@tx:	
  2890                           ; 1 bytes @ 0x5
  2891                           
  2892                           
  2893                           ; 1 bytes @ 0x5
  2894  0025                     	ds	1
  2895  0026                     I2C2_Transmit@i_172:	
  2896  0026                     I2C_Init@mode:	
  2897                           ; 1 bytes @ 0x6
  2898                           
  2899                           
  2900                           ; 1 bytes @ 0x6
  2901  0026                     	ds	1
  2902  0027                     I2C2_Transmit@result:	
  2903  0027                     I2C_Init@Speed:	
  2904                           ; 1 bytes @ 0x7
  2905                           
  2906  0027                     mTouch_Check@chan:	
  2907                           ; 1 bytes @ 0x7
  2908                           
  2909                           
  2910                           ; 1 bytes @ 0x7
  2911  0027                     	ds	1
  2912  0028                     ??_I2C_Init:	
  2913  0028                     ?_I2C_Transmit:	
  2914                           ; 1 bytes @ 0x8
  2915                           
  2916  0028                     ??___lmul:	
  2917                           ; 1 bytes @ 0x8
  2918                           
  2919  0028                     I2C_Transmit@address:	
  2920                           ; 1 bytes @ 0x8
  2921                           
  2922  0028                     ___lmul@product:	
  2923                           ; 1 bytes @ 0x8
  2924                           
  2925                           
  2926                           ; 4 bytes @ 0x8
  2927  0028                     	ds	1
  2928  0029                     I2C_Transmit@pData:	
  2929                           
  2930                           ; 1 bytes @ 0x9
  2931  0029                     	ds	1
  2932  002A                     I2C_Init@I2Cx:	
  2933  002A                     I2C_Transmit@size:	
  2934                           ; 1 bytes @ 0xA
  2935                           
  2936                           
  2937                           ; 1 bytes @ 0xA
  2938  002A                     	ds	1
  2939  002B                     ??_I2C_Transmit:	
  2940                           
  2941                           ; 1 bytes @ 0xB
  2942  002B                     	ds	1
  2943  002C                     ?___lldiv:	
  2944  002C                     ___lldiv@divisor:	
  2945                           ; 4 bytes @ 0xC
  2946                           
  2947                           
  2948                           ; 4 bytes @ 0xC
  2949  002C                     	ds	2
  2950  002E                     I2C_Transmit@I2Cx:	
  2951                           
  2952                           ; 1 bytes @ 0xE
  2953  002E                     	ds	1
  2954  002F                     I2C_Transmit@result:	
  2955                           
  2956                           ; 1 bytes @ 0xF
  2957  002F                     	ds	1
  2958  0030                     ??_DAC_Initialize:	
  2959  0030                     ?_DAC_WriteVoltage:	
  2960                           ; 1 bytes @ 0x10
  2961                           
  2962  0030                     DAC_WriteVoltage@volue:	
  2963                           ; 1 bytes @ 0x10
  2964                           
  2965  0030                     ___lldiv@dividend:	
  2966                           ; 2 bytes @ 0x10
  2967                           
  2968                           
  2969                           ; 4 bytes @ 0x10
  2970  0030                     	ds	2
  2971  0032                     ??_DAC_WriteVoltage:	
  2972                           
  2973                           ; 1 bytes @ 0x12
  2974  0032                     	ds	2
  2975  0034                     ??___lldiv:	
  2976                           
  2977                           ; 1 bytes @ 0x14
  2978  0034                     	ds	1
  2979  0035                     ___lldiv@quotient:	
  2980                           
  2981                           ; 4 bytes @ 0x15
  2982  0035                     	ds	4
  2983  0039                     ___lldiv@counter:	
  2984                           
  2985                           ; 1 bytes @ 0x19
  2986  0039                     	ds	1
  2987  003A                     ?_Timer1_GetCPS:	
  2988  003A                     ?___llmod:	
  2989                           ; 4 bytes @ 0x1A
  2990                           
  2991  003A                     ___llmod@divisor:	
  2992                           ; 4 bytes @ 0x1A
  2993                           
  2994                           
  2995                           ; 4 bytes @ 0x1A
  2996  003A                     	ds	4
  2997  003E                     ??_Timer1_GetCPS:	
  2998  003E                     ?_Timer1_GetCPM:	
  2999                           ; 1 bytes @ 0x1E
  3000                           
  3001  003E                     ___llmod@dividend:	
  3002                           ; 4 bytes @ 0x1E
  3003                           
  3004                           
  3005                           ; 4 bytes @ 0x1E
  3006  003E                     	ds	4
  3007  0042                     ??_Timer1_GetCPM:	
  3008  0042                     ??___llmod:	
  3009                           ; 1 bytes @ 0x22
  3010                           
  3011  0042                     _Timer1_GetCPM$1067:	
  3012                           ; 1 bytes @ 0x22
  3013                           
  3014                           
  3015                           ; 4 bytes @ 0x22
  3016  0042                     	ds	1
  3017  0043                     ___llmod@counter:	
  3018                           
  3019                           ; 1 bytes @ 0x23
  3020  0043                     	ds	3
  3021  0046                     ?_printf:	
  3022  0046                     printf@f:	
  3023                           ; 2 bytes @ 0x26
  3024                           
  3025                           
  3026                           ; 2 bytes @ 0x26
  3027  0046                     	ds	10
  3028  0050                     ??_printf:	
  3029                           
  3030                           ; 1 bytes @ 0x30
  3031  0050                     	ds	6
  3032  0056                     printf@prec:	
  3033                           
  3034                           ; 2 bytes @ 0x36
  3035  0056                     	ds	2
  3036  0058                     printf@val:	
  3037                           
  3038                           ; 4 bytes @ 0x38
  3039  0058                     	ds	4
  3040  005C                     printf@ap:	
  3041                           
  3042                           ; 1 bytes @ 0x3C
  3043  005C                     	ds	1
  3044  005D                     printf@flag:	
  3045                           
  3046                           ; 1 bytes @ 0x3D
  3047  005D                     	ds	1
  3048  005E                     printf@width:	
  3049                           
  3050                           ; 2 bytes @ 0x3E
  3051  005E                     	ds	2
  3052  0060                     printf@c:	
  3053                           
  3054                           ; 1 bytes @ 0x40
  3055  0060                     	ds	1
  3056                           
  3057                           	psect	maintext
  3058  03BC                     __pmaintext:	
  3059 ;;
  3060 ;;Main: autosize = 0, tempsize = 4, incstack = 0, save=0
  3061 ;;
  3062 ;; *************** function _main *****************
  3063 ;; Defined at:
  3064 ;;		line 16 in file "main.c"
  3065 ;; Parameters:    Size  Location     Type
  3066 ;;		None
  3067 ;; Auto vars:     Size  Location     Type
  3068 ;;		None
  3069 ;; Return value:  Size  Location     Type
  3070 ;;                  1    wreg      char 
  3071 ;; Registers used:
  3072 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3073 ;; Tracked objects:
  3074 ;;		On entry : B1F/0
  3075 ;;		On exit  : 0/0
  3076 ;;		Unchanged: 0/0
  3077 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  3078 ;;      Params:         0       0       0       0       0       0
  3079 ;;      Locals:         0       0       0       0       0       0
  3080 ;;      Temps:          0       0       4       0       0       0
  3081 ;;      Totals:         0       0       4       0       0       0
  3082 ;;Total ram usage:        4 bytes
  3083 ;; Hardware stack levels required when called:    7
  3084 ;; This function calls:
  3085 ;;		_Basic_Init
  3086 ;;		_Buzzer_Init
  3087 ;;		_DAC_Initialize
  3088 ;;		_DAC_WriteVoltage
  3089 ;;		_LCD_CursorPosition
  3090 ;;		_LCD_DisplayClear
  3091 ;;		_LCD_Init
  3092 ;;		_Timer1_ClearRecord
  3093 ;;		_Timer1_GetCPM
  3094 ;;		_Timer1_GetCPS
  3095 ;;		_Timer1_GetCountSum
  3096 ;;		_Timer1_GetMinute
  3097 ;;		_Timer1_GetSecond
  3098 ;;		_Timer1_Init
  3099 ;;		_Timer1_StartCount
  3100 ;;		_Timer1_StopCount
  3101 ;;		_Timer6_Init
  3102 ;;		_mTouch_Check
  3103 ;;		_mTouch_Init
  3104 ;;		_printf
  3105 ;; This function is called by:
  3106 ;;		Startup code after reset
  3107 ;; This function uses a non-reentrant model
  3108 ;;
  3109                           
  3110                           
  3111                           ;psect for function _main
  3112  03BC                     _main:	
  3113                           
  3114                           ;main.c: 18: Basic_Init();
  3115                           
  3116                           ;incstack = 0
  3117                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3118  03BC  318D  25A1  3183   	fcall	_Basic_Init
  3119                           
  3120                           ;main.c: 20: LATA6 = 1;
  3121  03BF  0022               	movlb	2	; select bank2
  3122  03C0  170C               	bsf	12,6	;volatile
  3123                           
  3124                           ;main.c: 22: Buzzer_Init();
  3125  03C1  318F  2717  3183   	fcall	_Buzzer_Init
  3126                           
  3127                           ;main.c: 24: LCD_Init();
  3128  03C4  3185  2543  3183   	fcall	_LCD_Init
  3129                           
  3130                           ;main.c: 26: Timer1_Init();
  3131  03C7  318E  26D0  3183   	fcall	_Timer1_Init
  3132                           
  3133                           ;main.c: 27: Timer1_StopCount();
  3134  03CA  318D  251D  3183   	fcall	_Timer1_StopCount
  3135                           
  3136                           ;main.c: 29: mTouch_Init();
  3137  03CD  318D  25D6  3183   	fcall	_mTouch_Init
  3138                           
  3139                           ;main.c: 31: Timer6_Init();
  3140  03D0  318D  25C3  3183   	fcall	_Timer6_Init
  3141                           
  3142                           ;main.c: 33: DAC_Initialize();
  3143  03D3  318E  26B0  3183   	fcall	_DAC_Initialize
  3144                           
  3145                           ;main.c: 34: DAC_WriteVoltage(DAC_DataTable[0]);
  3146  03D6  304E               	movlw	low (_DAC_DataTable| (0+32768))
  3147  03D7  0084               	movwf	4
  3148  03D8  3082               	movlw	high (_DAC_DataTable| (0+32768))
  3149  03D9  0085               	movwf	5
  3150  03DA  3F00               	moviw [0]fsr0
  3151  03DB  0020               	movlb	0	; select bank0
  3152  03DC  00B0               	movwf	DAC_WriteVoltage@volue
  3153  03DD  3F01               	moviw [1]fsr0
  3154  03DE  00B1               	movwf	DAC_WriteVoltage@volue+1
  3155  03DF  318F  2767  3183   	fcall	_DAC_WriteVoltage
  3156                           
  3157                           ;main.c: 35: DAC_WriteVoltage(DAC_DataTable[6]);
  3158  03E2  305A               	movlw	low ((_DAC_DataTable+12)| (0+32768))
  3159  03E3  0084               	movwf	4
  3160  03E4  3082               	movlw	high ((_DAC_DataTable+12)| (0+32768))
  3161  03E5  0085               	movwf	5
  3162  03E6  3F00               	moviw [0]fsr0
  3163  03E7  0020               	movlb	0	; select bank0
  3164  03E8  00B0               	movwf	DAC_WriteVoltage@volue
  3165  03E9  3F01               	moviw [1]fsr0
  3166  03EA  00B1               	movwf	DAC_WriteVoltage@volue+1
  3167  03EB  318F  2767  3183   	fcall	_DAC_WriteVoltage
  3168                           
  3169                           ;main.c: 44: }
  3170  03EE  2C8A               	goto	l3489
  3171  03EF                     l3497:	
  3172                           
  3173                           ;main.c: 45: else if(mTouch_Check(0x02))
  3174  03EF  3002               	movlw	2
  3175  03F0  3186  2659  3183   	fcall	_mTouch_Check
  3176  03F3  3A00               	xorlw	0
  3177  03F4  1903               	skipnz
  3178  03F5  2C09               	goto	l3509
  3179                           
  3180                           ;main.c: 46: {
  3181                           ;main.c: 47: Timer1_StopCount();
  3182  03F6  318D  251D  3183   	fcall	_Timer1_StopCount
  3183                           
  3184                           ;main.c: 48: LCD_DisplayClear();
  3185  03F9  318D  2591  3183   	fcall	_LCD_DisplayClear
  3186                           
  3187                           ;main.c: 49: if(state_mode==STOPPING)
  3188  03FC  0020               	movlb	0	; select bank0
  3189  03FD  0869               	movf	_state_mode,w
  3190  03FE  1D03               	btfss	3,2
  3191  03FF  2C07               	goto	l3507
  3192                           
  3193                           ;main.c: 50: state_mode = RESULT;
  3194  0400  3002               	movlw	2
  3195  0401  0021               	movlb	1	; select bank1
  3196  0402  00DB               	movwf	??_main^(0+128)
  3197  0403  085B               	movf	??_main^(0+128),w
  3198  0404  0020               	movlb	0	; select bank0
  3199  0405  00E9               	movwf	_state_mode
  3200  0406  2C9E               	goto	l3535
  3201  0407                     l3507:	
  3202                           
  3203                           ;main.c: 51: else
  3204                           ;main.c: 52: state_mode = STOPPING;
  3205  0407  01E9               	clrf	_state_mode
  3206                           
  3207                           ;main.c: 53: }
  3208  0408  2C9E               	goto	l3535
  3209  0409                     l3509:	
  3210                           
  3211                           ;main.c: 54: else if(mTouch_Check(0x01)&&(state_mode==STOPPING))
  3212  0409  3001               	movlw	1
  3213  040A  3186  2659  3183   	fcall	_mTouch_Check
  3214  040D  3A00               	xorlw	0
  3215  040E  1903               	skipnz
  3216  040F  2C9E               	goto	l3535
  3217  0410  0020               	movlb	0	; select bank0
  3218  0411  0869               	movf	_state_mode,w
  3219  0412  1D03               	btfss	3,2
  3220  0413  2C9E               	goto	l3535
  3221                           
  3222                           ;main.c: 55: {
  3223                           ;main.c: 56: Timer1_ClearRecord();
  3224  0414  318D  25FE  3183   	fcall	_Timer1_ClearRecord
  3225                           
  3226                           ;main.c: 57: }
  3227                           ;main.c: 59: switch(state_mode)
  3228  0417  2C9E               	goto	l3535
  3229  0418                     l3515:	
  3230                           ;main.c: 60: {
  3231                           ;main.c: 61: case COUNTING:
  3232                           
  3233                           
  3234                           ;main.c: 62: LCD_CursorPosition(0,0);
  3235  0418  0020               	movlb	0	; select bank0
  3236  0419  01A3               	clrf	LCD_CursorPosition@ty
  3237  041A  3000               	movlw	0
  3238  041B  318E  2613  3183   	fcall	_LCD_CursorPosition
  3239                           
  3240                           ;main.c: 63: printf("  Countting...  ");
  3241  041E  306F               	movlw	low (STR_1| (0+32768))
  3242  041F  0020               	movlb	0	; select bank0
  3243  0420  00C6               	movwf	printf@f
  3244  0421  3082               	movlw	high (STR_1| (0+32768))
  3245  0422  2C2D               	goto	L2
  3246  0423                     l3521:	
  3247                           ;main.c: 68: case STOPPING:
  3248                           
  3249                           ;main.c: 66: break;
  3250                           
  3251                           ;main.c: 65: printf(" %7lu  %02d:%02d",Timer1_GetCountSum(),Timer1_GetMinute(),Timer1_Ge
      +                          tSecond());
  3252                           
  3253                           ;main.c: 64: LCD_CursorPosition(0,1);
  3254                           
  3255                           
  3256                           ;main.c: 69: LCD_CursorPosition(0,0);
  3257  0423  0020               	movlb	0	; select bank0
  3258  0424  01A3               	clrf	LCD_CursorPosition@ty
  3259  0425  3000               	movlw	0
  3260  0426  318E  2613  3183   	fcall	_LCD_CursorPosition
  3261                           
  3262                           ;main.c: 70: printf(" Count Stopped ");
  3263  0429  3091               	movlw	low (STR_3| (0+32768))
  3264  042A  0020               	movlb	0	; select bank0
  3265  042B  00C6               	movwf	printf@f
  3266  042C  3082               	movlw	high (STR_3| (0+32768))
  3267  042D                     L2:	
  3268  042D  00C7               	movwf	printf@f+1
  3269  042E  2C52               	goto	L1
  3270  042F                     l3527:	
  3271                           ;main.c: 75: case RESULT:
  3272                           
  3273                           ;main.c: 73: break;
  3274                           
  3275                           ;main.c: 72: printf(" %7lu  %02d:%02d",Timer1_GetCountSum(),Timer1_GetMinute(),Timer1_Ge
      +                          tSecond());
  3276                           
  3277                           ;main.c: 71: LCD_CursorPosition(0,1);
  3278                           
  3279                           
  3280                           ;main.c: 76: LCD_CursorPosition(0,0);
  3281  042F  0020               	movlb	0	; select bank0
  3282  0430  01A3               	clrf	LCD_CursorPosition@ty
  3283  0431  3000               	movlw	0
  3284  0432  318E  2613  3183   	fcall	_LCD_CursorPosition
  3285                           
  3286                           ;main.c: 77: printf("%7lu %7lu",Timer1_GetCPS(),Timer1_GetCPM());
  3287  0435  30A1               	movlw	low (STR_5| (0+32768))
  3288  0436  0020               	movlb	0	; select bank0
  3289  0437  00C6               	movwf	printf@f
  3290  0438  3082               	movlw	high (STR_5| (0+32768))
  3291  0439  00C7               	movwf	printf@f+1
  3292  043A  3187  272B  3183   	fcall	_Timer1_GetCPS
  3293  043D  0020               	movlb	0	; select bank0
  3294  043E  083D               	movf	?_Timer1_GetCPS+3,w
  3295  043F  00CB               	movwf	?_printf+5
  3296  0440  083C               	movf	?_Timer1_GetCPS+2,w
  3297  0441  00CA               	movwf	?_printf+4
  3298  0442  083B               	movf	?_Timer1_GetCPS+1,w
  3299  0443  00C9               	movwf	?_printf+3
  3300  0444  083A               	movf	?_Timer1_GetCPS,w
  3301  0445  00C8               	movwf	?_printf+2
  3302  0446  318F  273F  3183   	fcall	_Timer1_GetCPM
  3303  0449  0020               	movlb	0	; select bank0
  3304  044A  0841               	movf	?_Timer1_GetCPM+3,w
  3305  044B  00CF               	movwf	?_printf+9
  3306  044C  0840               	movf	?_Timer1_GetCPM+2,w
  3307  044D  00CE               	movwf	?_printf+8
  3308  044E  083F               	movf	?_Timer1_GetCPM+1,w
  3309  044F  00CD               	movwf	?_printf+7
  3310  0450  083E               	movf	?_Timer1_GetCPM,w
  3311  0451  00CC               	movwf	?_printf+6
  3312  0452                     L1:	
  3313  0452  3180  205E  3183   	fcall	_printf
  3314                           
  3315                           ;main.c: 78: LCD_CursorPosition(0,1);
  3316  0455  0020               	movlb	0	; select bank0
  3317  0456  01A3               	clrf	LCD_CursorPosition@ty
  3318  0457  0AA3               	incf	LCD_CursorPosition@ty,f
  3319  0458  3000               	movlw	0
  3320  0459  318E  2613  3183   	fcall	_LCD_CursorPosition
  3321                           
  3322                           ;main.c: 79: printf(" %7lu  %02d:%02d",Timer1_GetCountSum(),Timer1_GetMinute(),Timer1_Ge
      +                          tSecond());
  3323  045C  3080               	movlw	low (STR_2| (0+32768))
  3324  045D  0020               	movlb	0	; select bank0
  3325  045E  00C6               	movwf	printf@f
  3326  045F  3082               	movlw	high (STR_2| (0+32768))
  3327  0460  00C7               	movwf	printf@f+1
  3328  0461  318D  25B2  3183   	fcall	_Timer1_GetCountSum
  3329  0464  0020               	movlb	0	; select bank0
  3330  0465  0823               	movf	?_Timer1_GetCountSum+3,w
  3331  0466  00CB               	movwf	?_printf+5
  3332  0467  0822               	movf	?_Timer1_GetCountSum+2,w
  3333  0468  00CA               	movwf	?_printf+4
  3334  0469  0821               	movf	?_Timer1_GetCountSum+1,w
  3335  046A  00C9               	movwf	?_printf+3
  3336  046B  0820               	movf	?_Timer1_GetCountSum,w
  3337  046C  00C8               	movwf	?_printf+2
  3338  046D  318D  2517  3183   	fcall	_Timer1_GetMinute
  3339  0470  0021               	movlb	1	; select bank1
  3340  0471  00DB               	movwf	??_main^(0+128)
  3341  0472  01DC               	clrf	(??_main^(0+128)+1)
  3342  0473  085B               	movf	??_main^(0+128),w
  3343  0474  0020               	movlb	0	; select bank0
  3344  0475  00CC               	movwf	?_printf+6
  3345  0476  0021               	movlb	1	; select bank1
  3346  0477  085C               	movf	(??_main+1)^(0+128),w
  3347  0478  0020               	movlb	0	; select bank0
  3348  0479  00CD               	movwf	?_printf+7
  3349  047A  318D  251A  3183   	fcall	_Timer1_GetSecond
  3350  047D  0021               	movlb	1	; select bank1
  3351  047E  00DD               	movwf	(??_main+2)^(0+128)
  3352  047F  01DE               	clrf	((??_main+2)^(0+128)+1)
  3353  0480  085D               	movf	(??_main+2)^(0+128),w
  3354  0481  0020               	movlb	0	; select bank0
  3355  0482  00CE               	movwf	?_printf+8
  3356  0483  0021               	movlb	1	; select bank1
  3357  0484  085E               	movf	(??_main+3)^(0+128),w
  3358  0485  0020               	movlb	0	; select bank0
  3359  0486  00CF               	movwf	?_printf+9
  3360  0487  3180  205E  3183   	fcall	_printf
  3361  048A                     l3489:	
  3362                           ;main.c: 37: while(1)
  3363                           
  3364                           ;main.c: 81: }
  3365                           
  3366                           ;main.c: 80: break;
  3367                           
  3368                           
  3369                           ;main.c: 38: {
  3370                           ;main.c: 39: if(mTouch_Check(0x00)&&(state_mode==STOPPING))
  3371  048A  3000               	movlw	0
  3372  048B  3186  2659  3183   	fcall	_mTouch_Check
  3373  048E  3A00               	xorlw	0
  3374  048F  1903               	skipnz
  3375  0490  2BEF               	goto	l3497
  3376  0491  0020               	movlb	0	; select bank0
  3377  0492  0869               	movf	_state_mode,w
  3378  0493  1D03               	btfss	3,2
  3379  0494  2BEF               	goto	l3497
  3380                           
  3381                           ;main.c: 40: {
  3382                           ;main.c: 41: Timer1_StartCount();
  3383  0495  318D  2520  3183   	fcall	_Timer1_StartCount
  3384                           
  3385                           ;main.c: 42: LCD_DisplayClear();
  3386  0498  318D  2591  3183   	fcall	_LCD_DisplayClear
  3387                           
  3388                           ;main.c: 43: state_mode = COUNTING;
  3389  049B  0020               	movlb	0	; select bank0
  3390  049C  01E9               	clrf	_state_mode
  3391  049D  0AE9               	incf	_state_mode,f
  3392  049E                     l3535:	
  3393  049E  0020               	movlb	0	; select bank0
  3394  049F  0869               	movf	_state_mode,w
  3395                           
  3396                           ; Switch size 1, requested type "space"
  3397                           ; Number of cases is 3, Range of values is 0 to 2
  3398                           ; switch strategies available:
  3399                           ; Name         Instructions Cycles
  3400                           ; simple_byte           10     6 (average)
  3401                           ; direct_byte           12     6 (fixed)
  3402                           ; jumptable            260     6 (fixed)
  3403                           ;	Chosen strategy is simple_byte
  3404  04A0  3A00               	xorlw	0	; case 0
  3405  04A1  1903               	skipnz
  3406  04A2  2C23               	goto	l3521
  3407  04A3  3A01               	xorlw	1	; case 1
  3408  04A4  1903               	skipnz
  3409  04A5  2C18               	goto	l3515
  3410  04A6  3A03               	xorlw	3	; case 2
  3411  04A7  1903               	skipnz
  3412  04A8  2C2F               	goto	l3527
  3413  04A9  2C8A               	goto	l3489
  3414  04AA  2C8A               	goto	l3489
  3415  04AB                     __end_of_main:	
  3416                           ;main.c: 82: }
  3417                           ;main.c: 83: return 0;
  3418                           ;	Return value of _main is never used
  3419                           
  3420                           
  3421                           	psect	text1
  3422  005E                     __ptext1:	
  3423 ;; *************** function _printf *****************
  3424 ;; Defined at:
  3425 ;;		line 464 in file "/opt/microchip/xc8/v1.41/sources/common/doprnt.c"
  3426 ;; Parameters:    Size  Location     Type
  3427 ;;  f               2   38[BANK0 ] PTR const unsigned char 
  3428 ;;		 -> STR_6(17), STR_5(10), STR_4(17), STR_3(16), 
  3429 ;;		 -> STR_2(17), STR_1(17), 
  3430 ;; Auto vars:     Size  Location     Type
  3431 ;;  val             4   56[BANK0 ] unsigned long 
  3432 ;;  tmpval          4    0        struct .
  3433 ;;  width           2   62[BANK0 ] int 
  3434 ;;  prec            2   54[BANK0 ] int 
  3435 ;;  cp              2    0        PTR const unsigned char 
  3436 ;;  len             2    0        unsigned int 
  3437 ;;  c               1   64[BANK0 ] char 
  3438 ;;  flag            1   61[BANK0 ] unsigned char 
  3439 ;;  ap              1   60[BANK0 ] PTR void [1]
  3440 ;;		 -> ?_printf(2), 
  3441 ;; Return value:  Size  Location     Type
  3442 ;;                  2   38[BANK0 ] int 
  3443 ;; Registers used:
  3444 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3445 ;; Tracked objects:
  3446 ;;		On entry : 0/0
  3447 ;;		On exit  : 0/0
  3448 ;;		Unchanged: 0/0
  3449 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  3450 ;;      Params:         0      10       0       0       0       0
  3451 ;;      Locals:         0      11       0       0       0       0
  3452 ;;      Temps:          0       6       0       0       0       0
  3453 ;;      Totals:         0      27       0       0       0       0
  3454 ;;Total ram usage:       27 bytes
  3455 ;; Hardware stack levels used:    1
  3456 ;; Hardware stack levels required when called:    5
  3457 ;; This function calls:
  3458 ;;		___lldiv
  3459 ;;		___llmod
  3460 ;;		___wmul
  3461 ;;		_isdigit
  3462 ;;		_putch
  3463 ;; This function is called by:
  3464 ;;		_main
  3465 ;; This function uses a non-reentrant model
  3466 ;;
  3467                           
  3468                           
  3469                           ;psect for function _printf
  3470  005E                     _printf:	
  3471                           
  3472                           ;doprnt.c: 466: va_list ap;
  3473                           ;doprnt.c: 499: signed char c;
  3474                           ;doprnt.c: 501: int width;
  3475                           ;doprnt.c: 504: int prec;
  3476                           ;doprnt.c: 508: unsigned char flag;
  3477                           ;doprnt.c: 523: union {
  3478                           ;doprnt.c: 524: unsigned long vd;
  3479                           ;doprnt.c: 525: double integ;
  3480                           ;doprnt.c: 526: } tmpval;
  3481                           ;doprnt.c: 528: unsigned long val;
  3482                           ;doprnt.c: 529: unsigned len;
  3483                           ;doprnt.c: 530: const char * cp;
  3484                           ;doprnt.c: 533: *ap = __va_start();
  3485                           
  3486                           ;incstack = 0
  3487                           ; Regs used in _printf: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3488  005E  3048               	movlw	(low ((?_printf| 0+2)))& (0+255)
  3489  005F  0020               	movlb	0	; select bank0
  3490  0060  00D0               	movwf	??_printf
  3491  0061  0850               	movf	??_printf,w
  3492  0062  00DC               	movwf	printf@ap
  3493  0063                     l3439:	
  3494                           ;doprnt.c: 536: while(c = *f++) {
  3495                           
  3496  0063  0020               	movlb	0	; select bank0
  3497  0064  0847               	movf	printf@f+1,w
  3498  0065  00D1               	movwf	??_printf+1
  3499  0066  0846               	movf	printf@f,w
  3500  0067  00D0               	movwf	??_printf
  3501  0068  0AC6               	incf	printf@f,f
  3502  0069  1903               	skipnz
  3503  006A  0AC7               	incf	printf@f+1,f
  3504  006B  0850               	movf	??_printf,w
  3505  006C  0084               	movwf	4
  3506  006D  0851               	movf	??_printf+1,w
  3507  006E  0085               	movwf	5
  3508  006F  0800               	movf	0,w	;code access
  3509  0070  00D2               	movwf	??_printf+2
  3510  0071  0852               	movf	??_printf+2,w
  3511  0072  00E0               	movwf	printf@c
  3512  0073  0860               	movf	printf@c,w
  3513  0074  1903               	btfsc	3,2
  3514  0075  0008               	return
  3515                           
  3516                           ;doprnt.c: 538: if(c != '%')
  3517  0076  3025               	movlw	37
  3518  0077  0660               	xorwf	printf@c,w
  3519  0078  1903               	btfsc	3,2
  3520  0079  287F               	goto	l3339
  3521                           
  3522                           ;doprnt.c: 540: {
  3523                           ;doprnt.c: 541: (putch(c) );
  3524  007A  0860               	movf	printf@c,w
  3525  007B  318D  253A  3180   	fcall	_putch
  3526                           
  3527                           ;doprnt.c: 542: continue;
  3528  007E  2863               	goto	l3439
  3529  007F                     l3339:	
  3530                           
  3531                           ;doprnt.c: 543: }
  3532                           ;doprnt.c: 546: width = 0;
  3533  007F  0020               	movlb	0	; select bank0
  3534  0080  01DE               	clrf	printf@width
  3535  0081  01DF               	clrf	printf@width+1
  3536                           
  3537                           ;doprnt.c: 548: flag = 0;
  3538  0082  01DD               	clrf	printf@flag
  3539                           
  3540                           ;doprnt.c: 551: switch(*f) {
  3541                           
  3542                           ;doprnt.c: 550: for(;;) {
  3543  0083  2889               	goto	l3345
  3544  0084                     l547:	
  3545                           ;doprnt.c: 579: case '0':
  3546                           
  3547                           
  3548                           ;doprnt.c: 580: flag |= 0x04;
  3549  0084  155D               	bsf	printf@flag,2
  3550                           
  3551                           ;doprnt.c: 581: f++;
  3552  0085  3001               	movlw	1
  3553  0086  07C6               	addwf	printf@f,f
  3554  0087  3000               	movlw	0
  3555  0088  3DC7               	addwfc	printf@f+1,f
  3556  0089                     l3345:	
  3557                           ;doprnt.c: 584: }
  3558                           
  3559                           ;doprnt.c: 582: continue;
  3560                           
  3561  0089  0846               	movf	printf@f,w
  3562  008A  0084               	movwf	4
  3563  008B  0847               	movf	printf@f+1,w
  3564  008C  0085               	movwf	5
  3565  008D  0800               	movf	0,w	;code access
  3566                           
  3567                           ; Switch size 1, requested type "space"
  3568                           ; Number of cases is 1, Range of values is 48 to 48
  3569                           ; switch strategies available:
  3570                           ; Name         Instructions Cycles
  3571                           ; simple_byte            4     3 (average)
  3572                           ; direct_byte           11     9 (fixed)
  3573                           ; jumptable            263     9 (fixed)
  3574                           ;	Chosen strategy is simple_byte
  3575  008E  3A30               	xorlw	48	; case 48
  3576  008F  1903               	skipnz
  3577  0090  2884               	goto	l547
  3578  0091  2892               	goto	l3347
  3579  0092                     l3347:	
  3580                           ;doprnt.c: 586: }
  3581                           
  3582                           ;doprnt.c: 585: break;
  3583                           
  3584                           
  3585                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  3586  0092  0846               	movf	printf@f,w
  3587  0093  0084               	movwf	4
  3588  0094  0847               	movf	printf@f+1,w
  3589  0095  0085               	movwf	5
  3590  0096  0800               	movf	0,w	;code access
  3591  0097  318D  2572  3180   	fcall	_isdigit
  3592  009A  1C03               	btfss	3,0
  3593  009B  28D2               	goto	l3361
  3594                           
  3595                           ;doprnt.c: 598: width = 0;
  3596  009C  0020               	movlb	0	; select bank0
  3597  009D  01DE               	clrf	printf@width
  3598  009E  01DF               	clrf	printf@width+1
  3599  009F                     l3351:	
  3600                           ;doprnt.c: 599: do {
  3601                           
  3602                           
  3603                           ;doprnt.c: 600: width *= 10;
  3604  009F  300A               	movlw	10
  3605  00A0  0020               	movlb	0	; select bank0
  3606  00A1  00A0               	movwf	___wmul@multiplier
  3607  00A2  3000               	movlw	0
  3608  00A3  00A1               	movwf	___wmul@multiplier+1
  3609  00A4  085F               	movf	printf@width+1,w
  3610  00A5  00A3               	movwf	___wmul@multiplicand+1
  3611  00A6  085E               	movf	printf@width,w
  3612  00A7  00A2               	movwf	___wmul@multiplicand
  3613  00A8  318E  2694  3180   	fcall	___wmul
  3614  00AB  0020               	movlb	0	; select bank0
  3615  00AC  0821               	movf	?___wmul+1,w
  3616  00AD  00DF               	movwf	printf@width+1
  3617  00AE  0820               	movf	?___wmul,w
  3618  00AF  00DE               	movwf	printf@width
  3619                           
  3620                           ;doprnt.c: 601: width += *f++ - '0';
  3621  00B0  0846               	movf	printf@f,w
  3622  00B1  0084               	movwf	4
  3623  00B2  0847               	movf	printf@f+1,w
  3624  00B3  0085               	movwf	5
  3625  00B4  0800               	movf	0,w	;code access
  3626  00B5  3ED0               	addlw	208
  3627  00B6  00D0               	movwf	??_printf
  3628  00B7  30FF               	movlw	255
  3629  00B8  1803               	skipnc
  3630  00B9  3000               	movlw	0
  3631  00BA  00D1               	movwf	??_printf+1
  3632  00BB  0850               	movf	??_printf,w
  3633  00BC  07DE               	addwf	printf@width,f
  3634  00BD  0851               	movf	??_printf+1,w
  3635  00BE  3DDF               	addwfc	printf@width+1,f
  3636  00BF  3001               	movlw	1
  3637  00C0  07C6               	addwf	printf@f,f
  3638  00C1  3000               	movlw	0
  3639  00C2  3DC7               	addwfc	printf@f+1,f
  3640                           
  3641                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  3642  00C3  0846               	movf	printf@f,w
  3643  00C4  0084               	movwf	4
  3644  00C5  0847               	movf	printf@f+1,w
  3645  00C6  0085               	movwf	5
  3646  00C7  0800               	movf	0,w	;code access
  3647  00C8  318D  2572  3180   	fcall	_isdigit
  3648  00CB  1C03               	btfss	3,0
  3649  00CC  28D2               	goto	l3361
  3650  00CD  289F               	goto	l3351
  3651  00CE                     l558:	
  3652                           ;doprnt.c: 641: case 'l':
  3653                           
  3654                           ;doprnt.c: 638: goto alldone;
  3655                           
  3656                           ;doprnt.c: 637: case 0:
  3657                           
  3658                           ;doprnt.c: 635: switch(c = *f++) {
  3659                           
  3660                           ;doprnt.c: 608: }
  3661                           ;doprnt.c: 633: loop:
  3662                           
  3663                           
  3664                           ;doprnt.c: 643: flag |= 0x10;
  3665  00CE  165D               	bsf	printf@flag,4
  3666                           
  3667                           ;doprnt.c: 644: goto loop;
  3668  00CF  28D2               	goto	l3361
  3669  00D0                     l563:	
  3670                           ;doprnt.c: 817: case 'u':
  3671                           
  3672                           ;doprnt.c: 813: continue;
  3673                           
  3674                           ;doprnt.c: 802: default:
  3675                           
  3676                           ;doprnt.c: 698: case 'i':
  3677                           ;doprnt.c: 699: break;
  3678                           
  3679                           ;doprnt.c: 697: case 'd':
  3680                           
  3681                           
  3682                           ;doprnt.c: 818: flag |= 0x40;
  3683  00D0  175D               	bsf	printf@flag,6
  3684                           
  3685                           ;doprnt.c: 822: }
  3686                           
  3687                           ;doprnt.c: 819: break;
  3688  00D1  28F0               	goto	l561
  3689  00D2                     l3361:	
  3690  00D2  0020               	movlb	0	; select bank0
  3691  00D3  0847               	movf	printf@f+1,w
  3692  00D4  00D1               	movwf	??_printf+1
  3693  00D5  0846               	movf	printf@f,w
  3694  00D6  00D0               	movwf	??_printf
  3695  00D7  0AC6               	incf	printf@f,f
  3696  00D8  1903               	skipnz
  3697  00D9  0AC7               	incf	printf@f+1,f
  3698  00DA  0850               	movf	??_printf,w
  3699  00DB  0084               	movwf	4
  3700  00DC  0851               	movf	??_printf+1,w
  3701  00DD  0085               	movwf	5
  3702  00DE  0800               	movf	0,w	;code access
  3703  00DF  00E0               	movwf	printf@c
  3704                           
  3705                           ; Switch size 1, requested type "space"
  3706                           ; Number of cases is 5, Range of values is 0 to 117
  3707                           ; switch strategies available:
  3708                           ; Name         Instructions Cycles
  3709                           ; simple_byte           16     9 (average)
  3710                           ; direct_byte          242     6 (fixed)
  3711                           ; jumptable            260     6 (fixed)
  3712                           ;	Chosen strategy is simple_byte
  3713  00E0  3A00               	xorlw	0	; case 0
  3714  00E1  1903               	skipnz
  3715  00E2  2A25               	goto	l591
  3716  00E3  3A64               	xorlw	100	; case 100
  3717  00E4  1903               	skipnz
  3718  00E5  28F0               	goto	l561
  3719  00E6  3A0D               	xorlw	13	; case 105
  3720  00E7  1903               	skipnz
  3721  00E8  28F0               	goto	l561
  3722  00E9  3A05               	xorlw	5	; case 108
  3723  00EA  1903               	skipnz
  3724  00EB  28CE               	goto	l558
  3725  00EC  3A19               	xorlw	25	; case 117
  3726  00ED  1903               	skipnz
  3727  00EE  28D0               	goto	l563
  3728  00EF  2863               	goto	l3439
  3729  00F0                     l561:	
  3730                           
  3731                           ;doprnt.c: 1251: if((flag & 0x40) == 0x00)
  3732  00F0  1B5D               	btfsc	printf@flag,6
  3733  00F1  2927               	goto	l564
  3734                           
  3735                           ;doprnt.c: 1253: {
  3736                           ;doprnt.c: 1255: if(flag & 0x10)
  3737  00F2  1E5D               	btfss	printf@flag,4
  3738  00F3  2901               	goto	l3369
  3739                           
  3740                           ;doprnt.c: 1256: val = (*(long *)__va_arg((*(long **)ap), (long)0));
  3741  00F4  085C               	movf	printf@ap,w
  3742  00F5  0086               	movwf	6
  3743  00F6  0187               	clrf	7
  3744  00F7  3F40               	moviw [0]fsr1
  3745  00F8  00D8               	movwf	printf@val
  3746  00F9  3F41               	moviw [1]fsr1
  3747  00FA  00D9               	movwf	printf@val+1
  3748  00FB  3F42               	moviw [2]fsr1
  3749  00FC  00DA               	movwf	printf@val+2
  3750  00FD  3F43               	moviw [3]fsr1
  3751  00FE  00DB               	movwf	printf@val+3
  3752  00FF  3004               	movlw	4
  3753  0100  2912               	goto	L4
  3754  0101                     l3369:	
  3755                           
  3756                           ;doprnt.c: 1257: else
  3757                           ;doprnt.c: 1259: val = (long)(*(int *)__va_arg((*(int **)ap), (int)0));
  3758  0101  085C               	movf	printf@ap,w
  3759  0102  0086               	movwf	6
  3760  0103  0187               	clrf	7
  3761  0104  3F40               	moviw [0]fsr1
  3762  0105  00D0               	movwf	??_printf
  3763  0106  3F41               	moviw [1]fsr1
  3764  0107  00D1               	movwf	??_printf+1
  3765  0108  0850               	movf	??_printf,w
  3766  0109  00D8               	movwf	printf@val
  3767  010A  0851               	movf	??_printf+1,w
  3768  010B  00D9               	movwf	printf@val+1
  3769  010C  0D89               	rlf	9,f
  3770  010D  3B89               	subwfb	9,f
  3771  010E  0989               	comf	9,f
  3772  010F  00DA               	movwf	printf@val+2
  3773  0110  00DB               	movwf	printf@val+3
  3774  0111  3002               	movlw	2
  3775  0112                     L4:	
  3776  0112  00D0               	movwf	??_printf
  3777  0113  0850               	movf	??_printf,w
  3778  0114  07DC               	addwf	printf@ap,f
  3779                           
  3780                           ;doprnt.c: 1261: if((long)val < 0) {
  3781  0115  1FDB               	btfss	printf@val+3,7
  3782  0116  2947               	goto	l3387
  3783                           
  3784                           ;doprnt.c: 1262: flag |= 0x03;
  3785  0117  3003               	movlw	3
  3786  0118  00D0               	movwf	??_printf
  3787  0119  0850               	movf	??_printf,w
  3788  011A  04DD               	iorwf	printf@flag,f
  3789                           
  3790                           ;doprnt.c: 1263: val = -val;
  3791  011B  09D8               	comf	printf@val,f
  3792  011C  09D9               	comf	printf@val+1,f
  3793  011D  09DA               	comf	printf@val+2,f
  3794  011E  09DB               	comf	printf@val+3,f
  3795  011F  0AD8               	incf	printf@val,f
  3796  0120  1903               	skipnz
  3797  0121  0AD9               	incf	printf@val+1,f
  3798  0122  1903               	skipnz
  3799  0123  0ADA               	incf	printf@val+2,f
  3800  0124  1903               	skipnz
  3801  0125  0ADB               	incf	printf@val+3,f
  3802                           
  3803                           ;doprnt.c: 1264: }
  3804                           ;doprnt.c: 1266: }
  3805  0126  2947               	goto	l3387
  3806  0127                     l564:	
  3807                           
  3808                           ;doprnt.c: 1268: else
  3809                           ;doprnt.c: 1273: {
  3810                           ;doprnt.c: 1281: if(flag & 0x10)
  3811  0127  1E5D               	btfss	printf@flag,4
  3812  0128  2936               	goto	l3383
  3813                           
  3814                           ;doprnt.c: 1282: val = (*(unsigned long *)__va_arg((*(unsigned long **)ap), (unsigned lo
      +                          ng)0));
  3815  0129  085C               	movf	printf@ap,w
  3816  012A  0086               	movwf	6
  3817  012B  0187               	clrf	7
  3818  012C  3F40               	moviw [0]fsr1
  3819  012D  00D8               	movwf	printf@val
  3820  012E  3F41               	moviw [1]fsr1
  3821  012F  00D9               	movwf	printf@val+1
  3822  0130  3F42               	moviw [2]fsr1
  3823  0131  00DA               	movwf	printf@val+2
  3824  0132  3F43               	moviw [3]fsr1
  3825  0133  00DB               	movwf	printf@val+3
  3826  0134  3004               	movlw	4
  3827  0135  2944               	goto	L5
  3828  0136                     l3383:	
  3829                           
  3830                           ;doprnt.c: 1283: else
  3831                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  3832  0136  085C               	movf	printf@ap,w
  3833  0137  0086               	movwf	6
  3834  0138  0187               	clrf	7
  3835  0139  3F40               	moviw [0]fsr1
  3836  013A  00D0               	movwf	??_printf
  3837  013B  3F41               	moviw [1]fsr1
  3838  013C  00D1               	movwf	??_printf+1
  3839  013D  0850               	movf	??_printf,w
  3840  013E  00D8               	movwf	printf@val
  3841  013F  0851               	movf	??_printf+1,w
  3842  0140  00D9               	movwf	printf@val+1
  3843  0141  01DA               	clrf	printf@val+2
  3844  0142  01DB               	clrf	printf@val+3
  3845  0143  3002               	movlw	2
  3846  0144                     L5:	
  3847  0144  00D0               	movwf	??_printf
  3848  0145  0850               	movf	??_printf,w
  3849  0146  07DC               	addwf	printf@ap,f
  3850  0147                     l3387:	
  3851                           
  3852                           ;doprnt.c: 1287: }
  3853                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  3854  0147  01E0               	clrf	printf@c
  3855  0148  0AE0               	incf	printf@c,f
  3856  0149  300A               	movlw	10
  3857  014A  0660               	xorwf	printf@c,w
  3858  014B  1903               	btfsc	3,2
  3859  014C  297A               	goto	l3399
  3860  014D                     l3393:	
  3861                           
  3862                           ;doprnt.c: 1306: if(val < dpowers[c])
  3863  014D  0860               	movf	printf@c,w
  3864  014E  00D0               	movwf	??_printf
  3865  014F  01D1               	clrf	??_printf+1
  3866  0150  35D0               	lslf	??_printf,f
  3867  0151  0DD1               	rlf	??_printf+1,f
  3868  0152  35D0               	lslf	??_printf,f
  3869  0153  0DD1               	rlf	??_printf+1,f
  3870  0154  3026               	movlw	low (_dpowers| (0+32768))
  3871  0155  0750               	addwf	??_printf,w
  3872  0156  0084               	movwf	4
  3873  0157  3082               	movlw	high (_dpowers| (0+32768))
  3874  0158  3D51               	addwfc	??_printf+1,w
  3875  0159  0085               	movwf	5
  3876  015A  3F00               	moviw [0]fsr0
  3877  015B  00D2               	movwf	??_printf+2
  3878  015C  3F01               	moviw [1]fsr0
  3879  015D  00D3               	movwf	??_printf+3
  3880  015E  3F02               	moviw [2]fsr0
  3881  015F  00D4               	movwf	??_printf+4
  3882  0160  3F03               	moviw [3]fsr0
  3883  0161  00D5               	movwf	??_printf+5
  3884  0162  0855               	movf	??_printf+5,w
  3885  0163  025B               	subwf	printf@val+3,w
  3886  0164  1D03               	skipz
  3887  0165  2970               	goto	u2855
  3888  0166  0854               	movf	??_printf+4,w
  3889  0167  025A               	subwf	printf@val+2,w
  3890  0168  1D03               	skipz
  3891  0169  2970               	goto	u2855
  3892  016A  0853               	movf	??_printf+3,w
  3893  016B  0259               	subwf	printf@val+1,w
  3894  016C  1D03               	skipz
  3895  016D  2970               	goto	u2855
  3896  016E  0852               	movf	??_printf+2,w
  3897  016F  0258               	subwf	printf@val,w
  3898  0170                     u2855:	
  3899  0170  1C03               	btfss	3,0
  3900  0171  297A               	goto	l3399
  3901                           
  3902                           ;doprnt.c: 1307: break;
  3903  0172  3001               	movlw	1
  3904  0173  00D0               	movwf	??_printf
  3905  0174  0850               	movf	??_printf,w
  3906  0175  07E0               	addwf	printf@c,f
  3907  0176  300A               	movlw	10
  3908  0177  0660               	xorwf	printf@c,w
  3909  0178  1D03               	btfss	3,2
  3910  0179  294D               	goto	l3393
  3911  017A                     l3399:	
  3912                           
  3913                           ;doprnt.c: 1345: if(width && flag & 0x03)
  3914  017A  085E               	movf	printf@width,w
  3915  017B  045F               	iorwf	printf@width+1,w
  3916  017C  1903               	btfsc	3,2
  3917  017D  2986               	goto	l574
  3918  017E  085D               	movf	printf@flag,w
  3919  017F  3903               	andlw	3
  3920  0180  1903               	btfsc	3,2
  3921  0181  2986               	goto	l574
  3922                           
  3923                           ;doprnt.c: 1346: width--;
  3924  0182  30FF               	movlw	255
  3925  0183  07DE               	addwf	printf@width,f
  3926  0184  30FF               	movlw	255
  3927  0185  3DDF               	addwfc	printf@width+1,f
  3928  0186                     l574:	
  3929                           
  3930                           ;doprnt.c: 1381: if(width > c)
  3931  0186  0860               	movf	printf@c,w
  3932  0187  00D0               	movwf	??_printf
  3933  0188  01D1               	clrf	??_printf+1
  3934  0189  1BD0               	btfsc	??_printf,7
  3935  018A  03D1               	decf	??_printf+1,f
  3936  018B  0851               	movf	??_printf+1,w
  3937  018C  3A80               	xorlw	128
  3938  018D  00D2               	movwf	??_printf+2
  3939  018E  085F               	movf	printf@width+1,w
  3940  018F  3A80               	xorlw	128
  3941  0190  0252               	subwf	??_printf+2,w
  3942  0191  1D03               	skipz
  3943  0192  2995               	goto	u2895
  3944  0193  085E               	movf	printf@width,w
  3945  0194  0250               	subwf	??_printf,w
  3946  0195                     u2895:	
  3947  0195  1803               	skipnc
  3948  0196  29A2               	goto	l3407
  3949                           
  3950                           ;doprnt.c: 1382: width -= c;
  3951  0197  0020               	movlb	0	; select bank0
  3952  0198  0860               	movf	printf@c,w
  3953  0199  00D0               	movwf	??_printf
  3954  019A  01D1               	clrf	??_printf+1
  3955  019B  1BD0               	btfsc	??_printf,7
  3956  019C  03D1               	decf	??_printf+1,f
  3957  019D  0850               	movf	??_printf,w
  3958  019E  02DE               	subwf	printf@width,f
  3959  019F  0851               	movf	??_printf+1,w
  3960  01A0  3BDF               	subwfb	printf@width+1,f
  3961  01A1  29A5               	goto	l3409
  3962  01A2                     l3407:	
  3963                           
  3964                           ;doprnt.c: 1383: else
  3965                           ;doprnt.c: 1384: width = 0;
  3966  01A2  0020               	movlb	0	; select bank0
  3967  01A3  01DE               	clrf	printf@width
  3968  01A4  01DF               	clrf	printf@width+1
  3969  01A5                     l3409:	
  3970                           
  3971                           ;doprnt.c: 1387: if(flag & 0x04) {
  3972  01A5  1D5D               	btfss	printf@flag,2
  3973  01A6  29BE               	goto	l3421
  3974                           
  3975                           ;doprnt.c: 1392: if(flag & 0x03)
  3976  01A7  085D               	movf	printf@flag,w
  3977  01A8  3903               	andlw	3
  3978  01A9  1903               	btfsc	3,2
  3979  01AA  29AF               	goto	l3415
  3980                           
  3981                           ;doprnt.c: 1393: (putch('-') );
  3982  01AB  302D               	movlw	45
  3983  01AC  318D  253A  3180   	fcall	_putch
  3984  01AF                     l3415:	
  3985                           
  3986                           ;doprnt.c: 1415: if(width)
  3987  01AF  0020               	movlb	0	; select bank0
  3988  01B0                     L6:	
  3989  01B0  085E               	movf	printf@width,w
  3990  01B1  045F               	iorwf	printf@width+1,w
  3991  01B2  1903               	btfsc	3,2
  3992  01B3  29D7               	goto	l3431
  3993                           
  3994                           ;doprnt.c: 1417: (putch('0') );
  3995                           
  3996                           ;doprnt.c: 1416: do
  3997  01B4  3030               	movlw	48
  3998  01B5  318D  253A  3180   	fcall	_putch
  3999                           
  4000                           ;doprnt.c: 1418: while(--width);
  4001  01B8  30FF               	movlw	255
  4002  01B9  0020               	movlb	0	; select bank0
  4003  01BA  07DE               	addwf	printf@width,f
  4004  01BB  30FF               	movlw	255
  4005  01BC  3DDF               	addwfc	printf@width+1,f
  4006  01BD  29B0               	goto	L6
  4007  01BE                     l3421:	
  4008                           ;doprnt.c: 1420: } else
  4009                           
  4010                           
  4011                           ;doprnt.c: 1422: {
  4012                           ;doprnt.c: 1424: if(width
  4013                           ;doprnt.c: 1428: )
  4014  01BE  085E               	movf	printf@width,w
  4015  01BF  045F               	iorwf	printf@width+1,w
  4016  01C0  1903               	btfsc	3,2
  4017  01C1  29CF               	goto	l3427
  4018  01C2                     l3423:	
  4019                           ;doprnt.c: 1429: do
  4020                           
  4021                           
  4022                           ;doprnt.c: 1430: (putch(' ') );
  4023  01C2  3020               	movlw	32
  4024  01C3  318D  253A  3180   	fcall	_putch
  4025                           
  4026                           ;doprnt.c: 1431: while(--width);
  4027  01C6  30FF               	movlw	255
  4028  01C7  0020               	movlb	0	; select bank0
  4029  01C8  07DE               	addwf	printf@width,f
  4030  01C9  30FF               	movlw	255
  4031  01CA  3DDF               	addwfc	printf@width+1,f
  4032  01CB  085E               	movf	printf@width,w
  4033  01CC  045F               	iorwf	printf@width+1,w
  4034  01CD  1D03               	btfss	3,2
  4035  01CE  29C2               	goto	l3423
  4036  01CF                     l3427:	
  4037                           
  4038                           ;doprnt.c: 1438: if(flag & 0x03)
  4039  01CF  085D               	movf	printf@flag,w
  4040  01D0  3903               	andlw	3
  4041  01D1  1903               	btfsc	3,2
  4042  01D2  29D7               	goto	l3431
  4043                           
  4044                           ;doprnt.c: 1439: (putch('-') );
  4045  01D3  302D               	movlw	45
  4046  01D4  318D  253A  3180   	fcall	_putch
  4047  01D7                     l3431:	
  4048                           
  4049                           ;doprnt.c: 1469: }
  4050                           ;doprnt.c: 1472: prec = c;
  4051  01D7  0020               	movlb	0	; select bank0
  4052  01D8  0860               	movf	printf@c,w
  4053  01D9  00D6               	movwf	printf@prec
  4054  01DA  01D7               	clrf	printf@prec+1
  4055  01DB  1BD6               	btfsc	printf@prec,7
  4056  01DC  03D7               	decf	printf@prec+1,f
  4057  01DD                     l3437:	
  4058                           ;doprnt.c: 1474: while(prec--) {
  4059                           
  4060  01DD  30FF               	movlw	255
  4061  01DE  0020               	movlb	0	; select bank0
  4062  01DF  07D6               	addwf	printf@prec,f
  4063  01E0  30FF               	movlw	255
  4064  01E1  3DD7               	addwfc	printf@prec+1,f
  4065  01E2  0A56               	incf	printf@prec,w
  4066  01E3  1903               	btfsc	3,2
  4067  01E4  0A57               	incf	printf@prec+1,w
  4068  01E5  1903               	btfsc	3,2
  4069  01E6  2863               	goto	l3439
  4070                           
  4071                           ;doprnt.c: 1478: {
  4072                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  4073  01E7  3000               	movlw	0
  4074  01E8  00BD               	movwf	___llmod@divisor+3
  4075  01E9  3000               	movlw	0
  4076  01EA  00BC               	movwf	___llmod@divisor+2
  4077  01EB  3000               	movlw	0
  4078  01EC  00BB               	movwf	___llmod@divisor+1
  4079  01ED  300A               	movlw	10
  4080  01EE  00BA               	movwf	___llmod@divisor
  4081  01EF  0857               	movf	printf@prec+1,w
  4082  01F0  0085               	movwf	5
  4083  01F1  0856               	movf	printf@prec,w
  4084  01F2  0084               	movwf	4
  4085  01F3  3584               	lslf	4,f
  4086  01F4  0D85               	rlf	5,f
  4087  01F5  3584               	lslf	4,f
  4088  01F6  0D85               	rlf	5,f
  4089  01F7  3026               	movlw	low (_dpowers| (0+32768))
  4090  01F8  0784               	addwf	4,f
  4091  01F9  3082               	movlw	high (_dpowers| (0+32768))
  4092  01FA  3D85               	addwfc	5,f
  4093  01FB  3F00               	moviw [0]fsr0
  4094  01FC  00AC               	movwf	___lldiv@divisor
  4095  01FD  3F01               	moviw [1]fsr0
  4096  01FE  00AD               	movwf	___lldiv@divisor+1
  4097  01FF  3F02               	moviw [2]fsr0
  4098  0200  00AE               	movwf	___lldiv@divisor+2
  4099  0201  3F03               	moviw [3]fsr0
  4100  0202  00AF               	movwf	___lldiv@divisor+3
  4101  0203  085B               	movf	printf@val+3,w
  4102  0204  00B3               	movwf	___lldiv@dividend+3
  4103  0205  085A               	movf	printf@val+2,w
  4104  0206  00B2               	movwf	___lldiv@dividend+2
  4105  0207  0859               	movf	printf@val+1,w
  4106  0208  00B1               	movwf	___lldiv@dividend+1
  4107  0209  0858               	movf	printf@val,w
  4108  020A  00B0               	movwf	___lldiv@dividend
  4109  020B  3186  2606  3180   	fcall	___lldiv
  4110  020E  0020               	movlb	0	; select bank0
  4111  020F  082F               	movf	?___lldiv+3,w
  4112  0210  00C1               	movwf	___llmod@dividend+3
  4113  0211  082E               	movf	?___lldiv+2,w
  4114  0212  00C0               	movwf	___llmod@dividend+2
  4115  0213  082D               	movf	?___lldiv+1,w
  4116  0214  00BF               	movwf	___llmod@dividend+1
  4117  0215  082C               	movf	?___lldiv,w
  4118  0216  00BE               	movwf	___llmod@dividend
  4119  0217  3186  26E8  3180   	fcall	___llmod
  4120  021A  0020               	movlb	0	; select bank0
  4121  021B  083A               	movf	?___llmod,w
  4122  021C  3E30               	addlw	48
  4123  021D  00D0               	movwf	??_printf
  4124  021E  0850               	movf	??_printf,w
  4125  021F  00E0               	movwf	printf@c
  4126                           
  4127                           ;doprnt.c: 1523: }
  4128                           ;doprnt.c: 1524: (putch(c) );
  4129  0220  0860               	movf	printf@c,w
  4130  0221  318D  253A  3180   	fcall	_putch
  4131  0224  29DD               	goto	l3437
  4132  0225                     l591:	
  4133                           ;doprnt.c: 1540: return 0;
  4134                           ;	Return value of _printf is never used
  4135                           
  4136                           ;doprnt.c: 1525: }
  4137                           ;doprnt.c: 1533: }
  4138                           ;doprnt.c: 1535: alldone:
  4139                           
  4140  0225  0008               	return
  4141  0226                     __end_of_printf:	
  4142                           
  4143                           	psect	text2
  4144  0D3A                     __ptext2:	
  4145 ;; *************** function _putch *****************
  4146 ;; Defined at:
  4147 ;;		line 64 in file "LCD.c"
  4148 ;; Parameters:    Size  Location     Type
  4149 ;;  c               1    wreg     unsigned char 
  4150 ;; Auto vars:     Size  Location     Type
  4151 ;;  c               1    3[BANK0 ] unsigned char 
  4152 ;; Return value:  Size  Location     Type
  4153 ;;                  1    wreg      void 
  4154 ;; Registers used:
  4155 ;;		wreg, status,2, status,0, pclath, cstack
  4156 ;; Tracked objects:
  4157 ;;		On entry : 0/0
  4158 ;;		On exit  : 0/0
  4159 ;;		Unchanged: 0/0
  4160 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  4161 ;;      Params:         0       0       0       0       0       0
  4162 ;;      Locals:         0       1       0       0       0       0
  4163 ;;      Temps:          0       0       0       0       0       0
  4164 ;;      Totals:         0       1       0       0       0       0
  4165 ;;Total ram usage:        1 bytes
  4166 ;; Hardware stack levels used:    1
  4167 ;; Hardware stack levels required when called:    4
  4168 ;; This function calls:
  4169 ;;		_LCD_WriteData
  4170 ;; This function is called by:
  4171 ;;		_printf
  4172 ;; This function uses a non-reentrant model
  4173 ;;
  4174                           
  4175                           
  4176                           ;psect for function _putch
  4177  0D3A                     _putch:	
  4178                           
  4179                           ;incstack = 0
  4180                           ; Regs used in _putch: [wreg+status,2+status,0+pclath+cstack]
  4181                           ;putch@c stored from wreg
  4182  0D3A  0020               	movlb	0	; select bank0
  4183  0D3B  00A3               	movwf	putch@c
  4184                           
  4185                           ;LCD.c: 66: LATA3 = 1;
  4186  0D3C  0022               	movlb	2	; select bank2
  4187  0D3D  158C               	bsf	12,3	;volatile
  4188                           
  4189                           ;LCD.c: 67: LCD_WriteData(c);
  4190  0D3E  0020               	movlb	0	; select bank0
  4191  0D3F  0823               	movf	putch@c,w
  4192  0D40  3187  2768         	fcall	_LCD_WriteData
  4193  0D42  0008               	return
  4194  0D43                     __end_of_putch:	
  4195                           
  4196                           	psect	text3
  4197  0D72                     __ptext3:	
  4198 ;; *************** function _isdigit *****************
  4199 ;; Defined at:
  4200 ;;		line 8 in file "/opt/microchip/xc8/v1.41/sources/common/isdigit.c"
  4201 ;; Parameters:    Size  Location     Type
  4202 ;;  c               1    wreg     unsigned char 
  4203 ;; Auto vars:     Size  Location     Type
  4204 ;;  c               1    1[BANK0 ] unsigned char 
  4205 ;; Return value:  Size  Location     Type
  4206 ;;		None               void
  4207 ;; Registers used:
  4208 ;;		wreg, status,2, status,0
  4209 ;; Tracked objects:
  4210 ;;		On entry : 0/0
  4211 ;;		On exit  : 0/0
  4212 ;;		Unchanged: 0/0
  4213 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  4214 ;;      Params:         0       0       0       0       0       0
  4215 ;;      Locals:         0       2       0       0       0       0
  4216 ;;      Temps:          0       0       0       0       0       0
  4217 ;;      Totals:         0       2       0       0       0       0
  4218 ;;Total ram usage:        2 bytes
  4219 ;; Hardware stack levels used:    1
  4220 ;; Hardware stack levels required when called:    3
  4221 ;; This function calls:
  4222 ;;		Nothing
  4223 ;; This function is called by:
  4224 ;;		_printf
  4225 ;; This function uses a non-reentrant model
  4226 ;;
  4227                           
  4228                           
  4229                           ;psect for function _isdigit
  4230  0D72                     _isdigit:	
  4231                           
  4232                           ;incstack = 0
  4233                           ; Regs used in _isdigit: [wreg+status,2+status,0]
  4234                           ;isdigit@c stored from wreg
  4235  0D72  0020               	movlb	0	; select bank0
  4236  0D73  00A1               	movwf	isdigit@c
  4237  0D74  01A0               	clrf	_isdigit$775
  4238  0D75  303A               	movlw	58
  4239  0D76  0221               	subwf	isdigit@c,w
  4240  0D77  1803               	skipnc
  4241  0D78  2D7F               	goto	l3073
  4242  0D79  3030               	movlw	48
  4243  0D7A  0221               	subwf	isdigit@c,w
  4244  0D7B  1C03               	skipc
  4245  0D7C  2D7F               	goto	l3073
  4246  0D7D  01A0               	clrf	_isdigit$775
  4247  0D7E  0AA0               	incf	_isdigit$775,f
  4248  0D7F                     l3073:	
  4249  0D7F  0C20               	rrf	_isdigit$775,w
  4250  0D80  0008               	return
  4251  0D81                     __end_of_isdigit:	
  4252                           
  4253                           	psect	text4
  4254  0E94                     __ptext4:	
  4255 ;; *************** function ___wmul *****************
  4256 ;; Defined at:
  4257 ;;		line 15 in file "/opt/microchip/xc8/v1.41/sources/common/Umul16.c"
  4258 ;; Parameters:    Size  Location     Type
  4259 ;;  multiplier      2    0[BANK0 ] unsigned int 
  4260 ;;  multiplicand    2    2[BANK0 ] unsigned int 
  4261 ;; Auto vars:     Size  Location     Type
  4262 ;;  product         2    4[BANK0 ] unsigned int 
  4263 ;; Return value:  Size  Location     Type
  4264 ;;                  2    0[BANK0 ] unsigned int 
  4265 ;; Registers used:
  4266 ;;		wreg, status,2, status,0
  4267 ;; Tracked objects:
  4268 ;;		On entry : 0/0
  4269 ;;		On exit  : 0/0
  4270 ;;		Unchanged: 0/0
  4271 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  4272 ;;      Params:         0       4       0       0       0       0
  4273 ;;      Locals:         0       2       0       0       0       0
  4274 ;;      Temps:          0       0       0       0       0       0
  4275 ;;      Totals:         0       6       0       0       0       0
  4276 ;;Total ram usage:        6 bytes
  4277 ;; Hardware stack levels used:    1
  4278 ;; Hardware stack levels required when called:    3
  4279 ;; This function calls:
  4280 ;;		Nothing
  4281 ;; This function is called by:
  4282 ;;		_printf
  4283 ;; This function uses a non-reentrant model
  4284 ;;
  4285                           
  4286                           
  4287                           ;psect for function ___wmul
  4288  0E94                     ___wmul:	
  4289                           
  4290                           ;incstack = 0
  4291                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  4292  0E94  0020               	movlb	0	; select bank0
  4293  0E95  01A4               	clrf	___wmul@product
  4294  0E96  01A5               	clrf	___wmul@product+1
  4295  0E97                     l3079:	
  4296  0E97  1C20               	btfss	___wmul@multiplier,0
  4297  0E98  2E9D               	goto	l716
  4298  0E99  0822               	movf	___wmul@multiplicand,w
  4299  0E9A  07A4               	addwf	___wmul@product,f
  4300  0E9B  0823               	movf	___wmul@multiplicand+1,w
  4301  0E9C  3DA5               	addwfc	___wmul@product+1,f
  4302  0E9D                     l716:	
  4303  0E9D  3001               	movlw	1
  4304  0E9E                     u2645:	
  4305  0E9E  35A2               	lslf	___wmul@multiplicand,f
  4306  0E9F  0DA3               	rlf	___wmul@multiplicand+1,f
  4307  0EA0  0B89               	decfsz	9,f
  4308  0EA1  2E9E               	goto	u2645
  4309  0EA2  3001               	movlw	1
  4310  0EA3                     u2655:	
  4311  0EA3  36A1               	lsrf	___wmul@multiplier+1,f
  4312  0EA4  0CA0               	rrf	___wmul@multiplier,f
  4313  0EA5  0B89               	decfsz	9,f
  4314  0EA6  2EA3               	goto	u2655
  4315  0EA7  0820               	movf	___wmul@multiplier,w
  4316  0EA8  0421               	iorwf	___wmul@multiplier+1,w
  4317  0EA9  1D03               	btfss	3,2
  4318  0EAA  2E97               	goto	l3079
  4319  0EAB  0825               	movf	___wmul@product+1,w
  4320  0EAC  00A1               	movwf	?___wmul+1
  4321  0EAD  0824               	movf	___wmul@product,w
  4322  0EAE  00A0               	movwf	?___wmul
  4323  0EAF  0008               	return
  4324  0EB0                     __end_of___wmul:	
  4325                           
  4326                           	psect	text5
  4327  06E8                     __ptext5:	
  4328 ;; *************** function ___llmod *****************
  4329 ;; Defined at:
  4330 ;;		line 6 in file "/opt/microchip/xc8/v1.41/sources/common/llmod.c"
  4331 ;; Parameters:    Size  Location     Type
  4332 ;;  divisor         4   26[BANK0 ] unsigned long 
  4333 ;;  dividend        4   30[BANK0 ] unsigned long 
  4334 ;; Auto vars:     Size  Location     Type
  4335 ;;  counter         1   35[BANK0 ] unsigned char 
  4336 ;; Return value:  Size  Location     Type
  4337 ;;                  4   26[BANK0 ] unsigned long 
  4338 ;; Registers used:
  4339 ;;		wreg, status,2, status,0
  4340 ;; Tracked objects:
  4341 ;;		On entry : 0/0
  4342 ;;		On exit  : 0/0
  4343 ;;		Unchanged: 0/0
  4344 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  4345 ;;      Params:         0       8       0       0       0       0
  4346 ;;      Locals:         0       1       0       0       0       0
  4347 ;;      Temps:          0       1       0       0       0       0
  4348 ;;      Totals:         0      10       0       0       0       0
  4349 ;;Total ram usage:       10 bytes
  4350 ;; Hardware stack levels used:    1
  4351 ;; Hardware stack levels required when called:    3
  4352 ;; This function calls:
  4353 ;;		Nothing
  4354 ;; This function is called by:
  4355 ;;		_printf
  4356 ;; This function uses a non-reentrant model
  4357 ;;
  4358                           
  4359                           
  4360                           ;psect for function ___llmod
  4361  06E8                     ___llmod:	
  4362                           
  4363                           ;incstack = 0
  4364                           ; Regs used in ___llmod: [wreg+status,2+status,0]
  4365  06E8  0020               	movlb	0	; select bank0
  4366  06E9  083D               	movf	___llmod@divisor+3,w
  4367  06EA  043C               	iorwf	___llmod@divisor+2,w
  4368  06EB  043B               	iorwf	___llmod@divisor+1,w
  4369  06EC  043A               	iorwf	___llmod@divisor,w
  4370  06ED  1903               	skipnz
  4371  06EE  2F22               	goto	l3107
  4372  06EF  01C3               	clrf	___llmod@counter
  4373  06F0  0AC3               	incf	___llmod@counter,f
  4374  06F1                     l3097:	
  4375  06F1  1BBD               	btfsc	___llmod@divisor+3,7
  4376  06F2  2EFF               	goto	l3099
  4377  06F3  3001               	movlw	1
  4378  06F4                     u2685:	
  4379  06F4  35BA               	lslf	___llmod@divisor,f
  4380  06F5  0DBB               	rlf	___llmod@divisor+1,f
  4381  06F6  0DBC               	rlf	___llmod@divisor+2,f
  4382  06F7  0DBD               	rlf	___llmod@divisor+3,f
  4383  06F8  0B89               	decfsz	9,f
  4384  06F9  2EF4               	goto	u2685
  4385  06FA  3001               	movlw	1
  4386  06FB  00C2               	movwf	??___llmod
  4387  06FC  0842               	movf	??___llmod,w
  4388  06FD  07C3               	addwf	___llmod@counter,f
  4389  06FE  2EF1               	goto	l3097
  4390  06FF                     l3099:	
  4391  06FF  083D               	movf	___llmod@divisor+3,w
  4392  0700  0241               	subwf	___llmod@dividend+3,w
  4393  0701  1D03               	skipz
  4394  0702  2F0D               	goto	u2705
  4395  0703  083C               	movf	___llmod@divisor+2,w
  4396  0704  0240               	subwf	___llmod@dividend+2,w
  4397  0705  1D03               	skipz
  4398  0706  2F0D               	goto	u2705
  4399  0707  083B               	movf	___llmod@divisor+1,w
  4400  0708  023F               	subwf	___llmod@dividend+1,w
  4401  0709  1D03               	skipz
  4402  070A  2F0D               	goto	u2705
  4403  070B  083A               	movf	___llmod@divisor,w
  4404  070C  023E               	subwf	___llmod@dividend,w
  4405  070D                     u2705:	
  4406  070D  1C03               	skipc
  4407  070E  2F17               	goto	l3103
  4408  070F  083A               	movf	___llmod@divisor,w
  4409  0710  02BE               	subwf	___llmod@dividend,f
  4410  0711  083B               	movf	___llmod@divisor+1,w
  4411  0712  3BBF               	subwfb	___llmod@dividend+1,f
  4412  0713  083C               	movf	___llmod@divisor+2,w
  4413  0714  3BC0               	subwfb	___llmod@dividend+2,f
  4414  0715  083D               	movf	___llmod@divisor+3,w
  4415  0716  3BC1               	subwfb	___llmod@dividend+3,f
  4416  0717                     l3103:	
  4417  0717  3001               	movlw	1
  4418  0718                     u2715:	
  4419  0718  36BD               	lsrf	___llmod@divisor+3,f
  4420  0719  0CBC               	rrf	___llmod@divisor+2,f
  4421  071A  0CBB               	rrf	___llmod@divisor+1,f
  4422  071B  0CBA               	rrf	___llmod@divisor,f
  4423  071C  0B89               	decfsz	9,f
  4424  071D  2F18               	goto	u2715
  4425  071E  3001               	movlw	1
  4426  071F  02C3               	subwf	___llmod@counter,f
  4427  0720  1D03               	btfss	3,2
  4428  0721  2EFF               	goto	l3099
  4429  0722                     l3107:	
  4430  0722  0841               	movf	___llmod@dividend+3,w
  4431  0723  00BD               	movwf	?___llmod+3
  4432  0724  0840               	movf	___llmod@dividend+2,w
  4433  0725  00BC               	movwf	?___llmod+2
  4434  0726  083F               	movf	___llmod@dividend+1,w
  4435  0727  00BB               	movwf	?___llmod+1
  4436  0728  083E               	movf	___llmod@dividend,w
  4437  0729  00BA               	movwf	?___llmod
  4438  072A  0008               	return
  4439  072B                     __end_of___llmod:	
  4440                           
  4441                           	psect	text6
  4442  0DD6                     __ptext6:	
  4443 ;; *************** function _mTouch_Init *****************
  4444 ;; Defined at:
  4445 ;;		line 19 in file "mTouch.c"
  4446 ;; Parameters:    Size  Location     Type
  4447 ;;		None
  4448 ;; Auto vars:     Size  Location     Type
  4449 ;;		None
  4450 ;; Return value:  Size  Location     Type
  4451 ;;                  1    wreg      void 
  4452 ;; Registers used:
  4453 ;;		wreg, status,2, status,0, pclath, cstack
  4454 ;; Tracked objects:
  4455 ;;		On entry : 0/0
  4456 ;;		On exit  : 0/0
  4457 ;;		Unchanged: 0/0
  4458 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  4459 ;;      Params:         0       0       0       0       0       0
  4460 ;;      Locals:         0       0       0       0       0       0
  4461 ;;      Temps:          0       1       0       0       0       0
  4462 ;;      Totals:         0       1       0       0       0       0
  4463 ;;Total ram usage:        1 bytes
  4464 ;; Hardware stack levels used:    1
  4465 ;; Hardware stack levels required when called:    4
  4466 ;; This function calls:
  4467 ;;		_mTouch_PortInit
  4468 ;; This function is called by:
  4469 ;;		_main
  4470 ;; This function uses a non-reentrant model
  4471 ;;
  4472                           
  4473                           
  4474                           ;psect for function _mTouch_Init
  4475  0DD6                     _mTouch_Init:	
  4476                           
  4477                           ;mTouch.c: 21: mTouch_PortInit();
  4478                           
  4479                           ;incstack = 0
  4480                           ; Regs used in _mTouch_Init: [wreg+status,2+status,0+pclath+cstack]
  4481  0DD6  318D  2565         	fcall	_mTouch_PortInit
  4482                           
  4483                           ;mTouch.c: 24: OPTION_REG |= (0x0<<0);
  4484  0DD8  0021               	movlb	1	; select bank1
  4485  0DD9  0815               	movf	21,w	;volatile
  4486                           
  4487                           ;mTouch.c: 25: OPTION_REG |= (0x1<<3);
  4488  0DDA  1595               	bsf	21,3	;volatile
  4489                           
  4490                           ;mTouch.c: 26: OPTION_REG |= (0x1<<5);
  4491  0DDB  1695               	bsf	21,5	;volatile
  4492                           
  4493                           ;mTouch.c: 27: TMR0 = 0x00;
  4494  0DDC  0020               	movlb	0	; select bank0
  4495  0DDD  0195               	clrf	21	;volatile
  4496                           
  4497                           ;mTouch.c: 30: CPSCON0 |= (0x01<<0);
  4498  0DDE  141E               	bsf	30,0	;volatile
  4499                           
  4500                           ;mTouch.c: 31: CPSCON0 |= (0x03<<2);
  4501  0DDF  300C               	movlw	12
  4502  0DE0  00A1               	movwf	??_mTouch_Init
  4503  0DE1  0821               	movf	??_mTouch_Init,w
  4504  0DE2  049E               	iorwf	30,f	;volatile
  4505                           
  4506                           ;mTouch.c: 32: CPSCON0 &= ~(0x01<<7);;
  4507  0DE3  307F               	movlw	127
  4508  0DE4  00A1               	movwf	??_mTouch_Init
  4509  0DE5  0821               	movf	??_mTouch_Init,w
  4510  0DE6  059E               	andwf	30,f	;volatile
  4511                           
  4512                           ;mTouch.c: 33: CPSCON1 = (uint8_t)0x00;
  4513  0DE7  019F               	clrf	31	;volatile
  4514  0DE8  0008               	return
  4515  0DE9                     __end_of_mTouch_Init:	
  4516                           
  4517                           	psect	text7
  4518  0D65                     __ptext7:	
  4519 ;; *************** function _mTouch_PortInit *****************
  4520 ;; Defined at:
  4521 ;;		line 13 in file "mTouch.c"
  4522 ;; Parameters:    Size  Location     Type
  4523 ;;		None
  4524 ;; Auto vars:     Size  Location     Type
  4525 ;;		None
  4526 ;; Return value:  Size  Location     Type
  4527 ;;                  1    wreg      void 
  4528 ;; Registers used:
  4529 ;;		wreg, status,2, status,0
  4530 ;; Tracked objects:
  4531 ;;		On entry : 0/0
  4532 ;;		On exit  : 0/0
  4533 ;;		Unchanged: 0/0
  4534 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  4535 ;;      Params:         0       0       0       0       0       0
  4536 ;;      Locals:         0       0       0       0       0       0
  4537 ;;      Temps:          0       1       0       0       0       0
  4538 ;;      Totals:         0       1       0       0       0       0
  4539 ;;Total ram usage:        1 bytes
  4540 ;; Hardware stack levels used:    1
  4541 ;; Hardware stack levels required when called:    3
  4542 ;; This function calls:
  4543 ;;		Nothing
  4544 ;; This function is called by:
  4545 ;;		_mTouch_Init
  4546 ;; This function uses a non-reentrant model
  4547 ;;
  4548                           
  4549                           
  4550                           ;psect for function _mTouch_PortInit
  4551  0D65                     _mTouch_PortInit:	
  4552                           
  4553                           ;mTouch.c: 15: TRISA |= (0x07);
  4554                           
  4555                           ;incstack = 0
  4556                           ; Regs used in _mTouch_PortInit: [wreg+status,2+status,0]
  4557  0D65  3007               	movlw	7
  4558  0D66  0020               	movlb	0	; select bank0
  4559  0D67  00A0               	movwf	??_mTouch_PortInit
  4560  0D68  0820               	movf	??_mTouch_PortInit,w
  4561  0D69  0021               	movlb	1	; select bank1
  4562  0D6A  048C               	iorwf	12,f	;volatile
  4563                           
  4564                           ;mTouch.c: 16: ANSELA |= (0x07);
  4565  0D6B  3007               	movlw	7
  4566  0D6C  0020               	movlb	0	; select bank0
  4567  0D6D  00A0               	movwf	??_mTouch_PortInit
  4568  0D6E  0820               	movf	??_mTouch_PortInit,w
  4569  0D6F  0023               	movlb	3	; select bank3
  4570  0D70  048C               	iorwf	12,f	;volatile
  4571  0D71  0008               	return
  4572  0D72                     __end_of_mTouch_PortInit:	
  4573                           
  4574                           	psect	text8
  4575  0659                     __ptext8:	
  4576 ;; *************** function _mTouch_Check *****************
  4577 ;; Defined at:
  4578 ;;		line 61 in file "mTouch.c"
  4579 ;; Parameters:    Size  Location     Type
  4580 ;;  chan            1    wreg     unsigned char 
  4581 ;; Auto vars:     Size  Location     Type
  4582 ;;  chan            1    7[BANK0 ] unsigned char 
  4583 ;; Return value:  Size  Location     Type
  4584 ;;                  1    wreg      unsigned char 
  4585 ;; Registers used:
  4586 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4587 ;; Tracked objects:
  4588 ;;		On entry : 0/0
  4589 ;;		On exit  : 0/0
  4590 ;;		Unchanged: 0/0
  4591 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  4592 ;;      Params:         0       0       0       0       0       0
  4593 ;;      Locals:         0       1       0       0       0       0
  4594 ;;      Temps:          0       5       0       0       0       0
  4595 ;;      Totals:         0       6       0       0       0       0
  4596 ;;Total ram usage:        6 bytes
  4597 ;; Hardware stack levels used:    1
  4598 ;; Hardware stack levels required when called:    4
  4599 ;; This function calls:
  4600 ;;		_Buzzer_MiliSecond
  4601 ;; This function is called by:
  4602 ;;		_main
  4603 ;; This function uses a non-reentrant model
  4604 ;;
  4605                           
  4606                           
  4607                           ;psect for function _mTouch_Check
  4608  0659                     _mTouch_Check:	
  4609                           
  4610                           ;incstack = 0
  4611                           ; Regs used in _mTouch_Check: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4612                           ;mTouch_Check@chan stored from wreg
  4613  0659  0020               	movlb	0	; select bank0
  4614  065A  00A7               	movwf	mTouch_Check@chan
  4615                           
  4616                           ;mTouch.c: 63: if(2<chan)return 0;
  4617  065B  3003               	movlw	3
  4618  065C  0227               	subwf	mTouch_Check@chan,w
  4619  065D  1C03               	skipc
  4620  065E  2E61               	goto	l3297
  4621  065F  3000               	movlw	0
  4622  0660  0008               	return
  4623  0661                     l3297:	
  4624                           
  4625                           ;mTouch.c: 65: if(((CPS_PreData[chan]-CPS_Data[chan])>sense_parameter[chan])&&!mTouch_In
      +                          terval[chan])
  4626  0661  0827               	movf	mTouch_Check@chan,w
  4627  0662  3EC5               	addlw	(low (_CPS_Data| 0))& (0+255)
  4628  0663  0086               	movwf	6
  4629  0664  0187               	clrf	7
  4630  0665  0801               	movf	1,w
  4631  0666  00A2               	movwf	??_mTouch_Check
  4632  0667  01A3               	clrf	??_mTouch_Check+1
  4633  0668  09A2               	comf	??_mTouch_Check,f
  4634  0669  09A3               	comf	??_mTouch_Check+1,f
  4635  066A  0AA2               	incf	??_mTouch_Check,f
  4636  066B  1903               	skipnz
  4637  066C  0AA3               	incf	??_mTouch_Check+1,f
  4638  066D  0827               	movf	mTouch_Check@chan,w
  4639  066E  3EC2               	addlw	(low (_CPS_PreData| 0))& (0+255)
  4640  066F  0086               	movwf	6
  4641  0670  0187               	clrf	7
  4642  0671  0801               	movf	1,w
  4643  0672  0722               	addwf	??_mTouch_Check,w
  4644  0673  00A4               	movwf	??_mTouch_Check+2
  4645  0674  0823               	movf	??_mTouch_Check+1,w
  4646  0675  1803               	skipnc
  4647  0676  0A23               	incf	??_mTouch_Check+1,w
  4648  0677  00A5               	movwf	??_mTouch_Check+3
  4649  0678  0827               	movf	mTouch_Check@chan,w
  4650  0679  3E6C               	addlw	low (_sense_parameter| (0+32768))
  4651  067A  0084               	movwf	4
  4652  067B  3082               	movlw	high (_sense_parameter| (0+32768))
  4653  067C  1803               	skipnc
  4654  067D  3E01               	addlw	1
  4655  067E  0085               	movwf	5
  4656  067F  0800               	movf	0,w	;code access
  4657  0680  00A6               	movwf	??_mTouch_Check+4
  4658  0681  0825               	movf	??_mTouch_Check+3,w
  4659  0682  3A80               	xorlw	128
  4660  0683  3C80               	sublw	128
  4661  0684  1D03               	skipz
  4662  0685  2E88               	goto	u2755
  4663  0686  0824               	movf	??_mTouch_Check+2,w
  4664  0687  0226               	subwf	??_mTouch_Check+4,w
  4665  0688                     u2755:	
  4666  0688  1803               	skipnc
  4667  0689  2EA2               	goto	l3309
  4668  068A  0020               	movlb	0	; select bank0
  4669  068B  0827               	movf	mTouch_Check@chan,w
  4670  068C  3E70               	addlw	(low (_mTouch_Interval| 0))& (0+255)
  4671  068D  0086               	movwf	6
  4672  068E  0187               	clrf	7
  4673  068F  0801               	movf	1,w
  4674  0690  1D03               	btfss	3,2
  4675  0691  2EA2               	goto	l3309
  4676                           
  4677                           ;mTouch.c: 66: {
  4678                           ;mTouch.c: 67: mTouch_Interval[chan] = 100;
  4679  0692  3064               	movlw	100
  4680  0693  00A2               	movwf	??_mTouch_Check
  4681  0694  0827               	movf	mTouch_Check@chan,w
  4682  0695  3E70               	addlw	(low (_mTouch_Interval| 0))& (0+255)
  4683  0696  0086               	movwf	6
  4684  0697  0187               	clrf	7
  4685  0698  0822               	movf	??_mTouch_Check,w
  4686  0699  0081               	movwf	1
  4687                           
  4688                           ;mTouch.c: 68: Buzzer_MiliSecond(100);
  4689  069A  3064               	movlw	100
  4690  069B  00A0               	movwf	Buzzer_MiliSecond@time
  4691  069C  3000               	movlw	0
  4692  069D  00A1               	movwf	Buzzer_MiliSecond@time+1
  4693  069E  318D  2543         	fcall	_Buzzer_MiliSecond
  4694                           
  4695                           ;mTouch.c: 69: return 1;
  4696  06A0  3001               	movlw	1
  4697  06A1  0008               	return
  4698  06A2                     l3309:	
  4699                           
  4700                           ;mTouch.c: 70: }
  4701                           ;mTouch.c: 71: return 0;
  4702  06A2  3000               	movlw	0
  4703  06A3  0008               	return
  4704  06A4                     __end_of_mTouch_Check:	
  4705                           
  4706                           	psect	text9
  4707  0D43                     __ptext9:	
  4708 ;; *************** function _Buzzer_MiliSecond *****************
  4709 ;; Defined at:
  4710 ;;		line 38 in file "Buzzer.c"
  4711 ;; Parameters:    Size  Location     Type
  4712 ;;  time            2    0[BANK0 ] unsigned int 
  4713 ;; Auto vars:     Size  Location     Type
  4714 ;;		None
  4715 ;; Return value:  Size  Location     Type
  4716 ;;                  1    wreg      void 
  4717 ;; Registers used:
  4718 ;;		wreg, status,2, status,0
  4719 ;; Tracked objects:
  4720 ;;		On entry : 0/0
  4721 ;;		On exit  : 0/0
  4722 ;;		Unchanged: 0/0
  4723 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  4724 ;;      Params:         0       2       0       0       0       0
  4725 ;;      Locals:         0       0       0       0       0       0
  4726 ;;      Temps:          0       0       0       0       0       0
  4727 ;;      Totals:         0       2       0       0       0       0
  4728 ;;Total ram usage:        2 bytes
  4729 ;; Hardware stack levels used:    1
  4730 ;; Hardware stack levels required when called:    3
  4731 ;; This function calls:
  4732 ;;		Nothing
  4733 ;; This function is called by:
  4734 ;;		_mTouch_Check
  4735 ;; This function uses a non-reentrant model
  4736 ;;
  4737                           
  4738                           
  4739                           ;psect for function _Buzzer_MiliSecond
  4740  0D43                     _Buzzer_MiliSecond:	
  4741                           
  4742                           ;Buzzer.c: 40: if(count==0)
  4743                           
  4744                           ;incstack = 0
  4745                           ; Regs used in _Buzzer_MiliSecond: [wreg+status,2+status,0]
  4746  0D43  0873               	movf	_count,w
  4747  0D44  0474               	iorwf	_count+1,w
  4748  0D45  1D03               	btfss	3,2
  4749  0D46  0008               	return
  4750                           
  4751                           ;Buzzer.c: 41: count = time;
  4752  0D47  0020               	movlb	0	; select bank0
  4753  0D48  0821               	movf	Buzzer_MiliSecond@time+1,w
  4754  0D49  00F4               	movwf	_count+1
  4755  0D4A  0820               	movf	Buzzer_MiliSecond@time,w
  4756  0D4B  00F3               	movwf	_count
  4757  0D4C  0008               	return
  4758  0D4D                     __end_of_Buzzer_MiliSecond:	
  4759                           
  4760                           	psect	text10
  4761  0DC3                     __ptext10:	
  4762 ;; *************** function _Timer6_Init *****************
  4763 ;; Defined at:
  4764 ;;		line 3 in file "Timer6.c"
  4765 ;; Parameters:    Size  Location     Type
  4766 ;;		None
  4767 ;; Auto vars:     Size  Location     Type
  4768 ;;		None
  4769 ;; Return value:  Size  Location     Type
  4770 ;;                  1    wreg      void 
  4771 ;; Registers used:
  4772 ;;		wreg, status,2, status,0
  4773 ;; Tracked objects:
  4774 ;;		On entry : 0/0
  4775 ;;		On exit  : 0/0
  4776 ;;		Unchanged: 0/0
  4777 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  4778 ;;      Params:         0       0       0       0       0       0
  4779 ;;      Locals:         0       0       0       0       0       0
  4780 ;;      Temps:          0       1       0       0       0       0
  4781 ;;      Totals:         0       1       0       0       0       0
  4782 ;;Total ram usage:        1 bytes
  4783 ;; Hardware stack levels used:    1
  4784 ;; Hardware stack levels required when called:    3
  4785 ;; This function calls:
  4786 ;;		Nothing
  4787 ;; This function is called by:
  4788 ;;		_main
  4789 ;; This function uses a non-reentrant model
  4790 ;;
  4791                           
  4792                           
  4793                           ;psect for function _Timer6_Init
  4794  0DC3                     _Timer6_Init:	
  4795                           
  4796                           ;Timer6.c: 5: PR6 = 0x7D;
  4797                           
  4798                           ;incstack = 0
  4799                           ; Regs used in _Timer6_Init: [wreg+status,2+status,0]
  4800  0DC3  307D               	movlw	125
  4801  0DC4  0028               	movlb	8	; select bank8
  4802  0DC5  009D               	movwf	29	;volatile
  4803                           
  4804                           ;Timer6.c: 6: TMR6 = 0x00;
  4805  0DC6  019C               	clrf	28	;volatile
  4806                           
  4807                           ;Timer6.c: 7: T6CON |= (0x03<<0);
  4808  0DC7  3003               	movlw	3
  4809  0DC8  0020               	movlb	0	; select bank0
  4810  0DC9  00A0               	movwf	??_Timer6_Init
  4811  0DCA  0820               	movf	??_Timer6_Init,w
  4812  0DCB  0028               	movlb	8	; select bank8
  4813  0DCC  049E               	iorwf	30,f	;volatile
  4814                           
  4815                           ;Timer6.c: 8: T6CON |= (0x00<<3);
  4816  0DCD  081E               	movf	30,w	;volatile
  4817                           
  4818                           ;Timer6.c: 9: T6CON |= (0x01<<2);
  4819  0DCE  151E               	bsf	30,2	;volatile
  4820                           
  4821                           ;Timer6.c: 11: TMR6IF = 0;
  4822  0DCF  0020               	movlb	0	; select bank0
  4823  0DD0  1193               	bcf	19,3	;volatile
  4824                           
  4825                           ;Timer6.c: 12: TMR6IE = 1;
  4826  0DD1  0021               	movlb	1	; select bank1
  4827  0DD2  1593               	bsf	19,3	;volatile
  4828                           
  4829                           ;Timer6.c: 13: PEIE = 1;
  4830  0DD3  170B               	bsf	11,6	;volatile
  4831                           
  4832                           ;Timer6.c: 14: GIE = 1;
  4833  0DD4  178B               	bsf	11,7	;volatile
  4834  0DD5  0008               	return
  4835  0DD6                     __end_of_Timer6_Init:	
  4836                           
  4837                           	psect	text11
  4838  0D1D                     __ptext11:	
  4839 ;; *************** function _Timer1_StopCount *****************
  4840 ;; Defined at:
  4841 ;;		line 37 in file "Timer1.c"
  4842 ;; Parameters:    Size  Location     Type
  4843 ;;		None
  4844 ;; Auto vars:     Size  Location     Type
  4845 ;;		None
  4846 ;; Return value:  Size  Location     Type
  4847 ;;                  1    wreg      void 
  4848 ;; Registers used:
  4849 ;;		None
  4850 ;; Tracked objects:
  4851 ;;		On entry : 0/0
  4852 ;;		On exit  : 0/0
  4853 ;;		Unchanged: 0/0
  4854 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  4855 ;;      Params:         0       0       0       0       0       0
  4856 ;;      Locals:         0       0       0       0       0       0
  4857 ;;      Temps:          0       0       0       0       0       0
  4858 ;;      Totals:         0       0       0       0       0       0
  4859 ;;Total ram usage:        0 bytes
  4860 ;; Hardware stack levels used:    1
  4861 ;; Hardware stack levels required when called:    3
  4862 ;; This function calls:
  4863 ;;		Nothing
  4864 ;; This function is called by:
  4865 ;;		_main
  4866 ;; This function uses a non-reentrant model
  4867 ;;
  4868                           
  4869                           
  4870                           ;psect for function _Timer1_StopCount
  4871  0D1D                     _Timer1_StopCount:	
  4872                           
  4873                           ;Timer1.c: 39: TMR1ON = 0;
  4874                           
  4875                           ;incstack = 0
  4876                           ; Regs used in _Timer1_StopCount: []
  4877  0D1D  0020               	movlb	0	; select bank0
  4878  0D1E  1018               	bcf	24,0	;volatile
  4879  0D1F  0008               	return
  4880  0D20                     __end_of_Timer1_StopCount:	
  4881                           
  4882                           	psect	text12
  4883  0D20                     __ptext12:	
  4884 ;; *************** function _Timer1_StartCount *****************
  4885 ;; Defined at:
  4886 ;;		line 31 in file "Timer1.c"
  4887 ;; Parameters:    Size  Location     Type
  4888 ;;		None
  4889 ;; Auto vars:     Size  Location     Type
  4890 ;;		None
  4891 ;; Return value:  Size  Location     Type
  4892 ;;                  1    wreg      void 
  4893 ;; Registers used:
  4894 ;;		wreg, status,2, status,0, pclath, cstack
  4895 ;; Tracked objects:
  4896 ;;		On entry : 0/0
  4897 ;;		On exit  : 0/0
  4898 ;;		Unchanged: 0/0
  4899 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  4900 ;;      Params:         0       0       0       0       0       0
  4901 ;;      Locals:         0       0       0       0       0       0
  4902 ;;      Temps:          0       0       0       0       0       0
  4903 ;;      Totals:         0       0       0       0       0       0
  4904 ;;Total ram usage:        0 bytes
  4905 ;; Hardware stack levels used:    1
  4906 ;; Hardware stack levels required when called:    4
  4907 ;; This function calls:
  4908 ;;		_Timer1_ClearRecord
  4909 ;; This function is called by:
  4910 ;;		_main
  4911 ;; This function uses a non-reentrant model
  4912 ;;
  4913                           
  4914                           
  4915                           ;psect for function _Timer1_StartCount
  4916  0D20                     _Timer1_StartCount:	
  4917                           
  4918                           ;Timer1.c: 33: Timer1_ClearRecord();
  4919                           
  4920                           ;incstack = 0
  4921                           ; Regs used in _Timer1_StartCount: [wreg+status,2+status,0+pclath+cstack]
  4922  0D20  318D  25FE         	fcall	_Timer1_ClearRecord
  4923                           
  4924                           ;Timer1.c: 34: TMR1ON = 1;
  4925  0D22  0020               	movlb	0	; select bank0
  4926  0D23  1418               	bsf	24,0	;volatile
  4927  0D24  0008               	return
  4928  0D25                     __end_of_Timer1_StartCount:	
  4929                           
  4930                           	psect	text13
  4931  0DFE                     __ptext13:	
  4932 ;; *************** function _Timer1_ClearRecord *****************
  4933 ;; Defined at:
  4934 ;;		line 42 in file "Timer1.c"
  4935 ;; Parameters:    Size  Location     Type
  4936 ;;		None
  4937 ;; Auto vars:     Size  Location     Type
  4938 ;;		None
  4939 ;; Return value:  Size  Location     Type
  4940 ;;                  1    wreg      void 
  4941 ;; Registers used:
  4942 ;;		wreg, status,2
  4943 ;; Tracked objects:
  4944 ;;		On entry : 0/0
  4945 ;;		On exit  : 0/0
  4946 ;;		Unchanged: 0/0
  4947 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  4948 ;;      Params:         0       0       0       0       0       0
  4949 ;;      Locals:         0       0       0       0       0       0
  4950 ;;      Temps:          0       0       0       0       0       0
  4951 ;;      Totals:         0       0       0       0       0       0
  4952 ;;Total ram usage:        0 bytes
  4953 ;; Hardware stack levels used:    1
  4954 ;; Hardware stack levels required when called:    3
  4955 ;; This function calls:
  4956 ;;		Nothing
  4957 ;; This function is called by:
  4958 ;;		_Timer1_StartCount
  4959 ;;		_main
  4960 ;; This function uses a non-reentrant model
  4961 ;;
  4962                           
  4963                           
  4964                           ;psect for function _Timer1_ClearRecord
  4965  0DFE                     _Timer1_ClearRecord:	
  4966                           
  4967                           ;Timer1.c: 44: cnts.SigmaDeltaCount= 0;
  4968                           
  4969                           ;incstack = 0
  4970                           ; Regs used in _Timer1_ClearRecord: [wreg+status,2]
  4971  0DFE  3000               	movlw	0
  4972  0DFF  0021               	movlb	1	; select bank1
  4973  0E00  00C1               	movwf	(_cnts+3)^(0+128)
  4974  0E01  3000               	movlw	0
  4975  0E02  00C0               	movwf	(_cnts+2)^(0+128)
  4976  0E03  3000               	movlw	0
  4977  0E04  00BF               	movwf	(_cnts+1)^(0+128)
  4978  0E05  3000               	movlw	0
  4979  0E06  00BE               	movwf	_cnts^(0+128)
  4980                           
  4981                           ;Timer1.c: 45: tcnt.Delta_t = 0;
  4982  0E07  3000               	movlw	0
  4983  0E08  0020               	movlb	0	; select bank0
  4984  0E09  00E6               	movwf	_tcnt+5
  4985  0E0A  3000               	movlw	0
  4986  0E0B  00E5               	movwf	_tcnt+4
  4987  0E0C  3000               	movlw	0
  4988  0E0D  00E4               	movwf	_tcnt+3
  4989  0E0E  3000               	movlw	0
  4990  0E0F  00E3               	movwf	_tcnt+2
  4991                           
  4992                           ;Timer1.c: 46: tcnt.Second_t = 0;
  4993  0E10  01E1               	clrf	_tcnt
  4994                           
  4995                           ;Timer1.c: 47: tcnt.Minute_t = 0;
  4996  0E11  01E2               	clrf	_tcnt+1
  4997  0E12  0008               	return
  4998  0E13                     __end_of_Timer1_ClearRecord:	
  4999                           
  5000                           	psect	text14
  5001  0ED0                     __ptext14:	
  5002 ;; *************** function _Timer1_Init *****************
  5003 ;; Defined at:
  5004 ;;		line 6 in file "Timer1.c"
  5005 ;; Parameters:    Size  Location     Type
  5006 ;;		None
  5007 ;; Auto vars:     Size  Location     Type
  5008 ;;		None
  5009 ;; Return value:  Size  Location     Type
  5010 ;;                  1    wreg      void 
  5011 ;; Registers used:
  5012 ;;		wreg, status,2, status,0
  5013 ;; Tracked objects:
  5014 ;;		On entry : 0/0
  5015 ;;		On exit  : 0/0
  5016 ;;		Unchanged: 0/0
  5017 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  5018 ;;      Params:         0       0       0       0       0       0
  5019 ;;      Locals:         0       0       0       0       0       0
  5020 ;;      Temps:          0       1       0       0       0       0
  5021 ;;      Totals:         0       1       0       0       0       0
  5022 ;;Total ram usage:        1 bytes
  5023 ;; Hardware stack levels used:    1
  5024 ;; Hardware stack levels required when called:    3
  5025 ;; This function calls:
  5026 ;;		Nothing
  5027 ;; This function is called by:
  5028 ;;		_main
  5029 ;; This function uses a non-reentrant model
  5030 ;;
  5031                           
  5032                           
  5033                           ;psect for function _Timer1_Init
  5034  0ED0                     _Timer1_Init:	
  5035                           
  5036                           ;Timer1.c: 8: TRISB |= (1<<6);
  5037                           
  5038                           ;incstack = 0
  5039                           ; Regs used in _Timer1_Init: [wreg+status,2+status,0]
  5040  0ED0  0021               	movlb	1	; select bank1
  5041  0ED1  170D               	bsf	13,6	;volatile
  5042                           
  5043                           ;Timer1.c: 9: ANSELB &= ~(1<<6);
  5044  0ED2  30BF               	movlw	191
  5045  0ED3  0020               	movlb	0	; select bank0
  5046  0ED4  00A0               	movwf	??_Timer1_Init
  5047  0ED5  0820               	movf	??_Timer1_Init,w
  5048  0ED6  0023               	movlb	3	; select bank3
  5049  0ED7  058D               	andwf	13,f	;volatile
  5050                           
  5051                           ;Timer1.c: 10: WPUB |= (1<<6);
  5052  0ED8  0024               	movlb	4	; select bank4
  5053  0ED9  170D               	bsf	13,6	;volatile
  5054                           
  5055                           ;Timer1.c: 12: T1CON |= (0x01<<2);
  5056  0EDA  0020               	movlb	0	; select bank0
  5057  0EDB  1518               	bsf	24,2	;volatile
  5058                           
  5059                           ;Timer1.c: 13: T1CON &= ~(0x01<<3);
  5060  0EDC  30F7               	movlw	247
  5061  0EDD  00A0               	movwf	??_Timer1_Init
  5062  0EDE  0820               	movf	??_Timer1_Init,w
  5063  0EDF  0598               	andwf	24,f	;volatile
  5064                           
  5065                           ;Timer1.c: 14: T1CON |= (0x00<<4);
  5066  0EE0  0818               	movf	24,w	;volatile
  5067                           
  5068                           ;Timer1.c: 15: T1CON |= (0x02<<6);
  5069  0EE1  1798               	bsf	24,7	;volatile
  5070                           
  5071                           ;Timer1.c: 17: T1GCON = 0x00;
  5072  0EE2  0199               	clrf	25	;volatile
  5073                           
  5074                           ;Timer1.c: 19: {TMR1ON = 0; TMR1 = (uint16_t)0xFFFF - 10UL+1; TMR1ON = 1; };
  5075  0EE3  1018               	bcf	24,0	;volatile
  5076  0EE4  30FF               	movlw	255
  5077  0EE5  0097               	movwf	23	;volatile
  5078  0EE6  30F6               	movlw	246
  5079  0EE7  0096               	movwf	22	;volatile
  5080  0EE8  1418               	bsf	24,0	;volatile
  5081                           
  5082                           ;Timer1.c: 21: TMR1IF = 0;
  5083  0EE9  1011               	bcf	17,0	;volatile
  5084                           
  5085                           ;Timer1.c: 22: TMR1IE = 1;
  5086  0EEA  0021               	movlb	1	; select bank1
  5087  0EEB  1411               	bsf	17,0	;volatile
  5088                           
  5089                           ;Timer1.c: 23: PEIE = 1;
  5090  0EEC  170B               	bsf	11,6	;volatile
  5091                           
  5092                           ;Timer1.c: 24: GIE = 1;
  5093  0EED  178B               	bsf	11,7	;volatile
  5094                           
  5095                           ;Timer1.c: 26: TMR1ON = 0;
  5096  0EEE  0020               	movlb	0	; select bank0
  5097  0EEF  1018               	bcf	24,0	;volatile
  5098  0EF0  0008               	return
  5099  0EF1                     __end_of_Timer1_Init:	
  5100                           
  5101                           	psect	text15
  5102  0D1A                     __ptext15:	
  5103 ;; *************** function _Timer1_GetSecond *****************
  5104 ;; Defined at:
  5105 ;;		line 65 in file "Timer1.c"
  5106 ;; Parameters:    Size  Location     Type
  5107 ;;		None
  5108 ;; Auto vars:     Size  Location     Type
  5109 ;;		None
  5110 ;; Return value:  Size  Location     Type
  5111 ;;                  1    wreg      unsigned char 
  5112 ;; Registers used:
  5113 ;;		wreg
  5114 ;; Tracked objects:
  5115 ;;		On entry : 0/0
  5116 ;;		On exit  : 0/0
  5117 ;;		Unchanged: 0/0
  5118 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  5119 ;;      Params:         0       0       0       0       0       0
  5120 ;;      Locals:         0       0       0       0       0       0
  5121 ;;      Temps:          0       0       0       0       0       0
  5122 ;;      Totals:         0       0       0       0       0       0
  5123 ;;Total ram usage:        0 bytes
  5124 ;; Hardware stack levels used:    1
  5125 ;; Hardware stack levels required when called:    3
  5126 ;; This function calls:
  5127 ;;		Nothing
  5128 ;; This function is called by:
  5129 ;;		_main
  5130 ;; This function uses a non-reentrant model
  5131 ;;
  5132                           
  5133                           
  5134                           ;psect for function _Timer1_GetSecond
  5135  0D1A                     _Timer1_GetSecond:	
  5136                           
  5137                           ;Timer1.c: 67: return tcnt.Second_t;
  5138                           
  5139                           ;incstack = 0
  5140                           ; Regs used in _Timer1_GetSecond: [wreg]
  5141  0D1A  0020               	movlb	0	; select bank0
  5142  0D1B  0861               	movf	_tcnt,w
  5143  0D1C  0008               	return
  5144  0D1D                     __end_of_Timer1_GetSecond:	
  5145                           
  5146                           	psect	text16
  5147  0D17                     __ptext16:	
  5148 ;; *************** function _Timer1_GetMinute *****************
  5149 ;; Defined at:
  5150 ;;		line 70 in file "Timer1.c"
  5151 ;; Parameters:    Size  Location     Type
  5152 ;;		None
  5153 ;; Auto vars:     Size  Location     Type
  5154 ;;		None
  5155 ;; Return value:  Size  Location     Type
  5156 ;;                  1    wreg      unsigned char 
  5157 ;; Registers used:
  5158 ;;		wreg
  5159 ;; Tracked objects:
  5160 ;;		On entry : 0/0
  5161 ;;		On exit  : 0/0
  5162 ;;		Unchanged: 0/0
  5163 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  5164 ;;      Params:         0       0       0       0       0       0
  5165 ;;      Locals:         0       0       0       0       0       0
  5166 ;;      Temps:          0       0       0       0       0       0
  5167 ;;      Totals:         0       0       0       0       0       0
  5168 ;;Total ram usage:        0 bytes
  5169 ;; Hardware stack levels used:    1
  5170 ;; Hardware stack levels required when called:    3
  5171 ;; This function calls:
  5172 ;;		Nothing
  5173 ;; This function is called by:
  5174 ;;		_main
  5175 ;; This function uses a non-reentrant model
  5176 ;;
  5177                           
  5178                           
  5179                           ;psect for function _Timer1_GetMinute
  5180  0D17                     _Timer1_GetMinute:	
  5181                           
  5182                           ;Timer1.c: 72: return tcnt.Minute_t;
  5183                           
  5184                           ;incstack = 0
  5185                           ; Regs used in _Timer1_GetMinute: [wreg]
  5186  0D17  0020               	movlb	0	; select bank0
  5187  0D18  0862               	movf	_tcnt+1,w
  5188  0D19  0008               	return
  5189  0D1A                     __end_of_Timer1_GetMinute:	
  5190                           
  5191                           	psect	text17
  5192  0DB2                     __ptext17:	
  5193 ;; *************** function _Timer1_GetCountSum *****************
  5194 ;; Defined at:
  5195 ;;		line 50 in file "Timer1.c"
  5196 ;; Parameters:    Size  Location     Type
  5197 ;;		None
  5198 ;; Auto vars:     Size  Location     Type
  5199 ;;		None
  5200 ;; Return value:  Size  Location     Type
  5201 ;;                  4    0[BANK0 ] unsigned long 
  5202 ;; Registers used:
  5203 ;;		wreg
  5204 ;; Tracked objects:
  5205 ;;		On entry : 0/0
  5206 ;;		On exit  : 0/0
  5207 ;;		Unchanged: 0/0
  5208 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  5209 ;;      Params:         0       4       0       0       0       0
  5210 ;;      Locals:         0       0       0       0       0       0
  5211 ;;      Temps:          0       0       0       0       0       0
  5212 ;;      Totals:         0       4       0       0       0       0
  5213 ;;Total ram usage:        4 bytes
  5214 ;; Hardware stack levels used:    1
  5215 ;; Hardware stack levels required when called:    3
  5216 ;; This function calls:
  5217 ;;		Nothing
  5218 ;; This function is called by:
  5219 ;;		_main
  5220 ;; This function uses a non-reentrant model
  5221 ;;
  5222                           
  5223                           
  5224                           ;psect for function _Timer1_GetCountSum
  5225  0DB2                     _Timer1_GetCountSum:	
  5226                           
  5227                           ;Timer1.c: 52: return cnts.SigmaDeltaCount;
  5228                           
  5229                           ;incstack = 0
  5230                           ; Regs used in _Timer1_GetCountSum: [wreg]
  5231  0DB2  0021               	movlb	1	; select bank1
  5232  0DB3  0841               	movf	(_cnts+3)^(0+128),w
  5233  0DB4  0020               	movlb	0	; select bank0
  5234  0DB5  00A3               	movwf	?_Timer1_GetCountSum+3
  5235  0DB6  0021               	movlb	1	; select bank1
  5236  0DB7  0840               	movf	(_cnts+2)^(0+128),w
  5237  0DB8  0020               	movlb	0	; select bank0
  5238  0DB9  00A2               	movwf	?_Timer1_GetCountSum+2
  5239  0DBA  0021               	movlb	1	; select bank1
  5240  0DBB  083F               	movf	(_cnts+1)^(0+128),w
  5241  0DBC  0020               	movlb	0	; select bank0
  5242  0DBD  00A1               	movwf	?_Timer1_GetCountSum+1
  5243  0DBE  0021               	movlb	1	; select bank1
  5244  0DBF  083E               	movf	_cnts^(0+128),w
  5245  0DC0  0020               	movlb	0	; select bank0
  5246  0DC1  00A0               	movwf	?_Timer1_GetCountSum
  5247  0DC2  0008               	return
  5248  0DC3                     __end_of_Timer1_GetCountSum:	
  5249                           
  5250                           	psect	text18
  5251  0F3F                     __ptext18:	
  5252 ;; *************** function _Timer1_GetCPM *****************
  5253 ;; Defined at:
  5254 ;;		line 60 in file "Timer1.c"
  5255 ;; Parameters:    Size  Location     Type
  5256 ;;		None
  5257 ;; Auto vars:     Size  Location     Type
  5258 ;;		None
  5259 ;; Return value:  Size  Location     Type
  5260 ;;                  4   30[BANK0 ] unsigned long 
  5261 ;; Registers used:
  5262 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5263 ;; Tracked objects:
  5264 ;;		On entry : 0/0
  5265 ;;		On exit  : 0/0
  5266 ;;		Unchanged: 0/0
  5267 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  5268 ;;      Params:         0       4       0       0       0       0
  5269 ;;      Locals:         0       4       0       0       0       0
  5270 ;;      Temps:          0       0       0       0       0       0
  5271 ;;      Totals:         0       8       0       0       0       0
  5272 ;;Total ram usage:        8 bytes
  5273 ;; Hardware stack levels used:    1
  5274 ;; Hardware stack levels required when called:    5
  5275 ;; This function calls:
  5276 ;;		_Timer1_GetCPS
  5277 ;;		___lmul
  5278 ;; This function is called by:
  5279 ;;		_main
  5280 ;; This function uses a non-reentrant model
  5281 ;;
  5282                           
  5283                           
  5284                           ;psect for function _Timer1_GetCPM
  5285  0F3F                     _Timer1_GetCPM:	
  5286                           
  5287                           ;Timer1.c: 62: return (uint32_t)(Timer1_GetCPS()*60);
  5288                           
  5289                           ;incstack = 0
  5290                           ; Regs used in _Timer1_GetCPM: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5291  0F3F  3187  272B  318F   	fcall	_Timer1_GetCPS
  5292  0F42  0020               	movlb	0	; select bank0
  5293  0F43  083D               	movf	?_Timer1_GetCPS+3,w
  5294  0F44  00C5               	movwf	_Timer1_GetCPM$1067+3
  5295  0F45  083C               	movf	?_Timer1_GetCPS+2,w
  5296  0F46  00C4               	movwf	_Timer1_GetCPM$1067+2
  5297  0F47  083B               	movf	?_Timer1_GetCPS+1,w
  5298  0F48  00C3               	movwf	_Timer1_GetCPM$1067+1
  5299  0F49  083A               	movf	?_Timer1_GetCPS,w
  5300  0F4A  00C2               	movwf	_Timer1_GetCPM$1067
  5301                           
  5302                           ;Timer1.c: 62: return (uint32_t)(Timer1_GetCPS()*60);
  5303  0F4B  0845               	movf	_Timer1_GetCPM$1067+3,w
  5304  0F4C  00A3               	movwf	___lmul@multiplier+3
  5305  0F4D  0844               	movf	_Timer1_GetCPM$1067+2,w
  5306  0F4E  00A2               	movwf	___lmul@multiplier+2
  5307  0F4F  0843               	movf	_Timer1_GetCPM$1067+1,w
  5308  0F50  00A1               	movwf	___lmul@multiplier+1
  5309  0F51  0842               	movf	_Timer1_GetCPM$1067,w
  5310  0F52  00A0               	movwf	___lmul@multiplier
  5311  0F53  3000               	movlw	0
  5312  0F54  00A7               	movwf	___lmul@multiplicand+3
  5313  0F55  3000               	movlw	0
  5314  0F56  00A6               	movwf	___lmul@multiplicand+2
  5315  0F57  3000               	movlw	0
  5316  0F58  00A5               	movwf	___lmul@multiplicand+1
  5317  0F59  303C               	movlw	60
  5318  0F5A  00A4               	movwf	___lmul@multiplicand
  5319  0F5B  318F  2796         	fcall	___lmul
  5320  0F5D  0020               	movlb	0	; select bank0
  5321  0F5E  0823               	movf	?___lmul+3,w
  5322  0F5F  00C1               	movwf	?_Timer1_GetCPM+3
  5323  0F60  0822               	movf	?___lmul+2,w
  5324  0F61  00C0               	movwf	?_Timer1_GetCPM+2
  5325  0F62  0821               	movf	?___lmul+1,w
  5326  0F63  00BF               	movwf	?_Timer1_GetCPM+1
  5327  0F64  0820               	movf	?___lmul,w
  5328  0F65  00BE               	movwf	?_Timer1_GetCPM
  5329  0F66  0008               	return
  5330  0F67                     __end_of_Timer1_GetCPM:	
  5331                           
  5332                           	psect	text19
  5333  072B                     __ptext19:	
  5334 ;; *************** function _Timer1_GetCPS *****************
  5335 ;; Defined at:
  5336 ;;		line 55 in file "Timer1.c"
  5337 ;; Parameters:    Size  Location     Type
  5338 ;;		None
  5339 ;; Auto vars:     Size  Location     Type
  5340 ;;		None
  5341 ;; Return value:  Size  Location     Type
  5342 ;;                  4   26[BANK0 ] unsigned long 
  5343 ;; Registers used:
  5344 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5345 ;; Tracked objects:
  5346 ;;		On entry : 0/0
  5347 ;;		On exit  : 0/0
  5348 ;;		Unchanged: 0/0
  5349 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  5350 ;;      Params:         0       4       0       0       0       0
  5351 ;;      Locals:         0       0       0       0       0       0
  5352 ;;      Temps:          0       0       0       0       0       0
  5353 ;;      Totals:         0       4       0       0       0       0
  5354 ;;Total ram usage:        4 bytes
  5355 ;; Hardware stack levels used:    1
  5356 ;; Hardware stack levels required when called:    4
  5357 ;; This function calls:
  5358 ;;		___lldiv
  5359 ;;		___lmul
  5360 ;; This function is called by:
  5361 ;;		_Timer1_GetCPM
  5362 ;;		_main
  5363 ;; This function uses a non-reentrant model
  5364 ;;
  5365                           
  5366                           
  5367                           ;psect for function _Timer1_GetCPS
  5368  072B                     _Timer1_GetCPS:	
  5369                           
  5370                           ;Timer1.c: 57: return (uint32_t)((cnts.SigmaDeltaCount * 1000UL)/tcnt.Delta_t);
  5371                           
  5372                           ;incstack = 0
  5373                           ; Regs used in _Timer1_GetCPS: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5374  072B  3002               	movlw	2
  5375  072C  3E61               	addlw	(low (_tcnt| 0))& (0+255)
  5376  072D  0086               	movwf	6
  5377  072E  0187               	clrf	7
  5378  072F  3F40               	moviw [0]fsr1
  5379  0730  0020               	movlb	0	; select bank0
  5380  0731  00AC               	movwf	___lldiv@divisor
  5381  0732  3F41               	moviw [1]fsr1
  5382  0733  00AD               	movwf	___lldiv@divisor+1
  5383  0734  3F42               	moviw [2]fsr1
  5384  0735  00AE               	movwf	___lldiv@divisor+2
  5385  0736  3F43               	moviw [3]fsr1
  5386  0737  00AF               	movwf	___lldiv@divisor+3
  5387  0738  0021               	movlb	1	; select bank1
  5388  0739  0841               	movf	(_cnts+3)^(0+128),w
  5389  073A  0020               	movlb	0	; select bank0
  5390  073B  00A3               	movwf	___lmul@multiplier+3
  5391  073C  0021               	movlb	1	; select bank1
  5392  073D  0840               	movf	(_cnts+2)^(0+128),w
  5393  073E  0020               	movlb	0	; select bank0
  5394  073F  00A2               	movwf	___lmul@multiplier+2
  5395  0740  0021               	movlb	1	; select bank1
  5396  0741  083F               	movf	(_cnts+1)^(0+128),w
  5397  0742  0020               	movlb	0	; select bank0
  5398  0743  00A1               	movwf	___lmul@multiplier+1
  5399  0744  0021               	movlb	1	; select bank1
  5400  0745  083E               	movf	_cnts^(0+128),w
  5401  0746  0020               	movlb	0	; select bank0
  5402  0747  00A0               	movwf	___lmul@multiplier
  5403  0748  3000               	movlw	0
  5404  0749  00A7               	movwf	___lmul@multiplicand+3
  5405  074A  3000               	movlw	0
  5406  074B  00A6               	movwf	___lmul@multiplicand+2
  5407  074C  3003               	movlw	3
  5408  074D  00A5               	movwf	___lmul@multiplicand+1
  5409  074E  30E8               	movlw	232
  5410  074F  00A4               	movwf	___lmul@multiplicand
  5411  0750  318F  2796  3187   	fcall	___lmul
  5412  0753  0020               	movlb	0	; select bank0
  5413  0754  0823               	movf	?___lmul+3,w
  5414  0755  00B3               	movwf	___lldiv@dividend+3
  5415  0756  0822               	movf	?___lmul+2,w
  5416  0757  00B2               	movwf	___lldiv@dividend+2
  5417  0758  0821               	movf	?___lmul+1,w
  5418  0759  00B1               	movwf	___lldiv@dividend+1
  5419  075A  0820               	movf	?___lmul,w
  5420  075B  00B0               	movwf	___lldiv@dividend
  5421  075C  3186  2606         	fcall	___lldiv
  5422  075E  0020               	movlb	0	; select bank0
  5423  075F  082F               	movf	?___lldiv+3,w
  5424  0760  00BD               	movwf	?_Timer1_GetCPS+3
  5425  0761  082E               	movf	?___lldiv+2,w
  5426  0762  00BC               	movwf	?_Timer1_GetCPS+2
  5427  0763  082D               	movf	?___lldiv+1,w
  5428  0764  00BB               	movwf	?_Timer1_GetCPS+1
  5429  0765  082C               	movf	?___lldiv,w
  5430  0766  00BA               	movwf	?_Timer1_GetCPS
  5431  0767  0008               	return
  5432  0768                     __end_of_Timer1_GetCPS:	
  5433                           
  5434                           	psect	text20
  5435  0F96                     __ptext20:	
  5436 ;; *************** function ___lmul *****************
  5437 ;; Defined at:
  5438 ;;		line 15 in file "/opt/microchip/xc8/v1.41/sources/common/Umul32.c"
  5439 ;; Parameters:    Size  Location     Type
  5440 ;;  multiplier      4    0[BANK0 ] unsigned long 
  5441 ;;  multiplicand    4    4[BANK0 ] unsigned long 
  5442 ;; Auto vars:     Size  Location     Type
  5443 ;;  product         4    8[BANK0 ] unsigned long 
  5444 ;; Return value:  Size  Location     Type
  5445 ;;                  4    0[BANK0 ] unsigned long 
  5446 ;; Registers used:
  5447 ;;		wreg, status,2, status,0
  5448 ;; Tracked objects:
  5449 ;;		On entry : 0/0
  5450 ;;		On exit  : 0/0
  5451 ;;		Unchanged: 0/0
  5452 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  5453 ;;      Params:         0       8       0       0       0       0
  5454 ;;      Locals:         0       4       0       0       0       0
  5455 ;;      Temps:          0       0       0       0       0       0
  5456 ;;      Totals:         0      12       0       0       0       0
  5457 ;;Total ram usage:       12 bytes
  5458 ;; Hardware stack levels used:    1
  5459 ;; Hardware stack levels required when called:    3
  5460 ;; This function calls:
  5461 ;;		Nothing
  5462 ;; This function is called by:
  5463 ;;		_Timer1_GetCPS
  5464 ;;		_Timer1_GetCPM
  5465 ;; This function uses a non-reentrant model
  5466 ;;
  5467                           
  5468                           
  5469                           ;psect for function ___lmul
  5470  0F96                     ___lmul:	
  5471                           
  5472                           ;incstack = 0
  5473                           ; Regs used in ___lmul: [wreg+status,2+status,0]
  5474  0F96  3000               	movlw	0
  5475  0F97  0020               	movlb	0	; select bank0
  5476  0F98  00AB               	movwf	___lmul@product+3
  5477  0F99  3000               	movlw	0
  5478  0F9A  00AA               	movwf	___lmul@product+2
  5479  0F9B  3000               	movlw	0
  5480  0F9C  00A9               	movwf	___lmul@product+1
  5481  0F9D  3000               	movlw	0
  5482  0F9E  00A8               	movwf	___lmul@product
  5483  0F9F                     l2983:	
  5484  0F9F  1C20               	btfss	___lmul@multiplier,0
  5485  0FA0  2FA9               	goto	l2987
  5486  0FA1  0824               	movf	___lmul@multiplicand,w
  5487  0FA2  07A8               	addwf	___lmul@product,f
  5488  0FA3  0825               	movf	___lmul@multiplicand+1,w
  5489  0FA4  3DA9               	addwfc	___lmul@product+1,f
  5490  0FA5  0826               	movf	___lmul@multiplicand+2,w
  5491  0FA6  3DAA               	addwfc	___lmul@product+2,f
  5492  0FA7  0827               	movf	___lmul@multiplicand+3,w
  5493  0FA8  3DAB               	addwfc	___lmul@product+3,f
  5494  0FA9                     l2987:	
  5495  0FA9  3001               	movlw	1
  5496  0FAA                     u2505:	
  5497  0FAA  35A4               	lslf	___lmul@multiplicand,f
  5498  0FAB  0DA5               	rlf	___lmul@multiplicand+1,f
  5499  0FAC  0DA6               	rlf	___lmul@multiplicand+2,f
  5500  0FAD  0DA7               	rlf	___lmul@multiplicand+3,f
  5501  0FAE  0B89               	decfsz	9,f
  5502  0FAF  2FAA               	goto	u2505
  5503  0FB0  3001               	movlw	1
  5504  0FB1                     u2515:	
  5505  0FB1  36A3               	lsrf	___lmul@multiplier+3,f
  5506  0FB2  0CA2               	rrf	___lmul@multiplier+2,f
  5507  0FB3  0CA1               	rrf	___lmul@multiplier+1,f
  5508  0FB4  0CA0               	rrf	___lmul@multiplier,f
  5509  0FB5  0B89               	decfsz	9,f
  5510  0FB6  2FB1               	goto	u2515
  5511  0FB7  0823               	movf	___lmul@multiplier+3,w
  5512  0FB8  0422               	iorwf	___lmul@multiplier+2,w
  5513  0FB9  0421               	iorwf	___lmul@multiplier+1,w
  5514  0FBA  0420               	iorwf	___lmul@multiplier,w
  5515  0FBB  1D03               	skipz
  5516  0FBC  2F9F               	goto	l2983
  5517  0FBD  082B               	movf	___lmul@product+3,w
  5518  0FBE  00A3               	movwf	?___lmul+3
  5519  0FBF  082A               	movf	___lmul@product+2,w
  5520  0FC0  00A2               	movwf	?___lmul+2
  5521  0FC1  0829               	movf	___lmul@product+1,w
  5522  0FC2  00A1               	movwf	?___lmul+1
  5523  0FC3  0828               	movf	___lmul@product,w
  5524  0FC4  00A0               	movwf	?___lmul
  5525  0FC5  0008               	return
  5526  0FC6                     __end_of___lmul:	
  5527                           
  5528                           	psect	text21
  5529  0606                     __ptext21:	
  5530 ;; *************** function ___lldiv *****************
  5531 ;; Defined at:
  5532 ;;		line 6 in file "/opt/microchip/xc8/v1.41/sources/common/lldiv.c"
  5533 ;; Parameters:    Size  Location     Type
  5534 ;;  divisor         4   12[BANK0 ] unsigned long 
  5535 ;;  dividend        4   16[BANK0 ] unsigned long 
  5536 ;; Auto vars:     Size  Location     Type
  5537 ;;  quotient        4   21[BANK0 ] unsigned long 
  5538 ;;  counter         1   25[BANK0 ] unsigned char 
  5539 ;; Return value:  Size  Location     Type
  5540 ;;                  4   12[BANK0 ] unsigned long 
  5541 ;; Registers used:
  5542 ;;		wreg, status,2, status,0
  5543 ;; Tracked objects:
  5544 ;;		On entry : 0/0
  5545 ;;		On exit  : 0/0
  5546 ;;		Unchanged: 0/0
  5547 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  5548 ;;      Params:         0       8       0       0       0       0
  5549 ;;      Locals:         0       5       0       0       0       0
  5550 ;;      Temps:          0       1       0       0       0       0
  5551 ;;      Totals:         0      14       0       0       0       0
  5552 ;;Total ram usage:       14 bytes
  5553 ;; Hardware stack levels used:    1
  5554 ;; Hardware stack levels required when called:    3
  5555 ;; This function calls:
  5556 ;;		Nothing
  5557 ;; This function is called by:
  5558 ;;		_Timer1_GetCPS
  5559 ;;		_printf
  5560 ;; This function uses a non-reentrant model
  5561 ;;
  5562                           
  5563                           
  5564                           ;psect for function ___lldiv
  5565  0606                     ___lldiv:	
  5566                           
  5567                           ;incstack = 0
  5568                           ; Regs used in ___lldiv: [wreg+status,2+status,0]
  5569  0606  3000               	movlw	0
  5570  0607  0020               	movlb	0	; select bank0
  5571  0608  00B8               	movwf	___lldiv@quotient+3
  5572  0609  3000               	movlw	0
  5573  060A  00B7               	movwf	___lldiv@quotient+2
  5574  060B  3000               	movlw	0
  5575  060C  00B6               	movwf	___lldiv@quotient+1
  5576  060D  3000               	movlw	0
  5577  060E  00B5               	movwf	___lldiv@quotient
  5578  060F  082F               	movf	___lldiv@divisor+3,w
  5579  0610  042E               	iorwf	___lldiv@divisor+2,w
  5580  0611  042D               	iorwf	___lldiv@divisor+1,w
  5581  0612  042C               	iorwf	___lldiv@divisor,w
  5582  0613  1903               	skipnz
  5583  0614  2E50               	goto	l3015
  5584  0615  01B9               	clrf	___lldiv@counter
  5585  0616  0AB9               	incf	___lldiv@counter,f
  5586  0617                     l3001:	
  5587  0617  1BAF               	btfsc	___lldiv@divisor+3,7
  5588  0618  2E25               	goto	l3003
  5589  0619  3001               	movlw	1
  5590  061A                     u2545:	
  5591  061A  35AC               	lslf	___lldiv@divisor,f
  5592  061B  0DAD               	rlf	___lldiv@divisor+1,f
  5593  061C  0DAE               	rlf	___lldiv@divisor+2,f
  5594  061D  0DAF               	rlf	___lldiv@divisor+3,f
  5595  061E  0B89               	decfsz	9,f
  5596  061F  2E1A               	goto	u2545
  5597  0620  3001               	movlw	1
  5598  0621  00B4               	movwf	??___lldiv
  5599  0622  0834               	movf	??___lldiv,w
  5600  0623  07B9               	addwf	___lldiv@counter,f
  5601  0624  2E17               	goto	l3001
  5602  0625                     l3003:	
  5603  0625  3001               	movlw	1
  5604  0626                     u2565:	
  5605  0626  35B5               	lslf	___lldiv@quotient,f
  5606  0627  0DB6               	rlf	___lldiv@quotient+1,f
  5607  0628  0DB7               	rlf	___lldiv@quotient+2,f
  5608  0629  0DB8               	rlf	___lldiv@quotient+3,f
  5609  062A  0B89               	decfsz	9,f
  5610  062B  2E26               	goto	u2565
  5611  062C  082F               	movf	___lldiv@divisor+3,w
  5612  062D  0233               	subwf	___lldiv@dividend+3,w
  5613  062E  1D03               	skipz
  5614  062F  2E3A               	goto	u2575
  5615  0630  082E               	movf	___lldiv@divisor+2,w
  5616  0631  0232               	subwf	___lldiv@dividend+2,w
  5617  0632  1D03               	skipz
  5618  0633  2E3A               	goto	u2575
  5619  0634  082D               	movf	___lldiv@divisor+1,w
  5620  0635  0231               	subwf	___lldiv@dividend+1,w
  5621  0636  1D03               	skipz
  5622  0637  2E3A               	goto	u2575
  5623  0638  082C               	movf	___lldiv@divisor,w
  5624  0639  0230               	subwf	___lldiv@dividend,w
  5625  063A                     u2575:	
  5626  063A  1C03               	skipc
  5627  063B  2E45               	goto	l3011
  5628  063C  082C               	movf	___lldiv@divisor,w
  5629  063D  02B0               	subwf	___lldiv@dividend,f
  5630  063E  082D               	movf	___lldiv@divisor+1,w
  5631  063F  3BB1               	subwfb	___lldiv@dividend+1,f
  5632  0640  082E               	movf	___lldiv@divisor+2,w
  5633  0641  3BB2               	subwfb	___lldiv@dividend+2,f
  5634  0642  082F               	movf	___lldiv@divisor+3,w
  5635  0643  3BB3               	subwfb	___lldiv@dividend+3,f
  5636  0644  1435               	bsf	___lldiv@quotient,0
  5637  0645                     l3011:	
  5638  0645  3001               	movlw	1
  5639  0646                     u2585:	
  5640  0646  36AF               	lsrf	___lldiv@divisor+3,f
  5641  0647  0CAE               	rrf	___lldiv@divisor+2,f
  5642  0648  0CAD               	rrf	___lldiv@divisor+1,f
  5643  0649  0CAC               	rrf	___lldiv@divisor,f
  5644  064A  0B89               	decfsz	9,f
  5645  064B  2E46               	goto	u2585
  5646  064C  3001               	movlw	1
  5647  064D  02B9               	subwf	___lldiv@counter,f
  5648  064E  1D03               	btfss	3,2
  5649  064F  2E25               	goto	l3003
  5650  0650                     l3015:	
  5651  0650  0838               	movf	___lldiv@quotient+3,w
  5652  0651  00AF               	movwf	?___lldiv+3
  5653  0652  0837               	movf	___lldiv@quotient+2,w
  5654  0653  00AE               	movwf	?___lldiv+2
  5655  0654  0836               	movf	___lldiv@quotient+1,w
  5656  0655  00AD               	movwf	?___lldiv+1
  5657  0656  0835               	movf	___lldiv@quotient,w
  5658  0657  00AC               	movwf	?___lldiv
  5659  0658  0008               	return
  5660  0659                     __end_of___lldiv:	
  5661                           
  5662                           	psect	text22
  5663  0543                     __ptext22:	
  5664 ;; *************** function _LCD_Init *****************
  5665 ;; Defined at:
  5666 ;;		line 28 in file "LCD.c"
  5667 ;; Parameters:    Size  Location     Type
  5668 ;;		None
  5669 ;; Auto vars:     Size  Location     Type
  5670 ;;		None
  5671 ;; Return value:  Size  Location     Type
  5672 ;;                  1    wreg      void 
  5673 ;; Registers used:
  5674 ;;		wreg, status,2, status,0, pclath, cstack
  5675 ;; Tracked objects:
  5676 ;;		On entry : 0/0
  5677 ;;		On exit  : 0/0
  5678 ;;		Unchanged: 0/0
  5679 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  5680 ;;      Params:         0       0       0       0       0       0
  5681 ;;      Locals:         0       0       0       0       0       0
  5682 ;;      Temps:          0       2       0       0       0       0
  5683 ;;      Totals:         0       2       0       0       0       0
  5684 ;;Total ram usage:        2 bytes
  5685 ;; Hardware stack levels used:    1
  5686 ;; Hardware stack levels required when called:    5
  5687 ;; This function calls:
  5688 ;;		_LCD_DisplayClear
  5689 ;;		_LCD_WriteData
  5690 ;; This function is called by:
  5691 ;;		_main
  5692 ;; This function uses a non-reentrant model
  5693 ;;
  5694                           
  5695                           
  5696                           ;psect for function _LCD_Init
  5697  0543                     _LCD_Init:	
  5698                           
  5699                           ;LCD.c: 30: LATA3 = 0;
  5700                           
  5701                           ;incstack = 0
  5702                           ; Regs used in _LCD_Init: [wreg+status,2+status,0+pclath+cstack]
  5703  0543  0022               	movlb	2	; select bank2
  5704  0544  118C               	bcf	12,3	;volatile
  5705                           
  5706                           ;LCD.c: 31: LATA4 = 0;
  5707  0545  120C               	bcf	12,4	;volatile
  5708                           
  5709                           ;LCD.c: 33: _delay((unsigned long)((30)*(32000000/4000.0)));
  5710  0546  3002               	movlw	2
  5711  0547  0020               	movlb	0	; select bank0
  5712  0548  00A5               	movwf	??_LCD_Init+1
  5713  0549  3038               	movlw	56
  5714  054A  00A4               	movwf	??_LCD_Init
  5715  054B  30AD               	movlw	173
  5716  054C                     u3097:	
  5717  054C  0B89               	decfsz	9,f
  5718  054D  2D4C               	goto	u3097
  5719  054E  0BA4               	decfsz	??_LCD_Init,f
  5720  054F  2D4C               	goto	u3097
  5721  0550  0BA5               	decfsz	??_LCD_Init+1,f
  5722  0551  2D4C               	goto	u3097
  5723                           
  5724                           ;LCD.c: 34: PORTB = ( ((0x03&0x0C)<<1)|(0x03&0x03) );
  5725  0552  3003               	movlw	3
  5726  0553  0020               	movlb	0	; select bank0
  5727  0554  008D               	movwf	13	;volatile
  5728                           
  5729                           ;LCD.c: 35: {LATA4 = 1; _delay((unsigned long)((1)*(32000000/4000000.0))); LATA4 = 0; _d
      +                          elay((unsigned long)((1)*(32000000/4000000.0)));};
  5730  0555  0022               	movlb	2	; select bank2
  5731  0556  160C               	bsf	12,4	;volatile
  5732  0557  3200               	nop2	;2 cycle nop
  5733  0558  3200               	nop2	;2 cycle nop
  5734  0559  3200               	nop2	;2 cycle nop
  5735  055A  3200               	nop2	;2 cycle nop
  5736  055B  0022               	movlb	2	; select bank2
  5737  055C  120C               	bcf	12,4	;volatile
  5738  055D  3200               	nop2	;2 cycle nop
  5739  055E  3200               	nop2	;2 cycle nop
  5740  055F  3200               	nop2	;2 cycle nop
  5741  0560  3200               	nop2	;2 cycle nop
  5742                           
  5743                           ;LCD.c: 36: _delay((unsigned long)((5)*(32000000/4000.0)));
  5744  0561  3034               	movlw	52
  5745  0562  0020               	movlb	0	; select bank0
  5746  0563  00A4               	movwf	??_LCD_Init
  5747  0564  30F1               	movlw	241
  5748  0565                     u3107:	
  5749  0565  0B89               	decfsz	9,f
  5750  0566  2D65               	goto	u3107
  5751  0567  0BA4               	decfsz	??_LCD_Init,f
  5752  0568  2D65               	goto	u3107
  5753  0569  3200               	nop2
  5754                           
  5755                           ;LCD.c: 37: {LATA4 = 1; _delay((unsigned long)((1)*(32000000/4000000.0))); LATA4 = 0; _d
      +                          elay((unsigned long)((1)*(32000000/4000000.0)));};
  5756  056A  0022               	movlb	2	; select bank2
  5757  056B  160C               	bsf	12,4	;volatile
  5758  056C  3200               	nop2	;2 cycle nop
  5759  056D  3200               	nop2	;2 cycle nop
  5760  056E  3200               	nop2	;2 cycle nop
  5761  056F  3200               	nop2	;2 cycle nop
  5762  0570  0022               	movlb	2	; select bank2
  5763  0571  120C               	bcf	12,4	;volatile
  5764  0572  3200               	nop2	;2 cycle nop
  5765  0573  3200               	nop2	;2 cycle nop
  5766  0574  3200               	nop2	;2 cycle nop
  5767  0575  3200               	nop2	;2 cycle nop
  5768                           
  5769                           ;LCD.c: 38: _delay((unsigned long)((400)*(32000000/4000000.0)));
  5770  0576  3005               	movlw	5
  5771  0577  0020               	movlb	0	; select bank0
  5772  0578  00A4               	movwf	??_LCD_Init
  5773  0579  3026               	movlw	38
  5774  057A                     u3117:	
  5775  057A  0B89               	decfsz	9,f
  5776  057B  2D7A               	goto	u3117
  5777  057C  0BA4               	decfsz	??_LCD_Init,f
  5778  057D  2D7A               	goto	u3117
  5779  057E  0000               	nop
  5780                           
  5781                           ;LCD.c: 39: {LATA4 = 1; _delay((unsigned long)((1)*(32000000/4000000.0))); LATA4 = 0; _d
      +                          elay((unsigned long)((1)*(32000000/4000000.0)));};
  5782  057F  0022               	movlb	2	; select bank2
  5783  0580  160C               	bsf	12,4	;volatile
  5784  0581  3200               	nop2	;2 cycle nop
  5785  0582  3200               	nop2	;2 cycle nop
  5786  0583  3200               	nop2	;2 cycle nop
  5787  0584  3200               	nop2	;2 cycle nop
  5788  0585  0022               	movlb	2	; select bank2
  5789  0586  120C               	bcf	12,4	;volatile
  5790  0587  3200               	nop2	;2 cycle nop
  5791  0588  3200               	nop2	;2 cycle nop
  5792  0589  3200               	nop2	;2 cycle nop
  5793  058A  3200               	nop2	;2 cycle nop
  5794                           
  5795                           ;LCD.c: 40: _delay((unsigned long)((400)*(32000000/4000000.0)));
  5796  058B  3005               	movlw	5
  5797  058C  0020               	movlb	0	; select bank0
  5798  058D  00A4               	movwf	??_LCD_Init
  5799  058E  3026               	movlw	38
  5800  058F                     u3127:	
  5801  058F  0B89               	decfsz	9,f
  5802  0590  2D8F               	goto	u3127
  5803  0591  0BA4               	decfsz	??_LCD_Init,f
  5804  0592  2D8F               	goto	u3127
  5805  0593  0000               	nop
  5806                           
  5807                           ;LCD.c: 41: PORTB = ( ((0x02&0x0C)<<1)|(0x02&0x03) );
  5808  0594  3002               	movlw	2
  5809  0595  0020               	movlb	0	; select bank0
  5810  0596  008D               	movwf	13	;volatile
  5811                           
  5812                           ;LCD.c: 42: {LATA4 = 1; _delay((unsigned long)((1)*(32000000/4000000.0))); LATA4 = 0; _d
      +                          elay((unsigned long)((1)*(32000000/4000000.0)));};
  5813  0597  0022               	movlb	2	; select bank2
  5814  0598  160C               	bsf	12,4	;volatile
  5815  0599  3200               	nop2	;2 cycle nop
  5816  059A  3200               	nop2	;2 cycle nop
  5817  059B  3200               	nop2	;2 cycle nop
  5818  059C  3200               	nop2	;2 cycle nop
  5819  059D  0022               	movlb	2	; select bank2
  5820  059E  120C               	bcf	12,4	;volatile
  5821  059F  3200               	nop2	;2 cycle nop
  5822  05A0  3200               	nop2	;2 cycle nop
  5823  05A1  3200               	nop2	;2 cycle nop
  5824  05A2  3200               	nop2	;2 cycle nop
  5825                           
  5826                           ;LCD.c: 44: LCD_WriteData(0x28);
  5827  05A3  3028               	movlw	40
  5828  05A4  3187  2768  3185   	fcall	_LCD_WriteData
  5829                           
  5830                           ;LCD.c: 45: LCD_WriteData(0x0c);
  5831  05A7  300C               	movlw	12
  5832  05A8  3187  2768  3185   	fcall	_LCD_WriteData
  5833                           
  5834                           ;LCD.c: 46: LCD_DisplayClear();
  5835  05AB  318D  2591  3185   	fcall	_LCD_DisplayClear
  5836                           
  5837                           ;LCD.c: 47: LCD_WriteData(0x06);
  5838  05AE  3006               	movlw	6
  5839  05AF  3187  2768         	fcall	_LCD_WriteData
  5840  05B1  0008               	return
  5841  05B2                     __end_of_LCD_Init:	
  5842                           
  5843                           	psect	text23
  5844  0D91                     __ptext23:	
  5845 ;; *************** function _LCD_DisplayClear *****************
  5846 ;; Defined at:
  5847 ;;		line 73 in file "LCD.c"
  5848 ;; Parameters:    Size  Location     Type
  5849 ;;		None
  5850 ;; Auto vars:     Size  Location     Type
  5851 ;;		None
  5852 ;; Return value:  Size  Location     Type
  5853 ;;                  1    wreg      void 
  5854 ;; Registers used:
  5855 ;;		wreg, status,2, status,0, pclath, cstack
  5856 ;; Tracked objects:
  5857 ;;		On entry : 0/0
  5858 ;;		On exit  : 0/0
  5859 ;;		Unchanged: 0/0
  5860 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  5861 ;;      Params:         0       0       0       0       0       0
  5862 ;;      Locals:         0       0       0       0       0       0
  5863 ;;      Temps:          0       1       0       0       0       0
  5864 ;;      Totals:         0       1       0       0       0       0
  5865 ;;Total ram usage:        1 bytes
  5866 ;; Hardware stack levels used:    1
  5867 ;; Hardware stack levels required when called:    4
  5868 ;; This function calls:
  5869 ;;		_LCD_WriteData
  5870 ;; This function is called by:
  5871 ;;		_LCD_Init
  5872 ;;		_main
  5873 ;; This function uses a non-reentrant model
  5874 ;;
  5875                           
  5876                           
  5877                           ;psect for function _LCD_DisplayClear
  5878  0D91                     _LCD_DisplayClear:	
  5879                           
  5880                           ;LCD.c: 75: LATA3 = 0;
  5881                           
  5882                           ;incstack = 0
  5883                           ; Regs used in _LCD_DisplayClear: [wreg+status,2+status,0+pclath+cstack]
  5884  0D91  0022               	movlb	2	; select bank2
  5885  0D92  118C               	bcf	12,3	;volatile
  5886                           
  5887                           ;LCD.c: 76: LCD_WriteData(0x01);
  5888  0D93  3001               	movlw	1
  5889  0D94  3187  2768  318D   	fcall	_LCD_WriteData
  5890                           
  5891                           ;LCD.c: 77: _delay((unsigned long)((2)*(32000000/4000.0)));
  5892  0D97  3015               	movlw	21
  5893  0D98  0020               	movlb	0	; select bank0
  5894  0D99  00A3               	movwf	??_LCD_DisplayClear
  5895  0D9A  30C6               	movlw	198
  5896  0D9B                     u3137:	
  5897  0D9B  0B89               	decfsz	9,f
  5898  0D9C  2D9B               	goto	u3137
  5899  0D9D  0BA3               	decfsz	??_LCD_DisplayClear,f
  5900  0D9E  2D9B               	goto	u3137
  5901  0D9F  0000               	nop
  5902  0DA0  0008               	return
  5903  0DA1                     __end_of_LCD_DisplayClear:	
  5904                           
  5905                           	psect	text24
  5906  0E13                     __ptext24:	
  5907 ;; *************** function _LCD_CursorPosition *****************
  5908 ;; Defined at:
  5909 ;;		line 95 in file "LCD.c"
  5910 ;; Parameters:    Size  Location     Type
  5911 ;;  tx              1    wreg     unsigned char 
  5912 ;;  ty              1    3[BANK0 ] unsigned char 
  5913 ;; Auto vars:     Size  Location     Type
  5914 ;;  tx              1    5[BANK0 ] unsigned char 
  5915 ;; Return value:  Size  Location     Type
  5916 ;;                  1    wreg      void 
  5917 ;; Registers used:
  5918 ;;		wreg, status,2, status,0, pclath, cstack
  5919 ;; Tracked objects:
  5920 ;;		On entry : 0/0
  5921 ;;		On exit  : 0/0
  5922 ;;		Unchanged: 0/0
  5923 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  5924 ;;      Params:         0       1       0       0       0       0
  5925 ;;      Locals:         0       1       0       0       0       0
  5926 ;;      Temps:          0       1       0       0       0       0
  5927 ;;      Totals:         0       3       0       0       0       0
  5928 ;;Total ram usage:        3 bytes
  5929 ;; Hardware stack levels used:    1
  5930 ;; Hardware stack levels required when called:    4
  5931 ;; This function calls:
  5932 ;;		_LCD_WriteData
  5933 ;; This function is called by:
  5934 ;;		_main
  5935 ;; This function uses a non-reentrant model
  5936 ;;
  5937                           
  5938                           
  5939                           ;psect for function _LCD_CursorPosition
  5940  0E13                     _LCD_CursorPosition:	
  5941                           
  5942                           ;incstack = 0
  5943                           ; Regs used in _LCD_CursorPosition: [wreg+status,2+status,0+pclath+cstack]
  5944                           ;LCD_CursorPosition@tx stored from wreg
  5945  0E13  0020               	movlb	0	; select bank0
  5946  0E14  00A5               	movwf	LCD_CursorPosition@tx
  5947                           
  5948                           ;LCD.c: 97: LATA3 = 0;
  5949  0E15  0022               	movlb	2	; select bank2
  5950  0E16  118C               	bcf	12,3	;volatile
  5951                           
  5952                           ;LCD.c: 98: LCD_WriteData(0x80|tx|(0x40*ty));
  5953  0E17  0020               	movlb	0	; select bank0
  5954  0E18  0823               	movf	LCD_CursorPosition@ty,w
  5955  0E19  00A4               	movwf	??_LCD_CursorPosition
  5956  0E1A  3005               	movlw	5
  5957  0E1B                     u2735:	
  5958  0E1B  35A4               	lslf	??_LCD_CursorPosition,f
  5959  0E1C  3EFF               	addlw	-1
  5960  0E1D  1D03               	skipz
  5961  0E1E  2E1B               	goto	u2735
  5962  0E1F  3524               	lslf	??_LCD_CursorPosition,w
  5963  0E20  0425               	iorwf	LCD_CursorPosition@tx,w
  5964  0E21  3880               	iorlw	-128
  5965  0E22  3187  2768  318E   	fcall	_LCD_WriteData
  5966                           
  5967                           ;LCD.c: 99: _delay((unsigned long)((40)*(32000000/4000000.0)));
  5968  0E25  306A               	movlw	106
  5969  0E26                     u3147:	
  5970  0E26  0B89               	decfsz	9,f
  5971  0E27  2E26               	goto	u3147
  5972  0E28  3200               	nop2
  5973  0E29  0008               	return
  5974  0E2A                     __end_of_LCD_CursorPosition:	
  5975                           
  5976                           	psect	text25
  5977  0768                     __ptext25:	
  5978 ;; *************** function _LCD_WriteData *****************
  5979 ;; Defined at:
  5980 ;;		line 15 in file "LCD.c"
  5981 ;; Parameters:    Size  Location     Type
  5982 ;;  point           1    wreg     char 
  5983 ;; Auto vars:     Size  Location     Type
  5984 ;;  point           1    2[BANK0 ] char 
  5985 ;; Return value:  Size  Location     Type
  5986 ;;                  1    wreg      void 
  5987 ;; Registers used:
  5988 ;;		wreg, status,2, status,0
  5989 ;; Tracked objects:
  5990 ;;		On entry : 0/0
  5991 ;;		On exit  : 0/0
  5992 ;;		Unchanged: 0/0
  5993 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  5994 ;;      Params:         0       0       0       0       0       0
  5995 ;;      Locals:         0       1       0       0       0       0
  5996 ;;      Temps:          0       2       0       0       0       0
  5997 ;;      Totals:         0       3       0       0       0       0
  5998 ;;Total ram usage:        3 bytes
  5999 ;; Hardware stack levels used:    1
  6000 ;; Hardware stack levels required when called:    3
  6001 ;; This function calls:
  6002 ;;		Nothing
  6003 ;; This function is called by:
  6004 ;;		_LCD_Init
  6005 ;;		_putch
  6006 ;;		_LCD_DisplayClear
  6007 ;;		_LCD_CursorPosition
  6008 ;;		_LCD_Put
  6009 ;;		_LCD_CursorHome
  6010 ;;		_LCD_CursorShift
  6011 ;;		_LCD_DispShift
  6012 ;; This function uses a non-reentrant model
  6013 ;;
  6014                           
  6015                           
  6016                           ;psect for function _LCD_WriteData
  6017  0768                     _LCD_WriteData:	
  6018                           
  6019                           ;incstack = 0
  6020                           ; Regs used in _LCD_WriteData: [wreg+status,2+status,0]
  6021                           ;LCD_WriteData@point stored from wreg
  6022  0768  0020               	movlb	0	; select bank0
  6023  0769  00A2               	movwf	LCD_WriteData@point
  6024                           
  6025                           ;LCD.c: 17: _delay((unsigned long)((80)*(32000000/4000000.0)));
  6026  076A  30D5               	movlw	213
  6027  076B                     u3157:	
  6028  076B  0B89               	decfsz	9,f
  6029  076C  2F6B               	goto	u3157
  6030  076D  0000               	nop
  6031                           
  6032                           ;LCD.c: 18: PORTB = ( (((point>>4)&0x0F&0x0C)<<1)|((point>>4)&0x0F&0x03) );
  6033  076E  0020               	movlb	0	; select bank0
  6034  076F  0822               	movf	LCD_WriteData@point,w
  6035  0770  00A0               	movwf	??_LCD_WriteData
  6036  0771  3004               	movlw	4
  6037  0772                     u2485:	
  6038  0772  1003               	clrc
  6039  0773  1BA0               	btfsc	??_LCD_WriteData,7
  6040  0774  1403               	setc
  6041  0775  0CA0               	rrf	??_LCD_WriteData,f
  6042  0776  0B89               	decfsz	9,f
  6043  0777  2F72               	goto	u2485
  6044  0778  3003               	movlw	3
  6045  0779  0520               	andwf	??_LCD_WriteData,w
  6046  077A  00A1               	movwf	??_LCD_WriteData+1
  6047  077B  0E22               	swapf	LCD_WriteData@point,w
  6048  077C  390F               	andlw	15
  6049  077D  1989               	btfsc	9,3
  6050  077E  38F0               	iorlw	240
  6051  077F  390C               	andlw	12
  6052  0780  0709               	addwf	9,w
  6053  0781  0421               	iorwf	??_LCD_WriteData+1,w
  6054  0782  008D               	movwf	13	;volatile
  6055                           
  6056                           ;LCD.c: 19: {LATA4 = 1; _delay((unsigned long)((1)*(32000000/4000000.0))); LATA4 = 0; _d
      +                          elay((unsigned long)((1)*(32000000/4000000.0)));};
  6057  0783  0022               	movlb	2	; select bank2
  6058  0784  160C               	bsf	12,4	;volatile
  6059  0785  3200               	nop2	;2 cycle nop
  6060  0786  3200               	nop2	;2 cycle nop
  6061  0787  3200               	nop2	;2 cycle nop
  6062  0788  3200               	nop2	;2 cycle nop
  6063  0789  0022               	movlb	2	; select bank2
  6064  078A  120C               	bcf	12,4	;volatile
  6065  078B  3200               	nop2	;2 cycle nop
  6066  078C  3200               	nop2	;2 cycle nop
  6067  078D  3200               	nop2	;2 cycle nop
  6068  078E  3200               	nop2	;2 cycle nop
  6069                           
  6070                           ;LCD.c: 20: PORTB = ( ((point&0x0F&0x0C)<<1)|(point&0x0F&0x03) );
  6071  078F  3003               	movlw	3
  6072  0790  0020               	movlb	0	; select bank0
  6073  0791  0522               	andwf	LCD_WriteData@point,w
  6074  0792  00A0               	movwf	??_LCD_WriteData
  6075  0793  0822               	movf	LCD_WriteData@point,w
  6076  0794  390C               	andlw	12
  6077  0795  0709               	addwf	9,w
  6078  0796  0420               	iorwf	??_LCD_WriteData,w
  6079  0797  008D               	movwf	13	;volatile
  6080                           
  6081                           ;LCD.c: 21: {LATA4 = 1; _delay((unsigned long)((1)*(32000000/4000000.0))); LATA4 = 0; _d
      +                          elay((unsigned long)((1)*(32000000/4000000.0)));};
  6082  0798  0022               	movlb	2	; select bank2
  6083  0799  160C               	bsf	12,4	;volatile
  6084  079A  3200               	nop2	;2 cycle nop
  6085  079B  3200               	nop2	;2 cycle nop
  6086  079C  3200               	nop2	;2 cycle nop
  6087  079D  3200               	nop2	;2 cycle nop
  6088  079E  0022               	movlb	2	; select bank2
  6089  079F  120C               	bcf	12,4	;volatile
  6090  07A0  3200               	nop2	;2 cycle nop
  6091  07A1  3200               	nop2	;2 cycle nop
  6092  07A2  3200               	nop2	;2 cycle nop
  6093  07A3  3200               	nop2	;2 cycle nop
  6094  07A4  0008               	return
  6095  07A5                     __end_of_LCD_WriteData:	
  6096                           
  6097                           	psect	text26
  6098  0F67                     __ptext26:	
  6099 ;; *************** function _DAC_WriteVoltage *****************
  6100 ;; Defined at:
  6101 ;;		line 27 in file "MCP4726.c"
  6102 ;; Parameters:    Size  Location     Type
  6103 ;;  volue           2   16[BANK0 ] unsigned int 
  6104 ;; Auto vars:     Size  Location     Type
  6105 ;;		None
  6106 ;; Return value:  Size  Location     Type
  6107 ;;                  1    wreg      char 
  6108 ;; Registers used:
  6109 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6110 ;; Tracked objects:
  6111 ;;		On entry : 0/0
  6112 ;;		On exit  : 0/0
  6113 ;;		Unchanged: 0/0
  6114 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  6115 ;;      Params:         0       2       0       0       0       0
  6116 ;;      Locals:         0       0       0       0       0       0
  6117 ;;      Temps:          0       3       0       0       0       0
  6118 ;;      Totals:         0       5       0       0       0       0
  6119 ;;Total ram usage:        5 bytes
  6120 ;; Hardware stack levels used:    1
  6121 ;; Hardware stack levels required when called:    5
  6122 ;; This function calls:
  6123 ;;		_I2C_Transmit
  6124 ;; This function is called by:
  6125 ;;		_main
  6126 ;; This function uses a non-reentrant model
  6127 ;;
  6128                           
  6129                           
  6130                           ;psect for function _DAC_WriteVoltage
  6131  0F67                     _DAC_WriteVoltage:	
  6132                           
  6133                           ;MCP4726.c: 29: VoltageReg.Command = (uint8_t)(0x0);
  6134                           
  6135                           ;incstack = 0
  6136                           ; Regs used in _DAC_WriteVoltage: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6137  0F67  303F               	movlw	-193
  6138  0F68  0020               	movlb	0	; select bank0
  6139  0F69  05EA               	andwf	_VoltageReg,f
  6140                           
  6141                           ;MCP4726.c: 30: VoltageReg.PowerDown = ConfigReg.PowerDown;
  6142  0F6A  0C6C               	rrf	_ConfigReg,w
  6143  0F6B  3903               	andlw	3
  6144  0F6C  00B2               	movwf	??_DAC_WriteVoltage
  6145  0F6D  0EB2               	swapf	??_DAC_WriteVoltage,f
  6146  0F6E  086A               	movf	_VoltageReg,w
  6147  0F6F  0632               	xorwf	??_DAC_WriteVoltage,w
  6148  0F70  39CF               	andlw	-49
  6149  0F71  0632               	xorwf	??_DAC_WriteVoltage,w
  6150  0F72  00EA               	movwf	_VoltageReg
  6151                           
  6152                           ;MCP4726.c: 31: VoltageReg.Voltage4bits = (uint8_t)((volue&0x0F00)>>8);
  6153  0F73  0831               	movf	DAC_WriteVoltage@volue+1,w
  6154  0F74  00B3               	movwf	??_DAC_WriteVoltage+1
  6155  0F75  0830               	movf	DAC_WriteVoltage@volue,w
  6156  0F76  00B2               	movwf	??_DAC_WriteVoltage
  6157  0F77  0833               	movf	??_DAC_WriteVoltage+1,w
  6158  0F78  00B2               	movwf	??_DAC_WriteVoltage
  6159  0F79  01B3               	clrf	??_DAC_WriteVoltage+1
  6160  0F7A  300F               	movlw	15
  6161  0F7B  0532               	andwf	??_DAC_WriteVoltage,w
  6162  0F7C  00B4               	movwf	??_DAC_WriteVoltage+2
  6163  0F7D  086A               	movf	_VoltageReg,w
  6164  0F7E  0634               	xorwf	??_DAC_WriteVoltage+2,w
  6165  0F7F  39F0               	andlw	-16
  6166  0F80  0634               	xorwf	??_DAC_WriteVoltage+2,w
  6167  0F81  00EA               	movwf	_VoltageReg
  6168                           
  6169                           ;MCP4726.c: 32: VoltageReg.Voltage8bits = (uint8_t)(volue&0x00FF);
  6170  0F82  0830               	movf	DAC_WriteVoltage@volue,w
  6171  0F83  00B2               	movwf	??_DAC_WriteVoltage
  6172  0F84  0832               	movf	??_DAC_WriteVoltage,w
  6173  0F85  00EB               	movwf	_VoltageReg+1
  6174                           
  6175                           ;MCP4726.c: 34: return I2C_Transmit(I2C2_MODULE,0x60,VoltageReg.Voltage_Data,2);
  6176                           ;	Return value of _DAC_WriteVoltage is never used
  6177  0F86  3060               	movlw	96
  6178  0F87  00B2               	movwf	??_DAC_WriteVoltage
  6179  0F88  0832               	movf	??_DAC_WriteVoltage,w
  6180  0F89  00A8               	movwf	I2C_Transmit@address
  6181  0F8A  306A               	movlw	(low (_VoltageReg| 0))& (0+255)
  6182  0F8B  00B3               	movwf	??_DAC_WriteVoltage+1
  6183  0F8C  0833               	movf	??_DAC_WriteVoltage+1,w
  6184  0F8D  00A9               	movwf	I2C_Transmit@pData
  6185  0F8E  3002               	movlw	2
  6186  0F8F  00B4               	movwf	??_DAC_WriteVoltage+2
  6187  0F90  0834               	movf	??_DAC_WriteVoltage+2,w
  6188  0F91  00AA               	movwf	I2C_Transmit@size
  6189  0F92  3001               	movlw	1
  6190  0F93  318E  265D         	fcall	_I2C_Transmit
  6191  0F95  0008               	return
  6192  0F96                     __end_of_DAC_WriteVoltage:	
  6193                           
  6194                           	psect	text27
  6195  0EB0                     __ptext27:	
  6196 ;; *************** function _DAC_Initialize *****************
  6197 ;; Defined at:
  6198 ;;		line 14 in file "MCP4726.c"
  6199 ;; Parameters:    Size  Location     Type
  6200 ;;		None
  6201 ;; Auto vars:     Size  Location     Type
  6202 ;;		None
  6203 ;; Return value:  Size  Location     Type
  6204 ;;                  1    wreg      void 
  6205 ;; Registers used:
  6206 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6207 ;; Tracked objects:
  6208 ;;		On entry : 0/0
  6209 ;;		On exit  : 0/0
  6210 ;;		Unchanged: 0/0
  6211 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  6212 ;;      Params:         0       0       0       0       0       0
  6213 ;;      Locals:         0       0       0       0       0       0
  6214 ;;      Temps:          0       2       0       0       0       0
  6215 ;;      Totals:         0       2       0       0       0       0
  6216 ;;Total ram usage:        2 bytes
  6217 ;; Hardware stack levels used:    1
  6218 ;; Hardware stack levels required when called:    6
  6219 ;; This function calls:
  6220 ;;		_I2C_Init
  6221 ;;		_I2C_Transmit
  6222 ;; This function is called by:
  6223 ;;		_main
  6224 ;; This function uses a non-reentrant model
  6225 ;;
  6226                           
  6227                           
  6228                           ;psect for function _DAC_Initialize
  6229  0EB0                     _DAC_Initialize:	
  6230                           
  6231                           ;MCP4726.c: 16: I2C_Init(I2C2_MODULE,0x00,I2C_MODE_MASTER,I2C_SPEED_STANDARD);
  6232                           
  6233                           ;incstack = 0
  6234                           ; Regs used in _DAC_Initialize: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6235  0EB0  0020               	movlb	0	; select bank0
  6236  0EB1  01A5               	clrf	I2C_Init@address
  6237  0EB2  01A6               	clrf	I2C_Init@mode
  6238  0EB3  01A7               	clrf	I2C_Init@Speed
  6239  0EB4  3001               	movlw	1
  6240  0EB5  318E  262A  318E   	fcall	_I2C_Init
  6241                           
  6242                           ;MCP4726.c: 18: ConfigReg.Command = (uint8_t)(0x4);
  6243  0EB8  0020               	movlb	0	; select bank0
  6244  0EB9  086C               	movf	_ConfigReg,w
  6245  0EBA  391F               	andlw	-225
  6246  0EBB  3880               	iorlw	128
  6247  0EBC  00EC               	movwf	_ConfigReg
  6248                           
  6249                           ;MCP4726.c: 19: ConfigReg.Gain = 0x00;
  6250  0EBD  106C               	bcf	_ConfigReg,0
  6251                           
  6252                           ;MCP4726.c: 20: ConfigReg.PowerDown = 0x00;
  6253  0EBE  30F9               	movlw	-7
  6254  0EBF  05EC               	andwf	_ConfigReg,f
  6255                           
  6256                           ;MCP4726.c: 21: ConfigReg.Voltage_Ref = 0x00;
  6257  0EC0  30E7               	movlw	-25
  6258  0EC1  05EC               	andwf	_ConfigReg,f
  6259                           
  6260                           ;MCP4726.c: 23: I2C_Transmit(I2C2_MODULE,0x60,ConfigReg.Config_Data,1);
  6261  0EC2  3060               	movlw	96
  6262  0EC3  00B0               	movwf	??_DAC_Initialize
  6263  0EC4  0830               	movf	??_DAC_Initialize,w
  6264  0EC5  00A8               	movwf	I2C_Transmit@address
  6265  0EC6  306C               	movlw	(low (_ConfigReg| 0))& (0+255)
  6266  0EC7  00B1               	movwf	??_DAC_Initialize+1
  6267  0EC8  0831               	movf	??_DAC_Initialize+1,w
  6268  0EC9  00A9               	movwf	I2C_Transmit@pData
  6269  0ECA  01AA               	clrf	I2C_Transmit@size
  6270  0ECB  0AAA               	incf	I2C_Transmit@size,f
  6271  0ECC  3001               	movlw	1
  6272  0ECD  318E  265D         	fcall	_I2C_Transmit
  6273  0ECF  0008               	return
  6274  0ED0                     __end_of_DAC_Initialize:	
  6275                           
  6276                           	psect	text28
  6277  0E5D                     __ptext28:	
  6278 ;; *************** function _I2C_Transmit *****************
  6279 ;; Defined at:
  6280 ;;		line 23 in file "I2C_Common.c"
  6281 ;; Parameters:    Size  Location     Type
  6282 ;;  I2Cx            1    wreg     enum E3268
  6283 ;;  address         1    8[BANK0 ] unsigned char 
  6284 ;;  pData           1    9[BANK0 ] PTR unsigned char 
  6285 ;;		 -> VoltageReg(2), ConfigReg(1), 
  6286 ;;  size            1   10[BANK0 ] unsigned char 
  6287 ;; Auto vars:     Size  Location     Type
  6288 ;;  I2Cx            1   14[BANK0 ] enum E3268
  6289 ;;  result          1   15[BANK0 ] char 
  6290 ;; Return value:  Size  Location     Type
  6291 ;;                  1    wreg      char 
  6292 ;; Registers used:
  6293 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6294 ;; Tracked objects:
  6295 ;;		On entry : 0/0
  6296 ;;		On exit  : 0/0
  6297 ;;		Unchanged: 0/0
  6298 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  6299 ;;      Params:         0       3       0       0       0       0
  6300 ;;      Locals:         0       2       0       0       0       0
  6301 ;;      Temps:          0       3       0       0       0       0
  6302 ;;      Totals:         0       8       0       0       0       0
  6303 ;;Total ram usage:        8 bytes
  6304 ;; Hardware stack levels used:    1
  6305 ;; Hardware stack levels required when called:    4
  6306 ;; This function calls:
  6307 ;;		_I2C2_Transmit
  6308 ;; This function is called by:
  6309 ;;		_DAC_Initialize
  6310 ;;		_DAC_WriteVoltage
  6311 ;; This function uses a non-reentrant model
  6312 ;;
  6313                           
  6314                           
  6315                           ;psect for function _I2C_Transmit
  6316  0E5D                     _I2C_Transmit:	
  6317                           
  6318                           ;incstack = 0
  6319                           ; Regs used in _I2C_Transmit: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6320                           ;I2C_Transmit@I2Cx stored from wreg
  6321  0E5D  0020               	movlb	0	; select bank0
  6322  0E5E  00AE               	movwf	I2C_Transmit@I2Cx
  6323                           
  6324                           ;I2C_Common.c: 25: int8_t result;
  6325                           ;I2C_Common.c: 27: switch(I2Cx)
  6326  0E5F  2E71               	goto	l3037
  6327  0E60                     l3033:	
  6328                           ;I2C_Common.c: 28: {
  6329                           ;I2C_Common.c: 33: case I2C2_MODULE:
  6330                           
  6331                           
  6332                           ;I2C_Common.c: 34: result = I2C2_Transmit(address,pData,size);
  6333  0E60  0829               	movf	I2C_Transmit@pData,w
  6334  0E61  00AB               	movwf	??_I2C_Transmit
  6335  0E62  082B               	movf	??_I2C_Transmit,w
  6336  0E63  00A0               	movwf	I2C2_Transmit@pData
  6337  0E64  082A               	movf	I2C_Transmit@size,w
  6338  0E65  00AC               	movwf	??_I2C_Transmit+1
  6339  0E66  082C               	movf	??_I2C_Transmit+1,w
  6340  0E67  00A1               	movwf	I2C2_Transmit@size
  6341  0E68  0828               	movf	I2C_Transmit@address,w
  6342  0E69  3184  24AB  318E   	fcall	_I2C2_Transmit
  6343  0E6C  0020               	movlb	0	; select bank0
  6344  0E6D  00AD               	movwf	??_I2C_Transmit+2
  6345  0E6E  082D               	movf	??_I2C_Transmit+2,w
  6346  0E6F  00AF               	movwf	I2C_Transmit@result
  6347                           
  6348                           ;I2C_Common.c: 36: }
  6349                           
  6350                           ;I2C_Common.c: 35: break;
  6351  0E70  2E76               	goto	l3039
  6352  0E71                     l3037:	
  6353  0E71  082E               	movf	I2C_Transmit@I2Cx,w
  6354                           
  6355                           ; Switch size 1, requested type "space"
  6356                           ; Number of cases is 1, Range of values is 1 to 1
  6357                           ; switch strategies available:
  6358                           ; Name         Instructions Cycles
  6359                           ; simple_byte            4     3 (average)
  6360                           ; direct_byte           11     9 (fixed)
  6361                           ; jumptable            263     9 (fixed)
  6362                           ;	Chosen strategy is simple_byte
  6363  0E72  3A01               	xorlw	1	; case 1
  6364  0E73  1903               	skipnz
  6365  0E74  2E60               	goto	l3033
  6366  0E75  2E76               	goto	l3039
  6367  0E76                     l3039:	
  6368                           
  6369                           ;I2C_Common.c: 37: return result;
  6370  0E76  082F               	movf	I2C_Transmit@result,w
  6371  0E77  0008               	return
  6372  0E78                     __end_of_I2C_Transmit:	
  6373                           
  6374                           	psect	text29
  6375  04AB                     __ptext29:	
  6376 ;; *************** function _I2C2_Transmit *****************
  6377 ;; Defined at:
  6378 ;;		line 52 in file "I2C2.c"
  6379 ;; Parameters:    Size  Location     Type
  6380 ;;  address         1    wreg     unsigned char 
  6381 ;;  pData           1    0[BANK0 ] PTR unsigned char 
  6382 ;;		 -> VoltageReg(2), ConfigReg(1), 
  6383 ;;  size            1    1[BANK0 ] unsigned char 
  6384 ;; Auto vars:     Size  Location     Type
  6385 ;;  address         1    4[BANK0 ] unsigned char 
  6386 ;;  i               1    6[BANK0 ] unsigned char 
  6387 ;;  i               1    5[BANK0 ] unsigned char 
  6388 ;;  result          1    7[BANK0 ] char 
  6389 ;; Return value:  Size  Location     Type
  6390 ;;                  1    wreg      char 
  6391 ;; Registers used:
  6392 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0
  6393 ;; Tracked objects:
  6394 ;;		On entry : 0/0
  6395 ;;		On exit  : 0/0
  6396 ;;		Unchanged: 0/0
  6397 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  6398 ;;      Params:         0       2       0       0       0       0
  6399 ;;      Locals:         0       4       0       0       0       0
  6400 ;;      Temps:          0       2       0       0       0       0
  6401 ;;      Totals:         0       8       0       0       0       0
  6402 ;;Total ram usage:        8 bytes
  6403 ;; Hardware stack levels used:    1
  6404 ;; Hardware stack levels required when called:    3
  6405 ;; This function calls:
  6406 ;;		Nothing
  6407 ;; This function is called by:
  6408 ;;		_I2C_Transmit
  6409 ;; This function uses a non-reentrant model
  6410 ;;
  6411                           
  6412                           
  6413                           ;psect for function _I2C2_Transmit
  6414  04AB                     _I2C2_Transmit:	
  6415                           
  6416                           ;incstack = 0
  6417                           ; Regs used in _I2C2_Transmit: [wreg-fsr1h+status,2+status,0]
  6418                           ;I2C2_Transmit@address stored from wreg
  6419  04AB  0020               	movlb	0	; select bank0
  6420  04AC  00A4               	movwf	I2C2_Transmit@address
  6421                           
  6422                           ;I2C2.c: 54: int8_t result = 0;
  6423  04AD  01A7               	clrf	I2C2_Transmit@result
  6424                           
  6425                           ;I2C2.c: 56: switch(I2C2_Config.Mode)
  6426  04AE  2D37               	goto	l2953
  6427  04AF                     l2909:	
  6428                           ;I2C2.c: 59: while((SSP2CON2&0x1F)|(SSP2STAT&0x05));
  6429                           
  6430                           ;I2C2.c: 57: {
  6431                           ;I2C2.c: 58: case I2C_MODE_MASTER:
  6432                           
  6433  04AF  3005               	movlw	5
  6434  04B0  0024               	movlb	4	; select bank4
  6435  04B1  051C               	andwf	28,w	;volatile
  6436  04B2  0020               	movlb	0	; select bank0
  6437  04B3  00A2               	movwf	??_I2C2_Transmit
  6438  04B4  0024               	movlb	4	; select bank4
  6439  04B5  081E               	movf	30,w	;volatile
  6440  04B6  391F               	andlw	31
  6441  04B7  0020               	movlb	0	; select bank0
  6442  04B8  0422               	iorwf	??_I2C2_Transmit,w
  6443  04B9  1D03               	btfss	3,2
  6444  04BA  2CAF               	goto	l2909
  6445                           
  6446                           ;I2C2.c: 60: SSP2CON2bits.SEN = 1;
  6447  04BB  0024               	movlb	4	; select bank4
  6448  04BC  141E               	bsf	30,0	;volatile
  6449  04BD                     l2911:	
  6450                           ;I2C2.c: 62: while((SSP2CON2&0x1F)|(SSP2STAT&0x05));
  6451                           
  6452  04BD  3005               	movlw	5
  6453  04BE  0024               	movlb	4	; select bank4
  6454  04BF  051C               	andwf	28,w	;volatile
  6455  04C0  0020               	movlb	0	; select bank0
  6456  04C1  00A2               	movwf	??_I2C2_Transmit
  6457  04C2  0024               	movlb	4	; select bank4
  6458  04C3  081E               	movf	30,w	;volatile
  6459  04C4  391F               	andlw	31
  6460  04C5  0020               	movlb	0	; select bank0
  6461  04C6  0422               	iorwf	??_I2C2_Transmit,w
  6462  04C7  1D03               	btfss	3,2
  6463  04C8  2CBD               	goto	l2911
  6464                           
  6465                           ;I2C2.c: 63: SSP2BUF = address << 1;
  6466  04C9  3524               	lslf	I2C2_Transmit@address,w
  6467  04CA  0024               	movlb	4	; select bank4
  6468  04CB  0099               	movwf	25	;volatile
  6469  04CC                     l91:	
  6470                           ;I2C2.c: 64: while(SSP2STATbits.R_nW);
  6471                           
  6472  04CC  191C               	btfsc	28,2	;volatile
  6473  04CD  2CCC               	goto	l91
  6474                           
  6475                           ;I2C2.c: 66: result = SSP2CON2bits.ACKSTAT;
  6476  04CE  3000               	movlw	0
  6477  04CF  1B1E               	btfsc	30,6	;volatile
  6478  04D0  3001               	movlw	1
  6479  04D1  0020               	movlb	0	; select bank0
  6480  04D2  00A7               	movwf	I2C2_Transmit@result
  6481                           
  6482                           ;I2C2.c: 67: if (!result)
  6483  04D3  0827               	movf	I2C2_Transmit@result,w
  6484  04D4  1D03               	btfss	3,2
  6485  04D5  2D03               	goto	l2935
  6486                           
  6487                           ;I2C2.c: 68: {
  6488                           ;I2C2.c: 69: for(uint8_t i=0;i<size;i++)
  6489  04D6  01A5               	clrf	I2C2_Transmit@i
  6490  04D7  2CDC               	goto	l2933
  6491  04D8                     l2931:	
  6492                           ;I2C2.c: 79: break;
  6493                           
  6494  04D8  3001               	movlw	1
  6495  04D9  00A2               	movwf	??_I2C2_Transmit
  6496  04DA  0822               	movf	??_I2C2_Transmit,w
  6497  04DB  07A5               	addwf	I2C2_Transmit@i,f
  6498  04DC                     l2933:	
  6499  04DC  0821               	movf	I2C2_Transmit@size,w
  6500  04DD  0225               	subwf	I2C2_Transmit@i,w
  6501  04DE  1803               	btfsc	3,0
  6502  04DF  2D03               	goto	l2935
  6503  04E0                     l2921:	
  6504                           ;I2C2.c: 70: {
  6505                           ;I2C2.c: 71: while((SSP2CON2&0x1F)|(SSP2STAT&0x05));
  6506                           
  6507  04E0  3005               	movlw	5
  6508  04E1  0024               	movlb	4	; select bank4
  6509  04E2  051C               	andwf	28,w	;volatile
  6510  04E3  0020               	movlb	0	; select bank0
  6511  04E4  00A2               	movwf	??_I2C2_Transmit
  6512  04E5  0024               	movlb	4	; select bank4
  6513  04E6  081E               	movf	30,w	;volatile
  6514  04E7  391F               	andlw	31
  6515  04E8  0020               	movlb	0	; select bank0
  6516  04E9  0422               	iorwf	??_I2C2_Transmit,w
  6517  04EA  1D03               	btfss	3,2
  6518  04EB  2CE0               	goto	l2921
  6519                           
  6520                           ;I2C2.c: 72: SSP2BUF = *(pData+i);
  6521  04EC  0825               	movf	I2C2_Transmit@i,w
  6522  04ED  0720               	addwf	I2C2_Transmit@pData,w
  6523  04EE  00A2               	movwf	??_I2C2_Transmit
  6524  04EF  0822               	movf	??_I2C2_Transmit,w
  6525  04F0  0086               	movwf	6
  6526  04F1  0187               	clrf	7
  6527  04F2  0801               	movf	1,w
  6528  04F3  0024               	movlb	4	; select bank4
  6529  04F4  0099               	movwf	25	;volatile
  6530  04F5                     l100:	
  6531                           ;I2C2.c: 73: while(SSP2STATbits.R_nW);
  6532                           
  6533  04F5  191C               	btfsc	28,2	;volatile
  6534  04F6  2CF5               	goto	l100
  6535                           
  6536                           ;I2C2.c: 75: result = SSP2CON2bits.ACKSTAT;
  6537  04F7  3000               	movlw	0
  6538  04F8  1B1E               	btfsc	30,6	;volatile
  6539  04F9  3001               	movlw	1
  6540  04FA  0020               	movlb	0	; select bank0
  6541  04FB  00A7               	movwf	I2C2_Transmit@result
  6542                           
  6543                           ;I2C2.c: 76: if (result)
  6544  04FC  0827               	movf	I2C2_Transmit@result,w
  6545  04FD  1903               	btfsc	3,2
  6546  04FE  2CD8               	goto	l2931
  6547                           
  6548                           ;I2C2.c: 77: {
  6549                           ;I2C2.c: 78: result = 2;
  6550  04FF  3002               	movlw	2
  6551  0500  00A2               	movwf	??_I2C2_Transmit
  6552  0501  0822               	movf	??_I2C2_Transmit,w
  6553  0502  00A7               	movwf	I2C2_Transmit@result
  6554  0503                     l2935:	
  6555                           ;I2C2.c: 80: }
  6556                           ;I2C2.c: 81: }
  6557                           ;I2C2.c: 82: }
  6558                           ;I2C2.c: 84: while((SSP2CON2&0x1F)|(SSP2STAT&0x05));
  6559                           
  6560  0503  3005               	movlw	5
  6561  0504  0024               	movlb	4	; select bank4
  6562  0505  051C               	andwf	28,w	;volatile
  6563  0506  0020               	movlb	0	; select bank0
  6564  0507  00A2               	movwf	??_I2C2_Transmit
  6565  0508  0024               	movlb	4	; select bank4
  6566  0509  081E               	movf	30,w	;volatile
  6567  050A  391F               	andlw	31
  6568  050B  0020               	movlb	0	; select bank0
  6569  050C  0422               	iorwf	??_I2C2_Transmit,w
  6570  050D  1D03               	btfss	3,2
  6571  050E  2D03               	goto	l2935
  6572                           
  6573                           ;I2C2.c: 85: SSP2CON2bits.PEN = 1;
  6574  050F  0024               	movlb	4	; select bank4
  6575  0510  151E               	bsf	30,2	;volatile
  6576                           
  6577                           ;I2C2.c: 86: break;
  6578  0511  2D40               	goto	l2955
  6579  0512                     l109:	
  6580                           ;I2C2.c: 88: case I2C_MODE_SLAVE:
  6581                           
  6582                           
  6583                           ;I2C2.c: 89: if((SSP2STATbits.S==0)&&(SSP2STATbits.P==1))
  6584  0512  0024               	movlb	4	; select bank4
  6585  0513  1D9C               	btfss	28,3	;volatile
  6586  0514  1E1C               	btfss	28,4	;volatile
  6587  0515  2D34               	goto	l2949
  6588                           
  6589                           ;I2C2.c: 90: {
  6590                           ;I2C2.c: 91: for(uint8_t i = 0;i<size;i++)
  6591  0516  0020               	movlb	0	; select bank0
  6592  0517  01A6               	clrf	I2C2_Transmit@i_172
  6593  0518                     l2945:	
  6594  0518  0821               	movf	I2C2_Transmit@size,w
  6595  0519  0226               	subwf	I2C2_Transmit@i_172,w
  6596  051A  1803               	btfsc	3,0
  6597  051B  2D2F               	goto	l2947
  6598                           
  6599                           ;I2C2.c: 92: I2C2_Config.SlaveTransmitBuff[i] = pData[i];
  6600  051C  0826               	movf	I2C2_Transmit@i_172,w
  6601  051D  0720               	addwf	I2C2_Transmit@pData,w
  6602  051E  00A2               	movwf	??_I2C2_Transmit
  6603  051F  0822               	movf	??_I2C2_Transmit,w
  6604  0520  0086               	movwf	6
  6605  0521  0187               	clrf	7
  6606  0522  0801               	movf	1,w
  6607  0523  00A3               	movwf	??_I2C2_Transmit+1
  6608  0524  0826               	movf	I2C2_Transmit@i_172,w
  6609  0525  3EC8               	addlw	(low (_I2C2_Config| 0))& (0+255)
  6610  0526  0086               	movwf	6
  6611  0527  0187               	clrf	7
  6612  0528  0823               	movf	??_I2C2_Transmit+1,w
  6613  0529  0081               	movwf	1
  6614  052A  3001               	movlw	1
  6615  052B  00A2               	movwf	??_I2C2_Transmit
  6616  052C  0822               	movf	??_I2C2_Transmit,w
  6617  052D  07A6               	addwf	I2C2_Transmit@i_172,f
  6618  052E  2D18               	goto	l2945
  6619  052F                     l2947:	
  6620                           
  6621                           ;I2C2.c: 93: result = size;
  6622  052F  0821               	movf	I2C2_Transmit@size,w
  6623  0530  00A2               	movwf	??_I2C2_Transmit
  6624  0531  0822               	movf	??_I2C2_Transmit,w
  6625  0532  00A7               	movwf	I2C2_Transmit@result
  6626                           
  6627                           ;I2C2.c: 94: }
  6628  0533  2D40               	goto	l2955
  6629  0534                     l2949:	
  6630                           
  6631                           ;I2C2.c: 95: else
  6632                           ;I2C2.c: 96: result = 0;
  6633  0534  0020               	movlb	0	; select bank0
  6634  0535  01A7               	clrf	I2C2_Transmit@result
  6635                           
  6636                           ;I2C2.c: 98: }
  6637                           
  6638                           ;I2C2.c: 97: break;
  6639  0536  2D40               	goto	l2955
  6640  0537                     l2953:	
  6641  0537  0021               	movlb	1	; select bank1
  6642  0538  085A               	movf	(_I2C2_Config^(0+128)+18),w
  6643                           
  6644                           ; Switch size 1, requested type "space"
  6645                           ; Number of cases is 2, Range of values is 0 to 1
  6646                           ; switch strategies available:
  6647                           ; Name         Instructions Cycles
  6648                           ; simple_byte            7     4 (average)
  6649                           ; direct_byte           10     6 (fixed)
  6650                           ; jumptable            260     6 (fixed)
  6651                           ;	Chosen strategy is simple_byte
  6652  0539  3A00               	xorlw	0	; case 0
  6653  053A  1903               	skipnz
  6654  053B  2CAF               	goto	l2909
  6655  053C  3A01               	xorlw	1	; case 1
  6656  053D  1903               	skipnz
  6657  053E  2D12               	goto	l109
  6658  053F  2D40               	goto	l2955
  6659  0540                     l2955:	
  6660                           
  6661                           ;I2C2.c: 100: return result;
  6662  0540  0020               	movlb	0	; select bank0
  6663  0541  0827               	movf	I2C2_Transmit@result,w
  6664  0542  0008               	return
  6665  0543                     __end_of_I2C2_Transmit:	
  6666                           
  6667                           	psect	text30
  6668  0E2A                     __ptext30:	
  6669 ;; *************** function _I2C_Init *****************
  6670 ;; Defined at:
  6671 ;;		line 6 in file "I2C_Common.c"
  6672 ;; Parameters:    Size  Location     Type
  6673 ;;  I2Cx            1    wreg     enum E3268
  6674 ;;  address         1    5[BANK0 ] unsigned char 
  6675 ;;  mode            1    6[BANK0 ] enum E3259
  6676 ;;  Speed           1    7[BANK0 ] enum E3263
  6677 ;; Auto vars:     Size  Location     Type
  6678 ;;  I2Cx            1   10[BANK0 ] enum E3268
  6679 ;; Return value:  Size  Location     Type
  6680 ;;                  1    wreg      void 
  6681 ;; Registers used:
  6682 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  6683 ;; Tracked objects:
  6684 ;;		On entry : 0/0
  6685 ;;		On exit  : 0/0
  6686 ;;		Unchanged: 0/0
  6687 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  6688 ;;      Params:         0       3       0       0       0       0
  6689 ;;      Locals:         0       1       0       0       0       0
  6690 ;;      Temps:          0       2       0       0       0       0
  6691 ;;      Totals:         0       6       0       0       0       0
  6692 ;;Total ram usage:        6 bytes
  6693 ;; Hardware stack levels used:    1
  6694 ;; Hardware stack levels required when called:    5
  6695 ;; This function calls:
  6696 ;;		_I2C2_Setting
  6697 ;; This function is called by:
  6698 ;;		_DAC_Initialize
  6699 ;; This function uses a non-reentrant model
  6700 ;;
  6701                           
  6702                           
  6703                           ;psect for function _I2C_Init
  6704  0E2A                     _I2C_Init:	
  6705                           
  6706                           ;incstack = 0
  6707                           ; Regs used in _I2C_Init: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  6708                           ;I2C_Init@I2Cx stored from wreg
  6709  0E2A  0020               	movlb	0	; select bank0
  6710  0E2B  00AA               	movwf	I2C_Init@I2Cx
  6711                           
  6712                           ;I2C_Common.c: 8: switch(I2Cx)
  6713  0E2C  2E3A               	goto	l3029
  6714  0E2D                     l3025:	
  6715                           ;I2C_Common.c: 9: {
  6716                           ;I2C_Common.c: 14: case I2C2_MODULE:
  6717                           
  6718                           
  6719                           ;I2C_Common.c: 15: I2C2_Setting(address,mode,Speed);
  6720  0E2D  0826               	movf	I2C_Init@mode,w
  6721  0E2E  00A8               	movwf	??_I2C_Init
  6722  0E2F  0828               	movf	??_I2C_Init,w
  6723  0E30  00A1               	movwf	I2C2_Setting@mode
  6724  0E31  0827               	movf	I2C_Init@Speed,w
  6725  0E32  00A9               	movwf	??_I2C_Init+1
  6726  0E33  0829               	movf	??_I2C_Init+1,w
  6727  0E34  00A2               	movwf	I2C2_Setting@Speed
  6728  0E35  0825               	movf	I2C_Init@address,w
  6729  0E36  3186  26A4  318E   	fcall	_I2C2_Setting
  6730                           
  6731                           ;I2C_Common.c: 17: }
  6732                           
  6733                           ;I2C_Common.c: 16: break;
  6734  0E39  2E40               	goto	l191
  6735  0E3A                     l3029:	
  6736  0E3A  0020               	movlb	0	; select bank0
  6737  0E3B  082A               	movf	I2C_Init@I2Cx,w
  6738                           
  6739                           ; Switch size 1, requested type "space"
  6740                           ; Number of cases is 1, Range of values is 1 to 1
  6741                           ; switch strategies available:
  6742                           ; Name         Instructions Cycles
  6743                           ; simple_byte            4     3 (average)
  6744                           ; direct_byte           11     9 (fixed)
  6745                           ; jumptable            263     9 (fixed)
  6746                           ;	Chosen strategy is simple_byte
  6747  0E3C  3A01               	xorlw	1	; case 1
  6748  0E3D  1903               	skipnz
  6749  0E3E  2E2D               	goto	l3025
  6750  0E3F  2E40               	goto	l191
  6751  0E40                     l191:	
  6752                           
  6753                           ;I2C_Common.c: 19: PEIE = 1;
  6754  0E40  170B               	bsf	11,6	;volatile
  6755                           
  6756                           ;I2C_Common.c: 20: GIE = 1;
  6757  0E41  178B               	bsf	11,7	;volatile
  6758  0E42  0008               	return
  6759  0E43                     __end_of_I2C_Init:	
  6760                           
  6761                           	psect	text31
  6762  06A4                     __ptext31:	
  6763 ;; *************** function _I2C2_Setting *****************
  6764 ;; Defined at:
  6765 ;;		line 15 in file "I2C2.c"
  6766 ;; Parameters:    Size  Location     Type
  6767 ;;  address         1    wreg     unsigned char 
  6768 ;;  mode            1    1[BANK0 ] enum E3259
  6769 ;;  Speed           1    2[BANK0 ] enum E3263
  6770 ;; Auto vars:     Size  Location     Type
  6771 ;;  address         1    4[BANK0 ] unsigned char 
  6772 ;; Return value:  Size  Location     Type
  6773 ;;                  1    wreg      void 
  6774 ;; Registers used:
  6775 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  6776 ;; Tracked objects:
  6777 ;;		On entry : 0/0
  6778 ;;		On exit  : 0/0
  6779 ;;		Unchanged: 0/0
  6780 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  6781 ;;      Params:         0       2       0       0       0       0
  6782 ;;      Locals:         0       1       0       0       0       0
  6783 ;;      Temps:          0       1       0       0       0       0
  6784 ;;      Totals:         0       4       0       0       0       0
  6785 ;;Total ram usage:        4 bytes
  6786 ;; Hardware stack levels used:    1
  6787 ;; Hardware stack levels required when called:    4
  6788 ;; This function calls:
  6789 ;;		_I2C2_PinInit
  6790 ;; This function is called by:
  6791 ;;		_I2C_Init
  6792 ;; This function uses a non-reentrant model
  6793 ;;
  6794                           
  6795                           
  6796                           ;psect for function _I2C2_Setting
  6797  06A4                     _I2C2_Setting:	
  6798                           
  6799                           ;incstack = 0
  6800                           ; Regs used in _I2C2_Setting: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  6801                           ;I2C2_Setting@address stored from wreg
  6802  06A4  0020               	movlb	0	; select bank0
  6803  06A5  00A4               	movwf	I2C2_Setting@address
  6804                           
  6805                           ;I2C2.c: 17: I2C2_PinInit();
  6806  06A6  318D  2558  3186   	fcall	_I2C2_PinInit
  6807                           
  6808                           ;I2C2.c: 18: I2C2_Config.Mode = mode;
  6809  06A9  0020               	movlb	0	; select bank0
  6810  06AA  0821               	movf	I2C2_Setting@mode,w
  6811  06AB  00A3               	movwf	??_I2C2_Setting
  6812  06AC  0823               	movf	??_I2C2_Setting,w
  6813  06AD  0021               	movlb	1	; select bank1
  6814  06AE  00DA               	movwf	(_I2C2_Config^(0+128)+18)
  6815                           
  6816                           ;I2C2.c: 20: switch(mode)
  6817  06AF  2ED8               	goto	l2905
  6818  06B0                     l74:	
  6819                           ;I2C2.c: 21: {
  6820                           ;I2C2.c: 22: case I2C_MODE_MASTER:
  6821                           
  6822                           
  6823                           ;I2C2.c: 23: SSP2CON1 |= (0x08<<0);
  6824  06B0  0024               	movlb	4	; select bank4
  6825  06B1  159D               	bsf	29,3	;volatile
  6826                           
  6827                           ;I2C2.c: 24: if(Speed==I2C_SPEED_STANDARD)
  6828  06B2  0020               	movlb	0	; select bank0
  6829  06B3  0822               	movf	I2C2_Setting@Speed,w
  6830  06B4  1D03               	btfss	3,2
  6831  06B5  2EBA               	goto	l2883
  6832                           
  6833                           ;I2C2.c: 25: {
  6834                           ;I2C2.c: 26: SSP2STAT |= (1<<7);
  6835  06B6  0024               	movlb	4	; select bank4
  6836  06B7  179C               	bsf	28,7	;volatile
  6837                           
  6838                           ;I2C2.c: 27: SSP2ADD = 0x4F;
  6839  06B8  304F               	movlw	79
  6840  06B9  2EC4               	goto	L7
  6841  06BA                     l2883:	
  6842                           ;I2C2.c: 28: }
  6843                           
  6844                           
  6845                           ;I2C2.c: 29: else if(Speed==I2C_SPEED_HIGH)
  6846  06BA  0020               	movlb	0	; select bank0
  6847  06BB  0322               	decf	I2C2_Setting@Speed,w
  6848  06BC  1D03               	btfss	3,2
  6849  06BD  2EC5               	goto	l2889
  6850                           
  6851                           ;I2C2.c: 30: {
  6852                           ;I2C2.c: 31: SSP2STAT &= ~(1<<7);
  6853  06BE  307F               	movlw	127
  6854  06BF  00A3               	movwf	??_I2C2_Setting
  6855  06C0  0823               	movf	??_I2C2_Setting,w
  6856  06C1  0024               	movlb	4	; select bank4
  6857  06C2  059C               	andwf	28,f	;volatile
  6858                           
  6859                           ;I2C2.c: 32: SSP2ADD = 0x13;
  6860  06C3  3013               	movlw	19
  6861  06C4                     L7:	
  6862  06C4  009A               	movwf	26	;volatile
  6863  06C5                     l2889:	
  6864                           
  6865                           ;I2C2.c: 33: }
  6866                           ;I2C2.c: 34: SSP2CON1bits.SSPEN = 1;
  6867  06C5  0024               	movlb	4	; select bank4
  6868  06C6  2ED6               	goto	l2901
  6869  06C7                     l2891:	
  6870                           ;I2C2.c: 37: case I2C_MODE_SLAVE:
  6871                           
  6872                           ;I2C2.c: 35: break;
  6873                           
  6874                           
  6875                           ;I2C2.c: 38: SSP2STAT = 0x00;
  6876  06C7  0024               	movlb	4	; select bank4
  6877  06C8  019C               	clrf	28	;volatile
  6878                           
  6879                           ;I2C2.c: 39: SSP2CON1 |= (0x06<<0);
  6880  06C9  3006               	movlw	6
  6881  06CA  0020               	movlb	0	; select bank0
  6882  06CB  00A3               	movwf	??_I2C2_Setting
  6883  06CC  0823               	movf	??_I2C2_Setting,w
  6884  06CD  0024               	movlb	4	; select bank4
  6885  06CE  049D               	iorwf	29,f	;volatile
  6886                           
  6887                           ;I2C2.c: 40: SSP2CON2bits.SEN= 1;
  6888  06CF  141E               	bsf	30,0	;volatile
  6889                           
  6890                           ;I2C2.c: 41: SSP2ADD = address << 1;
  6891  06D0  0020               	movlb	0	; select bank0
  6892  06D1  3524               	lslf	I2C2_Setting@address,w
  6893  06D2  0024               	movlb	4	; select bank4
  6894  06D3  009A               	movwf	26	;volatile
  6895                           
  6896                           ;I2C2.c: 42: SSP2MSK = 0xFE;
  6897  06D4  30FE               	movlw	254
  6898  06D5  009B               	movwf	27	;volatile
  6899  06D6                     l2901:	
  6900                           
  6901                           ;I2C2.c: 43: SSP2CON1bits.SSPEN = 1;
  6902  06D6  169D               	bsf	29,5	;volatile
  6903                           
  6904                           ;I2C2.c: 45: }
  6905                           
  6906                           ;I2C2.c: 44: break;
  6907  06D7  2EE1               	goto	l78
  6908  06D8                     l2905:	
  6909  06D8  0020               	movlb	0	; select bank0
  6910  06D9  0821               	movf	I2C2_Setting@mode,w
  6911                           
  6912                           ; Switch size 1, requested type "space"
  6913                           ; Number of cases is 2, Range of values is 0 to 1
  6914                           ; switch strategies available:
  6915                           ; Name         Instructions Cycles
  6916                           ; simple_byte            7     4 (average)
  6917                           ; direct_byte           10     6 (fixed)
  6918                           ; jumptable            260     6 (fixed)
  6919                           ;	Chosen strategy is simple_byte
  6920  06DA  3A00               	xorlw	0	; case 0
  6921  06DB  1903               	skipnz
  6922  06DC  2EB0               	goto	l74
  6923  06DD  3A01               	xorlw	1	; case 1
  6924  06DE  1903               	skipnz
  6925  06DF  2EC7               	goto	l2891
  6926  06E0  2EE1               	goto	l78
  6927  06E1                     l78:	
  6928                           
  6929                           ;I2C2.c: 46: SSP2IE = 1;
  6930  06E1  0021               	movlb	1	; select bank1
  6931  06E2  1414               	bsf	20,0	;volatile
  6932                           
  6933                           ;I2C2.c: 47: BCL2IE = 1;
  6934  06E3  1494               	bsf	20,1	;volatile
  6935                           
  6936                           ;I2C2.c: 48: SSP2IF = 0;
  6937  06E4  0020               	movlb	0	; select bank0
  6938  06E5  1014               	bcf	20,0	;volatile
  6939                           
  6940                           ;I2C2.c: 49: BCL2IF = 0;
  6941  06E6  1094               	bcf	20,1	;volatile
  6942  06E7  0008               	return
  6943  06E8                     __end_of_I2C2_Setting:	
  6944                           
  6945                           	psect	text32
  6946  0D58                     __ptext32:	
  6947 ;; *************** function _I2C2_PinInit *****************
  6948 ;; Defined at:
  6949 ;;		line 9 in file "I2C2.c"
  6950 ;; Parameters:    Size  Location     Type
  6951 ;;		None
  6952 ;; Auto vars:     Size  Location     Type
  6953 ;;		None
  6954 ;; Return value:  Size  Location     Type
  6955 ;;                  1    wreg      void 
  6956 ;; Registers used:
  6957 ;;		wreg, status,2, status,0
  6958 ;; Tracked objects:
  6959 ;;		On entry : 0/0
  6960 ;;		On exit  : 0/0
  6961 ;;		Unchanged: 0/0
  6962 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  6963 ;;      Params:         0       0       0       0       0       0
  6964 ;;      Locals:         0       0       0       0       0       0
  6965 ;;      Temps:          0       1       0       0       0       0
  6966 ;;      Totals:         0       1       0       0       0       0
  6967 ;;Total ram usage:        1 bytes
  6968 ;; Hardware stack levels used:    1
  6969 ;; Hardware stack levels required when called:    3
  6970 ;; This function calls:
  6971 ;;		Nothing
  6972 ;; This function is called by:
  6973 ;;		_I2C2_Setting
  6974 ;; This function uses a non-reentrant model
  6975 ;;
  6976                           
  6977                           
  6978                           ;psect for function _I2C2_PinInit
  6979  0D58                     _I2C2_PinInit:	
  6980                           
  6981                           ;I2C2.c: 11: TRISB |= ((1<<2)|(1<<5));
  6982                           
  6983                           ;incstack = 0
  6984                           ; Regs used in _I2C2_PinInit: [wreg+status,2+status,0]
  6985  0D58  3024               	movlw	36
  6986  0D59  0020               	movlb	0	; select bank0
  6987  0D5A  00A0               	movwf	??_I2C2_PinInit
  6988  0D5B  0820               	movf	??_I2C2_PinInit,w
  6989  0D5C  0021               	movlb	1	; select bank1
  6990  0D5D  048D               	iorwf	13,f	;volatile
  6991                           
  6992                           ;I2C2.c: 12: ANSELB &= ~((1<<2)|(1<<5));
  6993  0D5E  30DB               	movlw	219
  6994  0D5F  0020               	movlb	0	; select bank0
  6995  0D60  00A0               	movwf	??_I2C2_PinInit
  6996  0D61  0820               	movf	??_I2C2_PinInit,w
  6997  0D62  0023               	movlb	3	; select bank3
  6998  0D63  058D               	andwf	13,f	;volatile
  6999  0D64  0008               	return
  7000  0D65                     __end_of_I2C2_PinInit:	
  7001                           
  7002                           	psect	text33
  7003  0F17                     __ptext33:	
  7004 ;; *************** function _Buzzer_Init *****************
  7005 ;; Defined at:
  7006 ;;		line 11 in file "Buzzer.c"
  7007 ;; Parameters:    Size  Location     Type
  7008 ;;		None
  7009 ;; Auto vars:     Size  Location     Type
  7010 ;;		None
  7011 ;; Return value:  Size  Location     Type
  7012 ;;                  1    wreg      void 
  7013 ;; Registers used:
  7014 ;;		wreg, status,2, status,0
  7015 ;; Tracked objects:
  7016 ;;		On entry : 0/0
  7017 ;;		On exit  : 0/0
  7018 ;;		Unchanged: 0/0
  7019 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  7020 ;;      Params:         0       0       0       0       0       0
  7021 ;;      Locals:         0       0       0       0       0       0
  7022 ;;      Temps:          0       1       0       0       0       0
  7023 ;;      Totals:         0       1       0       0       0       0
  7024 ;;Total ram usage:        1 bytes
  7025 ;; Hardware stack levels used:    1
  7026 ;; Hardware stack levels required when called:    3
  7027 ;; This function calls:
  7028 ;;		Nothing
  7029 ;; This function is called by:
  7030 ;;		_main
  7031 ;; This function uses a non-reentrant model
  7032 ;;
  7033                           
  7034                           
  7035                           ;psect for function _Buzzer_Init
  7036  0F17                     _Buzzer_Init:	
  7037                           
  7038                           ;Buzzer.c: 13: TRISA &= ~(0x01<<7);
  7039                           
  7040                           ;incstack = 0
  7041                           ; Regs used in _Buzzer_Init: [wreg+status,2+status,0]
  7042  0F17  307F               	movlw	127
  7043  0F18  0020               	movlb	0	; select bank0
  7044  0F19  00A0               	movwf	??_Buzzer_Init
  7045  0F1A  0820               	movf	??_Buzzer_Init,w
  7046  0F1B  0021               	movlb	1	; select bank1
  7047  0F1C  058C               	andwf	12,f	;volatile
  7048                           
  7049                           ;Buzzer.c: 14: ANSELA &= ~(0x01<<7);
  7050  0F1D  307F               	movlw	127
  7051  0F1E  0020               	movlb	0	; select bank0
  7052  0F1F  00A0               	movwf	??_Buzzer_Init
  7053  0F20  0820               	movf	??_Buzzer_Init,w
  7054  0F21  0023               	movlb	3	; select bank3
  7055  0F22  058C               	andwf	12,f	;volatile
  7056                           
  7057                           ;Buzzer.c: 15: APFCON0 |= (0x01<<3);
  7058  0F23  0022               	movlb	2	; select bank2
  7059  0F24  159D               	bsf	29,3	;volatile
  7060                           
  7061                           ;Buzzer.c: 17: T2CON |= (0x00<<3);
  7062  0F25  0020               	movlb	0	; select bank0
  7063  0F26  081C               	movf	28,w	;volatile
  7064                           
  7065                           ;Buzzer.c: 18: T2CON |= (0x02<<0);
  7066  0F27  149C               	bsf	28,1	;volatile
  7067                           
  7068                           ;Buzzer.c: 19: T2CON |= (0x01<<2);
  7069  0F28  151C               	bsf	28,2	;volatile
  7070                           
  7071                           ;Buzzer.c: 21: TMR2 = 0x00;
  7072  0F29  019A               	clrf	26	;volatile
  7073                           
  7074                           ;Buzzer.c: 22: PR2 = 0xFF;
  7075  0F2A  30FF               	movlw	255
  7076  0F2B  009B               	movwf	27	;volatile
  7077                           
  7078                           ;Buzzer.c: 24: CCP2CON &= ~(0x03<<6);
  7079  0F2C  303F               	movlw	63
  7080  0F2D  00A0               	movwf	??_Buzzer_Init
  7081  0F2E  0820               	movf	??_Buzzer_Init,w
  7082  0F2F  0025               	movlb	5	; select bank5
  7083  0F30  059A               	andwf	26,f	;volatile
  7084                           
  7085                           ;Buzzer.c: 25: CCP2CON |= (0x0C<<0);
  7086  0F31  300C               	movlw	12
  7087  0F32  0020               	movlb	0	; select bank0
  7088  0F33  00A0               	movwf	??_Buzzer_Init
  7089  0F34  0820               	movf	??_Buzzer_Init,w
  7090  0F35  0025               	movlb	5	; select bank5
  7091  0F36  049A               	iorwf	26,f	;volatile
  7092                           
  7093                           ;Buzzer.c: 26: CCPTMRS &= ~(0x03<<2);
  7094  0F37  30F3               	movlw	243
  7095  0F38  0020               	movlb	0	; select bank0
  7096  0F39  00A0               	movwf	??_Buzzer_Init
  7097  0F3A  0820               	movf	??_Buzzer_Init,w
  7098  0F3B  0025               	movlb	5	; select bank5
  7099  0F3C  059E               	andwf	30,f	;volatile
  7100                           
  7101                           ;Buzzer.c: 28: CCPR2L = 0x00;
  7102  0F3D  0198               	clrf	24	;volatile
  7103  0F3E  0008               	return
  7104  0F3F                     __end_of_Buzzer_Init:	
  7105                           
  7106                           	psect	text34
  7107  0DA1                     __ptext34:	
  7108 ;; *************** function _Basic_Init *****************
  7109 ;; Defined at:
  7110 ;;		line 86 in file "main.c"
  7111 ;; Parameters:    Size  Location     Type
  7112 ;;		None
  7113 ;; Auto vars:     Size  Location     Type
  7114 ;;		None
  7115 ;; Return value:  Size  Location     Type
  7116 ;;                  1    wreg      char 
  7117 ;; Registers used:
  7118 ;;		wreg, status,2
  7119 ;; Tracked objects:
  7120 ;;		On entry : 0/0
  7121 ;;		On exit  : 0/0
  7122 ;;		Unchanged: 0/0
  7123 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  7124 ;;      Params:         0       0       0       0       0       0
  7125 ;;      Locals:         0       0       0       0       0       0
  7126 ;;      Temps:          0       0       0       0       0       0
  7127 ;;      Totals:         0       0       0       0       0       0
  7128 ;;Total ram usage:        0 bytes
  7129 ;; Hardware stack levels used:    1
  7130 ;; Hardware stack levels required when called:    3
  7131 ;; This function calls:
  7132 ;;		Nothing
  7133 ;; This function is called by:
  7134 ;;		_main
  7135 ;; This function uses a non-reentrant model
  7136 ;;
  7137                           
  7138                           
  7139                           ;psect for function _Basic_Init
  7140  0DA1                     _Basic_Init:	
  7141                           
  7142                           ;main.c: 88: OSCCON = 0xF0;
  7143                           
  7144                           ;incstack = 0
  7145                           ; Regs used in _Basic_Init: [wreg+status,2]
  7146  0DA1  30F0               	movlw	240
  7147  0DA2  0021               	movlb	1	; select bank1
  7148  0DA3  0099               	movwf	25	;volatile
  7149                           
  7150                           ;main.c: 92: TRISA = 0x00;
  7151  0DA4  018C               	clrf	12	;volatile
  7152                           
  7153                           ;main.c: 93: ANSELA = 0x00;
  7154  0DA5  0023               	movlb	3	; select bank3
  7155  0DA6  018C               	clrf	12	;volatile
  7156                           
  7157                           ;main.c: 95: TRISB = 0x00;
  7158  0DA7  0021               	movlb	1	; select bank1
  7159  0DA8  018D               	clrf	13	;volatile
  7160                           
  7161                           ;main.c: 96: ANSELB = 0x00;
  7162  0DA9  0023               	movlb	3	; select bank3
  7163  0DAA  018D               	clrf	13	;volatile
  7164                           
  7165                           ;main.c: 98: APFCON0 = 0x00;
  7166  0DAB  0022               	movlb	2	; select bank2
  7167  0DAC  019D               	clrf	29	;volatile
  7168                           
  7169                           ;main.c: 99: APFCON1 = 0x00;
  7170  0DAD  019E               	clrf	30	;volatile
  7171                           
  7172                           ;main.c: 101: PORTA = 0x00;
  7173  0DAE  0020               	movlb	0	; select bank0
  7174  0DAF  018C               	clrf	12	;volatile
  7175                           
  7176                           ;main.c: 102: PORTB = 0x00;
  7177  0DB0  018D               	clrf	13	;volatile
  7178  0DB1  0008               	return
  7179  0DB2                     __end_of_Basic_Init:	
  7180                           ;main.c: 104: return 0;
  7181                           ;	Return value of _Basic_Init is never used
  7182                           
  7183                           
  7184                           	psect	intentry
  7185  0004                     __pintentry:	
  7186 ;; *************** function _Handler *****************
  7187 ;; Defined at:
  7188 ;;		line 107 in file "main.c"
  7189 ;; Parameters:    Size  Location     Type
  7190 ;;		None
  7191 ;; Auto vars:     Size  Location     Type
  7192 ;;		None
  7193 ;; Return value:  Size  Location     Type
  7194 ;;                  1    wreg      void 
  7195 ;; Registers used:
  7196 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7197 ;; Tracked objects:
  7198 ;;		On entry : 0/0
  7199 ;;		On exit  : 0/0
  7200 ;;		Unchanged: 0/0
  7201 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  7202 ;;      Params:         0       0       0       0       0       0
  7203 ;;      Locals:         0       0       0       0       0       0
  7204 ;;      Temps:          1       0       0       0       0       0
  7205 ;;      Totals:         1       0       0       0       0       0
  7206 ;;Total ram usage:        1 bytes
  7207 ;; Hardware stack levels used:    1
  7208 ;; Hardware stack levels required when called:    2
  7209 ;; This function calls:
  7210 ;;		_Buzzer_Count1ms
  7211 ;;		_I2C_CommonInterrupt
  7212 ;;		_Timer1_Count1ms
  7213 ;;		_Timer1_DetectAssignCount
  7214 ;;		_Timer6_CheckFlag
  7215 ;;		_mTouch_IntervalDecrement
  7216 ;;		_mTouch_Read
  7217 ;; This function is called by:
  7218 ;;		Interrupt level 1
  7219 ;; This function uses a non-reentrant model
  7220 ;;
  7221                           
  7222  0004                     _Handler:	
  7223                           
  7224                           ;incstack = 0
  7225  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
  7226                           
  7227                           ; Regs used in _Handler: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7228  0005  3180               	pagesel	$
  7229  0006  0020               	movlb	0	; select bank0
  7230  0007  087F               	movf	127,w
  7231  0008  00FB               	movwf	??_Handler
  7232                           
  7233                           ;main.c: 109: if(Timer1_DetectAssignCount())
  7234  0009  318E  2643  3180   	fcall	_Timer1_DetectAssignCount
  7235  000C  3A00               	xorlw	0
  7236  000D  1903               	skipnz
  7237  000E  2812               	goto	i1l2863
  7238                           
  7239                           ;main.c: 110: LATA6 = !LATA6;
  7240  000F  3040               	movlw	64
  7241  0010  0022               	movlb	2	; select bank2
  7242  0011  068C               	xorwf	12,f
  7243  0012                     i1l2863:	
  7244                           
  7245                           ;main.c: 112: if(Timer6_CheckFlag())
  7246  0012  318D  254D  3180   	fcall	_Timer6_CheckFlag
  7247  0015  3A00               	xorlw	0
  7248  0016  1903               	skipnz
  7249  0017  2824               	goto	i1l520
  7250                           
  7251                           ;main.c: 113: {
  7252                           ;main.c: 114: mTouch_IntervalDecrement();
  7253  0018  318D  2581  3180   	fcall	_mTouch_IntervalDecrement
  7254                           
  7255                           ;main.c: 115: Timer1_Count1ms();
  7256  001B  318F  27C6  3180   	fcall	_Timer1_Count1ms
  7257                           
  7258                           ;main.c: 117: mTouch_Read();
  7259  001E  318E  26F1  3180   	fcall	_mTouch_Read
  7260                           
  7261                           ;main.c: 118: Buzzer_Count1ms();
  7262  0021  318D  25E9  3180   	fcall	_Buzzer_Count1ms
  7263  0024                     i1l520:	
  7264                           
  7265                           ;main.c: 119: }
  7266                           ;main.c: 120: I2C_CommonInterrupt();
  7267  0024  318D  2514         	fcall	_I2C_CommonInterrupt
  7268  0026  087B               	movf	??_Handler,w
  7269  0027  0020               	movlb	0	; select bank0
  7270  0028  00FF               	movwf	127
  7271  0029  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
  7272  002A  0009               	retfie
  7273  002B                     __end_of_Handler:	
  7274                           
  7275                           	psect	text36
  7276  0EF1                     __ptext36:	
  7277 ;; *************** function _mTouch_Read *****************
  7278 ;; Defined at:
  7279 ;;		line 36 in file "mTouch.c"
  7280 ;; Parameters:    Size  Location     Type
  7281 ;;		None
  7282 ;; Auto vars:     Size  Location     Type
  7283 ;;		None
  7284 ;; Return value:  Size  Location     Type
  7285 ;;                  1    wreg      void 
  7286 ;; Registers used:
  7287 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  7288 ;; Tracked objects:
  7289 ;;		On entry : 0/0
  7290 ;;		On exit  : 0/0
  7291 ;;		Unchanged: 0/0
  7292 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  7293 ;;      Params:         0       0       0       0       0       0
  7294 ;;      Locals:         0       0       0       0       0       0
  7295 ;;      Temps:          1       0       0       0       0       0
  7296 ;;      Totals:         1       0       0       0       0       0
  7297 ;;Total ram usage:        1 bytes
  7298 ;; Hardware stack levels used:    1
  7299 ;; This function calls:
  7300 ;;		Nothing
  7301 ;; This function is called by:
  7302 ;;		_Handler
  7303 ;; This function uses a non-reentrant model
  7304 ;;
  7305                           
  7306                           
  7307                           ;psect for function _mTouch_Read
  7308  0EF1                     _mTouch_Read:	
  7309                           
  7310                           ;mTouch.c: 38: static uint8_t channel=0;
  7311                           ;mTouch.c: 40: CPS_PreData[channel] = CPS_Data[channel];
  7312                           
  7313                           ;incstack = 0
  7314                           ; Regs used in _mTouch_Read: [wreg+fsr1l+fsr1h+status,2+status,0]
  7315  0EF1  0875               	movf	mTouch_Read@channel,w
  7316  0EF2  3EC5               	addlw	(low (_CPS_Data| 0))& (0+255)
  7317  0EF3  0086               	movwf	6
  7318  0EF4  0187               	clrf	7
  7319  0EF5  0801               	movf	1,w
  7320  0EF6  00F6               	movwf	??_mTouch_Read
  7321  0EF7  0875               	movf	mTouch_Read@channel,w
  7322  0EF8  3EC2               	addlw	(low (_CPS_PreData| 0))& (0+255)
  7323  0EF9  0086               	movwf	6
  7324  0EFA  0187               	clrf	7
  7325  0EFB  0876               	movf	??_mTouch_Read,w
  7326  0EFC  0081               	movwf	1
  7327                           
  7328                           ;mTouch.c: 42: CPSCON0 &= ~(0x01<<7);;
  7329  0EFD  307F               	movlw	127
  7330  0EFE  00F6               	movwf	??_mTouch_Read
  7331  0EFF  0876               	movf	??_mTouch_Read,w
  7332  0F00  0020               	movlb	0	; select bank0
  7333  0F01  059E               	andwf	30,f	;volatile
  7334                           
  7335                           ;mTouch.c: 43: CPS_Data[channel] = TMR0;
  7336  0F02  0815               	movf	21,w	;volatile
  7337  0F03  00F6               	movwf	??_mTouch_Read
  7338  0F04  0875               	movf	mTouch_Read@channel,w
  7339  0F05  3EC5               	addlw	(low (_CPS_Data| 0))& (0+255)
  7340  0F06  0086               	movwf	6
  7341  0F07  0187               	clrf	7
  7342  0F08  0876               	movf	??_mTouch_Read,w
  7343  0F09  0081               	movwf	1
  7344                           
  7345                           ;mTouch.c: 44: TMR0 = 0x00;
  7346  0F0A  0195               	clrf	21	;volatile
  7347                           
  7348                           ;mTouch.c: 45: CPSCON0 |= (0x01<<7);;
  7349  0F0B  179E               	bsf	30,7	;volatile
  7350                           
  7351                           ;mTouch.c: 47: if(++channel>2)channel = 0;
  7352  0F0C  3001               	movlw	1
  7353  0F0D  00F6               	movwf	??_mTouch_Read
  7354  0F0E  0876               	movf	??_mTouch_Read,w
  7355  0F0F  07F5               	addwf	mTouch_Read@channel,f
  7356  0F10  3003               	movlw	3
  7357  0F11  0275               	subwf	mTouch_Read@channel,w
  7358  0F12  1803               	btfsc	3,0
  7359  0F13  01F5               	clrf	mTouch_Read@channel
  7360                           
  7361                           ;mTouch.c: 48: CPSCON1 = (uint8_t)channel;
  7362  0F14  0875               	movf	mTouch_Read@channel,w
  7363  0F15  009F               	movwf	31	;volatile
  7364  0F16  0008               	return
  7365  0F17                     __end_of_mTouch_Read:	
  7366                           
  7367                           	psect	text37
  7368  0D81                     __ptext37:	
  7369 ;; *************** function _mTouch_IntervalDecrement *****************
  7370 ;; Defined at:
  7371 ;;		line 51 in file "mTouch.c"
  7372 ;; Parameters:    Size  Location     Type
  7373 ;;		None
  7374 ;; Auto vars:     Size  Location     Type
  7375 ;;		None
  7376 ;; Return value:  Size  Location     Type
  7377 ;;                  1    wreg      void 
  7378 ;; Registers used:
  7379 ;;		wreg, status,2, status,0
  7380 ;; Tracked objects:
  7381 ;;		On entry : 0/0
  7382 ;;		On exit  : 0/0
  7383 ;;		Unchanged: 0/0
  7384 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  7385 ;;      Params:         0       0       0       0       0       0
  7386 ;;      Locals:         0       0       0       0       0       0
  7387 ;;      Temps:          0       0       0       0       0       0
  7388 ;;      Totals:         0       0       0       0       0       0
  7389 ;;Total ram usage:        0 bytes
  7390 ;; Hardware stack levels used:    1
  7391 ;; This function calls:
  7392 ;;		Nothing
  7393 ;; This function is called by:
  7394 ;;		_Handler
  7395 ;; This function uses a non-reentrant model
  7396 ;;
  7397                           
  7398                           
  7399                           ;psect for function _mTouch_IntervalDecrement
  7400  0D81                     _mTouch_IntervalDecrement:	
  7401                           
  7402                           ;mTouch.c: 53: if(mTouch_Interval[0]>0)
  7403                           
  7404                           ;incstack = 0
  7405                           ; Regs used in _mTouch_IntervalDecrement: [wreg+status,2+status,0]
  7406  0D81  0870               	movf	_mTouch_Interval,w
  7407  0D82  1903               	btfsc	3,2
  7408  0D83  2D86               	goto	i1l409
  7409                           
  7410                           ;mTouch.c: 54: mTouch_Interval[0]--;
  7411  0D84  3001               	movlw	1
  7412  0D85  02F0               	subwf	_mTouch_Interval,f
  7413  0D86                     i1l409:	
  7414                           
  7415                           ;mTouch.c: 55: if(mTouch_Interval[1]>0)
  7416  0D86  0871               	movf	_mTouch_Interval+1,w
  7417  0D87  1903               	btfsc	3,2
  7418  0D88  2D8B               	goto	i1l410
  7419                           
  7420                           ;mTouch.c: 56: mTouch_Interval[1]--;
  7421  0D89  3001               	movlw	1
  7422  0D8A  02F1               	subwf	_mTouch_Interval+1,f
  7423  0D8B                     i1l410:	
  7424                           
  7425                           ;mTouch.c: 57: if(mTouch_Interval[2]>0)
  7426  0D8B  0872               	movf	_mTouch_Interval+2,w
  7427  0D8C  1903               	btfsc	3,2
  7428  0D8D  0008               	return
  7429                           
  7430                           ;mTouch.c: 58: mTouch_Interval[2]--;
  7431  0D8E  3001               	movlw	1
  7432  0D8F  02F2               	subwf	_mTouch_Interval+2,f
  7433  0D90  0008               	return
  7434  0D91                     __end_of_mTouch_IntervalDecrement:	
  7435                           
  7436                           	psect	text38
  7437  0D4D                     __ptext38:	
  7438 ;; *************** function _Timer6_CheckFlag *****************
  7439 ;; Defined at:
  7440 ;;		line 17 in file "Timer6.c"
  7441 ;; Parameters:    Size  Location     Type
  7442 ;;		None
  7443 ;; Auto vars:     Size  Location     Type
  7444 ;;		None
  7445 ;; Return value:  Size  Location     Type
  7446 ;;                  1    wreg      unsigned char 
  7447 ;; Registers used:
  7448 ;;		wreg
  7449 ;; Tracked objects:
  7450 ;;		On entry : 0/0
  7451 ;;		On exit  : 0/0
  7452 ;;		Unchanged: 0/0
  7453 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  7454 ;;      Params:         0       0       0       0       0       0
  7455 ;;      Locals:         0       0       0       0       0       0
  7456 ;;      Temps:          0       0       0       0       0       0
  7457 ;;      Totals:         0       0       0       0       0       0
  7458 ;;Total ram usage:        0 bytes
  7459 ;; Hardware stack levels used:    1
  7460 ;; This function calls:
  7461 ;;		Nothing
  7462 ;; This function is called by:
  7463 ;;		_Handler
  7464 ;; This function uses a non-reentrant model
  7465 ;;
  7466                           
  7467                           
  7468                           ;psect for function _Timer6_CheckFlag
  7469  0D4D                     _Timer6_CheckFlag:	
  7470                           
  7471                           ;Timer6.c: 19: if(TMR6IE&&TMR6IF)
  7472                           
  7473                           ;incstack = 0
  7474                           ; Regs used in _Timer6_CheckFlag: [wreg]
  7475  0D4D  0021               	movlb	1	; select bank1
  7476  0D4E  1D93               	btfss	19,3	;volatile
  7477  0D4F  2D56               	goto	i1l1673
  7478  0D50  0020               	movlb	0	; select bank0
  7479  0D51  1D93               	btfss	19,3	;volatile
  7480  0D52  2D56               	goto	i1l1673
  7481                           
  7482                           ;Timer6.c: 20: {
  7483                           ;Timer6.c: 21: TMR6IF = 0;
  7484  0D53  1193               	bcf	19,3	;volatile
  7485                           
  7486                           ;Timer6.c: 22: return 1;
  7487  0D54  3001               	movlw	1
  7488  0D55  0008               	return
  7489  0D56                     i1l1673:	
  7490                           
  7491                           ;Timer6.c: 23: }
  7492                           ;Timer6.c: 24: return 0;
  7493  0D56  3000               	movlw	0
  7494  0D57  0008               	return
  7495  0D58                     __end_of_Timer6_CheckFlag:	
  7496                           
  7497                           	psect	text39
  7498  0E43                     __ptext39:	
  7499 ;; *************** function _Timer1_DetectAssignCount *****************
  7500 ;; Defined at:
  7501 ;;		line 105 in file "Timer1.c"
  7502 ;; Parameters:    Size  Location     Type
  7503 ;;		None
  7504 ;; Auto vars:     Size  Location     Type
  7505 ;;		None
  7506 ;; Return value:  Size  Location     Type
  7507 ;;                  1    wreg      unsigned char 
  7508 ;; Registers used:
  7509 ;;		wreg
  7510 ;; Tracked objects:
  7511 ;;		On entry : 0/0
  7512 ;;		On exit  : 0/0
  7513 ;;		Unchanged: 0/0
  7514 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  7515 ;;      Params:         0       0       0       0       0       0
  7516 ;;      Locals:         0       0       0       0       0       0
  7517 ;;      Temps:          0       0       0       0       0       0
  7518 ;;      Totals:         0       0       0       0       0       0
  7519 ;;Total ram usage:        0 bytes
  7520 ;; Hardware stack levels used:    1
  7521 ;; This function calls:
  7522 ;;		Nothing
  7523 ;; This function is called by:
  7524 ;;		_Handler
  7525 ;; This function uses a non-reentrant model
  7526 ;;
  7527                           
  7528                           
  7529                           ;psect for function _Timer1_DetectAssignCount
  7530  0E43                     _Timer1_DetectAssignCount:	
  7531                           
  7532                           ;Timer1.c: 107: if(TMR1IF&&TMR1IE)
  7533                           
  7534                           ;incstack = 0
  7535                           ; Regs used in _Timer1_DetectAssignCount: [wreg]
  7536  0E43  0020               	movlb	0	; select bank0
  7537  0E44  1C11               	btfss	17,0	;volatile
  7538  0E45  2E5B               	goto	i1l2549
  7539  0E46  0021               	movlb	1	; select bank1
  7540  0E47  1C11               	btfss	17,0	;volatile
  7541  0E48  2E5B               	goto	i1l2549
  7542                           
  7543                           ;Timer1.c: 108: {
  7544                           ;Timer1.c: 109: cnts.SigmaDeltaCount+= 10UL;
  7545  0E49  300A               	movlw	10
  7546  0E4A  07BE               	addwf	_cnts^(0+128),f
  7547  0E4B  3000               	movlw	0
  7548  0E4C  3DBF               	addwfc	(_cnts+1)^(0+128),f
  7549  0E4D  3000               	movlw	0
  7550  0E4E  3DC0               	addwfc	(_cnts+2)^(0+128),f
  7551  0E4F  3000               	movlw	0
  7552  0E50  3DC1               	addwfc	(_cnts+3)^(0+128),f
  7553                           
  7554                           ;Timer1.c: 111: {TMR1ON = 0; TMR1 = (uint16_t)0xFFFF - 10UL+1; TMR1ON = 1; };
  7555  0E51  0020               	movlb	0	; select bank0
  7556  0E52  1018               	bcf	24,0	;volatile
  7557  0E53  30FF               	movlw	255
  7558  0E54  0097               	movwf	23	;volatile
  7559  0E55  30F6               	movlw	246
  7560  0E56  0096               	movwf	22	;volatile
  7561  0E57  1418               	bsf	24,0	;volatile
  7562                           
  7563                           ;Timer1.c: 113: TMR1IF = 0;
  7564  0E58  1011               	bcf	17,0	;volatile
  7565                           
  7566                           ;Timer1.c: 115: return 1;
  7567  0E59  3001               	movlw	1
  7568  0E5A  0008               	return
  7569  0E5B                     i1l2549:	
  7570                           
  7571                           ;Timer1.c: 116: }
  7572                           ;Timer1.c: 117: return 0;
  7573  0E5B  3000               	movlw	0
  7574  0E5C  0008               	return
  7575  0E5D                     __end_of_Timer1_DetectAssignCount:	
  7576                           
  7577                           	psect	text40
  7578  0FC6                     __ptext40:	
  7579 ;; *************** function _Timer1_Count1ms *****************
  7580 ;; Defined at:
  7581 ;;		line 76 in file "Timer1.c"
  7582 ;; Parameters:    Size  Location     Type
  7583 ;;		None
  7584 ;; Auto vars:     Size  Location     Type
  7585 ;;		None
  7586 ;; Return value:  Size  Location     Type
  7587 ;;                  1    wreg      void 
  7588 ;; Registers used:
  7589 ;;		wreg, status,2, status,0, pclath, cstack
  7590 ;; Tracked objects:
  7591 ;;		On entry : 0/0
  7592 ;;		On exit  : 0/0
  7593 ;;		Unchanged: 0/0
  7594 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  7595 ;;      Params:         0       0       0       0       0       0
  7596 ;;      Locals:         0       0       0       0       0       0
  7597 ;;      Temps:          1       0       0       0       0       0
  7598 ;;      Totals:         1       0       0       0       0       0
  7599 ;;Total ram usage:        1 bytes
  7600 ;; Hardware stack levels used:    1
  7601 ;; Hardware stack levels required when called:    1
  7602 ;; This function calls:
  7603 ;;		i1_Buzzer_MiliSecond
  7604 ;; This function is called by:
  7605 ;;		_Handler
  7606 ;; This function uses a non-reentrant model
  7607 ;;
  7608                           
  7609                           
  7610                           ;psect for function _Timer1_Count1ms
  7611  0FC6                     _Timer1_Count1ms:	
  7612                           
  7613                           ;Timer1.c: 78: if(TMR1ON==1)
  7614                           
  7615                           ;incstack = 0
  7616                           ; Regs used in _Timer1_Count1ms: [wreg+status,2+status,0+pclath+cstack]
  7617  0FC6  0020               	movlb	0	; select bank0
  7618  0FC7  1C18               	btfss	24,0	;volatile
  7619  0FC8  0008               	return
  7620                           
  7621                           ;Timer1.c: 79: {
  7622                           ;Timer1.c: 80: tcnt.Delta_t++;
  7623  0FC9  3001               	movlw	1
  7624  0FCA  07E3               	addwf	_tcnt+2,f
  7625  0FCB  3000               	movlw	0
  7626  0FCC  3DE4               	addwfc	_tcnt+3,f
  7627  0FCD  3000               	movlw	0
  7628  0FCE  3DE5               	addwfc	_tcnt+4,f
  7629  0FCF  3000               	movlw	0
  7630  0FD0  3DE6               	addwfc	_tcnt+5,f
  7631                           
  7632                           ;Timer1.c: 81: tcnt.RenewalRersult++;
  7633  0FD1  3001               	movlw	1
  7634  0FD2  07E7               	addwf	_tcnt+6,f
  7635  0FD3  3000               	movlw	0
  7636  0FD4  3DE8               	addwfc	_tcnt+7,f
  7637                           
  7638                           ;Timer1.c: 83: if(tcnt.RenewalRersult>1000)
  7639  0FD5  3003               	movlw	3
  7640  0FD6  0268               	subwf	_tcnt+7,w
  7641  0FD7  30E9               	movlw	233
  7642  0FD8  1903               	skipnz
  7643  0FD9  0267               	subwf	_tcnt+6,w
  7644  0FDA  1C03               	skipc
  7645  0FDB  0008               	return
  7646                           
  7647                           ;Timer1.c: 84: {
  7648                           ;Timer1.c: 85: tcnt.Second_t++;
  7649  0FDC  3001               	movlw	1
  7650  0FDD  00F8               	movwf	??_Timer1_Count1ms
  7651  0FDE  0878               	movf	??_Timer1_Count1ms,w
  7652  0FDF  07E1               	addwf	_tcnt,f
  7653                           
  7654                           ;Timer1.c: 87: if((56<tcnt.Second_t)&&(tcnt.Second_t<60))
  7655  0FE0  3039               	movlw	57
  7656  0FE1  0261               	subwf	_tcnt,w
  7657  0FE2  1C03               	skipc
  7658  0FE3  2FEC               	goto	i1l2523
  7659  0FE4  303C               	movlw	60
  7660  0FE5  0261               	subwf	_tcnt,w
  7661  0FE6  1803               	skipnc
  7662  0FE7  2FEC               	goto	i1l2523
  7663                           
  7664                           ;Timer1.c: 88: {
  7665                           ;Timer1.c: 89: Buzzer_MiliSecond(300);
  7666  0FE8  302C               	movlw	44
  7667  0FE9  00F6               	movwf	i1Buzzer_MiliSecond@time
  7668  0FEA  3001               	movlw	1
  7669  0FEB  2FF9               	goto	L8
  7670  0FEC                     i1l2523:	
  7671                           ;Timer1.c: 90: }
  7672                           
  7673                           
  7674                           ;Timer1.c: 91: else if(tcnt.Second_t>59)
  7675  0FEC  303C               	movlw	60
  7676  0FED  0020               	movlb	0	; select bank0
  7677  0FEE  0261               	subwf	_tcnt,w
  7678  0FEF  1C03               	skipc
  7679  0FF0  2FFC               	goto	i1l2531
  7680                           
  7681                           ;Timer1.c: 92: {
  7682                           ;Timer1.c: 93: tcnt.Second_t = 0;
  7683  0FF1  01E1               	clrf	_tcnt
  7684                           
  7685                           ;Timer1.c: 94: tcnt.Minute_t++;
  7686  0FF2  3001               	movlw	1
  7687  0FF3  00F8               	movwf	??_Timer1_Count1ms
  7688  0FF4  0878               	movf	??_Timer1_Count1ms,w
  7689  0FF5  07E2               	addwf	_tcnt+1,f
  7690                           
  7691                           ;Timer1.c: 96: Buzzer_MiliSecond(600);
  7692  0FF6  3058               	movlw	88
  7693  0FF7  00F6               	movwf	i1Buzzer_MiliSecond@time
  7694  0FF8  3002               	movlw	2
  7695  0FF9                     L8:	
  7696  0FF9  00F7               	movwf	i1Buzzer_MiliSecond@time+1
  7697  0FFA  318D  2531         	fcall	i1_Buzzer_MiliSecond
  7698  0FFC                     i1l2531:	
  7699                           
  7700                           ;Timer1.c: 97: }
  7701                           ;Timer1.c: 99: tcnt.RenewalRersult = 0;
  7702  0FFC  0020               	movlb	0	; select bank0
  7703  0FFD  01E7               	clrf	_tcnt+6
  7704  0FFE  01E8               	clrf	_tcnt+7
  7705  0FFF  0008               	return
  7706  1000                     __end_of_Timer1_Count1ms:	
  7707                           
  7708                           	psect	text41
  7709  0D31                     __ptext41:	
  7710 ;; *************** function i1_Buzzer_MiliSecond *****************
  7711 ;; Defined at:
  7712 ;;		line 38 in file "Buzzer.c"
  7713 ;; Parameters:    Size  Location     Type
  7714 ;;  time            2    0[COMMON] unsigned int 
  7715 ;; Auto vars:     Size  Location     Type
  7716 ;;		None
  7717 ;; Return value:  Size  Location     Type
  7718 ;;                  1    wreg      void 
  7719 ;; Registers used:
  7720 ;;		wreg, status,2, status,0
  7721 ;; Tracked objects:
  7722 ;;		On entry : 0/0
  7723 ;;		On exit  : 0/0
  7724 ;;		Unchanged: 0/0
  7725 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  7726 ;;      Params:         2       0       0       0       0       0
  7727 ;;      Locals:         0       0       0       0       0       0
  7728 ;;      Temps:          0       0       0       0       0       0
  7729 ;;      Totals:         2       0       0       0       0       0
  7730 ;;Total ram usage:        2 bytes
  7731 ;; Hardware stack levels used:    1
  7732 ;; This function calls:
  7733 ;;		Nothing
  7734 ;; This function is called by:
  7735 ;;		_Timer1_Count1ms
  7736 ;; This function uses a non-reentrant model
  7737 ;;
  7738                           
  7739                           
  7740                           ;psect for function i1_Buzzer_MiliSecond
  7741  0D31                     i1_Buzzer_MiliSecond:	
  7742                           
  7743                           ;Buzzer.c: 40: if(count==0)
  7744                           
  7745                           ;incstack = 0
  7746                           ; Regs used in i1_Buzzer_MiliSecond: [wreg+status,2+status,0]
  7747  0D31  0873               	movf	_count,w
  7748  0D32  0474               	iorwf	_count+1,w
  7749  0D33  1D03               	btfss	3,2
  7750  0D34  0008               	return
  7751                           
  7752                           ;Buzzer.c: 41: count = time;
  7753  0D35  0877               	movf	i1Buzzer_MiliSecond@time+1,w
  7754  0D36  00F4               	movwf	_count+1
  7755  0D37  0876               	movf	i1Buzzer_MiliSecond@time,w
  7756  0D38  00F3               	movwf	_count
  7757  0D39  0008               	return
  7758  0D3A                     __end_ofi1_Buzzer_MiliSecond:	
  7759                           
  7760                           	psect	text42
  7761  0D14                     __ptext42:	
  7762 ;; *************** function _I2C_CommonInterrupt *****************
  7763 ;; Defined at:
  7764 ;;		line 58 in file "I2C_Common.c"
  7765 ;; Parameters:    Size  Location     Type
  7766 ;;		None
  7767 ;; Auto vars:     Size  Location     Type
  7768 ;;		None
  7769 ;; Return value:  Size  Location     Type
  7770 ;;                  1    wreg      void 
  7771 ;; Registers used:
  7772 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7773 ;; Tracked objects:
  7774 ;;		On entry : 0/0
  7775 ;;		On exit  : 0/0
  7776 ;;		Unchanged: 0/0
  7777 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  7778 ;;      Params:         0       0       0       0       0       0
  7779 ;;      Locals:         0       0       0       0       0       0
  7780 ;;      Temps:          0       0       0       0       0       0
  7781 ;;      Totals:         0       0       0       0       0       0
  7782 ;;Total ram usage:        0 bytes
  7783 ;; Hardware stack levels used:    1
  7784 ;; Hardware stack levels required when called:    1
  7785 ;; This function calls:
  7786 ;;		_I2C2_Interrupt
  7787 ;; This function is called by:
  7788 ;;		_Handler
  7789 ;; This function uses a non-reentrant model
  7790 ;;
  7791                           
  7792                           
  7793                           ;psect for function _I2C_CommonInterrupt
  7794  0D14                     _I2C_CommonInterrupt:	
  7795                           
  7796                           ;I2C_Common.c: 61: I2C2_Interrupt();
  7797                           
  7798                           ;incstack = 0
  7799                           ; Regs used in _I2C_CommonInterrupt: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7800  0D14  3185  25B2         	fcall	_I2C2_Interrupt
  7801  0D16  0008               	return
  7802  0D17                     __end_of_I2C_CommonInterrupt:	
  7803                           
  7804                           	psect	text43
  7805  05B2                     __ptext43:	
  7806 ;; *************** function _I2C2_Interrupt *****************
  7807 ;; Defined at:
  7808 ;;		line 152 in file "I2C2.c"
  7809 ;; Parameters:    Size  Location     Type
  7810 ;;		None
  7811 ;; Auto vars:     Size  Location     Type
  7812 ;;		None
  7813 ;; Return value:  Size  Location     Type
  7814 ;;                  1    wreg      void 
  7815 ;; Registers used:
  7816 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  7817 ;; Tracked objects:
  7818 ;;		On entry : 0/0
  7819 ;;		On exit  : 0/0
  7820 ;;		Unchanged: 0/0
  7821 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  7822 ;;      Params:         0       0       0       0       0       0
  7823 ;;      Locals:         0       0       0       0       0       0
  7824 ;;      Temps:          1       0       0       0       0       0
  7825 ;;      Totals:         1       0       0       0       0       0
  7826 ;;Total ram usage:        1 bytes
  7827 ;; Hardware stack levels used:    1
  7828 ;; This function calls:
  7829 ;;		Nothing
  7830 ;; This function is called by:
  7831 ;;		_I2C_CommonInterrupt
  7832 ;; This function uses a non-reentrant model
  7833 ;;
  7834                           
  7835                           
  7836                           ;psect for function _I2C2_Interrupt
  7837  05B2                     _I2C2_Interrupt:	
  7838                           
  7839                           ;I2C2.c: 154: if(SSP2IF&&SSP2IE)
  7840                           
  7841                           ;incstack = 0
  7842                           ; Regs used in _I2C2_Interrupt: [wreg+fsr1l+fsr1h+status,2+status,0]
  7843  05B2  0020               	movlb	0	; select bank0
  7844  05B3  1C14               	btfss	20,0	;volatile
  7845  05B4  2DFE               	goto	i1l2211
  7846  05B5  0021               	movlb	1	; select bank1
  7847  05B6  1C14               	btfss	20,0	;volatile
  7848  05B7  2DFE               	goto	i1l2211
  7849                           
  7850                           ;I2C2.c: 155: {
  7851                           ;I2C2.c: 156: if(SSP2STATbits.D_nA)
  7852  05B8  0024               	movlb	4	; select bank4
  7853  05B9  1E9C               	btfss	28,5	;volatile
  7854  05BA  2DD5               	goto	i1l157
  7855                           
  7856                           ;I2C2.c: 157: {
  7857                           ;I2C2.c: 158: if(SSP2STATbits.R_nW)
  7858  05BB  1D1C               	btfss	28,2	;volatile
  7859  05BC  2DC8               	goto	i1l2187
  7860                           
  7861                           ;I2C2.c: 159: {
  7862                           ;I2C2.c: 160: if(!SSP2CON2bits.ACKSTAT)
  7863  05BD  1B1E               	btfsc	30,6	;volatile
  7864  05BE  2DFC               	goto	i1l2209
  7865  05BF                     i1l2179:	
  7866                           ;I2C2.c: 161: {
  7867                           ;I2C2.c: 162: while((SSP2CON1bits.CKP)|(SSP2STATbits.BF));
  7868                           
  7869  05BF  081C               	movf	28,w	;volatile
  7870  05C0  3901               	andlw	1
  7871  05C1  00F6               	movwf	??_I2C2_Interrupt
  7872  05C2  0E1D               	swapf	29,w	;volatile
  7873  05C3  3901               	andlw	1
  7874  05C4  0476               	iorwf	??_I2C2_Interrupt,w
  7875  05C5  1D03               	btfss	3,2
  7876  05C6  2DBF               	goto	i1l2179
  7877  05C7  2DE8               	goto	L9
  7878  05C8                     i1l2187:	
  7879                           ;I2C2.c: 166: }
  7880                           ;I2C2.c: 167: }
  7881                           
  7882                           ;I2C2.c: 165: SSP2CON1bits.CKP = 1;
  7883                           
  7884                           ;I2C2.c: 164: I2C2_Config.TransmitPoint++;
  7885                           
  7886                           ;I2C2.c: 163: SSP2BUF = *I2C2_Config.TransmitPoint;
  7887                           
  7888                           
  7889                           ;I2C2.c: 168: else
  7890                           ;I2C2.c: 169: {
  7891                           ;I2C2.c: 170: *I2C2_Config.ReceivePoint = SSP2BUF;
  7892  05C8  0819               	movf	25,w	;volatile
  7893  05C9  00F6               	movwf	??_I2C2_Interrupt
  7894  05CA  0021               	movlb	1	; select bank1
  7895  05CB  0859               	movf	(low ((_I2C2_Config| 0+17)))^(0+128),w
  7896  05CC  0086               	movwf	6
  7897  05CD  0187               	clrf	7
  7898  05CE  0876               	movf	??_I2C2_Interrupt,w
  7899  05CF  0081               	movwf	1
  7900                           
  7901                           ;I2C2.c: 171: I2C2_Config.ReceivePoint++;
  7902  05D0  3001               	movlw	1
  7903  05D1  00F6               	movwf	??_I2C2_Interrupt
  7904  05D2  0876               	movf	??_I2C2_Interrupt,w
  7905  05D3  07D9               	addwf	(low ((_I2C2_Config| 0+17)))^(0+128),f
  7906  05D4  2DFA               	goto	i1l2207
  7907  05D5                     i1l157:	
  7908                           ;I2C2.c: 173: }
  7909                           ;I2C2.c: 174: }
  7910                           
  7911                           ;I2C2.c: 172: SSP2CON1bits.CKP = 1;
  7912                           
  7913                           
  7914                           ;I2C2.c: 175: else if(!SSP2STATbits.D_nA)
  7915  05D5  1A9C               	btfsc	28,5	;volatile
  7916  05D6  2DFC               	goto	i1l2209
  7917                           
  7918                           ;I2C2.c: 176: {
  7919                           ;I2C2.c: 177: SSP2BUF;
  7920  05D7  0819               	movf	25,w	;volatile
  7921                           
  7922                           ;I2C2.c: 179: if(SSP2STATbits.R_nW)
  7923  05D8  1D1C               	btfss	28,2	;volatile
  7924  05D9  2DF5               	goto	i1l2205
  7925                           
  7926                           ;I2C2.c: 180: {
  7927                           ;I2C2.c: 181: I2C2_Config.TransmitPoint = I2C2_Config.SlaveTransmitBuff;
  7928  05DA  30C8               	movlw	(low (_I2C2_Config| 0))& (0+255)
  7929  05DB  00F6               	movwf	??_I2C2_Interrupt
  7930  05DC  0876               	movf	??_I2C2_Interrupt,w
  7931  05DD  0021               	movlb	1	; select bank1
  7932  05DE  00D8               	movwf	(low ((_I2C2_Config| 0+16)))^(0+128)
  7933  05DF                     i1l2199:	
  7934                           ;I2C2.c: 183: while((SSP2CON1bits.CKP)|(SSP2STATbits.BF));
  7935                           
  7936  05DF  0024               	movlb	4	; select bank4
  7937  05E0  081C               	movf	28,w	;volatile
  7938  05E1  3901               	andlw	1
  7939  05E2  00F6               	movwf	??_I2C2_Interrupt
  7940  05E3  0E1D               	swapf	29,w	;volatile
  7941  05E4  3901               	andlw	1
  7942  05E5  0476               	iorwf	??_I2C2_Interrupt,w
  7943  05E6  1D03               	btfss	3,2
  7944  05E7  2DDF               	goto	i1l2199
  7945  05E8                     L9:	
  7946                           
  7947                           ;I2C2.c: 184: SSP2BUF = *I2C2_Config.TransmitPoint;
  7948  05E8  0021               	movlb	1	; select bank1
  7949  05E9  0858               	movf	(low ((_I2C2_Config| 0+16)))^(0+128),w
  7950  05EA  0086               	movwf	6
  7951  05EB  0187               	clrf	7
  7952  05EC  0801               	movf	1,w
  7953  05ED  0024               	movlb	4	; select bank4
  7954  05EE  0099               	movwf	25	;volatile
  7955                           
  7956                           ;I2C2.c: 185: I2C2_Config.TransmitPoint++;
  7957  05EF  3001               	movlw	1
  7958  05F0  00F6               	movwf	??_I2C2_Interrupt
  7959  05F1  0876               	movf	??_I2C2_Interrupt,w
  7960  05F2  0021               	movlb	1	; select bank1
  7961  05F3  07D8               	addwf	(low ((_I2C2_Config| 0+16)))^(0+128),f
  7962                           
  7963                           ;I2C2.c: 186: }
  7964  05F4  2DFA               	goto	i1l2207
  7965  05F5                     i1l2205:	
  7966                           
  7967                           ;I2C2.c: 187: else
  7968                           ;I2C2.c: 188: {
  7969                           ;I2C2.c: 189: I2C2_Config.ReceivePoint = I2C2_Config.SlaveReceiveBuff;
  7970  05F5  30D0               	movlw	(low ((_I2C2_Config| 0+8)))& (0+255)
  7971  05F6  00F6               	movwf	??_I2C2_Interrupt
  7972  05F7  0876               	movf	??_I2C2_Interrupt,w
  7973  05F8  0021               	movlb	1	; select bank1
  7974  05F9  00D9               	movwf	(low ((_I2C2_Config| 0+17)))^(0+128)
  7975  05FA                     i1l2207:	
  7976                           
  7977                           ;I2C2.c: 190: }
  7978                           ;I2C2.c: 191: SSP2CON1bits.CKP = 1;
  7979  05FA  0024               	movlb	4	; select bank4
  7980  05FB  161D               	bsf	29,4	;volatile
  7981  05FC                     i1l2209:	
  7982                           
  7983                           ;I2C2.c: 192: }
  7984                           ;I2C2.c: 193: SSP2IF = 0;
  7985  05FC  0020               	movlb	0	; select bank0
  7986  05FD  1014               	bcf	20,0	;volatile
  7987  05FE                     i1l2211:	
  7988                           
  7989                           ;I2C2.c: 194: }
  7990                           ;I2C2.c: 196: if(BCL2IE&&BCL2IF)
  7991  05FE  0021               	movlb	1	; select bank1
  7992  05FF  1C94               	btfss	20,1	;volatile
  7993  0600  0008               	return
  7994  0601  0020               	movlb	0	; select bank0
  7995  0602  1C94               	btfss	20,1	;volatile
  7996  0603  0008               	return
  7997                           
  7998                           ;I2C2.c: 197: BCL2IF = 0;
  7999  0604  1094               	bcf	20,1	;volatile
  8000  0605  0008               	return
  8001  0606                     __end_of_I2C2_Interrupt:	
  8002                           
  8003                           	psect	text44
  8004  0DE9                     __ptext44:	
  8005 ;; *************** function _Buzzer_Count1ms *****************
  8006 ;; Defined at:
  8007 ;;		line 44 in file "Buzzer.c"
  8008 ;; Parameters:    Size  Location     Type
  8009 ;;		None
  8010 ;; Auto vars:     Size  Location     Type
  8011 ;;		None
  8012 ;; Return value:  Size  Location     Type
  8013 ;;                  1    wreg      void 
  8014 ;; Registers used:
  8015 ;;		wreg, status,2, status,0, pclath, cstack
  8016 ;; Tracked objects:
  8017 ;;		On entry : 0/0
  8018 ;;		On exit  : 0/0
  8019 ;;		Unchanged: 0/0
  8020 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  8021 ;;      Params:         0       0       0       0       0       0
  8022 ;;      Locals:         0       0       0       0       0       0
  8023 ;;      Temps:          0       0       0       0       0       0
  8024 ;;      Totals:         0       0       0       0       0       0
  8025 ;;Total ram usage:        0 bytes
  8026 ;; Hardware stack levels used:    1
  8027 ;; Hardware stack levels required when called:    1
  8028 ;; This function calls:
  8029 ;;		_Buzzer_SetDuty
  8030 ;; This function is called by:
  8031 ;;		_Handler
  8032 ;; This function uses a non-reentrant model
  8033 ;;
  8034                           
  8035                           
  8036                           ;psect for function _Buzzer_Count1ms
  8037  0DE9                     _Buzzer_Count1ms:	
  8038                           
  8039                           ;Buzzer.c: 46: if(count>0)
  8040                           
  8041                           ;incstack = 0
  8042                           ; Regs used in _Buzzer_Count1ms: [wreg+status,2+status,0+pclath+cstack]
  8043  0DE9  0873               	movf	_count,w
  8044  0DEA  0474               	iorwf	_count+1,w
  8045  0DEB  1903               	btfsc	3,2
  8046  0DEC  2DF8               	goto	i1l2335
  8047                           
  8048                           ;Buzzer.c: 47: {
  8049                           ;Buzzer.c: 48: count--;
  8050  0DED  3001               	movlw	1
  8051  0DEE  02F3               	subwf	_count,f
  8052  0DEF  3000               	movlw	0
  8053  0DF0  3BF4               	subwfb	_count+1,f
  8054                           
  8055                           ;Buzzer.c: 49: Buzzer_SetDuty(0x01FF);
  8056  0DF1  30FF               	movlw	255
  8057  0DF2  00F6               	movwf	Buzzer_SetDuty@duty
  8058  0DF3  3001               	movlw	1
  8059  0DF4  00F7               	movwf	Buzzer_SetDuty@duty+1
  8060  0DF5  318E  2678         	fcall	_Buzzer_SetDuty
  8061                           
  8062                           ;Buzzer.c: 50: }
  8063  0DF7  0008               	return
  8064  0DF8                     i1l2335:	
  8065                           
  8066                           ;Buzzer.c: 51: else
  8067                           ;Buzzer.c: 52: {
  8068                           ;Buzzer.c: 53: Buzzer_SetDuty(0x0000);
  8069  0DF8  3000               	movlw	0
  8070  0DF9  00F6               	movwf	Buzzer_SetDuty@duty
  8071  0DFA  00F7               	movwf	Buzzer_SetDuty@duty+1
  8072  0DFB  318E  2678         	fcall	_Buzzer_SetDuty
  8073  0DFD  0008               	return
  8074  0DFE                     __end_of_Buzzer_Count1ms:	
  8075                           
  8076                           	psect	text45
  8077  0E78                     __ptext45:	
  8078 ;; *************** function _Buzzer_SetDuty *****************
  8079 ;; Defined at:
  8080 ;;		line 31 in file "Buzzer.c"
  8081 ;; Parameters:    Size  Location     Type
  8082 ;;  duty            2    0[COMMON] unsigned int 
  8083 ;; Auto vars:     Size  Location     Type
  8084 ;;  CCP2CON_Pre     1    4[COMMON] unsigned char 
  8085 ;; Return value:  Size  Location     Type
  8086 ;;                  1    wreg      void 
  8087 ;; Registers used:
  8088 ;;		wreg, status,2, status,0
  8089 ;; Tracked objects:
  8090 ;;		On entry : 0/0
  8091 ;;		On exit  : 0/0
  8092 ;;		Unchanged: 0/0
  8093 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  8094 ;;      Params:         2       0       0       0       0       0
  8095 ;;      Locals:         1       0       0       0       0       0
  8096 ;;      Temps:          2       0       0       0       0       0
  8097 ;;      Totals:         5       0       0       0       0       0
  8098 ;;Total ram usage:        5 bytes
  8099 ;; Hardware stack levels used:    1
  8100 ;; This function calls:
  8101 ;;		Nothing
  8102 ;; This function is called by:
  8103 ;;		_Buzzer_Count1ms
  8104 ;; This function uses a non-reentrant model
  8105 ;;
  8106                           
  8107                           
  8108                           ;psect for function _Buzzer_SetDuty
  8109  0E78                     _Buzzer_SetDuty:	
  8110                           
  8111                           ;Buzzer.c: 33: uint8_t CCP2CON_Pre = CCP2CON & ~(0x03<<4);
  8112                           
  8113                           ;incstack = 0
  8114                           ; Regs used in _Buzzer_SetDuty: [wreg+status,2+status,0]
  8115  0E78  0025               	movlb	5	; select bank5
  8116  0E79  081A               	movf	26,w	;volatile
  8117  0E7A  39CF               	andlw	207
  8118  0E7B  00F8               	movwf	??_Buzzer_SetDuty
  8119  0E7C  0878               	movf	??_Buzzer_SetDuty,w
  8120  0E7D  00FA               	movwf	Buzzer_SetDuty@CCP2CON_Pre
  8121                           
  8122                           ;Buzzer.c: 34: CCPR2L = (duty>>2);
  8123  0E7E  0877               	movf	Buzzer_SetDuty@duty+1,w
  8124  0E7F  00F9               	movwf	??_Buzzer_SetDuty+1
  8125  0E80  0876               	movf	Buzzer_SetDuty@duty,w
  8126  0E81  00F8               	movwf	??_Buzzer_SetDuty
  8127  0E82  36F9               	lsrf	??_Buzzer_SetDuty+1,f
  8128  0E83  0CF8               	rrf	??_Buzzer_SetDuty,f
  8129  0E84  36F9               	lsrf	??_Buzzer_SetDuty+1,f
  8130  0E85  0CF8               	rrf	??_Buzzer_SetDuty,f
  8131  0E86  0878               	movf	??_Buzzer_SetDuty,w
  8132  0E87  0098               	movwf	24	;volatile
  8133                           
  8134                           ;Buzzer.c: 35: CCP2CON = CCP2CON_Pre | ((duty&0x03)<<4);
  8135  0E88  0876               	movf	Buzzer_SetDuty@duty,w
  8136  0E89  3903               	andlw	3
  8137  0E8A  00F8               	movwf	??_Buzzer_SetDuty
  8138  0E8B  3003               	movlw	3
  8139  0E8C                     u148_25:	
  8140  0E8C  35F8               	lslf	??_Buzzer_SetDuty,f
  8141  0E8D  3EFF               	addlw	-1
  8142  0E8E  1D03               	skipz
  8143  0E8F  2E8C               	goto	u148_25
  8144  0E90  3578               	lslf	??_Buzzer_SetDuty,w
  8145  0E91  047A               	iorwf	Buzzer_SetDuty@CCP2CON_Pre,w
  8146  0E92  009A               	movwf	26	;volatile
  8147  0E93  0008               	return
  8148  0E94                     __end_of_Buzzer_SetDuty:	
  8149  007E                     btemp	set	126	;btemp
  8150  007E                     int$flags	set	126
  8151  007E                     wtemp0	set	126


Data Sizes:
    Strings     333
    Constant    73
    Data        90
    BSS         47
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      6      12
    BANK0            80     65      77
    BANK1            80      4      63
    BANK2            80      0      60
    BANK3            80      0       0
    BANK4            48      0       0

Pointer List with Targets:

    printf@f	PTR const unsigned char  size(2) Largest target is 17
		 -> STR_6(CODE[17]), STR_5(CODE[10]), STR_4(CODE[17]), STR_3(CODE[16]), 
		 -> STR_2(CODE[17]), STR_1(CODE[17]), 

    printf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_printf(BANK0[2]), 

    H7826_01_Gain	PTR const unsigned char [15] size(2) Largest target is 7
		 -> STR_51(CODE[7]), STR_50(CODE[7]), STR_49(CODE[7]), STR_48(CODE[7]), 
		 -> STR_47(CODE[7]), STR_46(CODE[7]), STR_45(CODE[7]), STR_44(CODE[6]), 
		 -> STR_43(CODE[6]), STR_42(CODE[6]), STR_41(CODE[6]), STR_40(CODE[5]), 
		 -> STR_39(CODE[5]), STR_38(CODE[5]), STR_37(CODE[5]), 

    H7826_Gain	PTR const unsigned char [15] size(2) Largest target is 8
		 -> STR_36(CODE[8]), STR_35(CODE[8]), STR_34(CODE[8]), STR_33(CODE[7]), 
		 -> STR_32(CODE[7]), STR_31(CODE[7]), STR_30(CODE[7]), STR_29(CODE[7]), 
		 -> STR_28(CODE[6]), STR_27(CODE[6]), STR_26(CODE[6]), STR_25(CODE[6]), 
		 -> STR_24(CODE[5]), STR_23(CODE[5]), STR_22(CODE[5]), 

    DAC_VoltageTable	PTR const unsigned char [15] size(2) Largest target is 6
		 -> STR_21(CODE[5]), STR_20(CODE[6]), STR_19(CODE[5]), STR_18(CODE[6]), 
		 -> STR_17(CODE[5]), STR_16(CODE[6]), STR_15(CODE[5]), STR_14(CODE[6]), 
		 -> STR_13(CODE[5]), STR_12(CODE[6]), STR_11(CODE[5]), STR_10(CODE[6]), 
		 -> STR_9(CODE[5]), STR_8(CODE[6]), STR_7(CODE[5]), 

    I2C_Transmit@pData	PTR unsigned char  size(1) Largest target is 2
		 -> VoltageReg(BANK0[2]), ConfigReg(BANK0[1]), 

    I2C2_Transmit@pData	PTR unsigned char  size(1) Largest target is 2
		 -> VoltageReg(BANK0[2]), ConfigReg(BANK0[1]), 

    S46$ReceivePoint	PTR unsigned char  size(1) Largest target is 21
		 -> I2C2_Config(BANK1[19]), 

    I2C2_Config.ReceivePoint	PTR unsigned char  size(1) Largest target is 21
		 -> I2C2_Config.SlaveReceiveBuff(BANK1[8]), I2C2_Config(BANK1[19]), 

    S46$TransmitPoint	PTR unsigned char  size(1) Largest target is 21
		 -> I2C2_Config(BANK1[19]), 

    I2C2_Config.TransmitPoint	PTR unsigned char  size(1) Largest target is 21
		 -> I2C2_Config.SlaveTransmitBuff(BANK1[8]), I2C2_Config(BANK1[19]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _Handler in COMMON

    _Timer1_Count1ms->i1_Buzzer_MiliSecond
    _I2C_CommonInterrupt->_I2C2_Interrupt
    _Buzzer_Count1ms->_Buzzer_SetDuty

Critical Paths under _main in BANK0

    _main->_printf
    _printf->_Timer1_GetCPM
    _putch->_LCD_WriteData
    ___llmod->___lldiv
    _mTouch_Init->_mTouch_PortInit
    _mTouch_Check->_Buzzer_MiliSecond
    _Timer1_GetCPM->_Timer1_GetCPS
    _Timer1_GetCPS->___lldiv
    ___lldiv->___lmul
    _LCD_Init->_LCD_DisplayClear
    _LCD_DisplayClear->_LCD_WriteData
    _LCD_CursorPosition->_LCD_WriteData
    _DAC_WriteVoltage->_I2C_Transmit
    _DAC_Initialize->_I2C_Transmit
    _I2C_Transmit->_I2C2_Transmit
    _I2C_Init->_I2C2_Setting
    _I2C2_Setting->_I2C2_PinInit

Critical Paths under _Handler in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _Handler in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _Handler in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _Handler in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _Handler in BANK4

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     4      0   10458
                                              0 BANK1      4     4      0
                         _Basic_Init
                        _Buzzer_Init
                     _DAC_Initialize
                   _DAC_WriteVoltage
                 _LCD_CursorPosition
                   _LCD_DisplayClear
                           _LCD_Init
                 _Timer1_ClearRecord
                      _Timer1_GetCPM
                      _Timer1_GetCPS
                 _Timer1_GetCountSum
                   _Timer1_GetMinute
                   _Timer1_GetSecond
                        _Timer1_Init
                  _Timer1_StartCount
                   _Timer1_StopCount
                        _Timer6_Init
                       _mTouch_Check
                        _mTouch_Init
                             _printf
 ---------------------------------------------------------------------------------
 (1) _printf                                              35    25     10    3240
                                             38 BANK0     27    17     10
                      _Timer1_GetCPM (ARG)
                      _Timer1_GetCPS (ARG)
                 _Timer1_GetCountSum (ARG)
                   _Timer1_GetMinute (ARG)
                   _Timer1_GetSecond (ARG)
                            ___lldiv
                            ___llmod
                             ___wmul
                            _isdigit
                              _putch
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0     155
                                              3 BANK0      1     1      0
                      _LCD_WriteData
 ---------------------------------------------------------------------------------
 (2) _isdigit                                              2     2      0      99
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     290
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (2) ___llmod                                             10     2      8     386
                                             26 BANK0     10     2      8
                            ___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (1) _mTouch_Init                                          1     1      0       0
                                              1 BANK0      1     1      0
                    _mTouch_PortInit
 ---------------------------------------------------------------------------------
 (2) _mTouch_PortInit                                      1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _mTouch_Check                                         6     6      0     378
                                              2 BANK0      6     6      0
                  _Buzzer_MiliSecond
 ---------------------------------------------------------------------------------
 (2) _Buzzer_MiliSecond                                    2     0      2     192
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (1) _Timer6_Init                                          1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Timer1_StopCount                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Timer1_StartCount                                    0     0      0       0
                 _Timer1_ClearRecord
 ---------------------------------------------------------------------------------
 (2) _Timer1_ClearRecord                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Timer1_Init                                          1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Timer1_GetSecond                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Timer1_GetMinute                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Timer1_GetCountSum                                   4     0      4       0
                                              0 BANK0      4     0      4
 ---------------------------------------------------------------------------------
 (1) _Timer1_GetCPM                                        8     4      4    1471
                                             30 BANK0      8     4      4
                      _Timer1_GetCPS
                             ___lmul
 ---------------------------------------------------------------------------------
 (1) _Timer1_GetCPS                                        4     0      4     993
                                             26 BANK0      4     0      4
                            ___lldiv
                             ___lmul
 ---------------------------------------------------------------------------------
 (2) ___lmul                                              12     4      8     444
                                              0 BANK0     12     4      8
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             14     6      8     549
                                             12 BANK0     14     6      8
                             ___lmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _LCD_Init                                             2     2      0     248
                                              4 BANK0      2     2      0
                   _LCD_DisplayClear
                      _LCD_WriteData
 ---------------------------------------------------------------------------------
 (2) _LCD_DisplayClear                                     1     1      0     124
                                              3 BANK0      1     1      0
                      _LCD_WriteData
 ---------------------------------------------------------------------------------
 (1) _LCD_CursorPosition                                   3     2      1     648
                                              3 BANK0      3     2      1
                      _LCD_WriteData
 ---------------------------------------------------------------------------------
 (3) _LCD_WriteData                                        3     3      0     124
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (1) _DAC_WriteVoltage                                     5     3      2    1454
                                             16 BANK0      5     3      2
                       _I2C_Transmit
 ---------------------------------------------------------------------------------
 (1) _DAC_Initialize                                       2     2      0    1902
                                             16 BANK0      2     2      0
                           _I2C_Init
                       _I2C_Transmit
 ---------------------------------------------------------------------------------
 (2) _I2C_Transmit                                         8     5      3    1238
                                              8 BANK0      8     5      3
                      _I2C2_Transmit
 ---------------------------------------------------------------------------------
 (3) _I2C2_Transmit                                        8     6      2     618
                                              0 BANK0      8     6      2
 ---------------------------------------------------------------------------------
 (2) _I2C_Init                                             6     3      3     664
                                              5 BANK0      6     3      3
                       _I2C2_Setting
 ---------------------------------------------------------------------------------
 (3) _I2C2_Setting                                         4     2      2     309
                                              1 BANK0      4     2      2
                       _I2C2_PinInit
 ---------------------------------------------------------------------------------
 (4) _I2C2_PinInit                                         1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Buzzer_Init                                          1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Basic_Init                                           0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _Handler                                              1     1      0     269
                                              5 COMMON     1     1      0
                    _Buzzer_Count1ms
                _I2C_CommonInterrupt
                    _Timer1_Count1ms
           _Timer1_DetectAssignCount
                   _Timer6_CheckFlag
           _mTouch_IntervalDecrement
                        _mTouch_Read
 ---------------------------------------------------------------------------------
 (6) _mTouch_Read                                          1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (6) _mTouch_IntervalDecrement                             0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _Timer6_CheckFlag                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _Timer1_DetectAssignCount                             0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _Timer1_Count1ms                                      1     1      0      74
                                              2 COMMON     1     1      0
                i1_Buzzer_MiliSecond
 ---------------------------------------------------------------------------------
 (7) i1_Buzzer_MiliSecond                                  2     0      2      74
                                              0 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (6) _I2C_CommonInterrupt                                  0     0      0       0
                     _I2C2_Interrupt
 ---------------------------------------------------------------------------------
 (7) _I2C2_Interrupt                                       1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (6) _Buzzer_Count1ms                                      0     0      0     195
                     _Buzzer_SetDuty
 ---------------------------------------------------------------------------------
 (7) _Buzzer_SetDuty                                       5     3      2     195
                                              0 COMMON     5     3      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Basic_Init
   _Buzzer_Init
   _DAC_Initialize
     _I2C_Init
       _I2C2_Setting
         _I2C2_PinInit
     _I2C_Transmit
       _I2C2_Transmit
   _DAC_WriteVoltage
     _I2C_Transmit
       _I2C2_Transmit
   _LCD_CursorPosition
     _LCD_WriteData
   _LCD_DisplayClear
     _LCD_WriteData
   _LCD_Init
     _LCD_DisplayClear
       _LCD_WriteData
     _LCD_WriteData
   _Timer1_ClearRecord
   _Timer1_GetCPM
     _Timer1_GetCPS
       ___lldiv
         ___lmul (ARG)
       ___lmul
     ___lmul
   _Timer1_GetCPS
     ___lldiv
       ___lmul (ARG)
     ___lmul
   _Timer1_GetCountSum
   _Timer1_GetMinute
   _Timer1_GetSecond
   _Timer1_Init
   _Timer1_StartCount
     _Timer1_ClearRecord
   _Timer1_StopCount
   _Timer6_Init
   _mTouch_Check
     _Buzzer_MiliSecond
   _mTouch_Init
     _mTouch_PortInit
   _printf
     _Timer1_GetCPM (ARG)
       _Timer1_GetCPS
         ___lldiv
           ___lmul (ARG)
         ___lmul
       ___lmul
     _Timer1_GetCPS (ARG)
       ___lldiv
         ___lmul (ARG)
       ___lmul
     _Timer1_GetCountSum (ARG)
     _Timer1_GetMinute (ARG)
     _Timer1_GetSecond (ARG)
     ___lldiv (ARG)
       ___lmul (ARG)
     ___llmod (ARG)
       ___lldiv (ARG)
         ___lmul (ARG)
     ___wmul (ARG)
     _isdigit (ARG)
     _putch (ARG)
       _LCD_WriteData

 _Handler (ROOT)
   _Buzzer_Count1ms
     _Buzzer_SetDuty
   _I2C_CommonInterrupt
     _I2C2_Interrupt
   _Timer1_Count1ms
     i1_Buzzer_MiliSecond
   _Timer1_DetectAssignCount
   _Timer6_CheckFlag
   _mTouch_IntervalDecrement
   _mTouch_Read

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             170      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      6       C       2       85.7%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0      D4       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BANK0               50     41      4D       6       96.2%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BITBANK1            50      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BANK1               50      4      3F       8       78.8%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BITBANK2            50      0       0       9        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BANK2               50      0      3C      10       75.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BITBANK3            50      0       0      11        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BANK3               50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BITBANK4            30      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BANK4               30      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
DATA                 0      0      D4      15        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.41 build -162212810 
Symbol Table                                                                                   Wed Jun 28 21:42:15 2017

         __end_of_Timer1_StopCount 0D20                        __CFG_CP$OFF 0000  
                               l74 06B0                                 l91 04CC  
                               l78 06E1                     I2C2_Transmit@i 0025  
            ??_I2C_CommonInterrupt 0077                ___wmul@multiplicand 0022  
                              l100 04F5                                l109 0512  
                              l191 0E40                                l561 00F0  
                              l563 00D0                                l547 0084  
                              l716 0E9D                                l564 0127  
                              l574 0186                                l558 00CE  
                              l591 0225                                _GIE 005F  
                              _PR2 001B                    _Buzzer_Count1ms 0DE9  
                     __CFG_CPD$OFF 0000                                _PR6 041D  
                     __CFG_BORV$LO 0000                                wreg 0009  
                       _Basic_Init 0DA1                       __CFG_LVP$OFF 0000  
       ??_Timer1_DetectAssignCount 0076                               l3001 0617  
                             l3011 0645                               l3003 0625  
                             l3015 0650                               l3103 0717  
                             l3025 0E2D                               l3033 0E60  
                             l3107 0722                               l3029 0E3A  
                             l3037 0E71                               l3039 0E76  
                             l3073 0D7F                               l3309 06A2  
                             l3421 01BE                               l3079 0E97  
                             l3423 01C2                               l3431 01D7  
                             l3415 01AF                               l3407 01A2  
                             l3351 009F                               l3097 06F1  
                             l3409 01A5                               l3361 00D2  
                             l3345 0089                               l3521 0423  
                             l3099 06FF                               l3427 01CF  
                             l3347 0092                               l3339 007F  
                             l3515 0418                               l3507 0407  
                             l2901 06D6                               l3437 01DD  
                             l3509 0409                               l2911 04BD  
                             l3383 0136                               l3439 0063  
                             l3527 042F                               l3535 049E  
                             l2905 06D8                               l2921 04E0  
                             l3297 0661                               l3393 014D  
                             l3369 0101                               l2931 04D8  
                             l3387 0147                               l2933 04DC  
                             l2909 04AF                               l2935 0503  
                             l3399 017A                               l2945 0518  
                             l2953 0537                               l3497 03EF  
                             l3489 048A                               l2891 06C7  
                             l2883 06BA                               l2947 052F  
                             l2955 0540                               l2949 0534  
                             l2983 0F9F                               l2889 06C5  
                             l2987 0FA9                  ?_DAC_WriteVoltage 0030  
                             STR_1 026F                               STR_2 0280  
                             STR_3 0291                               STR_4 0280  
                             STR_5 02A1                               STR_6 0280  
                             STR_7 03A3                               STR_8 0353  
                             STR_9 03A8                               u3107 0565  
                             u3117 057A                               u3127 058F  
                             u3137 0D9B                               u2505 0FAA  
                             u3147 0E26                               u2515 0FB1  
                             u3157 076B                               u3097 054C  
                             u2545 061A                               u2705 070D  
                             u2715 0718                               u2485 0772  
                             u2565 0626                               u2645 0E9E  
                             u2735 0E1B                               u2575 063A  
                             u2655 0EA3                               u2585 0646  
                             u2755 0688                               _PEIE 005E  
                             u2685 06F4                               u2855 0170  
                             u2895 0195              Buzzer_MiliSecond@time 0020  
                             _TMR0 0015                               _TMR1 0016  
                             _TMR2 001A                               _TMR6 041C  
                  _sense_parameter 026C                               _WPUB 020D  
                     __CFG_WRT$OFF 0000                 ??_DAC_WriteVoltage 0032  
                             _cnts 00BE                               _main 03BC  
                 __end_of_I2C_Init 0E43                               _tcnt 0061  
                             fsr0h 0005                               fsr1h 0007  
                             indf0 0000                               fsr0l 0004  
                             indf1 0001                               fsr1l 0006  
                             btemp 007E                      __CFG_BOREN$ON 0000  
                  ??_I2C2_Transmit 0022                               start 002B  
                    __CFG_IESO$OFF 0000                    __end_of_Handler 002B  
                    _LCD_WriteData 0768                      __CFG_MCLRE$ON 0000  
                 ??_I2C2_Interrupt 0076           __end_of_LCD_DisplayClear 0DA1  
            __size_of_I2C_Transmit 001B                   __end_of_LCD_Init 05B2  
                    __CFG_PLLEN$ON 0000                              ?_main 0076  
                            STR_10 0359                              STR_11 03AD  
                            STR_20 034D                              STR_12 035F  
                            STR_21 039E                              STR_13 03B2  
                            STR_30 02ED                              STR_22 0385  
                            STR_14 0365                              STR_31 02FB  
                            STR_23 0380                              STR_15 03B7  
                            STR_32 02C3                              STR_24 038F  
                            STR_40 037B                              STR_16 036B  
                            STR_33 0309                              STR_25 0341  
                            STR_41 0329                              STR_17 0394  
                    __CFG_WDTE$OFF 0000                              STR_34 02BB  
                            STR_26 0317                              STR_50 02CA  
                            STR_42 032F                              STR_18 0347  
                            STR_35 02B3                              STR_27 0323  
                            STR_51 02D1                              STR_43 0335  
                            STR_19 0399                              STR_36 02AB  
                            STR_28 033B                              STR_44 031D  
                            STR_29 02F4                              STR_45 02D8  
                            STR_37 0371                              STR_46 0302  
                            STR_38 0376                              STR_47 02DF  
                            STR_39 038A                              STR_48 02E6  
                            STR_49 0310                    __end_of___lldiv 0659  
                            _T1CON 0018                    __end_of___llmod 072B  
                            _T2CON 001C                              _LATA3 0863  
                            _LATA4 0864                              _LATA6 0866  
                            _T6CON 041E        __size_of_Timer1_ClearRecord 0015  
                            i1l410 0D8B                              i1l157 05D5  
                            i1l520 0024                              i1l409 0D86  
                            _PORTA 000C                              _PORTB 000D  
                            _TRISA 008C                              _TRISB 008D  
                I2C2_Transmit@size 0021                ___lmul@multiplicand 0024  
                    __CFG_PWRTE$ON 0000                     __CFG_FCMEN$OFF 0000  
                  __end_of_dpowers 024E                              _count 0073  
                  __end_of_isdigit 0D81                  ??_Timer1_Count1ms 0078  
                            _putch 0D3A                      ??_Buzzer_Init 0020  
            __end_of_Timer1_GetCPM 0F67              __end_of_Timer1_GetCPS 0768  
      __size_of_Timer1_GetCountSum 0011                              status 0003  
                            wtemp0 007E                  _Buzzer_MiliSecond 0D43  
                     _I2C_Transmit 0E5D                 _LCD_CursorPosition 0E13  
                   ?_LCD_WriteData 0076                 ?_Buzzer_MiliSecond 0020  
                 ??_DAC_Initialize 0030                    __initialization 002D  
                     __end_of_main 04AB            __end_of_Buzzer_Count1ms 0DFE  
              ?_LCD_CursorPosition 0023                ??_Buzzer_MiliSecond 0022  
                           ??_main 00DB               __end_of_mTouch_Check 06A4  
          __end_of_sense_parameter 026F                        ?_Basic_Init 0076  
                           _BCL2IE 04A1                             _BCL2IF 00A1  
                 ___llmod@dividend 003E               __size_of_mTouch_Init 0013  
             __size_of_mTouch_Read 0026                             _CCPR2L 0298  
             ??_LCD_CursorPosition 0024                             _ANSELA 018C  
                           ?_putch 0076                             _ANSELB 018D  
                           _T1GCON 0019                             i1l2211 05FE  
                           i1l2205 05F5                             i1l2207 05FA  
                           i1l2209 05FC                             i1l2335 0DF8  
                           i1l2179 05BF                             i1l2187 05C8  
                           i1l2531 0FFC                             i1l2523 0FEC  
                           i1l2199 05DF                             i1l1673 0D56  
                           i1l2549 0E5B                 I2C2_Transmit@i_172 0026  
                           i1l2863 0012                    _mTouch_Interval 0070  
        __end_of_Buzzer_MiliSecond 0D4D                             u148_25 0E8C  
                           _OSCCON 0099                 I2C2_Transmit@pData 0020  
                           _TMR1IE 0488                             _TMR1IF 0088  
                        ??_Handler 007B                             _TMR6IE 049B  
                           _TMR1ON 00C0                             _TMR6IF 009B  
                           _SSP2IE 04A0                             _SSP2IF 00A0  
         _mTouch_IntervalDecrement 0D81                  ?_Timer1_GetMinute 0076  
                ?_Timer1_GetSecond 0076                    _mTouch_PortInit 0D65  
                    ??_Timer1_Init 0020                __end_of_Buzzer_Init 0F3F  
                    ??_Timer6_Init 0020                 ??_Timer1_GetMinute 0020  
               ??_Timer1_GetSecond 0020                             ___lmul 0F96  
                           ___wmul 0E94                          ??___lldiv 0034  
                        ??___llmod 0042                             _printf 005E  
                 I2C_Transmit@I2Cx 002E                          ??_isdigit 0020  
                        ?_I2C_Init 0025                             putch@c 0023  
                 I2C_Transmit@size 002A            __end_of__initialization 005A  
                        ?_LCD_Init 0076                    ??_LCD_WriteData 0020  
                ?_Timer6_CheckFlag 0076       __size_ofi1_Buzzer_MiliSecond 0009  
                       _VoltageReg 006A                 ??_Timer6_CheckFlag 0076  
               Buzzer_SetDuty@duty 0076                     __pcstackCOMMON 0076  
              __size_of_Basic_Init 0011                       __pidataBANK1 07E1  
                     __pidataBANK2 07A5                   ?_Buzzer_Count1ms 0076  
                ?_Timer1_StopCount 0076                      __end_of_putch 0D43  
              __end_of_Timer1_Init 0EF1                __end_of_Timer6_Init 0DD6  
               ??_Timer1_StopCount 0020          Buzzer_SetDuty@CCP2CON_Pre 007A  
                       ??_I2C_Init 0028                            ??_putch 0023  
          __end_of_mTouch_PortInit 0D72                         __pbssBANK0 0061  
                       __pbssBANK1 00BE         __size_of_Buzzer_MiliSecond 000A  
                      _Buzzer_Init 0F17                         ??_LCD_Init 0024  
          __size_of_Buzzer_SetDuty 001C                      _DAC_DataTable 024E  
                     I2C_Init@I2Cx 002A        __end_of_I2C_CommonInterrupt 0D17  
                     I2C_Init@mode 0026                         __pmaintext 03BC  
                          ?___lmul 0020                            ?___wmul 0020  
        __size_of_DAC_WriteVoltage 002F                         __pintentry 0004  
            __size_of_mTouch_Check 004B                            _CCP2CON 029A  
                ?_LCD_DisplayClear 0076                     ___lmul@product 0028  
                          _APFCON0 011D                            _APFCON1 011E  
                          _CCPTMRS 029E                            ?_printf 0046  
                  _Timer1_Count1ms 0FC6                 ??_LCD_DisplayClear 0023  
                          _CPSCON0 001E                            _CPSCON1 001F  
                          _SSP2ADD 021A                            _SSP2BUF 0219  
                          _SSP2MSK 021B                I2C2_Transmit@result 0027  
                          _Handler 0004                 mTouch_Read@channel 0075  
                     _mTouch_Check 0659              __end_of_I2C2_Transmit 0543  
                      _Timer1_Init 0ED0                        _Timer6_Init 0DC3  
__size_of_Timer1_DetectAssignCount 001A                    __size_of___lmul 0030  
        ?_Timer1_DetectAssignCount 0076                            ___lldiv 0606  
                  __size_of___wmul 001C                            ___llmod 06E8  
                  __CFG_STVREN$OFF 0000         __end_of_Timer1_ClearRecord 0E13  
                          __ptext1 005E                            __ptext2 0D3A  
                          __ptext3 0D72                            __ptext4 0E94  
                          __ptext5 06E8                            __ptext6 0DD6  
                          __ptext7 0D65                            __ptext8 0659  
                          __ptext9 0D43                    __size_of_printf 01C8  
                          _dpowers 0226                            _isdigit 0D72  
                     ??_Basic_Init 0020         ??_mTouch_IntervalDecrement 0076  
                          clrloop0 0D26         __end_of_Timer1_GetCountSum 0DC3  
             end_of_initialization 005A                   ?_mTouch_PortInit 0076  
                          init_ram 0D2B                            initloop 0D2C  
                    ?_I2C2_PinInit 0076                        _I2C2_Config 00C8  
                  ___lldiv@divisor 002C                      ?_I2C2_Setting 0021  
                  ___lldiv@counter 0039                  I2C_Transmit@pData 0029  
          __end_of_Timer1_Count1ms 1000                            printf@c 0060  
                          printf@f 0046                 __end_of_Basic_Init 0DB2  
                 _DAC_VoltageTable 00A0                       __pstringtext 0226  
           __size_of_Timer1_GetCPM 0028             __size_of_Timer1_GetCPS 003D  
        __size_of_Timer1_GetMinute 0003          __size_of_Timer1_GetSecond 0003  
              i1_Buzzer_MiliSecond 0D31                   __CFG_FOSC$INTOSC 0000  
                    ??_mTouch_Init 0021                      ??_mTouch_Read 0076  
          __size_of_I2C2_Interrupt 0054                  __size_of_I2C_Init 0019  
                       _state_mode 0069        __size_of_LCD_CursorPosition 0017  
                   ??_I2C2_PinInit 0020                     _Buzzer_SetDuty 0E78  
             ?i1_Buzzer_MiliSecond 0076                        printf@width 005E  
                   ??_I2C2_Setting 0023                      _H7826_01_Gain 0120  
                __size_of_LCD_Init 006F                  _Timer1_StartCount 0D20  
                 _DAC_WriteVoltage 0F67                 ?_Timer1_StartCount 0076  
                   __end_of___lmul 0FC6                     __end_of___wmul 0EB0  
                        _ConfigReg 006C          __size_of_Timer6_CheckFlag 000B  
              ??_Timer1_StartCount 0020            __size_of_DAC_Initialize 0020  
                   __end_of_printf 0226                start_initialization 002D  
        __size_of_Timer1_StopCount 0003             __end_of_Buzzer_SetDuty 0E94  
                     ?_Buzzer_Init 0076                __end_of_mTouch_Init 0DE9  
              __end_of_mTouch_Read 0F17                      _Timer1_GetCPM 0F3F  
                    _Timer1_GetCPS 072B              ??i1_Buzzer_MiliSecond 0078  
              I2C2_Setting@address 0024                    ___llmod@divisor 003A  
        __end_of_Timer1_StartCount 0D25                    ___llmod@counter 0043  
             LCD_CursorPosition@tx 0025               LCD_CursorPosition@ty 0023  
            __end_of_LCD_WriteData 07A5                   ?_Timer1_Count1ms 0076  
                         ??___lmul 0028                           ??___wmul 0024  
                      __pdataBANK1 00A0                        __pdataBANK2 0120  
                         ??_printf 0050           __size_of_Buzzer_Count1ms 0015  
                      __pbssCOMMON 0070                          ___latbits 0001  
                    __pcstackBANK0 0020                      __pcstackBANK1 00DB  
 __end_of_mTouch_IntervalDecrement 0D91          __size_of_LCD_DisplayClear 0010  
                  ?_Buzzer_SetDuty 0076                 _Timer1_GetCPM$1067 0042  
                   ?_Timer1_GetCPM 003E                     ?_Timer1_GetCPS 003A  
 __end_of_Timer1_DetectAssignCount 0E5D                    I2C_Init@address 0025  
                         ?_Handler 0076                      ?_I2C_Transmit 0028  
                    I2C_Init@Speed 0027                       ?_Timer1_Init 0076  
            DAC_WriteVoltage@volue 0030                       ?_Timer6_Init 0076  
                         ?___lldiv 002C                           ?___llmod 003A  
     __size_of_I2C_CommonInterrupt 0003                   _Timer1_GetMinute 0D17  
                 _Timer1_GetSecond 0D1A               __end_of_I2C2_PinInit 0D65  
                         ?_isdigit 0076                           _I2C_Init 0E2A  
             __end_of_I2C2_Setting 06E8                     _I2C2_Interrupt 05B2  
                       _H7826_Gain 013E                        _mTouch_Init 0DD6  
                      _mTouch_Read 0EF1                 _Timer1_ClearRecord 0DFE  
                   __size_of_putch 0009                           _LCD_Init 0543  
                   ___wmul@product 0024                           _CPS_Data 00C5  
                   ??_I2C_Transmit 002B                ?_Timer1_ClearRecord 0076  
       __size_of_Timer1_StartCount 0005                          clear_ram0 0D25  
               _Timer1_GetCountSum 0DB2               I2C2_Transmit@address 0024  
                         _SSP2CON1 021D                           _SSP2CON2 021E  
                         _SSP2STAT 021C                ?_Timer1_GetCountSum 0020  
                 _Timer6_CheckFlag 0D4D                  ___wmul@multiplier 0020  
                 mTouch_Check@chan 0027                     _DAC_Initialize 0EB0  
             ??_Timer1_ClearRecord 0020             __end_of_I2C2_Interrupt 0606  
                       printf@flag 005D                         printf@prec 0056  
           __size_of_I2C2_Transmit 0098                    ??_Timer1_GetCPM 0042  
                 _Timer1_StopCount 0D1D                    ??_Timer1_GetCPS 003E  
         __end_of_DAC_WriteVoltage 0F96                        _CPS_PreData 00C2  
                ___lmul@multiplier 0020                  ??_Buzzer_Count1ms 007B  
             ??_Timer1_GetCountSum 0024                   __size_of_Handler 0027  
             __size_of_Buzzer_Init 0028           _Timer1_DetectAssignCount 0E43  
         __size_of_mTouch_PortInit 000D  __size_of_mTouch_IntervalDecrement 0010  
        ?_mTouch_IntervalDecrement 0076             __end_of_DAC_Initialize 0ED0  
                 __size_of___lldiv 0053                   __size_of___llmod 0043  
               LCD_WriteData@point 0022                        _isdigit$775 0020  
                  ?_I2C2_Interrupt 0076                   __size_of_isdigit 000F  
       __end_of_LCD_CursorPosition 0E2A                           __ptext10 0DC3  
                         __ptext11 0D1D                           __ptext20 0F96  
                         __ptext12 0D20                           __ptext21 0606  
                         __ptext13 0DFE                           __ptext30 0E2A  
                         __ptext22 0543                           __ptext14 0ED0  
                         __ptext31 06A4                           __ptext23 0D91  
                         __ptext15 0D1A                           __ptext40 0FC6  
                         __ptext32 0D58                           __ptext24 0E13  
                         __ptext16 0D17                           __ptext41 0D31  
                         __ptext33 0F17                           __ptext25 0768  
                         __ptext17 0DB2                           __ptext42 0D14  
                         __ptext34 0DA1                           __ptext26 0F67  
                         __ptext18 0F3F                           __ptext43 05B2  
                         __ptext27 0EB0                           __ptext19 072B  
                         __ptext44 0DE9                           __ptext36 0EF1  
                         __ptext28 0E5D                           __ptext45 0E78  
                         __ptext37 0D81                           __ptext29 04AB  
                         __ptext38 0D4D                           __ptext39 0E43  
                 _LCD_DisplayClear 0D91                       _SSP2CON1bits 021D  
                     _SSP2CON2bits 021E              __end_of_DAC_DataTable 026C  
                    __size_of_main 00EF                      _I2C2_Transmit 04AB  
             __size_of_Timer1_Init 0021                           int$flags 007E  
            __size_of_I2C2_PinInit 000D                I2C_Transmit@address 0028  
             __size_of_Timer6_Init 0013                    ?_DAC_Initialize 0076  
                        printf@val 0058              __size_of_I2C2_Setting 0044  
                     _SSP2STATbits 021C               __end_of_I2C_Transmit 0E78  
                I2C2_Setting@Speed 0022                   ??_Buzzer_SetDuty 0078  
      __end_ofi1_Buzzer_MiliSecond 0D3A                           isdigit@c 0021  
          i1Buzzer_MiliSecond@time 0076                           intlevel1 0000  
              _I2C_CommonInterrupt 0D14                   ___lldiv@dividend 0030  
         __end_of_Timer1_GetMinute 0D1A           __end_of_Timer1_GetSecond 0D1D  
                __CFG_CLKOUTEN$OFF 0000                       _I2C2_PinInit 0D58  
                    ?_mTouch_Check 0076                     ?_I2C2_Transmit 0020  
                     _I2C2_Setting 06A4                           printf@ap 005C  
               I2C_Transmit@result 002F                  ??_mTouch_PortInit 0020  
                 I2C2_Setting@mode 0021               ?_I2C_CommonInterrupt 0076  
                       _OPTION_REG 0095           __size_of_Timer1_Count1ms 003A  
                 ___lldiv@quotient 0035                       ?_mTouch_Init 0076  
                     ?_mTouch_Read 0076             __size_of_LCD_WriteData 003D  
         __end_of_Timer6_CheckFlag 0D58                     ??_mTouch_Check 0022  
