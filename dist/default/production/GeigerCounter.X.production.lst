

Microchip Technology PIC LITE Macro Assembler V1.41 build -162212810 
                                                                                               Sat May 20 03:21:20 2017

Microchip Technology Omniscient Code Generator v1.41 (Free mode) build 201701250102
     1                           	processor	16F1827
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	stringtext,global,class=STRCODE,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	clrtext,global,class=CODE,delta=2
     9                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    10                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    12                           	psect	text1,local,class=CODE,merge=1,delta=2
    13                           	psect	text2,local,class=CODE,merge=1,delta=2
    14                           	psect	text3,local,class=CODE,merge=1,delta=2
    15                           	psect	text4,local,class=CODE,merge=1,delta=2
    16                           	psect	text5,local,class=CODE,merge=1,delta=2
    17                           	psect	text6,local,class=CODE,merge=1,delta=2,group=2
    18                           	psect	text7,local,class=CODE,merge=1,delta=2,group=2
    19                           	psect	text8,local,class=CODE,merge=1,delta=2,group=2
    20                           	psect	text9,local,class=CODE,merge=1,delta=2
    21                           	psect	text10,local,class=CODE,merge=1,delta=2
    22                           	psect	text11,local,class=CODE,merge=1,delta=2
    23                           	psect	text12,local,class=CODE,merge=1,delta=2
    24                           	psect	text13,local,class=CODE,merge=1,delta=2
    25                           	psect	text14,local,class=CODE,merge=1,delta=2
    26                           	psect	intentry,global,class=CODE,delta=2
    27                           	dabs	1,0x7E,2
    28  0000                     
    29                           ; Version 1.41
    30                           ; Generated 25/01/2017 GMT
    31                           ; 
    32                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    33                           ; All rights reserved.
    34                           ; 
    35                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    36                           ; 
    37                           ; Redistribution and use in source and binary forms, with or without modification, are
    38                           ; permitted provided that the following conditions are met:
    39                           ; 
    40                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    41                           ;        conditions and the following disclaimer.
    42                           ; 
    43                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    44                           ;        of conditions and the following disclaimer in the documentation and/or other
    45                           ;        materials provided with the distribution.
    46                           ; 
    47                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    48                           ;        software without specific prior written permission.
    49                           ; 
    50                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    51                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    52                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    53                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    54                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    55                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    56                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    57                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    58                           ; 
    59                           ; 
    60                           ; Code-generator required, PIC16F1827 Definitions
    61                           ; 
    62                           ; SFR Addresses
    63  0000                     	;# 
    64  0001                     	;# 
    65  0002                     	;# 
    66  0003                     	;# 
    67  0004                     	;# 
    68  0005                     	;# 
    69  0006                     	;# 
    70  0007                     	;# 
    71  0008                     	;# 
    72  0009                     	;# 
    73  000A                     	;# 
    74  000B                     	;# 
    75  000C                     	;# 
    76  000D                     	;# 
    77  0011                     	;# 
    78  0012                     	;# 
    79  0013                     	;# 
    80  0014                     	;# 
    81  0015                     	;# 
    82  0016                     	;# 
    83  0016                     	;# 
    84  0017                     	;# 
    85  0018                     	;# 
    86  0019                     	;# 
    87  001A                     	;# 
    88  001B                     	;# 
    89  001C                     	;# 
    90  001E                     	;# 
    91  001F                     	;# 
    92  008C                     	;# 
    93  008D                     	;# 
    94  0091                     	;# 
    95  0092                     	;# 
    96  0093                     	;# 
    97  0094                     	;# 
    98  0095                     	;# 
    99  0096                     	;# 
   100  0097                     	;# 
   101  0098                     	;# 
   102  0099                     	;# 
   103  009A                     	;# 
   104  009B                     	;# 
   105  009B                     	;# 
   106  009C                     	;# 
   107  009D                     	;# 
   108  009E                     	;# 
   109  010C                     	;# 
   110  010D                     	;# 
   111  0111                     	;# 
   112  0112                     	;# 
   113  0113                     	;# 
   114  0114                     	;# 
   115  0115                     	;# 
   116  0116                     	;# 
   117  0117                     	;# 
   118  0118                     	;# 
   119  0119                     	;# 
   120  011A                     	;# 
   121  011B                     	;# 
   122  011D                     	;# 
   123  011E                     	;# 
   124  018C                     	;# 
   125  018D                     	;# 
   126  0191                     	;# 
   127  0191                     	;# 
   128  0192                     	;# 
   129  0193                     	;# 
   130  0193                     	;# 
   131  0193                     	;# 
   132  0194                     	;# 
   133  0195                     	;# 
   134  0196                     	;# 
   135  0199                     	;# 
   136  019A                     	;# 
   137  019B                     	;# 
   138  019B                     	;# 
   139  019B                     	;# 
   140  019B                     	;# 
   141  019C                     	;# 
   142  019C                     	;# 
   143  019D                     	;# 
   144  019E                     	;# 
   145  019F                     	;# 
   146  020C                     	;# 
   147  020D                     	;# 
   148  0211                     	;# 
   149  0211                     	;# 
   150  0212                     	;# 
   151  0212                     	;# 
   152  0213                     	;# 
   153  0213                     	;# 
   154  0214                     	;# 
   155  0214                     	;# 
   156  0215                     	;# 
   157  0215                     	;# 
   158  0215                     	;# 
   159  0216                     	;# 
   160  0216                     	;# 
   161  0217                     	;# 
   162  0217                     	;# 
   163  0219                     	;# 
   164  021A                     	;# 
   165  021B                     	;# 
   166  021C                     	;# 
   167  021D                     	;# 
   168  021E                     	;# 
   169  021F                     	;# 
   170  0291                     	;# 
   171  0291                     	;# 
   172  0292                     	;# 
   173  0293                     	;# 
   174  0294                     	;# 
   175  0295                     	;# 
   176  0295                     	;# 
   177  0296                     	;# 
   178  0298                     	;# 
   179  0298                     	;# 
   180  0299                     	;# 
   181  029A                     	;# 
   182  029B                     	;# 
   183  029C                     	;# 
   184  029C                     	;# 
   185  029D                     	;# 
   186  029E                     	;# 
   187  029E                     	;# 
   188  0311                     	;# 
   189  0311                     	;# 
   190  0312                     	;# 
   191  0313                     	;# 
   192  0318                     	;# 
   193  0318                     	;# 
   194  0319                     	;# 
   195  031A                     	;# 
   196  0394                     	;# 
   197  0395                     	;# 
   198  0396                     	;# 
   199  039A                     	;# 
   200  039C                     	;# 
   201  039D                     	;# 
   202  039E                     	;# 
   203  039F                     	;# 
   204  0415                     	;# 
   205  0416                     	;# 
   206  0417                     	;# 
   207  041C                     	;# 
   208  041D                     	;# 
   209  041E                     	;# 
   210  0FE4                     	;# 
   211  0FE5                     	;# 
   212  0FE6                     	;# 
   213  0FE7                     	;# 
   214  0FE8                     	;# 
   215  0FE9                     	;# 
   216  0FEA                     	;# 
   217  0FEB                     	;# 
   218  0FED                     	;# 
   219  0FEE                     	;# 
   220  0FEF                     	;# 
   221  0000                     	;# 
   222  0001                     	;# 
   223  0002                     	;# 
   224  0003                     	;# 
   225  0004                     	;# 
   226  0005                     	;# 
   227  0006                     	;# 
   228  0007                     	;# 
   229  0008                     	;# 
   230  0009                     	;# 
   231  000A                     	;# 
   232  000B                     	;# 
   233  000C                     	;# 
   234  000D                     	;# 
   235  0011                     	;# 
   236  0012                     	;# 
   237  0013                     	;# 
   238  0014                     	;# 
   239  0015                     	;# 
   240  0016                     	;# 
   241  0016                     	;# 
   242  0017                     	;# 
   243  0018                     	;# 
   244  0019                     	;# 
   245  001A                     	;# 
   246  001B                     	;# 
   247  001C                     	;# 
   248  001E                     	;# 
   249  001F                     	;# 
   250  008C                     	;# 
   251  008D                     	;# 
   252  0091                     	;# 
   253  0092                     	;# 
   254  0093                     	;# 
   255  0094                     	;# 
   256  0095                     	;# 
   257  0096                     	;# 
   258  0097                     	;# 
   259  0098                     	;# 
   260  0099                     	;# 
   261  009A                     	;# 
   262  009B                     	;# 
   263  009B                     	;# 
   264  009C                     	;# 
   265  009D                     	;# 
   266  009E                     	;# 
   267  010C                     	;# 
   268  010D                     	;# 
   269  0111                     	;# 
   270  0112                     	;# 
   271  0113                     	;# 
   272  0114                     	;# 
   273  0115                     	;# 
   274  0116                     	;# 
   275  0117                     	;# 
   276  0118                     	;# 
   277  0119                     	;# 
   278  011A                     	;# 
   279  011B                     	;# 
   280  011D                     	;# 
   281  011E                     	;# 
   282  018C                     	;# 
   283  018D                     	;# 
   284  0191                     	;# 
   285  0191                     	;# 
   286  0192                     	;# 
   287  0193                     	;# 
   288  0193                     	;# 
   289  0193                     	;# 
   290  0194                     	;# 
   291  0195                     	;# 
   292  0196                     	;# 
   293  0199                     	;# 
   294  019A                     	;# 
   295  019B                     	;# 
   296  019B                     	;# 
   297  019B                     	;# 
   298  019B                     	;# 
   299  019C                     	;# 
   300  019C                     	;# 
   301  019D                     	;# 
   302  019E                     	;# 
   303  019F                     	;# 
   304  020C                     	;# 
   305  020D                     	;# 
   306  0211                     	;# 
   307  0211                     	;# 
   308  0212                     	;# 
   309  0212                     	;# 
   310  0213                     	;# 
   311  0213                     	;# 
   312  0214                     	;# 
   313  0214                     	;# 
   314  0215                     	;# 
   315  0215                     	;# 
   316  0215                     	;# 
   317  0216                     	;# 
   318  0216                     	;# 
   319  0217                     	;# 
   320  0217                     	;# 
   321  0219                     	;# 
   322  021A                     	;# 
   323  021B                     	;# 
   324  021C                     	;# 
   325  021D                     	;# 
   326  021E                     	;# 
   327  021F                     	;# 
   328  0291                     	;# 
   329  0291                     	;# 
   330  0292                     	;# 
   331  0293                     	;# 
   332  0294                     	;# 
   333  0295                     	;# 
   334  0295                     	;# 
   335  0296                     	;# 
   336  0298                     	;# 
   337  0298                     	;# 
   338  0299                     	;# 
   339  029A                     	;# 
   340  029B                     	;# 
   341  029C                     	;# 
   342  029C                     	;# 
   343  029D                     	;# 
   344  029E                     	;# 
   345  029E                     	;# 
   346  0311                     	;# 
   347  0311                     	;# 
   348  0312                     	;# 
   349  0313                     	;# 
   350  0318                     	;# 
   351  0318                     	;# 
   352  0319                     	;# 
   353  031A                     	;# 
   354  0394                     	;# 
   355  0395                     	;# 
   356  0396                     	;# 
   357  039A                     	;# 
   358  039C                     	;# 
   359  039D                     	;# 
   360  039E                     	;# 
   361  039F                     	;# 
   362  0415                     	;# 
   363  0416                     	;# 
   364  0417                     	;# 
   365  041C                     	;# 
   366  041D                     	;# 
   367  041E                     	;# 
   368  0FE4                     	;# 
   369  0FE5                     	;# 
   370  0FE6                     	;# 
   371  0FE7                     	;# 
   372  0FE8                     	;# 
   373  0FE9                     	;# 
   374  0FEA                     	;# 
   375  0FEB                     	;# 
   376  0FED                     	;# 
   377  0FEE                     	;# 
   378  0FEF                     	;# 
   379  0000                     	;# 
   380  0001                     	;# 
   381  0002                     	;# 
   382  0003                     	;# 
   383  0004                     	;# 
   384  0005                     	;# 
   385  0006                     	;# 
   386  0007                     	;# 
   387  0008                     	;# 
   388  0009                     	;# 
   389  000A                     	;# 
   390  000B                     	;# 
   391  000C                     	;# 
   392  000D                     	;# 
   393  0011                     	;# 
   394  0012                     	;# 
   395  0013                     	;# 
   396  0014                     	;# 
   397  0015                     	;# 
   398  0016                     	;# 
   399  0016                     	;# 
   400  0017                     	;# 
   401  0018                     	;# 
   402  0019                     	;# 
   403  001A                     	;# 
   404  001B                     	;# 
   405  001C                     	;# 
   406  001E                     	;# 
   407  001F                     	;# 
   408  008C                     	;# 
   409  008D                     	;# 
   410  0091                     	;# 
   411  0092                     	;# 
   412  0093                     	;# 
   413  0094                     	;# 
   414  0095                     	;# 
   415  0096                     	;# 
   416  0097                     	;# 
   417  0098                     	;# 
   418  0099                     	;# 
   419  009A                     	;# 
   420  009B                     	;# 
   421  009B                     	;# 
   422  009C                     	;# 
   423  009D                     	;# 
   424  009E                     	;# 
   425  010C                     	;# 
   426  010D                     	;# 
   427  0111                     	;# 
   428  0112                     	;# 
   429  0113                     	;# 
   430  0114                     	;# 
   431  0115                     	;# 
   432  0116                     	;# 
   433  0117                     	;# 
   434  0118                     	;# 
   435  0119                     	;# 
   436  011A                     	;# 
   437  011B                     	;# 
   438  011D                     	;# 
   439  011E                     	;# 
   440  018C                     	;# 
   441  018D                     	;# 
   442  0191                     	;# 
   443  0191                     	;# 
   444  0192                     	;# 
   445  0193                     	;# 
   446  0193                     	;# 
   447  0193                     	;# 
   448  0194                     	;# 
   449  0195                     	;# 
   450  0196                     	;# 
   451  0199                     	;# 
   452  019A                     	;# 
   453  019B                     	;# 
   454  019B                     	;# 
   455  019B                     	;# 
   456  019B                     	;# 
   457  019C                     	;# 
   458  019C                     	;# 
   459  019D                     	;# 
   460  019E                     	;# 
   461  019F                     	;# 
   462  020C                     	;# 
   463  020D                     	;# 
   464  0211                     	;# 
   465  0211                     	;# 
   466  0212                     	;# 
   467  0212                     	;# 
   468  0213                     	;# 
   469  0213                     	;# 
   470  0214                     	;# 
   471  0214                     	;# 
   472  0215                     	;# 
   473  0215                     	;# 
   474  0215                     	;# 
   475  0216                     	;# 
   476  0216                     	;# 
   477  0217                     	;# 
   478  0217                     	;# 
   479  0219                     	;# 
   480  021A                     	;# 
   481  021B                     	;# 
   482  021C                     	;# 
   483  021D                     	;# 
   484  021E                     	;# 
   485  021F                     	;# 
   486  0291                     	;# 
   487  0291                     	;# 
   488  0292                     	;# 
   489  0293                     	;# 
   490  0294                     	;# 
   491  0295                     	;# 
   492  0295                     	;# 
   493  0296                     	;# 
   494  0298                     	;# 
   495  0298                     	;# 
   496  0299                     	;# 
   497  029A                     	;# 
   498  029B                     	;# 
   499  029C                     	;# 
   500  029C                     	;# 
   501  029D                     	;# 
   502  029E                     	;# 
   503  029E                     	;# 
   504  0311                     	;# 
   505  0311                     	;# 
   506  0312                     	;# 
   507  0313                     	;# 
   508  0318                     	;# 
   509  0318                     	;# 
   510  0319                     	;# 
   511  031A                     	;# 
   512  0394                     	;# 
   513  0395                     	;# 
   514  0396                     	;# 
   515  039A                     	;# 
   516  039C                     	;# 
   517  039D                     	;# 
   518  039E                     	;# 
   519  039F                     	;# 
   520  0415                     	;# 
   521  0416                     	;# 
   522  0417                     	;# 
   523  041C                     	;# 
   524  041D                     	;# 
   525  041E                     	;# 
   526  0FE4                     	;# 
   527  0FE5                     	;# 
   528  0FE6                     	;# 
   529  0FE7                     	;# 
   530  0FE8                     	;# 
   531  0FE9                     	;# 
   532  0FEA                     	;# 
   533  0FEB                     	;# 
   534  0FED                     	;# 
   535  0FEE                     	;# 
   536  0FEF                     	;# 
   537  0016                     _TMR1	set	22
   538  000C                     _PORTA	set	12
   539  0019                     _T1GCON	set	25
   540  0018                     _T1CON	set	24
   541  000D                     _PORTB	set	13
   542  00C0                     _TMR1ON	set	192
   543  005F                     _GIE	set	95
   544  005E                     _PEIE	set	94
   545  0088                     _TMR1IF	set	136
   546  0063                     _RA3	set	99
   547  0064                     _RA4	set	100
   548  008C                     _TRISA	set	140
   549  0099                     _OSCCON	set	153
   550  008D                     _TRISB	set	141
   551  0488                     _TMR1IE	set	1160
   552  011E                     _APFCON1	set	286
   553  011D                     _APFCON0	set	285
   554  018C                     _ANSELA	set	396
   555  018D                     _ANSELB	set	397
   556                           
   557                           	psect	stringtext
   558  03CC                     __pstringtext:	
   559  03CC                     STR_3:	
   560  03CC  3425               	retlw	37	;'%'
   561  03CD  3430               	retlw	48	;'0'
   562  03CE  3438               	retlw	56	;'8'
   563  03CF  346C               	retlw	108	;'l'
   564  03D0  3458               	retlw	88	;'X'
   565  03D1  3420               	retlw	32	;' '
   566  03D2  3400               	retlw	0
   567  03D3                     STR_6:	
   568  03D3  3420               	retlw	32	;' '
   569  03D4  3425               	retlw	37	;'%'
   570  03D5  3430               	retlw	48	;'0'
   571  03D6  3438               	retlw	56	;'8'
   572  03D7  344C               	retlw	76	;'L'
   573  03D8  3458               	retlw	88	;'X'
   574  03D9  3400               	retlw	0
   575  03DA                     STR_4:	
   576  03DA  3420               	retlw	32	;' '
   577  03DB  3425               	retlw	37	;'%'
   578  03DC  3430               	retlw	48	;'0'
   579  03DD  3432               	retlw	50	;'2'
   580  03DE  3458               	retlw	88	;'X'
   581  03DF  3400               	retlw	0
   582  03E0                     STR_5:	
   583  03E0  3420               	retlw	32	;' '
   584  03E1  3425               	retlw	37	;'%'
   585  03E2  3430               	retlw	48	;'0'
   586  03E3  3434               	retlw	52	;'4'
   587  03E4  3458               	retlw	88	;'X'
   588  03E5  3400               	retlw	0
   589  03E6                     STR_1:	
   590  03E6  3425               	retlw	37	;'%'
   591  03E7  3455               	retlw	85	;'U'
   592  03E8  3420               	retlw	32	;' '
   593  03E9  3400               	retlw	0
   594  03EA                     STR_2:	
   595  03EA  340D               	retlw	13
   596  03EB  3400               	retlw	0
   597                           
   598                           ; #config settings
   599  0000                     
   600                           	psect	cinit
   601  000F                     start_initialization:	
   602  000F                     __initialization:	
   603                           
   604                           ; Clear objects allocated to COMMON
   605  000F  01FC               	clrf	__pbssCOMMON& (0+127)
   606                           
   607                           ; Clear objects allocated to BANK0
   608  0010  305C               	movlw	low __pbssBANK0
   609  0011  0084               	movwf	4
   610  0012  3000               	movlw	high __pbssBANK0
   611  0013  0085               	movwf	5
   612  0014  300E               	movlw	14
   613  0015  3184  247D         	fcall	clear_ram0
   614  0017                     end_of_initialization:	
   615                           ;End of C runtime variable initialization code
   616                           
   617  0017                     __end_of__initialization:	
   618  0017  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
   619  0018  0020               	movlb	0
   620  0019  3183  2BAA         	ljmp	_main	;jump to C main() function
   621                           
   622                           	psect	bssCOMMON
   623  007C                     __pbssCOMMON:	
   624  007C                     _outptr:	
   625  007C                     	ds	1
   626                           
   627                           	psect	bssBANK0
   628  005C                     __pbssBANK0:	
   629  005C                     _timesum:	
   630  005C                     	ds	4
   631  0060                     _countsum:	
   632  0060                     	ds	4
   633  0064                     _errno:	
   634  0064                     	ds	2
   635  0066                     _xfunc_in:	
   636  0066                     	ds	2
   637  0068                     _xfunc_out:	
   638  0068                     	ds	2
   639                           
   640                           	psect	clrtext
   641  047D                     clear_ram0:	
   642                           ;	Called with FSR0 containing the base address, and
   643                           ;	WREG with the size to clear
   644                           
   645  047D  0064               	clrwdt	;clear the watchdog before getting into this loop
   646  047E                     clrloop0:	
   647  047E  0180               	clrf	0	;clear RAM location pointed to by FSR
   648  047F  3101               	addfsr 0,1
   649  0480  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
   650  0481  2C7E               	goto	clrloop0	;have we reached the end yet?
   651  0482  3400               	retlw	0	;all done for this memory range, return
   652                           
   653                           	psect	cstackCOMMON
   654  0070                     __pcstackCOMMON:	
   655  0070                     ?_LCD_DisplayClear:	
   656  0070                     ?_Basic_Init:	
   657                           ; 1 bytes @ 0x0
   658                           
   659  0070                     ?_LCD_WriteData:	
   660                           ; 1 bytes @ 0x0
   661                           
   662  0070                     ?_LCD_Init:	
   663                           ; 1 bytes @ 0x0
   664                           
   665  0070                     ?_Timer1_Init:	
   666                           ; 1 bytes @ 0x0
   667                           
   668  0070                     ?_main:	
   669                           ; 1 bytes @ 0x0
   670                           
   671  0070                     ?_Handler:	
   672                           ; 1 bytes @ 0x0
   673                           
   674  0070                     ??_Handler:	
   675                           ; 1 bytes @ 0x0
   676                           
   677  0070                     ?_xputc:	
   678                           ; 1 bytes @ 0x0
   679                           
   680  0070                     ?_xputs:	
   681                           ; 1 bytes @ 0x0
   682                           
   683                           
   684                           ; 1 bytes @ 0x0
   685  0070                     	ds	1
   686  0071                     ??_Basic_Init:	
   687  0071                     ??_LCD_WriteData:	
   688                           ; 1 bytes @ 0x1
   689                           
   690  0071                     ??_Timer1_Init:	
   691                           ; 1 bytes @ 0x1
   692                           
   693  0071                     ?___wmul:	
   694                           ; 1 bytes @ 0x1
   695                           
   696  0071                     ?___lldiv:	
   697                           ; 2 bytes @ 0x1
   698                           
   699  0071                     ?___llmod:	
   700                           ; 4 bytes @ 0x1
   701                           
   702  0071                     ___wmul@multiplier:	
   703                           ; 4 bytes @ 0x1
   704                           
   705  0071                     ___lldiv@divisor:	
   706                           ; 2 bytes @ 0x1
   707                           
   708  0071                     ___llmod@divisor:	
   709                           ; 4 bytes @ 0x1
   710                           
   711                           
   712                           ; 4 bytes @ 0x1
   713  0071                     	ds	2
   714  0073                     LCD_WriteData@point:	
   715  0073                     ___wmul@multiplicand:	
   716                           ; 1 bytes @ 0x3
   717                           
   718                           
   719                           ; 2 bytes @ 0x3
   720  0073                     	ds	1
   721  0074                     ??_LCD_DisplayClear:	
   722  0074                     ?_LCD_Put:	
   723                           ; 1 bytes @ 0x4
   724                           
   725  0074                     ?_LCD_CursorPosition:	
   726                           ; 1 bytes @ 0x4
   727                           
   728  0074                     LCD_Put@word:	
   729                           ; 1 bytes @ 0x4
   730                           
   731  0074                     LCD_CursorPosition@ty:	
   732                           ; 1 bytes @ 0x4
   733                           
   734                           
   735                           ; 1 bytes @ 0x4
   736  0074                     	ds	1
   737  0075                     ??_LCD_Init:	
   738  0075                     ??_LCD_Put:	
   739                           ; 1 bytes @ 0x5
   740                           
   741  0075                     ??_LCD_CursorPosition:	
   742                           ; 1 bytes @ 0x5
   743                           
   744  0075                     ??_xputc:	
   745                           ; 1 bytes @ 0x5
   746                           
   747  0075                     ??___wmul:	
   748                           ; 1 bytes @ 0x5
   749                           
   750  0075                     ___wmul@product:	
   751                           ; 1 bytes @ 0x5
   752                           
   753  0075                     ___lldiv@dividend:	
   754                           ; 2 bytes @ 0x5
   755                           
   756  0075                     ___llmod@dividend:	
   757                           ; 4 bytes @ 0x5
   758                           
   759                           
   760                           ; 4 bytes @ 0x5
   761  0075                     	ds	1
   762  0076                     LCD_CursorPosition@tx:	
   763  0076                     xputc@c:	
   764                           ; 1 bytes @ 0x6
   765                           
   766                           
   767                           ; 1 bytes @ 0x6
   768  0076                     	ds	1
   769  0077                     ??_xputs:	
   770                           
   771                           ; 1 bytes @ 0x7
   772  0077                     	ds	1
   773  0078                     xputs@str:	
   774                           
   775                           ; 1 bytes @ 0x8
   776  0078                     	ds	1
   777  0079                     ??___lldiv:	
   778  0079                     ??___llmod:	
   779                           ; 1 bytes @ 0x9
   780                           
   781                           
   782                           ; 1 bytes @ 0x9
   783  0079                     	ds	1
   784  007A                     ___llmod@counter:	
   785                           
   786                           ; 1 bytes @ 0xA
   787  007A                     	ds	1
   788  007B                     ??_xprintf:	
   789                           
   790                           ; 1 bytes @ 0xB
   791  007B                     	ds	1
   792  007C                     ??_main:	
   793                           
   794                           	psect	cstackBANK0
   795  0020                     __pcstackBANK0:	
   796                           ; 1 bytes @ 0xC
   797                           
   798  0020                     ___lldiv@quotient:	
   799                           
   800                           ; 4 bytes @ 0x0
   801  0020                     	ds	4
   802  0024                     ___lldiv@counter:	
   803                           
   804                           ; 1 bytes @ 0x4
   805  0024                     	ds	1
   806  0025                     ?_xvprintf:	
   807  0025                     xvprintf@fmt:	
   808                           ; 1 bytes @ 0x5
   809                           
   810                           
   811                           ; 2 bytes @ 0x5
   812  0025                     	ds	2
   813  0027                     xvprintf@arp:	
   814                           
   815                           ; 1 bytes @ 0x7
   816  0027                     	ds	1
   817  0028                     ??_xvprintf:	
   818                           
   819                           ; 1 bytes @ 0x8
   820  0028                     	ds	4
   821  002C                     xvprintf@s:	
   822                           
   823                           ; 16 bytes @ 0xC
   824  002C                     	ds	16
   825  003C                     _xvprintf$175:	
   826                           
   827                           ; 4 bytes @ 0x1C
   828  003C                     	ds	4
   829  0040                     _xvprintf$176:	
   830                           
   831                           ; 2 bytes @ 0x20
   832  0040                     	ds	2
   833  0042                     _xvprintf$177:	
   834                           
   835                           ; 2 bytes @ 0x22
   836  0042                     	ds	2
   837  0044                     xvprintf@p:	
   838                           
   839                           ; 1 bytes @ 0x24
   840  0044                     	ds	1
   841  0045                     xvprintf@r:	
   842                           
   843                           ; 2 bytes @ 0x25
   844  0045                     	ds	2
   845  0047                     xvprintf@w:	
   846                           
   847                           ; 2 bytes @ 0x27
   848  0047                     	ds	2
   849  0049                     xvprintf@j:	
   850                           
   851                           ; 2 bytes @ 0x29
   852  0049                     	ds	2
   853  004B                     xvprintf@v:	
   854                           
   855                           ; 4 bytes @ 0x2B
   856  004B                     	ds	4
   857  004F                     xvprintf@f:	
   858                           
   859                           ; 2 bytes @ 0x2F
   860  004F                     	ds	2
   861  0051                     xvprintf@i:	
   862                           
   863                           ; 2 bytes @ 0x31
   864  0051                     	ds	2
   865  0053                     xvprintf@d:	
   866                           
   867                           ; 1 bytes @ 0x33
   868  0053                     	ds	1
   869  0054                     xvprintf@c:	
   870                           
   871                           ; 1 bytes @ 0x34
   872  0054                     	ds	1
   873  0055                     ?_xprintf:	
   874  0055                     xprintf@fmt:	
   875                           ; 1 bytes @ 0x35
   876                           
   877                           
   878                           ; 2 bytes @ 0x35
   879  0055                     	ds	6
   880  005B                     xprintf@arp:	
   881                           
   882                           ; 1 bytes @ 0x3B
   883  005B                     	ds	1
   884                           
   885                           	psect	maintext
   886  03AA                     __pmaintext:	
   887 ;;
   888 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   889 ;;
   890 ;; *************** function _main *****************
   891 ;; Defined at:
   892 ;;		line 13 in file "main.c"
   893 ;; Parameters:    Size  Location     Type
   894 ;;		None
   895 ;; Auto vars:     Size  Location     Type
   896 ;;		None
   897 ;; Return value:  Size  Location     Type
   898 ;;                  1    wreg      char 
   899 ;; Registers used:
   900 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
   901 ;; Tracked objects:
   902 ;;		On entry : B1F/0
   903 ;;		On exit  : 0/0
   904 ;;		Unchanged: 0/0
   905 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
   906 ;;      Params:         0       0       0       0       0       0
   907 ;;      Locals:         0       0       0       0       0       0
   908 ;;      Temps:          0       0       0       0       0       0
   909 ;;      Totals:         0       0       0       0       0       0
   910 ;;Total ram usage:        0 bytes
   911 ;; Hardware stack levels required when called:    7
   912 ;; This function calls:
   913 ;;		_Basic_Init
   914 ;;		_LCD_CursorPosition
   915 ;;		_LCD_Init
   916 ;;		_Timer1_Init
   917 ;;		_xprintf
   918 ;; This function is called by:
   919 ;;		Startup code after reset
   920 ;; This function uses a non-reentrant model
   921 ;;
   922                           
   923                           
   924                           ;psect for function _main
   925  03AA                     _main:	
   926                           
   927                           ;main.c: 15: Basic_Init();
   928                           
   929                           ;incstack = 0
   930                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
   931  03AA  3184  2436  3183   	fcall	_Basic_Init
   932                           
   933                           ;main.c: 17: Timer1_Init();
   934  03AD  3184  2407  3183   	fcall	_Timer1_Init
   935                           
   936                           ;main.c: 18: TMR1ON = 1;;
   937  03B0  0020               	movlb	0	; select bank0
   938  03B1  1418               	bsf	24,0	;volatile
   939                           
   940                           ;main.c: 20: LCD_Init();
   941  03B2  3182  2245  3183   	fcall	_LCD_Init
   942                           
   943                           ;main.c: 21: xfunc_out = (void(*)(unsigned char))(LCD_Put);
   944  03B5  3083               	movlw	low _LCD_Put
   945  03B6  0020               	movlb	0	; select bank0
   946  03B7  00E8               	movwf	_xfunc_out
   947  03B8  3004               	movlw	high _LCD_Put
   948  03B9  00E9               	movwf	_xfunc_out+1
   949  03BA                     l2682:	
   950                           ;main.c: 23: while(1)
   951                           
   952                           
   953                           ;main.c: 24: {
   954                           ;main.c: 25: LCD_CursorPosition(0,0);
   955  03BA  01F4               	clrf	LCD_CursorPosition@ty
   956  03BB  3000               	movlw	0
   957  03BC  3184  2421  3183   	fcall	_LCD_CursorPosition
   958                           
   959                           ;main.c: 26: xprintf("%U ",(uint16_t)TMR1);
   960  03BF  30E6               	movlw	low (STR_1| (0+32768))
   961  03C0  0020               	movlb	0	; select bank0
   962  03C1  00D5               	movwf	xprintf@fmt
   963  03C2  3083               	movlw	high (STR_1| (0+32768))
   964  03C3  00D6               	movwf	xprintf@fmt+1
   965  03C4  0817               	movf	23,w	;volatile
   966  03C5  00D8               	movwf	?_xprintf+3
   967  03C6  0816               	movf	22,w	;volatile
   968  03C7  00D7               	movwf	?_xprintf+2
   969  03C8  3184  245E  3183   	fcall	_xprintf
   970  03CB  2BBA               	goto	l2682
   971  03CC                     __end_of_main:	
   972                           ;main.c: 27: }
   973                           ;main.c: 29: return 0;
   974                           ;	Return value of _main is never used
   975                           
   976                           
   977                           	psect	text1
   978  045E                     __ptext1:	
   979 ;; *************** function _xprintf *****************
   980 ;; Defined at:
   981 ;;		line 165 in file "xprintf.c"
   982 ;; Parameters:    Size  Location     Type
   983 ;;  fmt             2   53[BANK0 ] PTR const unsigned char 
   984 ;;		 -> STR_6(7), STR_5(6), STR_4(6), STR_3(7), 
   985 ;;		 -> STR_1(4), 
   986 ;; Auto vars:     Size  Location     Type
   987 ;;  arp             1   59[BANK0 ] PTR void [1]
   988 ;;		 -> ?_xfprintf(1), ?_xsprintf(1), ?_xprintf(1), 
   989 ;; Return value:  Size  Location     Type
   990 ;;                  1    wreg      void 
   991 ;; Registers used:
   992 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
   993 ;; Tracked objects:
   994 ;;		On entry : 0/0
   995 ;;		On exit  : 0/0
   996 ;;		Unchanged: 0/0
   997 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
   998 ;;      Params:         0       6       0       0       0       0
   999 ;;      Locals:         0       1       0       0       0       0
  1000 ;;      Temps:          1       0       0       0       0       0
  1001 ;;      Totals:         1       7       0       0       0       0
  1002 ;;Total ram usage:        8 bytes
  1003 ;; Hardware stack levels used:    1
  1004 ;; Hardware stack levels required when called:    6
  1005 ;; This function calls:
  1006 ;;		_xvprintf
  1007 ;; This function is called by:
  1008 ;;		_main
  1009 ;;		_put_dump
  1010 ;; This function uses a non-reentrant model
  1011 ;;
  1012                           
  1013                           
  1014                           ;psect for function _xprintf
  1015  045E                     _xprintf:	
  1016                           
  1017                           ;xprintf.c: 170: va_list arp;
  1018                           ;xprintf.c: 173: *arp = __va_start();
  1019                           
  1020                           ;incstack = 0
  1021                           ; Regs used in _xprintf: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  1022  045E  3057               	movlw	(low ((?_xprintf| 0+2)))& (0+255)
  1023  045F  00FB               	movwf	??_xprintf
  1024  0460  087B               	movf	??_xprintf,w
  1025  0461  0020               	movlb	0	; select bank0
  1026  0462  00DB               	movwf	xprintf@arp
  1027                           
  1028                           ;xprintf.c: 174: xvprintf(fmt, arp);
  1029  0463  0856               	movf	xprintf@fmt+1,w
  1030  0464  00A6               	movwf	xvprintf@fmt+1
  1031  0465  0855               	movf	xprintf@fmt,w
  1032  0466  00A5               	movwf	xvprintf@fmt
  1033  0467  305B               	movlw	(low (xprintf@arp| 0))& (0+255)
  1034  0468  00FB               	movwf	??_xprintf
  1035  0469  087B               	movf	??_xprintf,w
  1036  046A  00A7               	movwf	xvprintf@arp
  1037  046B  3180  201B         	fcall	_xvprintf
  1038  046D  0008               	return
  1039  046E                     __end_of_xprintf:	
  1040                           
  1041                           	psect	text2
  1042  001B                     __ptext2:	
  1043 ;; *************** function _xvprintf *****************
  1044 ;; Defined at:
  1045 ;;		line 88 in file "xprintf.c"
  1046 ;; Parameters:    Size  Location     Type
  1047 ;;  fmt             2    5[BANK0 ] PTR const unsigned char 
  1048 ;;		 -> STR_6(7), STR_5(6), STR_4(6), STR_3(7), 
  1049 ;;		 -> STR_1(4), 
  1050 ;;  arp             1    7[BANK0 ] PTR PTR void 
  1051 ;;		 -> xfprintf@arp(1), xsprintf@arp(1), xprintf@arp(1), 
  1052 ;; Auto vars:     Size  Location     Type
  1053 ;;  s              16   12[BANK0 ] unsigned char [16]
  1054 ;;  v               4   43[BANK0 ] unsigned long 
  1055 ;;  i               2   49[BANK0 ] unsigned int 
  1056 ;;  f               2   47[BANK0 ] unsigned int 
  1057 ;;  j               2   41[BANK0 ] unsigned int 
  1058 ;;  w               2   39[BANK0 ] unsigned int 
  1059 ;;  r               2   37[BANK0 ] unsigned int 
  1060 ;;  c               1   52[BANK0 ] unsigned char 
  1061 ;;  d               1   51[BANK0 ] unsigned char 
  1062 ;;  p               1   36[BANK0 ] PTR unsigned char 
  1063 ;;		 -> ?_xfprintf(1), ?_xsprintf(1), ?_xprintf(1), 
  1064 ;; Return value:  Size  Location     Type
  1065 ;;                  1    wreg      void 
  1066 ;; Registers used:
  1067 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  1068 ;; Tracked objects:
  1069 ;;		On entry : 0/0
  1070 ;;		On exit  : 0/0
  1071 ;;		Unchanged: 0/0
  1072 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  1073 ;;      Params:         0       3       0       0       0       0
  1074 ;;      Locals:         0      41       0       0       0       0
  1075 ;;      Temps:          0       4       0       0       0       0
  1076 ;;      Totals:         0      48       0       0       0       0
  1077 ;;Total ram usage:       48 bytes
  1078 ;; Hardware stack levels used:    1
  1079 ;; Hardware stack levels required when called:    5
  1080 ;; This function calls:
  1081 ;;		___lldiv
  1082 ;;		___llmod
  1083 ;;		___wmul
  1084 ;;		_xputc
  1085 ;;		_xputs
  1086 ;; This function is called by:
  1087 ;;		_xprintf
  1088 ;;		_xsprintf
  1089 ;;		_xfprintf
  1090 ;; This function uses a non-reentrant model
  1091 ;;
  1092                           
  1093                           
  1094                           ;psect for function _xvprintf
  1095  001B                     _xvprintf:	
  1096  001B                     l160:	
  1097                           ;incstack = 0
  1098                           ; Regs used in _xvprintf: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  1099                           ;xprintf.c: 93: unsigned int r, i, j, w, f;
  1100                           ;xprintf.c: 94: unsigned long v;
  1101                           ;xprintf.c: 95: char s[16], c, d, *p;
  1102                           ;xprintf.c: 98: for (;;) {
  1103                           
  1104                           
  1105                           ;xprintf.c: 99: c = *fmt++;
  1106  001B  0020               	movlb	0	; select bank0
  1107  001C  0825               	movf	xvprintf@fmt,w
  1108  001D  0084               	movwf	4
  1109  001E  0826               	movf	xvprintf@fmt+1,w
  1110  001F  0085               	movwf	5
  1111  0020  0800               	movf	0,w	;code access
  1112  0021  00A8               	movwf	??_xvprintf
  1113  0022  0828               	movf	??_xvprintf,w
  1114  0023  00D4               	movwf	xvprintf@c
  1115  0024  3001               	movlw	1
  1116  0025  07A5               	addwf	xvprintf@fmt,f
  1117  0026  3000               	movlw	0
  1118  0027  3DA6               	addwfc	xvprintf@fmt+1,f
  1119                           
  1120                           ;xprintf.c: 100: if (!c) break;
  1121  0028  0854               	movf	xvprintf@c,w
  1122  0029  1903               	btfsc	3,2
  1123  002A  0008               	return
  1124                           
  1125                           ;xprintf.c: 101: if (c != '%') {
  1126  002B  3025               	movlw	37
  1127  002C  0654               	xorwf	xvprintf@c,w
  1128  002D  1903               	btfsc	3,2
  1129  002E  2834               	goto	l2396
  1130                           
  1131                           ;xprintf.c: 102: xputc(c); continue;
  1132  002F  0854               	movf	xvprintf@c,w
  1133  0030  3183  237D  3180   	fcall	_xputc
  1134  0033  281B               	goto	l160
  1135  0034                     l2396:	
  1136                           
  1137                           ;xprintf.c: 103: }
  1138                           ;xprintf.c: 104: f = 0;
  1139  0034  0020               	movlb	0	; select bank0
  1140  0035  01CF               	clrf	xvprintf@f
  1141  0036  01D0               	clrf	xvprintf@f+1
  1142                           
  1143                           ;xprintf.c: 105: c = *fmt++;
  1144  0037  0825               	movf	xvprintf@fmt,w
  1145  0038  0084               	movwf	4
  1146  0039  0826               	movf	xvprintf@fmt+1,w
  1147  003A  0085               	movwf	5
  1148  003B  0800               	movf	0,w	;code access
  1149  003C  00A8               	movwf	??_xvprintf
  1150  003D  0828               	movf	??_xvprintf,w
  1151  003E  00D4               	movwf	xvprintf@c
  1152  003F  3001               	movlw	1
  1153  0040  07A5               	addwf	xvprintf@fmt,f
  1154  0041  3000               	movlw	0
  1155  0042  3DA6               	addwfc	xvprintf@fmt+1,f
  1156                           
  1157                           ;xprintf.c: 106: if (c == '0') {
  1158  0043  3030               	movlw	48
  1159  0044  0654               	xorwf	xvprintf@c,w
  1160  0045  1D03               	btfss	3,2
  1161  0046  2849               	goto	l2410
  1162                           
  1163                           ;xprintf.c: 107: f = 1; c = *fmt++;
  1164  0047  3001               	movlw	1
  1165  0048  284E               	goto	L6
  1166  0049                     l2410:	
  1167                           ;xprintf.c: 108: } else {
  1168                           
  1169                           
  1170                           ;xprintf.c: 109: if (c == '-') {
  1171  0049  302D               	movlw	45
  1172  004A  0654               	xorwf	xvprintf@c,w
  1173  004B  1D03               	btfss	3,2
  1174  004C  285D               	goto	l2418
  1175                           
  1176                           ;xprintf.c: 110: f = 2; c = *fmt++;
  1177  004D  3002               	movlw	2
  1178  004E                     L6:	
  1179  004E  00CF               	movwf	xvprintf@f
  1180  004F  3000               	movlw	0
  1181  0050  00D0               	movwf	xvprintf@f+1
  1182  0051  0825               	movf	xvprintf@fmt,w
  1183  0052  0084               	movwf	4
  1184  0053  0826               	movf	xvprintf@fmt+1,w
  1185  0054  0085               	movwf	5
  1186  0055  0800               	movf	0,w	;code access
  1187  0056  00A8               	movwf	??_xvprintf
  1188  0057  0828               	movf	??_xvprintf,w
  1189  0058  00D4               	movwf	xvprintf@c
  1190  0059  3001               	movlw	1
  1191  005A  07A5               	addwf	xvprintf@fmt,f
  1192  005B  3000               	movlw	0
  1193  005C  3DA6               	addwfc	xvprintf@fmt+1,f
  1194  005D                     l2418:	
  1195                           
  1196                           ;xprintf.c: 111: }
  1197                           ;xprintf.c: 112: }
  1198                           ;xprintf.c: 113: for (w = 0; c >= '0' && c <= '9'; c = *fmt++)
  1199  005D  01C7               	clrf	xvprintf@w
  1200  005E  01C8               	clrf	xvprintf@w+1
  1201  005F  2887               	goto	l2426
  1202  0060                     l2420:	
  1203                           
  1204                           ;xprintf.c: 114: w = w * 10 + c - '0';
  1205  0060  0854               	movf	xvprintf@c,w
  1206  0061  00A8               	movwf	??_xvprintf
  1207  0062  01A9               	clrf	??_xvprintf+1
  1208  0063  0848               	movf	xvprintf@w+1,w
  1209  0064  00F2               	movwf	___wmul@multiplier+1
  1210  0065  0847               	movf	xvprintf@w,w
  1211  0066  00F1               	movwf	___wmul@multiplier
  1212  0067  300A               	movlw	10
  1213  0068  00F3               	movwf	___wmul@multiplicand
  1214  0069  3000               	movlw	0
  1215  006A  00F4               	movwf	___wmul@multiplicand+1
  1216  006B  3183  23EC  3180   	fcall	___wmul
  1217  006E  0020               	movlb	0	; select bank0
  1218  006F  0828               	movf	??_xvprintf,w
  1219  0070  0771               	addwf	?___wmul,w
  1220  0071  00AA               	movwf	??_xvprintf+2
  1221  0072  0829               	movf	??_xvprintf+1,w
  1222  0073  3D72               	addwfc	?___wmul+1,w
  1223  0074  00AB               	movwf	??_xvprintf+3
  1224  0075  082A               	movf	??_xvprintf+2,w
  1225  0076  3ED0               	addlw	208
  1226  0077  00C7               	movwf	xvprintf@w
  1227  0078  30FF               	movlw	255
  1228  0079  3D2B               	addwfc	??_xvprintf+3,w
  1229  007A  00C8               	movwf	xvprintf@w+1
  1230  007B  0825               	movf	xvprintf@fmt,w
  1231  007C  0084               	movwf	4
  1232  007D  0826               	movf	xvprintf@fmt+1,w
  1233  007E  0085               	movwf	5
  1234  007F  0800               	movf	0,w	;code access
  1235  0080  00A8               	movwf	??_xvprintf
  1236  0081  0828               	movf	??_xvprintf,w
  1237  0082  00D4               	movwf	xvprintf@c
  1238  0083  3001               	movlw	1
  1239  0084  07A5               	addwf	xvprintf@fmt,f
  1240  0085  3000               	movlw	0
  1241  0086  3DA6               	addwfc	xvprintf@fmt+1,f
  1242  0087                     l2426:	
  1243  0087  3030               	movlw	48
  1244  0088  0254               	subwf	xvprintf@c,w
  1245  0089  1C03               	skipc
  1246  008A  288F               	goto	l2430
  1247  008B  303A               	movlw	58
  1248  008C  0254               	subwf	xvprintf@c,w
  1249  008D  1C03               	skipc
  1250  008E  2860               	goto	l2420
  1251  008F                     l2430:	
  1252                           
  1253                           ;xprintf.c: 115: if (c == 'l' || c == 'L') {
  1254  008F  306C               	movlw	108
  1255  0090  0654               	xorwf	xvprintf@c,w
  1256  0091  1903               	btfsc	3,2
  1257  0092  2897               	goto	l175
  1258  0093  304C               	movlw	76
  1259  0094  0654               	xorwf	xvprintf@c,w
  1260  0095  1D03               	btfss	3,2
  1261  0096  28A4               	goto	l2438
  1262  0097                     l175:	
  1263                           
  1264                           ;xprintf.c: 116: f |= 4; c = *fmt++;
  1265  0097  154F               	bsf	xvprintf@f,2
  1266  0098  0825               	movf	xvprintf@fmt,w
  1267  0099  0084               	movwf	4
  1268  009A  0826               	movf	xvprintf@fmt+1,w
  1269  009B  0085               	movwf	5
  1270  009C  0800               	movf	0,w	;code access
  1271  009D  00A8               	movwf	??_xvprintf
  1272  009E  0828               	movf	??_xvprintf,w
  1273  009F  00D4               	movwf	xvprintf@c
  1274  00A0  3001               	movlw	1
  1275  00A1  07A5               	addwf	xvprintf@fmt,f
  1276  00A2  3000               	movlw	0
  1277  00A3  3DA6               	addwfc	xvprintf@fmt+1,f
  1278  00A4                     l2438:	
  1279                           
  1280                           ;xprintf.c: 117: }
  1281                           ;xprintf.c: 118: if (!c) break;
  1282  00A4  0854               	movf	xvprintf@c,w
  1283  00A5  1903               	btfsc	3,2
  1284  00A6  0008               	return
  1285                           
  1286                           ;xprintf.c: 119: d = c;
  1287  00A7  0854               	movf	xvprintf@c,w
  1288  00A8  00A8               	movwf	??_xvprintf
  1289  00A9  0828               	movf	??_xvprintf,w
  1290  00AA  00D3               	movwf	xvprintf@d
  1291                           
  1292                           ;xprintf.c: 120: if (d >= 'a') d -= 0x20;
  1293  00AB  3061               	movlw	97
  1294  00AC  0253               	subwf	xvprintf@d,w
  1295  00AD  1C03               	skipc
  1296  00AE  291A               	goto	l2480
  1297  00AF  3020               	movlw	32
  1298  00B0  02D3               	subwf	xvprintf@d,f
  1299                           
  1300                           ;xprintf.c: 121: switch (d) {
  1301  00B1  291A               	goto	l2480
  1302  00B2                     l2446:	
  1303                           ;xprintf.c: 122: case 'S' :
  1304                           
  1305                           
  1306                           ;xprintf.c: 123: p = (*(char* *)__va_arg((*(char* **)arp), (char*)0));
  1307  00B2  0827               	movf	xvprintf@arp,w
  1308  00B3  0086               	movwf	6
  1309  00B4  0187               	clrf	7
  1310  00B5  3F40               	moviw [0]fsr1
  1311  00B6  0084               	movwf	4
  1312  00B7  0185               	clrf	5
  1313  00B8  0A81               	incf	1,f
  1314  00B9  0800               	movf	0,w
  1315  00BA  00A8               	movwf	??_xvprintf
  1316  00BB  0828               	movf	??_xvprintf,w
  1317  00BC  00C4               	movwf	xvprintf@p
  1318                           
  1319                           ;xprintf.c: 124: for (j = 0; p[j]; j++) ;
  1320  00BD  01C9               	clrf	xvprintf@j
  1321  00BE  01CA               	clrf	xvprintf@j+1
  1322  00BF                     l2452:	
  1323  00BF  0849               	movf	xvprintf@j,w
  1324  00C0  0744               	addwf	xvprintf@p,w
  1325  00C1  00A8               	movwf	??_xvprintf
  1326  00C2  0828               	movf	??_xvprintf,w
  1327  00C3  0086               	movwf	6
  1328  00C4  0187               	clrf	7
  1329  00C5  0801               	movf	1,w
  1330  00C6  1903               	btfsc	3,2
  1331  00C7  28D1               	goto	l2456
  1332  00C8  3001               	movlw	1
  1333  00C9  07C9               	addwf	xvprintf@j,f
  1334  00CA  3000               	movlw	0
  1335  00CB  3DCA               	addwfc	xvprintf@j+1,f
  1336  00CC  28BF               	goto	l2452
  1337  00CD                     l2454:	
  1338                           ;xprintf.c: 125: while (!(f & 2) && j++ < w) xputc(' ');
  1339                           
  1340  00CD  3020               	movlw	32
  1341  00CE  3183  237D  3180   	fcall	_xputc
  1342  00D1                     l2456:	
  1343  00D1  0020               	movlb	0	; select bank0
  1344  00D2  18CF               	btfsc	xvprintf@f,1
  1345  00D3  28E3               	goto	l2460
  1346  00D4  084A               	movf	xvprintf@j+1,w
  1347  00D5  00A9               	movwf	??_xvprintf+1
  1348  00D6  0849               	movf	xvprintf@j,w
  1349  00D7  00A8               	movwf	??_xvprintf
  1350  00D8  0AC9               	incf	xvprintf@j,f
  1351  00D9  1903               	skipnz
  1352  00DA  0ACA               	incf	xvprintf@j+1,f
  1353  00DB  0848               	movf	xvprintf@w+1,w
  1354  00DC  0229               	subwf	??_xvprintf+1,w
  1355  00DD  1D03               	skipz
  1356  00DE  28E1               	goto	u2665
  1357  00DF  0847               	movf	xvprintf@w,w
  1358  00E0  0228               	subwf	??_xvprintf,w
  1359  00E1                     u2665:	
  1360  00E1  1C03               	skipc
  1361  00E2  28CD               	goto	l2454
  1362  00E3                     l2460:	
  1363                           
  1364                           ;xprintf.c: 126: xputs(p);
  1365  00E3  0844               	movf	xvprintf@p,w
  1366  00E4  3184  244B  3180   	fcall	_xputs
  1367  00E7                     l2464:	
  1368                           ;xprintf.c: 127: while (j++ < w) xputc(' ');
  1369                           
  1370  00E7  0020               	movlb	0	; select bank0
  1371  00E8  084A               	movf	xvprintf@j+1,w
  1372  00E9  00A9               	movwf	??_xvprintf+1
  1373  00EA  0849               	movf	xvprintf@j,w
  1374  00EB  00A8               	movwf	??_xvprintf
  1375  00EC  0AC9               	incf	xvprintf@j,f
  1376  00ED  1903               	skipnz
  1377  00EE  0ACA               	incf	xvprintf@j+1,f
  1378  00EF  0848               	movf	xvprintf@w+1,w
  1379  00F0  0229               	subwf	??_xvprintf+1,w
  1380  00F1  1D03               	skipz
  1381  00F2  28F5               	goto	u2675
  1382  00F3  0847               	movf	xvprintf@w,w
  1383  00F4  0228               	subwf	??_xvprintf,w
  1384  00F5                     u2675:	
  1385  00F5  1803               	btfsc	3,0
  1386  00F6  281B               	goto	l160
  1387  00F7  3020               	movlw	32
  1388  00F8  3183  237D  3180   	fcall	_xputc
  1389  00FB  28E7               	goto	l2464
  1390  00FC                     l2466:	
  1391                           ;xprintf.c: 129: case 'C' :
  1392                           
  1393                           ;xprintf.c: 128: continue;
  1394                           
  1395                           
  1396                           ;xprintf.c: 130: xputc((char)(*(int *)__va_arg((*(int **)arp), (int)0))); continue;
  1397  00FC  0827               	movf	xvprintf@arp,w
  1398  00FD  0086               	movwf	6
  1399  00FE  0187               	clrf	7
  1400  00FF  0801               	movf	1,w
  1401  0100  0084               	movwf	4
  1402  0101  0185               	clrf	5
  1403  0102  3002               	movlw	2
  1404  0103  0781               	addwf	1,f
  1405  0104  0800               	movf	0,w
  1406  0105  3183  237D  3180   	fcall	_xputc
  1407  0108  281B               	goto	l160
  1408  0109                     l2468:	
  1409                           ;xprintf.c: 131: case 'B' :
  1410                           
  1411                           
  1412                           ;xprintf.c: 132: r = 2; break;
  1413  0109  3002               	movlw	2
  1414  010A  0020               	movlb	0	; select bank0
  1415  010B  2911               	goto	L3
  1416  010C                     l2470:	
  1417                           ;xprintf.c: 133: case 'O' :
  1418                           
  1419                           
  1420                           ;xprintf.c: 134: r = 8; break;
  1421  010C  3008               	movlw	8
  1422  010D  2911               	goto	L3
  1423  010E                     l2472:	
  1424                           ;xprintf.c: 135: case 'D' :
  1425                           
  1426                           
  1427                           ;xprintf.c: 136: case 'U' :
  1428                           ;xprintf.c: 137: r = 10; break;
  1429  010E  300A               	movlw	10
  1430  010F  2911               	goto	L3
  1431  0110                     l2474:	
  1432                           ;xprintf.c: 138: case 'X' :
  1433                           
  1434                           
  1435                           ;xprintf.c: 139: r = 16; break;
  1436  0110  3010               	movlw	16
  1437  0111                     L3:	
  1438  0111  00C5               	movwf	xvprintf@r
  1439  0112  3000               	movlw	0
  1440  0113  00C6               	movwf	xvprintf@r+1
  1441  0114  2932               	goto	l193
  1442  0115                     l2476:	
  1443                           ;xprintf.c: 140: default:
  1444                           
  1445                           
  1446                           ;xprintf.c: 141: xputc(c); continue;
  1447  0115  0854               	movf	xvprintf@c,w
  1448  0116  3183  237D  3180   	fcall	_xputc
  1449  0119  281B               	goto	l160
  1450  011A                     l2480:	
  1451                           ;xprintf.c: 142: }
  1452                           
  1453  011A  0020               	movlb	0	; select bank0
  1454  011B  0853               	movf	xvprintf@d,w
  1455                           
  1456                           ; Switch size 1, requested type "space"
  1457                           ; Number of cases is 7, Range of values is 66 to 88
  1458                           ; switch strategies available:
  1459                           ; Name         Instructions Cycles
  1460                           ; simple_byte           22    12 (average)
  1461                           ; direct_byte           55     9 (fixed)
  1462                           ; jumptable            263     9 (fixed)
  1463                           ;	Chosen strategy is simple_byte
  1464  011C  3A42               	xorlw	66	; case 66
  1465  011D  1903               	skipnz
  1466  011E  2909               	goto	l2468
  1467  011F  3A01               	xorlw	1	; case 67
  1468  0120  1903               	skipnz
  1469  0121  28FC               	goto	l2466
  1470  0122  3A07               	xorlw	7	; case 68
  1471  0123  1903               	skipnz
  1472  0124  290E               	goto	l2472
  1473  0125  3A0B               	xorlw	11	; case 79
  1474  0126  1903               	skipnz
  1475  0127  290C               	goto	l2470
  1476  0128  3A1C               	xorlw	28	; case 83
  1477  0129  1903               	skipnz
  1478  012A  28B2               	goto	l2446
  1479  012B  3A06               	xorlw	6	; case 85
  1480  012C  1903               	skipnz
  1481  012D  290E               	goto	l2472
  1482  012E  3A0D               	xorlw	13	; case 88
  1483  012F  1903               	skipnz
  1484  0130  2910               	goto	l2474
  1485  0131  2915               	goto	l2476
  1486  0132                     l193:	
  1487                           
  1488                           ;xprintf.c: 145: v = (f & 4) ? (*(long *)__va_arg((*(long **)arp), (long)0)) : ((d == 'D
      +                          ') ? (long)(*(int *)__va_arg((*(int **)arp), (int)0)) : (long)(*(unsigned int *)__va_arg
      +                          ((*(unsigned int **)arp), (unsigned int)0)));
  1489  0132  0020               	movlb	0	; select bank0
  1490  0133  194F               	btfsc	xvprintf@f,2
  1491  0134  296A               	goto	l2490
  1492  0135  3044               	movlw	68
  1493  0136  0653               	xorwf	xvprintf@d,w
  1494  0137  1903               	btfsc	3,2
  1495  0138  294C               	goto	l2486
  1496  0139  0827               	movf	xvprintf@arp,w
  1497  013A  0086               	movwf	6
  1498  013B  0187               	clrf	7
  1499  013C  0801               	movf	1,w
  1500  013D  0084               	movwf	4
  1501  013E  0185               	clrf	5
  1502  013F  3002               	movlw	2
  1503  0140  0781               	addwf	1,f
  1504  0141  3F00               	moviw [0]fsr0
  1505  0142  00A8               	movwf	??_xvprintf
  1506  0143  3F01               	moviw [1]fsr0
  1507  0144  00A9               	movwf	??_xvprintf+1
  1508  0145  0828               	movf	??_xvprintf,w
  1509  0146  00BC               	movwf	_xvprintf$175
  1510  0147  0829               	movf	??_xvprintf+1,w
  1511  0148  00BD               	movwf	_xvprintf$175+1
  1512  0149  01BE               	clrf	_xvprintf$175+2
  1513  014A  01BF               	clrf	_xvprintf$175+3
  1514  014B  2961               	goto	l2488
  1515  014C                     l2486:	
  1516  014C  0827               	movf	xvprintf@arp,w
  1517  014D  0086               	movwf	6
  1518  014E  0187               	clrf	7
  1519  014F  0801               	movf	1,w
  1520  0150  0084               	movwf	4
  1521  0151  0185               	clrf	5
  1522  0152  3002               	movlw	2
  1523  0153  0781               	addwf	1,f
  1524  0154  3F00               	moviw [0]fsr0
  1525  0155  00A8               	movwf	??_xvprintf
  1526  0156  3F01               	moviw [1]fsr0
  1527  0157  00A9               	movwf	??_xvprintf+1
  1528  0158  0828               	movf	??_xvprintf,w
  1529  0159  00BC               	movwf	_xvprintf$175
  1530  015A  0829               	movf	??_xvprintf+1,w
  1531  015B  00BD               	movwf	_xvprintf$175+1
  1532  015C  0D89               	rlf	9,f
  1533  015D  3B89               	subwfb	9,f
  1534  015E  0989               	comf	9,f
  1535  015F  00BE               	movwf	_xvprintf$175+2
  1536  0160  00BF               	movwf	_xvprintf$175+3
  1537  0161                     l2488:	
  1538  0161  083F               	movf	_xvprintf$175+3,w
  1539  0162  00CE               	movwf	xvprintf@v+3
  1540  0163  083E               	movf	_xvprintf$175+2,w
  1541  0164  00CD               	movwf	xvprintf@v+2
  1542  0165  083D               	movf	_xvprintf$175+1,w
  1543  0166  00CC               	movwf	xvprintf@v+1
  1544  0167  083C               	movf	_xvprintf$175,w
  1545  0168  00CB               	movwf	xvprintf@v
  1546  0169  297A               	goto	l2492
  1547  016A                     l2490:	
  1548  016A  0827               	movf	xvprintf@arp,w
  1549  016B  0086               	movwf	6
  1550  016C  0187               	clrf	7
  1551  016D  0801               	movf	1,w
  1552  016E  0084               	movwf	4
  1553  016F  0185               	clrf	5
  1554  0170  3004               	movlw	4
  1555  0171  0781               	addwf	1,f
  1556  0172  3F00               	moviw [0]fsr0
  1557  0173  00CB               	movwf	xvprintf@v
  1558  0174  3F01               	moviw [1]fsr0
  1559  0175  00CC               	movwf	xvprintf@v+1
  1560  0176  3F02               	moviw [2]fsr0
  1561  0177  00CD               	movwf	xvprintf@v+2
  1562  0178  3F03               	moviw [3]fsr0
  1563  0179  00CE               	movwf	xvprintf@v+3
  1564  017A                     l2492:	
  1565                           
  1566                           ;xprintf.c: 146: if (d == 'D' && (v & 0x80000000)) {
  1567  017A  3044               	movlw	68
  1568  017B  0653               	xorwf	xvprintf@d,w
  1569  017C  1903               	btfsc	3,2
  1570  017D  1FCE               	btfss	xvprintf@v+3,7
  1571  017E  298B               	goto	l2498
  1572                           
  1573                           ;xprintf.c: 147: v = 0 - v;
  1574  017F  09CB               	comf	xvprintf@v,f
  1575  0180  09CC               	comf	xvprintf@v+1,f
  1576  0181  09CD               	comf	xvprintf@v+2,f
  1577  0182  09CE               	comf	xvprintf@v+3,f
  1578  0183  0ACB               	incf	xvprintf@v,f
  1579  0184  1903               	skipnz
  1580  0185  0ACC               	incf	xvprintf@v+1,f
  1581  0186  1903               	skipnz
  1582  0187  0ACD               	incf	xvprintf@v+2,f
  1583  0188  1903               	skipnz
  1584  0189  0ACE               	incf	xvprintf@v+3,f
  1585                           
  1586                           ;xprintf.c: 148: f |= 8;
  1587  018A  15CF               	bsf	xvprintf@f,3
  1588  018B                     l2498:	
  1589                           
  1590                           ;xprintf.c: 149: }
  1591                           ;xprintf.c: 150: i = 0;
  1592  018B  01D1               	clrf	xvprintf@i
  1593  018C  01D2               	clrf	xvprintf@i+1
  1594  018D                     l2500:	
  1595                           ;xprintf.c: 151: do {
  1596                           
  1597                           
  1598                           ;xprintf.c: 152: d = (char)(v % r); v /= r;
  1599  018D  0845               	movf	xvprintf@r,w
  1600  018E  00F1               	movwf	___llmod@divisor
  1601  018F  0846               	movf	xvprintf@r+1,w
  1602  0190  00F2               	movwf	___llmod@divisor+1
  1603  0191  01F3               	clrf	___llmod@divisor+2
  1604  0192  01F4               	clrf	___llmod@divisor+3
  1605  0193  084E               	movf	xvprintf@v+3,w
  1606  0194  00F8               	movwf	___llmod@dividend+3
  1607  0195  084D               	movf	xvprintf@v+2,w
  1608  0196  00F7               	movwf	___llmod@dividend+2
  1609  0197  084C               	movf	xvprintf@v+1,w
  1610  0198  00F6               	movwf	___llmod@dividend+1
  1611  0199  084B               	movf	xvprintf@v,w
  1612  019A  00F5               	movwf	___llmod@dividend
  1613  019B  3183  2301  3180   	fcall	___llmod
  1614  019E  0871               	movf	?___llmod,w
  1615  019F  0020               	movlb	0	; select bank0
  1616  01A0  00A8               	movwf	??_xvprintf
  1617  01A1  0828               	movf	??_xvprintf,w
  1618  01A2  00D3               	movwf	xvprintf@d
  1619  01A3  0845               	movf	xvprintf@r,w
  1620  01A4  00F1               	movwf	___lldiv@divisor
  1621  01A5  0846               	movf	xvprintf@r+1,w
  1622  01A6  00F2               	movwf	___lldiv@divisor+1
  1623  01A7  01F3               	clrf	___lldiv@divisor+2
  1624  01A8  01F4               	clrf	___lldiv@divisor+3
  1625  01A9  084E               	movf	xvprintf@v+3,w
  1626  01AA  00F8               	movwf	___lldiv@dividend+3
  1627  01AB  084D               	movf	xvprintf@v+2,w
  1628  01AC  00F7               	movwf	___lldiv@dividend+2
  1629  01AD  084C               	movf	xvprintf@v+1,w
  1630  01AE  00F6               	movwf	___lldiv@dividend+1
  1631  01AF  084B               	movf	xvprintf@v,w
  1632  01B0  00F5               	movwf	___lldiv@dividend
  1633  01B1  3182  22AE  3180   	fcall	___lldiv
  1634  01B4  0874               	movf	?___lldiv+3,w
  1635  01B5  0020               	movlb	0	; select bank0
  1636  01B6  00CE               	movwf	xvprintf@v+3
  1637  01B7  0873               	movf	?___lldiv+2,w
  1638  01B8  00CD               	movwf	xvprintf@v+2
  1639  01B9  0872               	movf	?___lldiv+1,w
  1640  01BA  00CC               	movwf	xvprintf@v+1
  1641  01BB  0871               	movf	?___lldiv,w
  1642  01BC  00CB               	movwf	xvprintf@v
  1643                           
  1644                           ;xprintf.c: 153: if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
  1645  01BD  300A               	movlw	10
  1646  01BE  0253               	subwf	xvprintf@d,w
  1647  01BF  1C03               	skipc
  1648  01C0  29CF               	goto	l2514
  1649  01C1  3078               	movlw	120
  1650  01C2  0654               	xorwf	xvprintf@c,w
  1651  01C3  1903               	btfsc	3,2
  1652  01C4  29C7               	goto	l2510
  1653  01C5  3007               	movlw	7
  1654  01C6  29C8               	goto	L4
  1655  01C7                     l2510:	
  1656  01C7  3027               	movlw	39
  1657  01C8                     L4:	
  1658  01C8  00C0               	movwf	_xvprintf$176
  1659  01C9  3000               	movlw	0
  1660  01CA  00C1               	movwf	_xvprintf$176+1
  1661  01CB  0840               	movf	_xvprintf$176,w
  1662  01CC  00A8               	movwf	??_xvprintf
  1663  01CD  0828               	movf	??_xvprintf,w
  1664  01CE  07D3               	addwf	xvprintf@d,f
  1665  01CF                     l2514:	
  1666                           
  1667                           ;xprintf.c: 154: s[i++] = d + '0';
  1668  01CF  0853               	movf	xvprintf@d,w
  1669  01D0  3E30               	addlw	48
  1670  01D1  00A8               	movwf	??_xvprintf
  1671  01D2  0851               	movf	xvprintf@i,w
  1672  01D3  3E2C               	addlw	(low (xvprintf@s| 0))& (0+255)
  1673  01D4  0086               	movwf	6
  1674  01D5  0187               	clrf	7
  1675  01D6  0828               	movf	??_xvprintf,w
  1676  01D7  0081               	movwf	1
  1677  01D8  3001               	movlw	1
  1678  01D9  07D1               	addwf	xvprintf@i,f
  1679  01DA  3000               	movlw	0
  1680  01DB  3DD2               	addwfc	xvprintf@i+1,f
  1681                           
  1682                           ;xprintf.c: 155: } while (v && i < sizeof(s));
  1683  01DC  084E               	movf	xvprintf@v+3,w
  1684  01DD  044D               	iorwf	xvprintf@v+2,w
  1685  01DE  044C               	iorwf	xvprintf@v+1,w
  1686  01DF  044B               	iorwf	xvprintf@v,w
  1687  01E0  1903               	skipnz
  1688  01E1  29E9               	goto	l216
  1689  01E2  3000               	movlw	0
  1690  01E3  0252               	subwf	xvprintf@i+1,w
  1691  01E4  3010               	movlw	16
  1692  01E5  1903               	skipnz
  1693  01E6  0251               	subwf	xvprintf@i,w
  1694  01E7  1C03               	skipc
  1695  01E8  298D               	goto	l2500
  1696  01E9                     l216:	
  1697                           
  1698                           ;xprintf.c: 156: if (f & 8) s[i++] = '-';
  1699  01E9  1DCF               	btfss	xvprintf@f,3
  1700  01EA  29F7               	goto	l2526
  1701  01EB  302D               	movlw	45
  1702  01EC  00A8               	movwf	??_xvprintf
  1703  01ED  0851               	movf	xvprintf@i,w
  1704  01EE  3E2C               	addlw	(low (xvprintf@s| 0))& (0+255)
  1705  01EF  0086               	movwf	6
  1706  01F0  0187               	clrf	7
  1707  01F1  0828               	movf	??_xvprintf,w
  1708  01F2  0081               	movwf	1
  1709  01F3  3001               	movlw	1
  1710  01F4  07D1               	addwf	xvprintf@i,f
  1711  01F5  3000               	movlw	0
  1712  01F6  3DD2               	addwfc	xvprintf@i+1,f
  1713  01F7                     l2526:	
  1714                           
  1715                           ;xprintf.c: 157: j = i; d = (f & 1) ? '0' : ' ';
  1716  01F7  0852               	movf	xvprintf@i+1,w
  1717  01F8  00CA               	movwf	xvprintf@j+1
  1718  01F9  0851               	movf	xvprintf@i,w
  1719  01FA  00C9               	movwf	xvprintf@j
  1720  01FB  184F               	btfsc	xvprintf@f,0
  1721  01FC  29FF               	goto	l2532
  1722  01FD  3020               	movlw	32
  1723  01FE  2A00               	goto	L5
  1724  01FF                     l2532:	
  1725  01FF  3030               	movlw	48
  1726  0200                     L5:	
  1727  0200  00C2               	movwf	_xvprintf$177
  1728  0201  3000               	movlw	0
  1729  0202  00C3               	movwf	_xvprintf$177+1
  1730  0203  0842               	movf	_xvprintf$177,w
  1731  0204  00A8               	movwf	??_xvprintf
  1732  0205  0828               	movf	??_xvprintf,w
  1733  0206  00D3               	movwf	xvprintf@d
  1734                           
  1735                           ;xprintf.c: 158: while (!(f & 2) && j++ < w) xputc(d);
  1736  0207  2A0C               	goto	l2536
  1737  0208                     l2534:	
  1738  0208  0853               	movf	xvprintf@d,w
  1739  0209  3183  237D  3180   	fcall	_xputc
  1740  020C                     l2536:	
  1741  020C  0020               	movlb	0	; select bank0
  1742  020D  18CF               	btfsc	xvprintf@f,1
  1743  020E  2A1E               	goto	l2540
  1744  020F  084A               	movf	xvprintf@j+1,w
  1745  0210  00A9               	movwf	??_xvprintf+1
  1746  0211  0849               	movf	xvprintf@j,w
  1747  0212  00A8               	movwf	??_xvprintf
  1748  0213  0AC9               	incf	xvprintf@j,f
  1749  0214  1903               	skipnz
  1750  0215  0ACA               	incf	xvprintf@j+1,f
  1751  0216  0848               	movf	xvprintf@w+1,w
  1752  0217  0229               	subwf	??_xvprintf+1,w
  1753  0218  1D03               	skipz
  1754  0219  2A1C               	goto	u2795
  1755  021A  0847               	movf	xvprintf@w,w
  1756  021B  0228               	subwf	??_xvprintf,w
  1757  021C                     u2795:	
  1758  021C  1C03               	skipc
  1759  021D  2A08               	goto	l2534
  1760  021E                     l2540:	
  1761                           ;xprintf.c: 159: do xputc(s[--i]); while(i);
  1762                           
  1763  021E  3001               	movlw	1
  1764  021F  02D1               	subwf	xvprintf@i,f
  1765  0220  3000               	movlw	0
  1766  0221  3BD2               	subwfb	xvprintf@i+1,f
  1767  0222  0851               	movf	xvprintf@i,w
  1768  0223  3E2C               	addlw	(low (xvprintf@s| 0))& (0+255)
  1769  0224  0086               	movwf	6
  1770  0225  0187               	clrf	7
  1771  0226  0801               	movf	1,w
  1772  0227  3183  237D  3180   	fcall	_xputc
  1773  022A  0020               	movlb	0	; select bank0
  1774  022B  0851               	movf	xvprintf@i,w
  1775  022C  0452               	iorwf	xvprintf@i+1,w
  1776  022D  1903               	btfsc	3,2
  1777  022E  2A34               	goto	l2546
  1778  022F  2A1E               	goto	l2540
  1779  0230                     l2544:	
  1780                           ;xprintf.c: 160: while (j++ < w) xputc(' ');
  1781                           
  1782  0230  3020               	movlw	32
  1783  0231  3183  237D  3180   	fcall	_xputc
  1784  0234                     l2546:	
  1785  0234  0020               	movlb	0	; select bank0
  1786  0235  084A               	movf	xvprintf@j+1,w
  1787  0236  00A9               	movwf	??_xvprintf+1
  1788  0237  0849               	movf	xvprintf@j,w
  1789  0238  00A8               	movwf	??_xvprintf
  1790  0239  0AC9               	incf	xvprintf@j,f
  1791  023A  1903               	skipnz
  1792  023B  0ACA               	incf	xvprintf@j+1,f
  1793  023C  0848               	movf	xvprintf@w+1,w
  1794  023D  0229               	subwf	??_xvprintf+1,w
  1795  023E  1D03               	skipz
  1796  023F  2A42               	goto	u2815
  1797  0240  0847               	movf	xvprintf@w,w
  1798  0241  0228               	subwf	??_xvprintf,w
  1799  0242                     u2815:	
  1800  0242  1803               	btfsc	3,0
  1801  0243  281B               	goto	l160
  1802  0244  2A30               	goto	l2544
  1803  0245                     __end_of_xvprintf:	
  1804                           ;xprintf.c: 161: }
  1805                           
  1806                           
  1807                           	psect	text3
  1808  044B                     __ptext3:	
  1809 ;; *************** function _xputs *****************
  1810 ;; Defined at:
  1811 ;;		line 44 in file "xprintf.c"
  1812 ;; Parameters:    Size  Location     Type
  1813 ;;  str             1    wreg     PTR const unsigned char 
  1814 ;;		 -> ?_xfprintf(1), ?_xsprintf(1), ?_xprintf(1), 
  1815 ;; Auto vars:     Size  Location     Type
  1816 ;;  str             1    8[COMMON] PTR const unsigned char 
  1817 ;;		 -> ?_xfprintf(1), ?_xsprintf(1), ?_xprintf(1), 
  1818 ;; Return value:  Size  Location     Type
  1819 ;;                  1    wreg      void 
  1820 ;; Registers used:
  1821 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  1822 ;; Tracked objects:
  1823 ;;		On entry : 0/0
  1824 ;;		On exit  : 0/0
  1825 ;;		Unchanged: 0/0
  1826 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  1827 ;;      Params:         0       0       0       0       0       0
  1828 ;;      Locals:         1       0       0       0       0       0
  1829 ;;      Temps:          1       0       0       0       0       0
  1830 ;;      Totals:         2       0       0       0       0       0
  1831 ;;Total ram usage:        2 bytes
  1832 ;; Hardware stack levels used:    1
  1833 ;; Hardware stack levels required when called:    4
  1834 ;; This function calls:
  1835 ;;		_xputc
  1836 ;; This function is called by:
  1837 ;;		_xvprintf
  1838 ;; This function uses a non-reentrant model
  1839 ;;
  1840                           
  1841                           
  1842                           ;psect for function _xputs
  1843  044B                     _xputs:	
  1844                           
  1845                           ;incstack = 0
  1846                           ; Regs used in _xputs: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  1847                           ;xputs@str stored from wreg
  1848  044B  00F8               	movwf	xputs@str
  1849  044C                     l2318:	
  1850                           ;xprintf.c: 48: while (*str)
  1851                           
  1852  044C  0878               	movf	xputs@str,w
  1853  044D  0086               	movwf	6
  1854  044E  0187               	clrf	7
  1855  044F  0801               	movf	1,w
  1856  0450  1903               	btfsc	3,2
  1857  0451  0008               	return
  1858                           
  1859                           ;xprintf.c: 49: xputc(*str++);
  1860  0452  0878               	movf	xputs@str,w
  1861  0453  0086               	movwf	6
  1862  0454  0187               	clrf	7
  1863  0455  0801               	movf	1,w
  1864  0456  3183  237D  3184   	fcall	_xputc
  1865  0459  3001               	movlw	1
  1866  045A  00F7               	movwf	??_xputs
  1867  045B  0877               	movf	??_xputs,w
  1868  045C  07F8               	addwf	xputs@str,f
  1869  045D  2C4C               	goto	l2318
  1870  045E                     __end_of_xputs:	
  1871                           
  1872                           	psect	text4
  1873  037D                     __ptext4:	
  1874 ;; *************** function _xputc *****************
  1875 ;; Defined at:
  1876 ;;		line 26 in file "xprintf.c"
  1877 ;; Parameters:    Size  Location     Type
  1878 ;;  c               1    wreg     unsigned char 
  1879 ;; Auto vars:     Size  Location     Type
  1880 ;;  c               1    6[COMMON] unsigned char 
  1881 ;; Return value:  Size  Location     Type
  1882 ;;                  1    wreg      void 
  1883 ;; Registers used:
  1884 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  1885 ;; Tracked objects:
  1886 ;;		On entry : 0/0
  1887 ;;		On exit  : 0/0
  1888 ;;		Unchanged: 0/0
  1889 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  1890 ;;      Params:         0       0       0       0       0       0
  1891 ;;      Locals:         1       0       0       0       0       0
  1892 ;;      Temps:          1       0       0       0       0       0
  1893 ;;      Totals:         2       0       0       0       0       0
  1894 ;;Total ram usage:        2 bytes
  1895 ;; Hardware stack levels used:    1
  1896 ;; Hardware stack levels required when called:    3
  1897 ;; This function calls:
  1898 ;;		Absolute function
  1899 ;;		_LCD_Put
  1900 ;; This function is called by:
  1901 ;;		_xputs
  1902 ;;		_xvprintf
  1903 ;;		_xfputs
  1904 ;;		_put_dump
  1905 ;;		_xgets
  1906 ;; This function uses a non-reentrant model
  1907 ;;
  1908                           
  1909                           
  1910                           ;psect for function _xputc
  1911  037D                     _xputc:	
  1912                           
  1913                           ;incstack = 0
  1914                           ; Regs used in _xputc: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  1915                           ;xputc@c stored from wreg
  1916  037D  00F6               	movwf	xputc@c
  1917  037E  300A               	movlw	10
  1918  037F  0676               	xorwf	xputc@c,w
  1919  0380  1D03               	btfss	3,2
  1920  0381  2B8C               	goto	l2300
  1921  0382  30EA               	movlw	(low (STR_2| (0+32768)))& (0+255)
  1922  0383  00F5               	movwf	??_xputc
  1923  0384  0875               	movf	??_xputc,w
  1924  0385  00F4               	movwf	LCD_Put@word
  1925  0386  0020               	movlb	0	; select bank0
  1926  0387  0869               	movf	_xfunc_out+1,w
  1927  0388  008A               	movwf	10
  1928  0389  0868               	movf	_xfunc_out,w
  1929  038A  000A               	callw
  1930  038B  3183               	pagesel	$
  1931  038C                     l2300:	
  1932                           
  1933                           ;xprintf.c: 30: if (outptr) {
  1934  038C  087C               	movf	_outptr,w
  1935  038D  1903               	btfsc	3,2
  1936  038E  2B9B               	goto	l2308
  1937                           
  1938                           ;xprintf.c: 31: *outptr++ = (unsigned char)c;
  1939  038F  0876               	movf	xputc@c,w
  1940  0390  00F5               	movwf	??_xputc
  1941  0391  087C               	movf	_outptr,w
  1942  0392  0086               	movwf	6
  1943  0393  0187               	clrf	7
  1944  0394  0875               	movf	??_xputc,w
  1945  0395  0081               	movwf	1
  1946  0396  3001               	movlw	1
  1947  0397  00F5               	movwf	??_xputc
  1948  0398  0875               	movf	??_xputc,w
  1949  0399  07FC               	addwf	_outptr,f
  1950                           
  1951                           ;xprintf.c: 32: return;
  1952  039A  0008               	return
  1953  039B                     l2308:	
  1954                           
  1955                           ;xprintf.c: 33: }
  1956                           ;xprintf.c: 35: if (xfunc_out) xfunc_out((unsigned char)c);
  1957  039B  0020               	movlb	0	; select bank0
  1958  039C  0868               	movf	_xfunc_out,w
  1959  039D  0469               	iorwf	_xfunc_out+1,w
  1960  039E  1903               	btfsc	3,2
  1961  039F  0008               	return
  1962  03A0  0876               	movf	xputc@c,w
  1963  03A1  00F5               	movwf	??_xputc
  1964  03A2  0875               	movf	??_xputc,w
  1965  03A3  00F4               	movwf	LCD_Put@word
  1966  03A4  0869               	movf	_xfunc_out+1,w
  1967  03A5  008A               	movwf	10
  1968  03A6  0868               	movf	_xfunc_out,w
  1969  03A7  000A               	callw
  1970  03A8  3183               	pagesel	$
  1971  03A9  0008               	return
  1972  03AA                     __end_of_xputc:	
  1973                           
  1974                           	psect	text5
  1975  0483                     __ptext5:	
  1976 ;; *************** function _LCD_Put *****************
  1977 ;; Defined at:
  1978 ;;		line 54 in file "LCD.c"
  1979 ;; Parameters:    Size  Location     Type
  1980 ;;  word            1    4[COMMON] char 
  1981 ;; Auto vars:     Size  Location     Type
  1982 ;;		None
  1983 ;; Return value:  Size  Location     Type
  1984 ;;                  1    wreg      void 
  1985 ;; Registers used:
  1986 ;;		wreg, status,2, status,0, pclath, cstack
  1987 ;; Tracked objects:
  1988 ;;		On entry : 0/0
  1989 ;;		On exit  : 0/0
  1990 ;;		Unchanged: 0/0
  1991 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  1992 ;;      Params:         1       0       0       0       0       0
  1993 ;;      Locals:         0       0       0       0       0       0
  1994 ;;      Temps:          0       0       0       0       0       0
  1995 ;;      Totals:         1       0       0       0       0       0
  1996 ;;Total ram usage:        1 bytes
  1997 ;; Hardware stack levels used:    1
  1998 ;; Hardware stack levels required when called:    2
  1999 ;; This function calls:
  2000 ;;		_LCD_WriteData
  2001 ;; This function is called by:
  2002 ;;		_main
  2003 ;;		_xputc
  2004 ;; This function uses a non-reentrant model
  2005 ;;
  2006                           
  2007                           
  2008                           ;psect for function _LCD_Put
  2009  0483                     _LCD_Put:	
  2010                           
  2011                           ;LCD.c: 56: RA3 = 1;
  2012                           
  2013                           ;incstack = 0
  2014                           ; Regs used in _LCD_Put: [wreg+status,2+status,0+pclath+cstack]
  2015  0483  0020               	movlb	0	; select bank0
  2016  0484  158C               	bsf	12,3	;volatile
  2017                           
  2018                           ;LCD.c: 57: LCD_WriteData(word);
  2019  0485  0874               	movf	LCD_Put@word,w
  2020  0486  3183  2343         	fcall	_LCD_WriteData
  2021  0488  0008               	return
  2022  0489                     __end_of_LCD_Put:	
  2023                           
  2024                           	psect	text6
  2025  03EC                     __ptext6:	
  2026 ;; *************** function ___wmul *****************
  2027 ;; Defined at:
  2028 ;;		line 15 in file "/opt/microchip/xc8/v1.41/sources/common/Umul16.c"
  2029 ;; Parameters:    Size  Location     Type
  2030 ;;  multiplier      2    1[COMMON] unsigned int 
  2031 ;;  multiplicand    2    3[COMMON] unsigned int 
  2032 ;; Auto vars:     Size  Location     Type
  2033 ;;  product         2    5[COMMON] unsigned int 
  2034 ;; Return value:  Size  Location     Type
  2035 ;;                  2    1[COMMON] unsigned int 
  2036 ;; Registers used:
  2037 ;;		wreg, status,2, status,0
  2038 ;; Tracked objects:
  2039 ;;		On entry : 0/0
  2040 ;;		On exit  : 0/0
  2041 ;;		Unchanged: 0/0
  2042 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  2043 ;;      Params:         4       0       0       0       0       0
  2044 ;;      Locals:         2       0       0       0       0       0
  2045 ;;      Temps:          0       0       0       0       0       0
  2046 ;;      Totals:         6       0       0       0       0       0
  2047 ;;Total ram usage:        6 bytes
  2048 ;; Hardware stack levels used:    1
  2049 ;; Hardware stack levels required when called:    1
  2050 ;; This function calls:
  2051 ;;		Nothing
  2052 ;; This function is called by:
  2053 ;;		_xvprintf
  2054 ;; This function uses a non-reentrant model
  2055 ;;
  2056                           
  2057                           
  2058                           ;psect for function ___wmul
  2059  03EC                     ___wmul:	
  2060                           
  2061                           ;incstack = 0
  2062                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  2063  03EC  01F5               	clrf	___wmul@product
  2064  03ED  01F6               	clrf	___wmul@product+1
  2065  03EE                     l2322:	
  2066  03EE  1C71               	btfss	___wmul@multiplier,0
  2067  03EF  2BF4               	goto	l397
  2068  03F0  0873               	movf	___wmul@multiplicand,w
  2069  03F1  07F5               	addwf	___wmul@product,f
  2070  03F2  0874               	movf	___wmul@multiplicand+1,w
  2071  03F3  3DF6               	addwfc	___wmul@product+1,f
  2072  03F4                     l397:	
  2073  03F4  3001               	movlw	1
  2074  03F5                     u2385:	
  2075  03F5  35F3               	lslf	___wmul@multiplicand,f
  2076  03F6  0DF4               	rlf	___wmul@multiplicand+1,f
  2077  03F7  0B89               	decfsz	9,f
  2078  03F8  2BF5               	goto	u2385
  2079  03F9  3001               	movlw	1
  2080  03FA                     u2395:	
  2081  03FA  36F2               	lsrf	___wmul@multiplier+1,f
  2082  03FB  0CF1               	rrf	___wmul@multiplier,f
  2083  03FC  0B89               	decfsz	9,f
  2084  03FD  2BFA               	goto	u2395
  2085  03FE  0871               	movf	___wmul@multiplier,w
  2086  03FF  0472               	iorwf	___wmul@multiplier+1,w
  2087  0400  1D03               	btfss	3,2
  2088  0401  2BEE               	goto	l2322
  2089  0402  0876               	movf	___wmul@product+1,w
  2090  0403  00F2               	movwf	?___wmul+1
  2091  0404  0875               	movf	___wmul@product,w
  2092  0405  00F1               	movwf	?___wmul
  2093  0406  0008               	return
  2094  0407                     __end_of___wmul:	
  2095                           
  2096                           	psect	text7
  2097  0301                     __ptext7:	
  2098 ;; *************** function ___llmod *****************
  2099 ;; Defined at:
  2100 ;;		line 6 in file "/opt/microchip/xc8/v1.41/sources/common/llmod.c"
  2101 ;; Parameters:    Size  Location     Type
  2102 ;;  divisor         4    1[COMMON] unsigned long 
  2103 ;;  dividend        4    5[COMMON] unsigned long 
  2104 ;; Auto vars:     Size  Location     Type
  2105 ;;  counter         1   10[COMMON] unsigned char 
  2106 ;; Return value:  Size  Location     Type
  2107 ;;                  4    1[COMMON] unsigned long 
  2108 ;; Registers used:
  2109 ;;		wreg, status,2, status,0
  2110 ;; Tracked objects:
  2111 ;;		On entry : 0/0
  2112 ;;		On exit  : 0/0
  2113 ;;		Unchanged: 0/0
  2114 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  2115 ;;      Params:         8       0       0       0       0       0
  2116 ;;      Locals:         1       0       0       0       0       0
  2117 ;;      Temps:          1       0       0       0       0       0
  2118 ;;      Totals:        10       0       0       0       0       0
  2119 ;;Total ram usage:       10 bytes
  2120 ;; Hardware stack levels used:    1
  2121 ;; Hardware stack levels required when called:    1
  2122 ;; This function calls:
  2123 ;;		Nothing
  2124 ;; This function is called by:
  2125 ;;		_xvprintf
  2126 ;; This function uses a non-reentrant model
  2127 ;;
  2128                           
  2129                           
  2130                           ;psect for function ___llmod
  2131  0301                     ___llmod:	
  2132                           
  2133                           ;incstack = 0
  2134                           ; Regs used in ___llmod: [wreg+status,2+status,0]
  2135  0301  0874               	movf	___llmod@divisor+3,w
  2136  0302  0473               	iorwf	___llmod@divisor+2,w
  2137  0303  0472               	iorwf	___llmod@divisor+1,w
  2138  0304  0471               	iorwf	___llmod@divisor,w
  2139  0305  1903               	skipnz
  2140  0306  2B3A               	goto	l2374
  2141  0307  01FA               	clrf	___llmod@counter
  2142  0308  0AFA               	incf	___llmod@counter,f
  2143  0309                     l2364:	
  2144  0309  1BF4               	btfsc	___llmod@divisor+3,7
  2145  030A  2B17               	goto	l2366
  2146  030B  3001               	movlw	1
  2147  030C                     u2495:	
  2148  030C  35F1               	lslf	___llmod@divisor,f
  2149  030D  0DF2               	rlf	___llmod@divisor+1,f
  2150  030E  0DF3               	rlf	___llmod@divisor+2,f
  2151  030F  0DF4               	rlf	___llmod@divisor+3,f
  2152  0310  0B89               	decfsz	9,f
  2153  0311  2B0C               	goto	u2495
  2154  0312  3001               	movlw	1
  2155  0313  00F9               	movwf	??___llmod
  2156  0314  0879               	movf	??___llmod,w
  2157  0315  07FA               	addwf	___llmod@counter,f
  2158  0316  2B09               	goto	l2364
  2159  0317                     l2366:	
  2160  0317  0874               	movf	___llmod@divisor+3,w
  2161  0318  0278               	subwf	___llmod@dividend+3,w
  2162  0319  1D03               	skipz
  2163  031A  2B25               	goto	u2515
  2164  031B  0873               	movf	___llmod@divisor+2,w
  2165  031C  0277               	subwf	___llmod@dividend+2,w
  2166  031D  1D03               	skipz
  2167  031E  2B25               	goto	u2515
  2168  031F  0872               	movf	___llmod@divisor+1,w
  2169  0320  0276               	subwf	___llmod@dividend+1,w
  2170  0321  1D03               	skipz
  2171  0322  2B25               	goto	u2515
  2172  0323  0871               	movf	___llmod@divisor,w
  2173  0324  0275               	subwf	___llmod@dividend,w
  2174  0325                     u2515:	
  2175  0325  1C03               	skipc
  2176  0326  2B2F               	goto	l2370
  2177  0327  0871               	movf	___llmod@divisor,w
  2178  0328  02F5               	subwf	___llmod@dividend,f
  2179  0329  0872               	movf	___llmod@divisor+1,w
  2180  032A  3BF6               	subwfb	___llmod@dividend+1,f
  2181  032B  0873               	movf	___llmod@divisor+2,w
  2182  032C  3BF7               	subwfb	___llmod@dividend+2,f
  2183  032D  0874               	movf	___llmod@divisor+3,w
  2184  032E  3BF8               	subwfb	___llmod@dividend+3,f
  2185  032F                     l2370:	
  2186  032F  3001               	movlw	1
  2187  0330                     u2525:	
  2188  0330  36F4               	lsrf	___llmod@divisor+3,f
  2189  0331  0CF3               	rrf	___llmod@divisor+2,f
  2190  0332  0CF2               	rrf	___llmod@divisor+1,f
  2191  0333  0CF1               	rrf	___llmod@divisor,f
  2192  0334  0B89               	decfsz	9,f
  2193  0335  2B30               	goto	u2525
  2194  0336  3001               	movlw	1
  2195  0337  02FA               	subwf	___llmod@counter,f
  2196  0338  1D03               	btfss	3,2
  2197  0339  2B17               	goto	l2366
  2198  033A                     l2374:	
  2199  033A  0878               	movf	___llmod@dividend+3,w
  2200  033B  00F4               	movwf	?___llmod+3
  2201  033C  0877               	movf	___llmod@dividend+2,w
  2202  033D  00F3               	movwf	?___llmod+2
  2203  033E  0876               	movf	___llmod@dividend+1,w
  2204  033F  00F2               	movwf	?___llmod+1
  2205  0340  0875               	movf	___llmod@dividend,w
  2206  0341  00F1               	movwf	?___llmod
  2207  0342  0008               	return
  2208  0343                     __end_of___llmod:	
  2209                           
  2210                           	psect	text8
  2211  02AE                     __ptext8:	
  2212 ;; *************** function ___lldiv *****************
  2213 ;; Defined at:
  2214 ;;		line 6 in file "/opt/microchip/xc8/v1.41/sources/common/lldiv.c"
  2215 ;; Parameters:    Size  Location     Type
  2216 ;;  divisor         4    1[COMMON] unsigned long 
  2217 ;;  dividend        4    5[COMMON] unsigned long 
  2218 ;; Auto vars:     Size  Location     Type
  2219 ;;  quotient        4    0[BANK0 ] unsigned long 
  2220 ;;  counter         1    4[BANK0 ] unsigned char 
  2221 ;; Return value:  Size  Location     Type
  2222 ;;                  4    1[COMMON] unsigned long 
  2223 ;; Registers used:
  2224 ;;		wreg, status,2, status,0
  2225 ;; Tracked objects:
  2226 ;;		On entry : 0/0
  2227 ;;		On exit  : 0/0
  2228 ;;		Unchanged: 0/0
  2229 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  2230 ;;      Params:         8       0       0       0       0       0
  2231 ;;      Locals:         0       5       0       0       0       0
  2232 ;;      Temps:          1       0       0       0       0       0
  2233 ;;      Totals:         9       5       0       0       0       0
  2234 ;;Total ram usage:       14 bytes
  2235 ;; Hardware stack levels used:    1
  2236 ;; Hardware stack levels required when called:    1
  2237 ;; This function calls:
  2238 ;;		Nothing
  2239 ;; This function is called by:
  2240 ;;		_xvprintf
  2241 ;;		_Timer1_GetCPM
  2242 ;; This function uses a non-reentrant model
  2243 ;;
  2244                           
  2245                           
  2246                           ;psect for function ___lldiv
  2247  02AE                     ___lldiv:	
  2248                           
  2249                           ;incstack = 0
  2250                           ; Regs used in ___lldiv: [wreg+status,2+status,0]
  2251  02AE  3000               	movlw	0
  2252  02AF  0020               	movlb	0	; select bank0
  2253  02B0  00A3               	movwf	___lldiv@quotient+3
  2254  02B1  3000               	movlw	0
  2255  02B2  00A2               	movwf	___lldiv@quotient+2
  2256  02B3  3000               	movlw	0
  2257  02B4  00A1               	movwf	___lldiv@quotient+1
  2258  02B5  3000               	movlw	0
  2259  02B6  00A0               	movwf	___lldiv@quotient
  2260  02B7  0874               	movf	___lldiv@divisor+3,w
  2261  02B8  0473               	iorwf	___lldiv@divisor+2,w
  2262  02B9  0472               	iorwf	___lldiv@divisor+1,w
  2263  02BA  0471               	iorwf	___lldiv@divisor,w
  2264  02BB  1903               	skipnz
  2265  02BC  2AF8               	goto	l2354
  2266  02BD  01A4               	clrf	___lldiv@counter
  2267  02BE  0AA4               	incf	___lldiv@counter,f
  2268  02BF                     l2340:	
  2269  02BF  1BF4               	btfsc	___lldiv@divisor+3,7
  2270  02C0  2ACD               	goto	l2342
  2271  02C1  3001               	movlw	1
  2272  02C2                     u2425:	
  2273  02C2  35F1               	lslf	___lldiv@divisor,f
  2274  02C3  0DF2               	rlf	___lldiv@divisor+1,f
  2275  02C4  0DF3               	rlf	___lldiv@divisor+2,f
  2276  02C5  0DF4               	rlf	___lldiv@divisor+3,f
  2277  02C6  0B89               	decfsz	9,f
  2278  02C7  2AC2               	goto	u2425
  2279  02C8  3001               	movlw	1
  2280  02C9  00F9               	movwf	??___lldiv
  2281  02CA  0879               	movf	??___lldiv,w
  2282  02CB  07A4               	addwf	___lldiv@counter,f
  2283  02CC  2ABF               	goto	l2340
  2284  02CD                     l2342:	
  2285  02CD  3001               	movlw	1
  2286  02CE                     u2445:	
  2287  02CE  35A0               	lslf	___lldiv@quotient,f
  2288  02CF  0DA1               	rlf	___lldiv@quotient+1,f
  2289  02D0  0DA2               	rlf	___lldiv@quotient+2,f
  2290  02D1  0DA3               	rlf	___lldiv@quotient+3,f
  2291  02D2  0B89               	decfsz	9,f
  2292  02D3  2ACE               	goto	u2445
  2293  02D4  0874               	movf	___lldiv@divisor+3,w
  2294  02D5  0278               	subwf	___lldiv@dividend+3,w
  2295  02D6  1D03               	skipz
  2296  02D7  2AE2               	goto	u2455
  2297  02D8  0873               	movf	___lldiv@divisor+2,w
  2298  02D9  0277               	subwf	___lldiv@dividend+2,w
  2299  02DA  1D03               	skipz
  2300  02DB  2AE2               	goto	u2455
  2301  02DC  0872               	movf	___lldiv@divisor+1,w
  2302  02DD  0276               	subwf	___lldiv@dividend+1,w
  2303  02DE  1D03               	skipz
  2304  02DF  2AE2               	goto	u2455
  2305  02E0  0871               	movf	___lldiv@divisor,w
  2306  02E1  0275               	subwf	___lldiv@dividend,w
  2307  02E2                     u2455:	
  2308  02E2  1C03               	skipc
  2309  02E3  2AED               	goto	l2350
  2310  02E4  0871               	movf	___lldiv@divisor,w
  2311  02E5  02F5               	subwf	___lldiv@dividend,f
  2312  02E6  0872               	movf	___lldiv@divisor+1,w
  2313  02E7  3BF6               	subwfb	___lldiv@dividend+1,f
  2314  02E8  0873               	movf	___lldiv@divisor+2,w
  2315  02E9  3BF7               	subwfb	___lldiv@dividend+2,f
  2316  02EA  0874               	movf	___lldiv@divisor+3,w
  2317  02EB  3BF8               	subwfb	___lldiv@dividend+3,f
  2318  02EC  1420               	bsf	___lldiv@quotient,0
  2319  02ED                     l2350:	
  2320  02ED  3001               	movlw	1
  2321  02EE                     u2465:	
  2322  02EE  36F4               	lsrf	___lldiv@divisor+3,f
  2323  02EF  0CF3               	rrf	___lldiv@divisor+2,f
  2324  02F0  0CF2               	rrf	___lldiv@divisor+1,f
  2325  02F1  0CF1               	rrf	___lldiv@divisor,f
  2326  02F2  0B89               	decfsz	9,f
  2327  02F3  2AEE               	goto	u2465
  2328  02F4  3001               	movlw	1
  2329  02F5  02A4               	subwf	___lldiv@counter,f
  2330  02F6  1D03               	btfss	3,2
  2331  02F7  2ACD               	goto	l2342
  2332  02F8                     l2354:	
  2333  02F8  0823               	movf	___lldiv@quotient+3,w
  2334  02F9  00F4               	movwf	?___lldiv+3
  2335  02FA  0822               	movf	___lldiv@quotient+2,w
  2336  02FB  00F3               	movwf	?___lldiv+2
  2337  02FC  0821               	movf	___lldiv@quotient+1,w
  2338  02FD  00F2               	movwf	?___lldiv+1
  2339  02FE  0820               	movf	___lldiv@quotient,w
  2340  02FF  00F1               	movwf	?___lldiv
  2341  0300  0008               	return
  2342  0301                     __end_of___lldiv:	
  2343                           
  2344                           	psect	text9
  2345  0407                     __ptext9:	
  2346 ;; *************** function _Timer1_Init *****************
  2347 ;; Defined at:
  2348 ;;		line 6 in file "Timer1.c"
  2349 ;; Parameters:    Size  Location     Type
  2350 ;;		None
  2351 ;; Auto vars:     Size  Location     Type
  2352 ;;		None
  2353 ;; Return value:  Size  Location     Type
  2354 ;;                  1    wreg      void 
  2355 ;; Registers used:
  2356 ;;		wreg, status,2, status,0
  2357 ;; Tracked objects:
  2358 ;;		On entry : 0/0
  2359 ;;		On exit  : 0/0
  2360 ;;		Unchanged: 0/0
  2361 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  2362 ;;      Params:         0       0       0       0       0       0
  2363 ;;      Locals:         0       0       0       0       0       0
  2364 ;;      Temps:          1       0       0       0       0       0
  2365 ;;      Totals:         1       0       0       0       0       0
  2366 ;;Total ram usage:        1 bytes
  2367 ;; Hardware stack levels used:    1
  2368 ;; Hardware stack levels required when called:    1
  2369 ;; This function calls:
  2370 ;;		Nothing
  2371 ;; This function is called by:
  2372 ;;		_main
  2373 ;; This function uses a non-reentrant model
  2374 ;;
  2375                           
  2376                           
  2377                           ;psect for function _Timer1_Init
  2378  0407                     _Timer1_Init:	
  2379                           
  2380                           ;Timer1.c: 8: TRISB |= (1<<6);
  2381                           
  2382                           ;incstack = 0
  2383                           ; Regs used in _Timer1_Init: [wreg+status,2+status,0]
  2384  0407  0021               	movlb	1	; select bank1
  2385  0408  170D               	bsf	13,6	;volatile
  2386                           
  2387                           ;Timer1.c: 9: ANSELB &= ~(1<<6);
  2388  0409  30BF               	movlw	191
  2389  040A  00F1               	movwf	??_Timer1_Init
  2390  040B  0871               	movf	??_Timer1_Init,w
  2391  040C  0023               	movlb	3	; select bank3
  2392  040D  058D               	andwf	13,f	;volatile
  2393                           
  2394                           ;Timer1.c: 11: T1CON |= (0x01<<2);
  2395  040E  0020               	movlb	0	; select bank0
  2396  040F  1518               	bsf	24,2	;volatile
  2397                           
  2398                           ;Timer1.c: 12: T1CON &= ~(0x01<<3);
  2399  0410  30F7               	movlw	247
  2400  0411  00F1               	movwf	??_Timer1_Init
  2401  0412  0871               	movf	??_Timer1_Init,w
  2402  0413  0598               	andwf	24,f	;volatile
  2403                           
  2404                           ;Timer1.c: 13: T1CON |= (0x00<<4);
  2405  0414  0818               	movf	24,w	;volatile
  2406                           
  2407                           ;Timer1.c: 14: T1CON |= (0x02<<6);
  2408  0415  1798               	bsf	24,7	;volatile
  2409                           
  2410                           ;Timer1.c: 16: T1GCON = 0x00;
  2411  0416  0199               	clrf	25	;volatile
  2412                           
  2413                           ;Timer1.c: 18: TMR1 = 0xFFFF-10;
  2414  0417  30FF               	movlw	255
  2415  0418  0097               	movwf	23	;volatile
  2416  0419  30F5               	movlw	245
  2417  041A  0096               	movwf	22	;volatile
  2418                           
  2419                           ;Timer1.c: 20: TMR1IF = 0;
  2420  041B  1011               	bcf	17,0	;volatile
  2421                           
  2422                           ;Timer1.c: 21: TMR1IE = 1;
  2423  041C  0021               	movlb	1	; select bank1
  2424  041D  1411               	bsf	17,0	;volatile
  2425                           
  2426                           ;Timer1.c: 22: PEIE = 1;
  2427  041E  170B               	bsf	11,6	;volatile
  2428                           
  2429                           ;Timer1.c: 23: GIE = 1;
  2430  041F  178B               	bsf	11,7	;volatile
  2431  0420  0008               	return
  2432  0421                     __end_of_Timer1_Init:	
  2433                           
  2434                           	psect	text10
  2435  0245                     __ptext10:	
  2436 ;; *************** function _LCD_Init *****************
  2437 ;; Defined at:
  2438 ;;		line 28 in file "LCD.c"
  2439 ;; Parameters:    Size  Location     Type
  2440 ;;		None
  2441 ;; Auto vars:     Size  Location     Type
  2442 ;;		None
  2443 ;; Return value:  Size  Location     Type
  2444 ;;                  1    wreg      void 
  2445 ;; Registers used:
  2446 ;;		wreg, status,2, status,0, pclath, cstack
  2447 ;; Tracked objects:
  2448 ;;		On entry : 0/0
  2449 ;;		On exit  : 0/0
  2450 ;;		Unchanged: 0/0
  2451 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  2452 ;;      Params:         0       0       0       0       0       0
  2453 ;;      Locals:         0       0       0       0       0       0
  2454 ;;      Temps:          2       0       0       0       0       0
  2455 ;;      Totals:         2       0       0       0       0       0
  2456 ;;Total ram usage:        2 bytes
  2457 ;; Hardware stack levels used:    1
  2458 ;; Hardware stack levels required when called:    3
  2459 ;; This function calls:
  2460 ;;		_LCD_DisplayClear
  2461 ;;		_LCD_WriteData
  2462 ;; This function is called by:
  2463 ;;		_main
  2464 ;; This function uses a non-reentrant model
  2465 ;;
  2466                           
  2467                           
  2468                           ;psect for function _LCD_Init
  2469  0245                     _LCD_Init:	
  2470                           
  2471                           ;LCD.c: 30: RA3 = 0;
  2472                           
  2473                           ;incstack = 0
  2474                           ; Regs used in _LCD_Init: [wreg+status,2+status,0+pclath+cstack]
  2475  0245  0020               	movlb	0	; select bank0
  2476  0246  118C               	bcf	12,3	;volatile
  2477                           
  2478                           ;LCD.c: 31: RA4 = 0;
  2479  0247  120C               	bcf	12,4	;volatile
  2480                           
  2481                           ;LCD.c: 33: _delay((unsigned long)((30)*(32000000/4000.0)));
  2482  0248  3002               	movlw	2
  2483  0249  00F6               	movwf	??_LCD_Init+1
  2484  024A  3038               	movlw	56
  2485  024B  00F5               	movwf	??_LCD_Init
  2486  024C  30AD               	movlw	173
  2487  024D                     u3017:	
  2488  024D  0B89               	decfsz	9,f
  2489  024E  2A4D               	goto	u3017
  2490  024F  0BF5               	decfsz	??_LCD_Init,f
  2491  0250  2A4D               	goto	u3017
  2492  0251  0BF6               	decfsz	??_LCD_Init+1,f
  2493  0252  2A4D               	goto	u3017
  2494  0253  0000               	nop
  2495                           
  2496                           ;LCD.c: 34: PORTB = ( ((0x03&0x0C)<<1)|(0x03&0x03) );
  2497  0254  3003               	movlw	3
  2498  0255  0020               	movlb	0	; select bank0
  2499  0256  008D               	movwf	13	;volatile
  2500                           
  2501                           ;LCD.c: 35: {RA4 = 1; _delay((unsigned long)((1)*(32000000/4000000.0))); RA4 = 0; _delay
      +                          ((unsigned long)((1)*(32000000/4000000.0)));};
  2502  0257  160C               	bsf	12,4	;volatile
  2503  0258  3200               	nop2	;2 cycle nop
  2504  0259  3200               	nop2	;2 cycle nop
  2505  025A  3200               	nop2	;2 cycle nop
  2506  025B  3200               	nop2	;2 cycle nop
  2507  025C  0020               	movlb	0	; select bank0
  2508  025D  120C               	bcf	12,4	;volatile
  2509  025E  3200               	nop2	;2 cycle nop
  2510  025F  3200               	nop2	;2 cycle nop
  2511  0260  3200               	nop2	;2 cycle nop
  2512  0261  3200               	nop2	;2 cycle nop
  2513                           
  2514                           ;LCD.c: 36: _delay((unsigned long)((5)*(32000000/4000.0)));
  2515  0262  3034               	movlw	52
  2516  0263  00F5               	movwf	??_LCD_Init
  2517  0264  30F2               	movlw	242
  2518  0265                     u3027:	
  2519  0265  0B89               	decfsz	9,f
  2520  0266  2A65               	goto	u3027
  2521  0267  0BF5               	decfsz	??_LCD_Init,f
  2522  0268  2A65               	goto	u3027
  2523                           
  2524                           ;LCD.c: 37: {RA4 = 1; _delay((unsigned long)((1)*(32000000/4000000.0))); RA4 = 0; _delay
      +                          ((unsigned long)((1)*(32000000/4000000.0)));};
  2525  0269  0020               	movlb	0	; select bank0
  2526  026A  160C               	bsf	12,4	;volatile
  2527  026B  3200               	nop2	;2 cycle nop
  2528  026C  3200               	nop2	;2 cycle nop
  2529  026D  3200               	nop2	;2 cycle nop
  2530  026E  3200               	nop2	;2 cycle nop
  2531  026F  0020               	movlb	0	; select bank0
  2532  0270  120C               	bcf	12,4	;volatile
  2533  0271  3200               	nop2	;2 cycle nop
  2534  0272  3200               	nop2	;2 cycle nop
  2535  0273  3200               	nop2	;2 cycle nop
  2536  0274  3200               	nop2	;2 cycle nop
  2537                           
  2538                           ;LCD.c: 38: _delay((unsigned long)((400)*(32000000/4000000.0)));
  2539  0275  3005               	movlw	5
  2540  0276  00F5               	movwf	??_LCD_Init
  2541  0277  3026               	movlw	38
  2542  0278                     u3037:	
  2543  0278  0B89               	decfsz	9,f
  2544  0279  2A78               	goto	u3037
  2545  027A  0BF5               	decfsz	??_LCD_Init,f
  2546  027B  2A78               	goto	u3037
  2547  027C  3200               	nop2
  2548                           
  2549                           ;LCD.c: 39: {RA4 = 1; _delay((unsigned long)((1)*(32000000/4000000.0))); RA4 = 0; _delay
      +                          ((unsigned long)((1)*(32000000/4000000.0)));};
  2550  027D  0020               	movlb	0	; select bank0
  2551  027E  160C               	bsf	12,4	;volatile
  2552  027F  3200               	nop2	;2 cycle nop
  2553  0280  3200               	nop2	;2 cycle nop
  2554  0281  3200               	nop2	;2 cycle nop
  2555  0282  3200               	nop2	;2 cycle nop
  2556  0283  0020               	movlb	0	; select bank0
  2557  0284  120C               	bcf	12,4	;volatile
  2558  0285  3200               	nop2	;2 cycle nop
  2559  0286  3200               	nop2	;2 cycle nop
  2560  0287  3200               	nop2	;2 cycle nop
  2561  0288  3200               	nop2	;2 cycle nop
  2562                           
  2563                           ;LCD.c: 40: _delay((unsigned long)((400)*(32000000/4000000.0)));
  2564  0289  3005               	movlw	5
  2565  028A  00F5               	movwf	??_LCD_Init
  2566  028B  3026               	movlw	38
  2567  028C                     u3047:	
  2568  028C  0B89               	decfsz	9,f
  2569  028D  2A8C               	goto	u3047
  2570  028E  0BF5               	decfsz	??_LCD_Init,f
  2571  028F  2A8C               	goto	u3047
  2572  0290  3200               	nop2
  2573                           
  2574                           ;LCD.c: 41: PORTB = ( ((0x02&0x0C)<<1)|(0x02&0x03) );
  2575  0291  3002               	movlw	2
  2576  0292  0020               	movlb	0	; select bank0
  2577  0293  008D               	movwf	13	;volatile
  2578                           
  2579                           ;LCD.c: 42: {RA4 = 1; _delay((unsigned long)((1)*(32000000/4000000.0))); RA4 = 0; _delay
      +                          ((unsigned long)((1)*(32000000/4000000.0)));};
  2580  0294  160C               	bsf	12,4	;volatile
  2581  0295  3200               	nop2	;2 cycle nop
  2582  0296  3200               	nop2	;2 cycle nop
  2583  0297  3200               	nop2	;2 cycle nop
  2584  0298  3200               	nop2	;2 cycle nop
  2585  0299  0020               	movlb	0	; select bank0
  2586  029A  120C               	bcf	12,4	;volatile
  2587  029B  3200               	nop2	;2 cycle nop
  2588  029C  3200               	nop2	;2 cycle nop
  2589  029D  3200               	nop2	;2 cycle nop
  2590  029E  3200               	nop2	;2 cycle nop
  2591                           
  2592                           ;LCD.c: 44: LCD_WriteData(0x28);
  2593  029F  3028               	movlw	40
  2594  02A0  3183  2343  3182   	fcall	_LCD_WriteData
  2595                           
  2596                           ;LCD.c: 45: LCD_WriteData(0x0c);
  2597  02A3  300C               	movlw	12
  2598  02A4  3183  2343  3182   	fcall	_LCD_WriteData
  2599                           
  2600                           ;LCD.c: 46: LCD_DisplayClear();
  2601  02A7  3184  246E  3182   	fcall	_LCD_DisplayClear
  2602                           
  2603                           ;LCD.c: 47: LCD_WriteData(0x06);
  2604  02AA  3006               	movlw	6
  2605  02AB  3183  2343         	fcall	_LCD_WriteData
  2606  02AD  0008               	return
  2607  02AE                     __end_of_LCD_Init:	
  2608                           
  2609                           	psect	text11
  2610  046E                     __ptext11:	
  2611 ;; *************** function _LCD_DisplayClear *****************
  2612 ;; Defined at:
  2613 ;;		line 64 in file "LCD.c"
  2614 ;; Parameters:    Size  Location     Type
  2615 ;;		None
  2616 ;; Auto vars:     Size  Location     Type
  2617 ;;		None
  2618 ;; Return value:  Size  Location     Type
  2619 ;;                  1    wreg      void 
  2620 ;; Registers used:
  2621 ;;		wreg, status,2, status,0, pclath, cstack
  2622 ;; Tracked objects:
  2623 ;;		On entry : 0/0
  2624 ;;		On exit  : 0/0
  2625 ;;		Unchanged: 0/0
  2626 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  2627 ;;      Params:         0       0       0       0       0       0
  2628 ;;      Locals:         0       0       0       0       0       0
  2629 ;;      Temps:          1       0       0       0       0       0
  2630 ;;      Totals:         1       0       0       0       0       0
  2631 ;;Total ram usage:        1 bytes
  2632 ;; Hardware stack levels used:    1
  2633 ;; Hardware stack levels required when called:    2
  2634 ;; This function calls:
  2635 ;;		_LCD_WriteData
  2636 ;; This function is called by:
  2637 ;;		_LCD_Init
  2638 ;; This function uses a non-reentrant model
  2639 ;;
  2640                           
  2641                           
  2642                           ;psect for function _LCD_DisplayClear
  2643  046E                     _LCD_DisplayClear:	
  2644                           
  2645                           ;LCD.c: 66: RA3 = 0;
  2646                           
  2647                           ;incstack = 0
  2648                           ; Regs used in _LCD_DisplayClear: [wreg+status,2+status,0+pclath+cstack]
  2649  046E  0020               	movlb	0	; select bank0
  2650  046F  118C               	bcf	12,3	;volatile
  2651                           
  2652                           ;LCD.c: 67: LCD_WriteData(0x01);
  2653  0470  3001               	movlw	1
  2654  0471  3183  2343  3184   	fcall	_LCD_WriteData
  2655                           
  2656                           ;LCD.c: 68: _delay((unsigned long)((2)*(32000000/4000.0)));
  2657  0474  3015               	movlw	21
  2658  0475  00F4               	movwf	??_LCD_DisplayClear
  2659  0476  30C6               	movlw	198
  2660  0477                     u3057:	
  2661  0477  0B89               	decfsz	9,f
  2662  0478  2C77               	goto	u3057
  2663  0479  0BF4               	decfsz	??_LCD_DisplayClear,f
  2664  047A  2C77               	goto	u3057
  2665  047B  3200               	nop2
  2666  047C  0008               	return
  2667  047D                     __end_of_LCD_DisplayClear:	
  2668                           
  2669                           	psect	text12
  2670  0421                     __ptext12:	
  2671 ;; *************** function _LCD_CursorPosition *****************
  2672 ;; Defined at:
  2673 ;;		line 86 in file "LCD.c"
  2674 ;; Parameters:    Size  Location     Type
  2675 ;;  tx              1    wreg     unsigned char 
  2676 ;;  ty              1    4[COMMON] unsigned char 
  2677 ;; Auto vars:     Size  Location     Type
  2678 ;;  tx              1    6[COMMON] unsigned char 
  2679 ;; Return value:  Size  Location     Type
  2680 ;;                  1    wreg      void 
  2681 ;; Registers used:
  2682 ;;		wreg, status,2, status,0, pclath, cstack
  2683 ;; Tracked objects:
  2684 ;;		On entry : 0/0
  2685 ;;		On exit  : 0/0
  2686 ;;		Unchanged: 0/0
  2687 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  2688 ;;      Params:         1       0       0       0       0       0
  2689 ;;      Locals:         1       0       0       0       0       0
  2690 ;;      Temps:          1       0       0       0       0       0
  2691 ;;      Totals:         3       0       0       0       0       0
  2692 ;;Total ram usage:        3 bytes
  2693 ;; Hardware stack levels used:    1
  2694 ;; Hardware stack levels required when called:    2
  2695 ;; This function calls:
  2696 ;;		_LCD_WriteData
  2697 ;; This function is called by:
  2698 ;;		_main
  2699 ;; This function uses a non-reentrant model
  2700 ;;
  2701                           
  2702                           
  2703                           ;psect for function _LCD_CursorPosition
  2704  0421                     _LCD_CursorPosition:	
  2705                           
  2706                           ;incstack = 0
  2707                           ; Regs used in _LCD_CursorPosition: [wreg+status,2+status,0+pclath+cstack]
  2708                           ;LCD_CursorPosition@tx stored from wreg
  2709  0421  00F6               	movwf	LCD_CursorPosition@tx
  2710                           
  2711                           ;LCD.c: 88: RA3 = 0;
  2712  0422  0020               	movlb	0	; select bank0
  2713  0423  118C               	bcf	12,3	;volatile
  2714                           
  2715                           ;LCD.c: 89: LCD_WriteData(0x80|tx|(0x40*ty));
  2716  0424  0874               	movf	LCD_CursorPosition@ty,w
  2717  0425  00F5               	movwf	??_LCD_CursorPosition
  2718  0426  3005               	movlw	5
  2719  0427                     u2825:	
  2720  0427  35F5               	lslf	??_LCD_CursorPosition,f
  2721  0428  3EFF               	addlw	-1
  2722  0429  1D03               	skipz
  2723  042A  2C27               	goto	u2825
  2724  042B  3575               	lslf	??_LCD_CursorPosition,w
  2725  042C  0476               	iorwf	LCD_CursorPosition@tx,w
  2726  042D  3880               	iorlw	-128
  2727  042E  3183  2343  3184   	fcall	_LCD_WriteData
  2728                           
  2729                           ;LCD.c: 90: _delay((unsigned long)((40)*(32000000/4000000.0)));
  2730  0431  306A               	movlw	106
  2731  0432                     u3067:	
  2732  0432  0B89               	decfsz	9,f
  2733  0433  2C32               	goto	u3067
  2734  0434  3200               	nop2
  2735  0435  0008               	return
  2736  0436                     __end_of_LCD_CursorPosition:	
  2737                           
  2738                           	psect	text13
  2739  0343                     __ptext13:	
  2740 ;; *************** function _LCD_WriteData *****************
  2741 ;; Defined at:
  2742 ;;		line 15 in file "LCD.c"
  2743 ;; Parameters:    Size  Location     Type
  2744 ;;  point           1    wreg     char 
  2745 ;; Auto vars:     Size  Location     Type
  2746 ;;  point           1    3[COMMON] char 
  2747 ;; Return value:  Size  Location     Type
  2748 ;;                  1    wreg      void 
  2749 ;; Registers used:
  2750 ;;		wreg, status,2, status,0
  2751 ;; Tracked objects:
  2752 ;;		On entry : 0/0
  2753 ;;		On exit  : 0/0
  2754 ;;		Unchanged: 0/0
  2755 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  2756 ;;      Params:         0       0       0       0       0       0
  2757 ;;      Locals:         1       0       0       0       0       0
  2758 ;;      Temps:          2       0       0       0       0       0
  2759 ;;      Totals:         3       0       0       0       0       0
  2760 ;;Total ram usage:        3 bytes
  2761 ;; Hardware stack levels used:    1
  2762 ;; Hardware stack levels required when called:    1
  2763 ;; This function calls:
  2764 ;;		Nothing
  2765 ;; This function is called by:
  2766 ;;		_LCD_Init
  2767 ;;		_LCD_Put
  2768 ;;		_LCD_DisplayClear
  2769 ;;		_LCD_CursorPosition
  2770 ;;		_LCD_CursorHome
  2771 ;;		_LCD_CursorShift
  2772 ;;		_LCD_DispShift
  2773 ;; This function uses a non-reentrant model
  2774 ;;
  2775                           
  2776                           
  2777                           ;psect for function _LCD_WriteData
  2778  0343                     _LCD_WriteData:	
  2779                           
  2780                           ;incstack = 0
  2781                           ; Regs used in _LCD_WriteData: [wreg+status,2+status,0]
  2782                           ;LCD_WriteData@point stored from wreg
  2783  0343  00F3               	movwf	LCD_WriteData@point
  2784                           
  2785                           ;LCD.c: 17: _delay((unsigned long)((80)*(32000000/4000000.0)));
  2786  0344  30D5               	movlw	213
  2787  0345                     u3077:	
  2788  0345  0B89               	decfsz	9,f
  2789  0346  2B45               	goto	u3077
  2790  0347  0000               	nop
  2791                           
  2792                           ;LCD.c: 18: PORTB = ( (((point>>4)&0x0F&0x0C)<<1)|((point>>4)&0x0F&0x03) );
  2793  0348  0873               	movf	LCD_WriteData@point,w
  2794  0349  00F1               	movwf	??_LCD_WriteData
  2795  034A  3004               	movlw	4
  2796  034B                     u2325:	
  2797  034B  1003               	clrc
  2798  034C  1BF1               	btfsc	??_LCD_WriteData,7
  2799  034D  1403               	setc
  2800  034E  0CF1               	rrf	??_LCD_WriteData,f
  2801  034F  0B89               	decfsz	9,f
  2802  0350  2B4B               	goto	u2325
  2803  0351  3003               	movlw	3
  2804  0352  0571               	andwf	??_LCD_WriteData,w
  2805  0353  00F2               	movwf	??_LCD_WriteData+1
  2806  0354  0E73               	swapf	LCD_WriteData@point,w
  2807  0355  390F               	andlw	15
  2808  0356  1989               	btfsc	9,3
  2809  0357  38F0               	iorlw	240
  2810  0358  390C               	andlw	12
  2811  0359  0709               	addwf	9,w
  2812  035A  0472               	iorwf	??_LCD_WriteData+1,w
  2813  035B  0020               	movlb	0	; select bank0
  2814  035C  008D               	movwf	13	;volatile
  2815                           
  2816                           ;LCD.c: 19: {RA4 = 1; _delay((unsigned long)((1)*(32000000/4000000.0))); RA4 = 0; _delay
      +                          ((unsigned long)((1)*(32000000/4000000.0)));};
  2817  035D  160C               	bsf	12,4	;volatile
  2818  035E  3200               	nop2	;2 cycle nop
  2819  035F  3200               	nop2	;2 cycle nop
  2820  0360  3200               	nop2	;2 cycle nop
  2821  0361  3200               	nop2	;2 cycle nop
  2822  0362  0020               	movlb	0	; select bank0
  2823  0363  120C               	bcf	12,4	;volatile
  2824  0364  3200               	nop2	;2 cycle nop
  2825  0365  3200               	nop2	;2 cycle nop
  2826  0366  3200               	nop2	;2 cycle nop
  2827  0367  3200               	nop2	;2 cycle nop
  2828                           
  2829                           ;LCD.c: 20: PORTB = ( ((point&0x0F&0x0C)<<1)|(point&0x0F&0x03) );
  2830  0368  3003               	movlw	3
  2831  0369  0573               	andwf	LCD_WriteData@point,w
  2832  036A  00F1               	movwf	??_LCD_WriteData
  2833  036B  0873               	movf	LCD_WriteData@point,w
  2834  036C  390C               	andlw	12
  2835  036D  0709               	addwf	9,w
  2836  036E  0471               	iorwf	??_LCD_WriteData,w
  2837  036F  0020               	movlb	0	; select bank0
  2838  0370  008D               	movwf	13	;volatile
  2839                           
  2840                           ;LCD.c: 21: {RA4 = 1; _delay((unsigned long)((1)*(32000000/4000000.0))); RA4 = 0; _delay
      +                          ((unsigned long)((1)*(32000000/4000000.0)));};
  2841  0371  160C               	bsf	12,4	;volatile
  2842  0372  3200               	nop2	;2 cycle nop
  2843  0373  3200               	nop2	;2 cycle nop
  2844  0374  3200               	nop2	;2 cycle nop
  2845  0375  3200               	nop2	;2 cycle nop
  2846  0376  0020               	movlb	0	; select bank0
  2847  0377  120C               	bcf	12,4	;volatile
  2848  0378  3200               	nop2	;2 cycle nop
  2849  0379  3200               	nop2	;2 cycle nop
  2850  037A  3200               	nop2	;2 cycle nop
  2851  037B  3200               	nop2	;2 cycle nop
  2852  037C  0008               	return
  2853  037D                     __end_of_LCD_WriteData:	
  2854                           
  2855                           	psect	text14
  2856  0436                     __ptext14:	
  2857 ;; *************** function _Basic_Init *****************
  2858 ;; Defined at:
  2859 ;;		line 32 in file "main.c"
  2860 ;; Parameters:    Size  Location     Type
  2861 ;;		None
  2862 ;; Auto vars:     Size  Location     Type
  2863 ;;		None
  2864 ;; Return value:  Size  Location     Type
  2865 ;;                  1    wreg      char 
  2866 ;; Registers used:
  2867 ;;		wreg, status,2
  2868 ;; Tracked objects:
  2869 ;;		On entry : 0/0
  2870 ;;		On exit  : 0/0
  2871 ;;		Unchanged: 0/0
  2872 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  2873 ;;      Params:         0       0       0       0       0       0
  2874 ;;      Locals:         0       0       0       0       0       0
  2875 ;;      Temps:          0       0       0       0       0       0
  2876 ;;      Totals:         0       0       0       0       0       0
  2877 ;;Total ram usage:        0 bytes
  2878 ;; Hardware stack levels used:    1
  2879 ;; Hardware stack levels required when called:    1
  2880 ;; This function calls:
  2881 ;;		Nothing
  2882 ;; This function is called by:
  2883 ;;		_main
  2884 ;; This function uses a non-reentrant model
  2885 ;;
  2886                           
  2887                           
  2888                           ;psect for function _Basic_Init
  2889  0436                     _Basic_Init:	
  2890                           
  2891                           ;main.c: 34: OSCCON = 0xF0;
  2892                           
  2893                           ;incstack = 0
  2894                           ; Regs used in _Basic_Init: [wreg+status,2]
  2895  0436  30F0               	movlw	240
  2896  0437  0021               	movlb	1	; select bank1
  2897  0438  0099               	movwf	25	;volatile
  2898                           
  2899                           ;main.c: 38: TRISA = 0x07;
  2900  0439  3007               	movlw	7
  2901  043A  008C               	movwf	12	;volatile
  2902                           
  2903                           ;main.c: 39: ANSELA = 0x07;
  2904  043B  3007               	movlw	7
  2905  043C  0023               	movlb	3	; select bank3
  2906  043D  008C               	movwf	12	;volatile
  2907                           
  2908                           ;main.c: 41: TRISB = 0x40;
  2909  043E  3040               	movlw	64
  2910  043F  0021               	movlb	1	; select bank1
  2911  0440  008D               	movwf	13	;volatile
  2912                           
  2913                           ;main.c: 42: ANSELB = 0x00;
  2914  0441  0023               	movlb	3	; select bank3
  2915  0442  018D               	clrf	13	;volatile
  2916                           
  2917                           ;main.c: 44: APFCON0 = 0x08;
  2918  0443  3008               	movlw	8
  2919  0444  0022               	movlb	2	; select bank2
  2920  0445  009D               	movwf	29	;volatile
  2921                           
  2922                           ;main.c: 45: APFCON1 = 0x00;
  2923  0446  019E               	clrf	30	;volatile
  2924                           
  2925                           ;main.c: 47: PORTA = 0x00;
  2926  0447  0020               	movlb	0	; select bank0
  2927  0448  018C               	clrf	12	;volatile
  2928                           
  2929                           ;main.c: 48: PORTB = 0x00;
  2930  0449  018D               	clrf	13	;volatile
  2931  044A  0008               	return
  2932  044B                     __end_of_Basic_Init:	
  2933                           ;main.c: 50: return 0;
  2934                           ;	Return value of _Basic_Init is never used
  2935                           
  2936                           
  2937                           	psect	intentry
  2938  0004                     __pintentry:	
  2939 ;; *************** function _Handler *****************
  2940 ;; Defined at:
  2941 ;;		line 53 in file "main.c"
  2942 ;; Parameters:    Size  Location     Type
  2943 ;;		None
  2944 ;; Auto vars:     Size  Location     Type
  2945 ;;		None
  2946 ;; Return value:  Size  Location     Type
  2947 ;;                  1    wreg      void 
  2948 ;; Registers used:
  2949 ;;		None
  2950 ;; Tracked objects:
  2951 ;;		On entry : 0/0
  2952 ;;		On exit  : 0/0
  2953 ;;		Unchanged: 0/0
  2954 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  2955 ;;      Params:         0       0       0       0       0       0
  2956 ;;      Locals:         0       0       0       0       0       0
  2957 ;;      Temps:          1       0       0       0       0       0
  2958 ;;      Totals:         1       0       0       0       0       0
  2959 ;;Total ram usage:        1 bytes
  2960 ;; Hardware stack levels used:    1
  2961 ;; This function calls:
  2962 ;;		Nothing
  2963 ;; This function is called by:
  2964 ;;		Interrupt level 1
  2965 ;; This function uses a non-reentrant model
  2966 ;;
  2967                           
  2968  0004                     _Handler:	
  2969                           
  2970                           ;incstack = 0
  2971  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
  2972                           
  2973                           ; Regs used in _Handler: []
  2974  0005  3180               	pagesel	$
  2975  0006  0020               	movlb	0	; select bank0
  2976  0007  087F               	movf	127,w
  2977  0008  00F0               	movwf	??_Handler
  2978  0009  0870               	movf	??_Handler,w
  2979  000A  00FF               	movwf	127
  2980  000B  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
  2981  000C  0009               	retfie
  2982  000D                     __end_of_Handler:	
  2983  007E                     btemp	set	126	;btemp
  2984  007E                     int$flags	set	126
  2985  007E                     wtemp0	set	126


Data Sizes:
    Strings     32
    Constant    0
    Data        0
    BSS         15
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     12      13
    BANK0            80     60      74
    BANK1            80      0       0
    BANK2            80      0       0
    BANK3            80      0       0
    BANK4            48      0       0

Pointer List with Targets:

    xfunc_in	PTR FTN()unsigned char  size(2) Largest target is 1
		 -> Absolute function(), 

    xprintf@fmt	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_6(CODE[7]), STR_5(CODE[6]), STR_4(CODE[6]), STR_3(CODE[7]), 
		 -> STR_1(CODE[4]), 

    xprintf@arp	PTR void [1] size(1) Largest target is 1
		 -> ?_xfprintf(COMMON[1]), ?_xsprintf(COMMON[1]), ?_xprintf(BANK0[1]), 

    xvprintf@arp	PTR PTR void  size(1) Largest target is 1
		 -> xfprintf@arp(COMMON[1]), xsprintf@arp(COMMON[1]), xprintf@arp(BANK0[1]), 

    xvprintf@p	PTR unsigned char  size(1) Largest target is 1
		 -> ?_xfprintf(COMMON[1]), ?_xsprintf(COMMON[1]), ?_xprintf(BANK0[1]), 

    xvprintf@fmt	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_6(CODE[7]), STR_5(CODE[6]), STR_4(CODE[6]), STR_3(CODE[7]), 
		 -> STR_1(CODE[4]), 

    xputs@str	PTR const unsigned char  size(1) Largest target is 1
		 -> ?_xfprintf(COMMON[1]), ?_xsprintf(COMMON[1]), ?_xprintf(BANK0[1]), 

    outptr	PTR unsigned char  size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    xfunc_out	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), LCD_Put(), 


Critical Paths under _main in COMMON

    _main->_xprintf
    _xvprintf->___llmod
    _xputs->_xputc
    _xputc->_LCD_Put
    _LCD_Put->_LCD_WriteData
    _LCD_Init->_LCD_DisplayClear
    _LCD_DisplayClear->_LCD_WriteData
    _LCD_CursorPosition->_LCD_WriteData

Critical Paths under _Handler in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_xprintf
    _xprintf->_xvprintf
    _xvprintf->___lldiv

Critical Paths under _Handler in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _Handler in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _Handler in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _Handler in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _Handler in BANK4

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0    5746
                         _Basic_Init
                 _LCD_CursorPosition
                           _LCD_Init
                        _Timer1_Init
                            _xprintf
 ---------------------------------------------------------------------------------
 (1) _xprintf                                              8     2      6    5235
                                             11 COMMON     1     1      0
                                             53 BANK0      7     1      6
                           _xvprintf
 ---------------------------------------------------------------------------------
 (2) _xvprintf                                            48    45      3    4755
                                              5 BANK0     48    45      3
                            ___lldiv
                            ___llmod
                             ___wmul
                              _xputc
                              _xputs
 ---------------------------------------------------------------------------------
 (3) _xputs                                                2     2      0     454
                                              7 COMMON     2     2      0
                              _xputc
 ---------------------------------------------------------------------------------
 (4) _xputc                                                2     2      0     356
                                              5 COMMON     2     2      0
                   Absolute function *
                            _LCD_Put *
 ---------------------------------------------------------------------------------
 (5) _LCD_Put                                              1     0      1     263
                                              4 COMMON     1     0      1
                      _LCD_WriteData
 ---------------------------------------------------------------------------------
 (5) Absolute function(Fake)                               1     0      1       0
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     290
                                              1 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (3) ___llmod                                             10     2      8     386
                                              1 COMMON    10     2      8
 ---------------------------------------------------------------------------------
 (3) ___lldiv                                             14     6      8     549
                                              1 COMMON     9     1      8
                                              0 BANK0      5     5      0
 ---------------------------------------------------------------------------------
 (1) _Timer1_Init                                          1     1      0       0
                                              1 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _LCD_Init                                             2     2      0     248
                                              5 COMMON     2     2      0
                   _LCD_DisplayClear
                      _LCD_WriteData
 ---------------------------------------------------------------------------------
 (2) _LCD_DisplayClear                                     1     1      0     124
                                              4 COMMON     1     1      0
                      _LCD_WriteData
 ---------------------------------------------------------------------------------
 (1) _LCD_CursorPosition                                   3     2      1     263
                                              4 COMMON     3     2      1
                      _LCD_WriteData
 ---------------------------------------------------------------------------------
 (6) _LCD_WriteData                                        3     3      0     124
                                              1 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (1) _Basic_Init                                           0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _Handler                                              1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Basic_Init
   _LCD_CursorPosition
     _LCD_WriteData
   _LCD_Init
     _LCD_DisplayClear
       _LCD_WriteData
     _LCD_WriteData
   _Timer1_Init
   _xprintf
     _xvprintf
       ___lldiv
       ___llmod
       ___wmul
       _xputc
         Absolute function(Fake) *
         _LCD_Put *
           _LCD_WriteData
       _xputs
         _xputc
           Absolute function(Fake) *
           _LCD_Put *
             _LCD_WriteData

 _Handler (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             170      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      C       D       2       92.9%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0      57       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BANK0               50     3C      4A       6       92.5%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BITBANK1            50      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BANK1               50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BITBANK2            50      0       0       9        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BANK2               50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BITBANK3            50      0       0      11        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BANK3               50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BITBANK4            30      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BANK4               30      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
DATA                 0      0      57      15        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.41 build -162212810 
Symbol Table                                                                                   Sat May 20 03:21:20 2017

                __CFG_CP$OFF 0000          ___wmul@multiplicand 0073                          l216 01E9  
                        l160 001B                          l175 0097                          l193 0132  
                        l397 03F4                          _GIE 005F                          _RA3 0063  
                        _RA4 0064                 __CFG_CPD$OFF 0000                 __CFG_BORV$LO 0000  
                        wreg 0009                   _Basic_Init 0436                 __CFG_LVP$OFF 0000  
            __end_of_LCD_Put 0489                         l2300 038C                         l2322 03EE  
                       l2410 0049                         l2340 02BF                         l2308 039B  
                       l2500 018D                         l2420 0060                         l2350 02ED  
                       l2342 02CD                         l2318 044C                         l2510 01C7  
                       l2430 008F                         l2354 02F8                         l2370 032F  
                       l2514 01CF                         l2426 0087                         l2418 005D  
                       l2364 0309                         l2540 021E                         l2532 01FF  
                       l2460 00E3                         l2452 00BF                         l2366 0317  
                       l2374 033A                         l2534 0208                         l2526 01F7  
                       l2470 010C                         l2454 00CD                         l2446 00B2  
                       l2438 00A4                         l2544 0230                         l2536 020C  
                       l2472 010E                         l2464 00E7                         l2456 00D1  
                       l2480 011A                         l2546 0234                         l2490 016A  
                       l2474 0110                         l2466 00FC                         l2492 017A  
                       l2476 0115                         l2468 0109                         l2396 0034  
                       l2486 014C                         l2488 0161                         l2498 018B  
                       l2682 03BA                         STR_1 03E6                         STR_2 03EA  
                       STR_3 03CC                         STR_4 03DA                         STR_5 03E0  
                       STR_6 03D3                         u3017 024D                         u3027 0265  
                       u2325 034B                         u3037 0278                         u3047 028C  
                       u3057 0477                         u2425 02C2                         u3067 0432  
                       u2515 0325                         u3077 0345                         u2445 02CE  
                       u2525 0330                         u2455 02E2                         u2465 02EE  
                       u2385 03F5                         u2395 03FA                         u2495 030C  
                       u2815 0242                         u2825 0427                         u2665 00E1  
                       u2675 00F5                         _PEIE 005E                         u2795 021C  
                       _TMR1 0016                 __CFG_WRT$OFF 0000                         _main 03AA  
                       fsr0h 0005                         fsr1h 0007                         indf0 0000  
                       fsr0l 0004                         indf1 0001                         fsr1l 0006  
                       btemp 007E                __CFG_BOREN$ON 0000                         start 000D  
              __CFG_IESO$OFF 0000              __end_of_Handler 000D                _LCD_WriteData 0343  
              __CFG_MCLRE$ON 0000     __end_of_LCD_DisplayClear 047D             __end_of_LCD_Init 02AE  
              __CFG_PLLEN$ON 0000                  LCD_Put@word 0074                        ?_main 0070  
              __CFG_WDTE$OFF 0000              __end_of___lldiv 0301                        _T1CON 0018  
            __end_of___llmod 0343                        _PORTA 000C                        _PORTB 000D  
                      _TRISA 008C                        _TRISB 008D                __CFG_PWRTE$ON 0000  
             __CFG_FCMEN$OFF 0000                        _errno 0064                        _xputc 037D  
                      _xputs 044B                        pclath 000A                        status 0003  
                      wtemp0 007E              __end_of_xprintf 046E           _LCD_CursorPosition 0421  
             ?_LCD_WriteData 0070              __initialization 000F                 __end_of_main 03CC  
        ?_LCD_CursorPosition 0074                       ??_main 007C                    ??_LCD_Put 0075  
                ?_Basic_Init 0070             ___llmod@dividend 0075         ??_LCD_CursorPosition 0075  
                     _ANSELA 018C                       _ANSELB 018D                       _T1GCON 0019  
                     ?_xputc 0070                       ?_xputs 0070                       _OSCCON 0099  
                     _TMR1IE 0488                       _TMR1IF 0088                    ??_Handler 0070  
                     _TMR1ON 00C0                ??_Timer1_Init 0071                       ___wmul 03EC  
                  ??___lldiv 0079                    ??___llmod 0079                       _outptr 007C  
                     xputc@c 0076                    ??_xprintf 007B      __end_of__initialization 0017  
                  ?_LCD_Init 0070              ??_LCD_WriteData 0071             __end_of_xvprintf 0245  
             __pcstackCOMMON 0070          __size_of_Basic_Init 0015          __end_of_Timer1_Init 0421  
              __end_of_xputc 03AA                __end_of_xputs 045E                      ??_xputc 0075  
                    ??_xputs 0077                   __pbssBANK0 005C                   ??_LCD_Init 0075  
                 __pmaintext 03AA                      ?___wmul 0071                   __pintentry 0004  
          ?_LCD_DisplayClear 0070                      _APFCON0 011D                      _APFCON1 011E  
         ??_LCD_DisplayClear 0074                      _LCD_Put 0483                 _xvprintf$175 003C  
               _xvprintf$176 0040                 _xvprintf$177 0042                      _Handler 0004  
                _Timer1_Init 0407                      ___lldiv 02AE              __size_of___wmul 001B  
                    ___llmod 0301              __CFG_STVREN$OFF 0000                      __ptext1 045E  
                    __ptext2 001B                      __ptext3 044B                      __ptext4 037D  
                    __ptext5 0483                      __ptext6 03EC                      __ptext7 0301  
                    __ptext8 02AE                      __ptext9 0407                    ?_xvprintf 0025  
               ??_Basic_Init 0071                      _timesum 005C                      clrloop0 047E  
       end_of_initialization 0017                      _xprintf 045E              ___lldiv@divisor 0071  
            ___lldiv@counter 0024           __end_of_Basic_Init 044B                 __pstringtext 03CC  
           __CFG_FOSC$INTOSC 0000                   ??_xvprintf 0028  __size_of_LCD_CursorPosition 0015  
          __size_of_LCD_Init 0069               __end_of___wmul 0407          start_initialization 000F  
            ___llmod@divisor 0071              ___llmod@counter 007A         LCD_CursorPosition@tx 0076  
       LCD_CursorPosition@ty 0074        __end_of_LCD_WriteData 037D                     ??___wmul 0075  
                   ?_LCD_Put 0074                  __pbssCOMMON 007C                    ___latbits 0001  
              __pcstackBANK0 0020    __size_of_LCD_DisplayClear 000F                     ?_Handler 0070  
               ?_Timer1_Init 0070                     ?___lldiv 0071                     ?___llmod 0071  
          __size_of_xvprintf 022A                     ?_xprintf 0055               __size_of_xputc 002D  
             __size_of_xputs 0013                     _LCD_Init 0245               ___wmul@product 0075  
                  clear_ram0 047D            ___wmul@multiplier 0071                    _xfunc_out 0068  
           __size_of_LCD_Put 0006             __size_of_Handler 0009             __size_of___lldiv 0053  
           __size_of___llmod 0042           LCD_WriteData@point 0073   __end_of_LCD_CursorPosition 0436  
                   __ptext10 0245                     __ptext11 046E                     __ptext12 0421  
                   __ptext13 0343                     __ptext14 0436             _LCD_DisplayClear 046E  
                   _countsum 0060             __size_of_xprintf 0010                __size_of_main 0022  
       __size_of_Timer1_Init 001A                     int$flags 007E                     _xfunc_in 0066  
                   _xvprintf 001B                   xprintf@arp 005B                   xprintf@fmt 0055  
                   intlevel1 0000             ___lldiv@dividend 0075            __CFG_CLKOUTEN$OFF 0000  
                xvprintf@arp 0027                  xvprintf@fmt 0025             ___lldiv@quotient 0020  
     __size_of_LCD_WriteData 003A                     xputs@str 0078                    xvprintf@c 0054  
                  xvprintf@d 0053                    xvprintf@f 004F                    xvprintf@i 0051  
                  xvprintf@j 0049                    xvprintf@p 0044                    xvprintf@r 0045  
                  xvprintf@s 002C                    xvprintf@v 004B                    xvprintf@w 0047  
