

Microchip Technology PIC LITE Macro Assembler V1.41 build -162212810 
<<<<<<< HEAD
                                                                                               Fri Mar  3 08:06:44 2017
=======
                                                                                               Fri Mar  3 09:40:58 2017
>>>>>>> LCD

Microchip Technology Omniscient Code Generator v1.41 (Free mode) build 201701250102
     1                           	processor	16F1827
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	stringtext,global,class=STRCODE,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     7                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
     8                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    10                           	psect	text1,local,class=CODE,merge=1,delta=2
    11                           	psect	text2,local,class=CODE,merge=1,delta=2
    12                           	psect	text3,local,class=CODE,merge=1,delta=2
    13                           	psect	text4,local,class=CODE,merge=1,delta=2
    14                           	psect	text5,local,class=CODE,merge=1,delta=2
    15                           	psect	text6,local,class=CODE,merge=1,delta=2,group=2
    16                           	psect	text7,local,class=CODE,merge=1,delta=2,group=2
    17                           	psect	text8,local,class=CODE,merge=1,delta=2,group=2
    18                           	psect	text9,local,class=CODE,merge=1,delta=2
    19                           	psect	text10,local,class=CODE,merge=1,delta=2
    20                           	psect	text11,local,class=CODE,merge=1,delta=2
    21                           	psect	text12,local,class=CODE,merge=1,delta=2
    22                           	psect	text13,local,class=CODE,merge=1,delta=2
    23                           	dabs	1,0x7E,2
    24  0000                     
    25                           ; Version 1.41
    26                           ; Generated 25/01/2017 GMT
    27                           ; 
    28                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    29                           ; All rights reserved.
    30                           ; 
    31                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    32                           ; 
    33                           ; Redistribution and use in source and binary forms, with or without modification, are
    34                           ; permitted provided that the following conditions are met:
    35                           ; 
    36                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    37                           ;        conditions and the following disclaimer.
    38                           ; 
    39                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    40                           ;        of conditions and the following disclaimer in the documentation and/or other
    41                           ;        materials provided with the distribution.
    42                           ; 
    43                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    44                           ;        software without specific prior written permission.
    45                           ; 
    46                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    47                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    48                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    49                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    50                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    51                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    52                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    53                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    54                           ; 
    55                           ; 
    56                           ; Code-generator required, PIC16F1827 Definitions
    57                           ; 
    58                           ; SFR Addresses
    59  0000                     	;# 
    60  0001                     	;# 
    61  0002                     	;# 
    62  0003                     	;# 
    63  0004                     	;# 
    64  0005                     	;# 
    65  0006                     	;# 
    66  0007                     	;# 
    67  0008                     	;# 
    68  0009                     	;# 
    69  000A                     	;# 
    70  000B                     	;# 
    71  000C                     	;# 
    72  000D                     	;# 
    73  0011                     	;# 
    74  0012                     	;# 
    75  0013                     	;# 
    76  0014                     	;# 
    77  0015                     	;# 
    78  0016                     	;# 
    79  0016                     	;# 
    80  0017                     	;# 
    81  0018                     	;# 
    82  0019                     	;# 
    83  001A                     	;# 
    84  001B                     	;# 
    85  001C                     	;# 
    86  001E                     	;# 
    87  001F                     	;# 
    88  008C                     	;# 
    89  008D                     	;# 
    90  0091                     	;# 
    91  0092                     	;# 
    92  0093                     	;# 
    93  0094                     	;# 
    94  0095                     	;# 
    95  0096                     	;# 
    96  0097                     	;# 
    97  0098                     	;# 
    98  0099                     	;# 
    99  009A                     	;# 
   100  009B                     	;# 
   101  009B                     	;# 
   102  009C                     	;# 
   103  009D                     	;# 
   104  009E                     	;# 
   105  010C                     	;# 
   106  010D                     	;# 
   107  0111                     	;# 
   108  0112                     	;# 
   109  0113                     	;# 
   110  0114                     	;# 
   111  0115                     	;# 
   112  0116                     	;# 
   113  0117                     	;# 
   114  0118                     	;# 
   115  0119                     	;# 
   116  011A                     	;# 
   117  011B                     	;# 
   118  011D                     	;# 
   119  011E                     	;# 
   120  018C                     	;# 
   121  018D                     	;# 
   122  0191                     	;# 
   123  0191                     	;# 
   124  0192                     	;# 
   125  0193                     	;# 
   126  0193                     	;# 
   127  0193                     	;# 
   128  0194                     	;# 
   129  0195                     	;# 
   130  0196                     	;# 
   131  0199                     	;# 
   132  019A                     	;# 
   133  019B                     	;# 
   134  019B                     	;# 
   135  019B                     	;# 
   136  019B                     	;# 
   137  019C                     	;# 
   138  019C                     	;# 
   139  019D                     	;# 
   140  019E                     	;# 
   141  019F                     	;# 
   142  020C                     	;# 
   143  020D                     	;# 
   144  0211                     	;# 
   145  0211                     	;# 
   146  0212                     	;# 
   147  0212                     	;# 
   148  0213                     	;# 
   149  0213                     	;# 
   150  0214                     	;# 
   151  0214                     	;# 
   152  0215                     	;# 
   153  0215                     	;# 
   154  0215                     	;# 
   155  0216                     	;# 
   156  0216                     	;# 
   157  0217                     	;# 
   158  0217                     	;# 
   159  0219                     	;# 
   160  021A                     	;# 
   161  021B                     	;# 
   162  021C                     	;# 
   163  021D                     	;# 
   164  021E                     	;# 
   165  021F                     	;# 
   166  0291                     	;# 
   167  0291                     	;# 
   168  0292                     	;# 
   169  0293                     	;# 
   170  0294                     	;# 
   171  0295                     	;# 
   172  0295                     	;# 
   173  0296                     	;# 
   174  0298                     	;# 
   175  0298                     	;# 
   176  0299                     	;# 
   177  029A                     	;# 
   178  029B                     	;# 
   179  029C                     	;# 
   180  029C                     	;# 
   181  029D                     	;# 
   182  029E                     	;# 
   183  029E                     	;# 
   184  0311                     	;# 
   185  0311                     	;# 
   186  0312                     	;# 
   187  0313                     	;# 
   188  0318                     	;# 
   189  0318                     	;# 
   190  0319                     	;# 
   191  031A                     	;# 
   192  0394                     	;# 
   193  0395                     	;# 
   194  0396                     	;# 
   195  039A                     	;# 
   196  039C                     	;# 
   197  039D                     	;# 
   198  039E                     	;# 
   199  039F                     	;# 
   200  0415                     	;# 
   201  0416                     	;# 
   202  0417                     	;# 
   203  041C                     	;# 
   204  041D                     	;# 
   205  041E                     	;# 
   206  0FE4                     	;# 
   207  0FE5                     	;# 
   208  0FE6                     	;# 
   209  0FE7                     	;# 
   210  0FE8                     	;# 
   211  0FE9                     	;# 
   212  0FEA                     	;# 
   213  0FEB                     	;# 
   214  0FED                     	;# 
   215  0FEE                     	;# 
   216  0FEF                     	;# 
   217  0000                     	;# 
   218  0001                     	;# 
   219  0002                     	;# 
   220  0003                     	;# 
   221  0004                     	;# 
   222  0005                     	;# 
   223  0006                     	;# 
   224  0007                     	;# 
   225  0008                     	;# 
   226  0009                     	;# 
   227  000A                     	;# 
   228  000B                     	;# 
   229  000C                     	;# 
   230  000D                     	;# 
   231  0011                     	;# 
   232  0012                     	;# 
   233  0013                     	;# 
   234  0014                     	;# 
   235  0015                     	;# 
   236  0016                     	;# 
   237  0016                     	;# 
   238  0017                     	;# 
   239  0018                     	;# 
   240  0019                     	;# 
   241  001A                     	;# 
   242  001B                     	;# 
   243  001C                     	;# 
   244  001E                     	;# 
   245  001F                     	;# 
   246  008C                     	;# 
   247  008D                     	;# 
   248  0091                     	;# 
   249  0092                     	;# 
   250  0093                     	;# 
   251  0094                     	;# 
   252  0095                     	;# 
   253  0096                     	;# 
   254  0097                     	;# 
   255  0098                     	;# 
   256  0099                     	;# 
   257  009A                     	;# 
   258  009B                     	;# 
   259  009B                     	;# 
   260  009C                     	;# 
   261  009D                     	;# 
   262  009E                     	;# 
   263  010C                     	;# 
   264  010D                     	;# 
   265  0111                     	;# 
   266  0112                     	;# 
   267  0113                     	;# 
   268  0114                     	;# 
   269  0115                     	;# 
   270  0116                     	;# 
   271  0117                     	;# 
   272  0118                     	;# 
   273  0119                     	;# 
   274  011A                     	;# 
   275  011B                     	;# 
   276  011D                     	;# 
   277  011E                     	;# 
   278  018C                     	;# 
   279  018D                     	;# 
   280  0191                     	;# 
   281  0191                     	;# 
   282  0192                     	;# 
   283  0193                     	;# 
   284  0193                     	;# 
   285  0193                     	;# 
   286  0194                     	;# 
   287  0195                     	;# 
   288  0196                     	;# 
   289  0199                     	;# 
   290  019A                     	;# 
   291  019B                     	;# 
   292  019B                     	;# 
   293  019B                     	;# 
   294  019B                     	;# 
   295  019C                     	;# 
   296  019C                     	;# 
   297  019D                     	;# 
   298  019E                     	;# 
   299  019F                     	;# 
   300  020C                     	;# 
   301  020D                     	;# 
   302  0211                     	;# 
   303  0211                     	;# 
   304  0212                     	;# 
   305  0212                     	;# 
   306  0213                     	;# 
   307  0213                     	;# 
   308  0214                     	;# 
   309  0214                     	;# 
   310  0215                     	;# 
   311  0215                     	;# 
   312  0215                     	;# 
   313  0216                     	;# 
   314  0216                     	;# 
   315  0217                     	;# 
   316  0217                     	;# 
   317  0219                     	;# 
   318  021A                     	;# 
   319  021B                     	;# 
   320  021C                     	;# 
   321  021D                     	;# 
   322  021E                     	;# 
   323  021F                     	;# 
   324  0291                     	;# 
   325  0291                     	;# 
   326  0292                     	;# 
   327  0293                     	;# 
   328  0294                     	;# 
   329  0295                     	;# 
   330  0295                     	;# 
   331  0296                     	;# 
   332  0298                     	;# 
   333  0298                     	;# 
   334  0299                     	;# 
   335  029A                     	;# 
   336  029B                     	;# 
   337  029C                     	;# 
   338  029C                     	;# 
   339  029D                     	;# 
   340  029E                     	;# 
   341  029E                     	;# 
   342  0311                     	;# 
   343  0311                     	;# 
   344  0312                     	;# 
   345  0313                     	;# 
   346  0318                     	;# 
   347  0318                     	;# 
   348  0319                     	;# 
   349  031A                     	;# 
   350  0394                     	;# 
   351  0395                     	;# 
   352  0396                     	;# 
   353  039A                     	;# 
   354  039C                     	;# 
   355  039D                     	;# 
   356  039E                     	;# 
   357  039F                     	;# 
   358  0415                     	;# 
   359  0416                     	;# 
   360  0417                     	;# 
   361  041C                     	;# 
   362  041D                     	;# 
   363  041E                     	;# 
   364  0FE4                     	;# 
   365  0FE5                     	;# 
   366  0FE6                     	;# 
   367  0FE7                     	;# 
   368  0FE8                     	;# 
   369  0FE9                     	;# 
   370  0FEA                     	;# 
   371  0FEB                     	;# 
   372  0FED                     	;# 
   373  0FEE                     	;# 
   374  0FEF                     	;# 
   375  000D                     _PORTB	set	13
   376  000C                     _PORTA	set	12
   377  0064                     _RA4	set	100
   378  0063                     _RA3	set	99
   379  008D                     _TRISB	set	141
   380  008C                     _TRISA	set	140
   381  0099                     _OSCCON	set	153
   382  011E                     _APFCON1	set	286
   383  011D                     _APFCON0	set	285
   384  018D                     _ANSELB	set	397
   385  018C                     _ANSELA	set	396
   386                           
   387                           	psect	stringtext
   388  0800                     __pstringtext:	
   389  0800                     STR_1:	
   390  0800  3448               	retlw	72	;'H'
   391  0801  3465               	retlw	101	;'e'
   392  0802  346C               	retlw	108	;'l'
   393  0803  346C               	retlw	108	;'l'
   394  0804  346F               	retlw	111	;'o'
   395  0805  3477               	retlw	119	;'w'
   396  0806  3420               	retlw	32	;' '
   397  0807  3457               	retlw	87	;'W'
   398  0808  346F               	retlw	111	;'o'
   399  0809  3472               	retlw	114	;'r'
   400  080A  346C               	retlw	108	;'l'
   401  080B  3464               	retlw	100	;'d'
   402  080C  3420               	retlw	32	;' '
   403  080D  3425               	retlw	37	;'%'
   404  080E  3464               	retlw	100	;'d'
   405  080F  3400               	retlw	0
   406  0810                     STR_3:	
   407  0810  3425               	retlw	37	;'%'
   408  0811  3430               	retlw	48	;'0'
   409  0812  3438               	retlw	56	;'8'
   410  0813  346C               	retlw	108	;'l'
   411  0814  3458               	retlw	88	;'X'
   412  0815  3420               	retlw	32	;' '
   413  0816  3400               	retlw	0
   414  0817                     STR_6:	
   415  0817  3420               	retlw	32	;' '
   416  0818  3425               	retlw	37	;'%'
   417  0819  3430               	retlw	48	;'0'
   418  081A  3438               	retlw	56	;'8'
   419  081B  344C               	retlw	76	;'L'
   420  081C  3458               	retlw	88	;'X'
   421  081D  3400               	retlw	0
   422  081E                     STR_4:	
   423  081E  3420               	retlw	32	;' '
   424  081F  3425               	retlw	37	;'%'
   425  0820  3430               	retlw	48	;'0'
   426  0821  3432               	retlw	50	;'2'
   427  0822  3458               	retlw	88	;'X'
   428  0823  3400               	retlw	0
   429  0824                     STR_5:	
   430  0824  3420               	retlw	32	;' '
   431  0825  3425               	retlw	37	;'%'
   432  0826  3430               	retlw	48	;'0'
   433  0827  3434               	retlw	52	;'4'
   434  0828  3458               	retlw	88	;'X'
   435  0829  3400               	retlw	0
   436  082A                     STR_2:	
   437  082A  340D               	retlw	13
   438  082B  3400               	retlw	0
   439                           
   440                           ; #config settings
   441  0000                     
   442                           	psect	cinit
   443  07F8                     start_initialization:	
   444  07F8                     __initialization:	
   445                           
   446                           ; Clear objects allocated to BANK0
   447  07F8  01DA               	clrf	__pbssBANK0& (0+127)
   448  07F9  01DB               	clrf	(__pbssBANK0+1)& (0+127)
   449  07FA  01DC               	clrf	(__pbssBANK0+2)& (0+127)
   450  07FB  01DD               	clrf	(__pbssBANK0+3)& (0+127)
   451  07FC  01DE               	clrf	(__pbssBANK0+4)& (0+127)
   452  07FD                     end_of_initialization:	
   453                           ;End of C runtime variable initialization code
   454                           
   455  07FD                     __end_of__initialization:	
   456  07FD  0020               	movlb	0
   457  07FE  3184  2C46         	ljmp	_main	;jump to C main() function
   458                           
   459                           	psect	bssBANK0
   460  005A                     __pbssBANK0:	
   461  005A                     _xfunc_in:	
   462  005A                     	ds	2
   463  005C                     _xfunc_out:	
   464  005C                     	ds	2
   465  005E                     _outptr:	
   466  005E                     	ds	1
   467                           
   468                           	psect	cstackCOMMON
   469  0070                     __pcstackCOMMON:	
   470  0070                     ?_Basic_Init:	
   471  0070                     ??_Basic_Init:	
   472                           ; 1 bytes @ 0x0
   473                           
   474  0070                     ?_LCD_Init:	
   475                           ; 1 bytes @ 0x0
   476                           
   477  0070                     ?_LCD_DisplayClear:	
   478                           ; 1 bytes @ 0x0
   479                           
   480  0070                     ?_main:	
   481                           ; 1 bytes @ 0x0
   482                           
   483  0070                     ?_LCD_WriteData:	
   484                           ; 1 bytes @ 0x0
   485                           
   486  0070                     ??_LCD_WriteData:	
   487                           ; 1 bytes @ 0x0
   488                           
   489  0070                     ?_xputc:	
   490                           ; 1 bytes @ 0x0
   491                           
   492  0070                     ?_xputs:	
   493                           ; 1 bytes @ 0x0
   494                           
   495  0070                     ?___wmul:	
   496                           ; 1 bytes @ 0x0
   497                           
   498  0070                     ?___lldiv:	
   499                           ; 2 bytes @ 0x0
   500                           
   501  0070                     ?___llmod:	
   502                           ; 4 bytes @ 0x0
   503                           
   504  0070                     ___wmul@multiplier:	
   505                           ; 4 bytes @ 0x0
   506                           
   507  0070                     ___lldiv@divisor:	
   508                           ; 2 bytes @ 0x0
   509                           
   510  0070                     ___llmod@divisor:	
   511                           ; 4 bytes @ 0x0
   512                           
   513                           
   514                           ; 4 bytes @ 0x0
   515  0070                     	ds	2
   516  0072                     LCD_WriteData@point:	
   517  0072                     ___wmul@multiplicand:	
   518                           ; 1 bytes @ 0x2
   519                           
   520                           
   521                           ; 2 bytes @ 0x2
   522  0072                     	ds	1
   523  0073                     ?_LCD_Put:	
   524  0073                     ?_LCD_CursorPosition:	
   525                           ; 1 bytes @ 0x3
   526                           
   527  0073                     ??_LCD_DisplayClear:	
   528                           ; 1 bytes @ 0x3
   529                           
   530  0073                     LCD_Put@word:	
   531                           ; 1 bytes @ 0x3
   532                           
   533  0073                     LCD_CursorPosition@ty:	
   534                           ; 1 bytes @ 0x3
   535                           
   536                           
   537                           ; 1 bytes @ 0x3
   538  0073                     	ds	1
   539  0074                     ??_LCD_Init:	
   540  0074                     ??_LCD_Put:	
   541                           ; 1 bytes @ 0x4
   542                           
   543  0074                     ??_LCD_CursorPosition:	
   544                           ; 1 bytes @ 0x4
   545                           
   546  0074                     ??_xputc:	
   547                           ; 1 bytes @ 0x4
   548                           
   549  0074                     ??___wmul:	
   550                           ; 1 bytes @ 0x4
   551                           
   552  0074                     ___wmul@product:	
   553                           ; 1 bytes @ 0x4
   554                           
   555  0074                     ___lldiv@dividend:	
   556                           ; 2 bytes @ 0x4
   557                           
   558  0074                     ___llmod@dividend:	
   559                           ; 4 bytes @ 0x4
   560                           
   561                           
   562                           ; 4 bytes @ 0x4
   563  0074                     	ds	1
   564  0075                     LCD_CursorPosition@tx:	
   565  0075                     xputc@c:	
   566                           ; 1 bytes @ 0x5
   567                           
   568                           
   569                           ; 1 bytes @ 0x5
   570  0075                     	ds	1
   571  0076                     ??_xputs:	
   572                           
   573                           ; 1 bytes @ 0x6
   574  0076                     	ds	1
   575  0077                     xputs@str:	
   576                           
   577                           ; 1 bytes @ 0x7
   578  0077                     	ds	1
   579  0078                     ??___lldiv:	
   580  0078                     ??___llmod:	
   581                           ; 1 bytes @ 0x8
   582                           
   583                           
   584                           ; 1 bytes @ 0x8
   585  0078                     	ds	1
   586  0079                     ___llmod@counter:	
   587  0079                     ___lldiv@quotient:	
   588                           ; 1 bytes @ 0x9
   589                           
   590                           
   591                           ; 4 bytes @ 0x9
   592  0079                     	ds	4
   593  007D                     ___lldiv@counter:	
   594                           
   595                           ; 1 bytes @ 0xD
   596  007D                     	ds	1
   597  007E                     ??_main:	
   598                           
   599                           	psect	cstackBANK0
   600  0020                     __pcstackBANK0:	
   601                           ; 1 bytes @ 0xE
   602                           
   603  0020                     ?_xvprintf:	
   604  0020                     xvprintf@fmt:	
   605                           ; 1 bytes @ 0x0
   606                           
   607                           
   608                           ; 2 bytes @ 0x0
   609  0020                     	ds	2
   610  0022                     xvprintf@arp:	
   611                           
   612                           ; 1 bytes @ 0x2
   613  0022                     	ds	1
   614  0023                     ??_xvprintf:	
   615                           
   616                           ; 1 bytes @ 0x3
   617  0023                     	ds	4
   618  0027                     xvprintf@s:	
   619                           
   620                           ; 16 bytes @ 0x7
   621  0027                     	ds	16
   622  0037                     _xvprintf$155:	
   623                           
   624                           ; 4 bytes @ 0x17
   625  0037                     	ds	4
   626  003B                     _xvprintf$156:	
   627                           
   628                           ; 2 bytes @ 0x1B
   629  003B                     	ds	2
   630  003D                     _xvprintf$157:	
   631                           
   632                           ; 2 bytes @ 0x1D
   633  003D                     	ds	2
   634  003F                     xvprintf@p:	
   635                           
   636                           ; 1 bytes @ 0x1F
   637  003F                     	ds	1
   638  0040                     xvprintf@r:	
   639                           
   640                           ; 2 bytes @ 0x20
   641  0040                     	ds	2
   642  0042                     xvprintf@w:	
   643                           
   644                           ; 2 bytes @ 0x22
   645  0042                     	ds	2
   646  0044                     xvprintf@j:	
   647                           
   648                           ; 2 bytes @ 0x24
   649  0044                     	ds	2
   650  0046                     xvprintf@v:	
   651                           
   652                           ; 4 bytes @ 0x26
   653  0046                     	ds	4
   654  004A                     xvprintf@f:	
   655                           
   656                           ; 2 bytes @ 0x2A
   657  004A                     	ds	2
   658  004C                     xvprintf@i:	
   659                           
   660                           ; 2 bytes @ 0x2C
   661  004C                     	ds	2
   662  004E                     xvprintf@d:	
   663                           
   664                           ; 1 bytes @ 0x2E
   665  004E                     	ds	1
   666  004F                     xvprintf@c:	
   667                           
   668                           ; 1 bytes @ 0x2F
   669  004F                     	ds	1
   670  0050                     ?_xprintf:	
   671  0050                     xprintf@fmt:	
   672                           ; 1 bytes @ 0x30
   673                           
   674                           
   675                           ; 2 bytes @ 0x30
   676  0050                     	ds	6
   677  0056                     ??_xprintf:	
   678                           
   679                           ; 1 bytes @ 0x36
   680  0056                     	ds	1
   681  0057                     xprintf@arp:	
   682                           
   683                           ; 1 bytes @ 0x37
   684  0057                     	ds	1
   685  0058                     main@i:	
   686                           
   687                           ; 2 bytes @ 0x38
   688  0058                     	ds	2
   689                           
   690                           	psect	maintext
   691  0446                     __pmaintext:	
   692 ;;
   693 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   694 ;;
   695 ;; *************** function _main *****************
   696 ;; Defined at:
   697 ;;		line 12 in file "main.c"
   698 ;; Parameters:    Size  Location     Type
   699 ;;		None
   700 ;; Auto vars:     Size  Location     Type
   701 ;;  i               2   56[BANK0 ] unsigned int 
   702 ;; Return value:  Size  Location     Type
   703 ;;                  1    wreg      char 
   704 ;; Registers used:
   705 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
   706 ;; Tracked objects:
   707 ;;		On entry : B1F/0
   708 ;;		On exit  : 0/0
   709 ;;		Unchanged: 0/0
   710 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
   711 ;;      Params:         0       0       0       0       0       0
   712 ;;      Locals:         0       2       0       0       0       0
   713 ;;      Temps:          0       0       0       0       0       0
   714 ;;      Totals:         0       2       0       0       0       0
   715 ;;Total ram usage:        2 bytes
   716 ;; Hardware stack levels required when called:    6
   717 ;; This function calls:
   718 ;;		_Basic_Init
   719 ;;		_LCD_CursorPosition
   720 ;;		_LCD_Init
   721 ;;		_xprintf
   722 ;; This function is called by:
   723 ;;		Startup code after reset
   724 ;; This function uses a non-reentrant model
   725 ;;
   726                           
   727                           
   728                           ;psect for function _main
   729  0446                     _main:	
   730                           
   731                           ;main.c: 14: Basic_Init();
   732                           
<<<<<<< HEAD
   733                           ;main.c: 16: xfunc_out = (void(*)(unsigned char))(LCD_Put);
   734  043C  30D4               	movlw	low _LCD_Put
   735  043D  0020               	movlb	0	; select bank0
   736  043E  00DA               	movwf	_xfunc_out
   737  043F  3003               	movlw	high _LCD_Put
   738  0440  00DB               	movwf	_xfunc_out+1
   739  0441                     l1681:	
   740                           ;main.c: 18: while(1)
   741                           
   742                           
   743                           ;main.c: 19: {
   744                           ;main.c: 20: LCD_CursorPosition(0,0);
   745  0441  01F3               	clrf	LCD_CursorPosition@ty
   746  0442  3000               	movlw	0
   747  0443  3184  2421  3184   	fcall	_LCD_CursorPosition
   748                           
   749                           ;main.c: 21: xprintf("Hellow World");
   750  0446  3000               	movlw	low (STR_1| (0+32768))
   751  0447  0020               	movlb	0	; select bank0
   752  0448  00D0               	movwf	xprintf@fmt
   753  0449  3088               	movlw	high (STR_1| (0+32768))
   754  044A  00D1               	movwf	xprintf@fmt+1
   755  044B  3183  23E9  3184   	fcall	_xprintf
   756  044E  2C41               	goto	l1681
   757  044F                     __end_of_main:	
   758                           ;main.c: 22: }
   759                           ;main.c: 23: return 0;
   760                           ;	Return value of _main is never used
   761                           
   762                           
   763                           	psect	text1
   764  03E9                     __ptext1:	
   765 ;; *************** function _xprintf *****************
   766 ;; Defined at:
   767 ;;		line 165 in file "xprintf.c"
   768 ;; Parameters:    Size  Location     Type
   769 ;;  fmt             2   48[BANK0 ] PTR const unsigned char 
   770 ;;		 -> STR_6(7), STR_5(6), STR_4(6), STR_3(7), 
   771 ;;		 -> STR_1(13), 
   772 ;; Auto vars:     Size  Location     Type
   773 ;;  arp             1   55[BANK0 ] PTR void [1]
   774 ;;		 -> ?_xfprintf(1), ?_xsprintf(1), ?_xprintf(1), 
   775 ;; Return value:  Size  Location     Type
   776 ;;                  1    wreg      void 
   777 ;; Registers used:
   778 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
   779 ;; Tracked objects:
   780 ;;		On entry : 0/0
   781 ;;		On exit  : 0/0
   782 ;;		Unchanged: 0/0
   783 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
   784 ;;      Params:         0       6       0       0       0       0
   785 ;;      Locals:         0       1       0       0       0       0
   786 ;;      Temps:          0       1       0       0       0       0
   787 ;;      Totals:         0       8       0       0       0       0
   788 ;;Total ram usage:        8 bytes
   789 ;; Hardware stack levels used:    1
   790 ;; Hardware stack levels required when called:    5
   791 ;; This function calls:
   792 ;;		_xvprintf
   793 ;; This function is called by:
   794 ;;		_main
   795 ;;		_put_dump
   796 ;; This function uses a non-reentrant model
   797 ;;
   798                           
   799                           
   800                           ;psect for function _xprintf
   801  03E9                     _xprintf:	
   802                           
   803                           ;xprintf.c: 170: va_list arp;
   804                           ;xprintf.c: 173: *arp = __va_start();
   805                           
   806                           ;incstack = 0
   807                           ; Regs used in _xprintf: [wreg-fsr1h+status,2+status,0+pclath+cstack]
   808  03E9  3052               	movlw	(low ((?_xprintf| 0+2)))& (0+255)
   809  03EA  0020               	movlb	0	; select bank0
   810  03EB  00D6               	movwf	??_xprintf
   811  03EC  0856               	movf	??_xprintf,w
   812  03ED  00D7               	movwf	xprintf@arp
   813                           
   814                           ;xprintf.c: 174: xvprintf(fmt, arp);
   815  03EE  0851               	movf	xprintf@fmt+1,w
   816  03EF  00A1               	movwf	xvprintf@fmt+1
   817  03F0  0850               	movf	xprintf@fmt,w
   818  03F1  00A0               	movwf	xvprintf@fmt
   819  03F2  3057               	movlw	(low (xprintf@arp| 0))& (0+255)
   820  03F3  00D6               	movwf	??_xprintf
   821  03F4  0856               	movf	??_xprintf,w
   822  03F5  00A2               	movwf	xvprintf@arp
   823  03F6  3185  25CE         	fcall	_xvprintf
   824  03F8  0008               	return
   825  03F9                     __end_of_xprintf:	
   826                           
   827                           	psect	text2
   828  05CE                     __ptext2:	
   829 ;; *************** function _xvprintf *****************
   830 ;; Defined at:
   831 ;;		line 88 in file "xprintf.c"
   832 ;; Parameters:    Size  Location     Type
   833 ;;  fmt             2    0[BANK0 ] PTR const unsigned char 
   834 ;;		 -> STR_6(7), STR_5(6), STR_4(6), STR_3(7), 
   835 ;;		 -> STR_1(13), 
   836 ;;  arp             1    2[BANK0 ] PTR PTR void 
   837 ;;		 -> xfprintf@arp(1), xsprintf@arp(1), xprintf@arp(1), 
   838 ;; Auto vars:     Size  Location     Type
   839 ;;  s              16    7[BANK0 ] unsigned char [16]
   840 ;;  v               4   38[BANK0 ] unsigned long 
   841 ;;  i               2   44[BANK0 ] unsigned int 
   842 ;;  f               2   42[BANK0 ] unsigned int 
   843 ;;  j               2   36[BANK0 ] unsigned int 
   844 ;;  w               2   34[BANK0 ] unsigned int 
   845 ;;  r               2   32[BANK0 ] unsigned int 
   846 ;;  c               1   47[BANK0 ] unsigned char 
   847 ;;  d               1   46[BANK0 ] unsigned char 
   848 ;;  p               1   31[BANK0 ] PTR unsigned char 
   849 ;;		 -> ?_xfprintf(1), ?_xsprintf(1), ?_xprintf(1), 
   850 ;; Return value:  Size  Location     Type
   851 ;;                  1    wreg      void 
   852 ;; Registers used:
   853 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
   854 ;; Tracked objects:
   855 ;;		On entry : 0/0
   856 ;;		On exit  : 0/0
   857 ;;		Unchanged: 0/0
   858 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
   859 ;;      Params:         0       3       0       0       0       0
   860 ;;      Locals:         0      41       0       0       0       0
   861 ;;      Temps:          0       4       0       0       0       0
   862 ;;      Totals:         0      48       0       0       0       0
   863 ;;Total ram usage:       48 bytes
   864 ;; Hardware stack levels used:    1
   865 ;; Hardware stack levels required when called:    4
   866 ;; This function calls:
   867 ;;		___lldiv
   868 ;;		___llmod
   869 ;;		___wmul
   870 ;;		_xputc
   871 ;;		_xputs
   872 ;; This function is called by:
   873 ;;		_xprintf
   874 ;;		_xsprintf
   875 ;;		_xfprintf
   876 ;; This function uses a non-reentrant model
   877 ;;
   878                           
   879                           
   880                           ;psect for function _xvprintf
   881  05CE                     _xvprintf:	
   882  05CE                     l108:	
   883                           ;incstack = 0
   884                           ; Regs used in _xvprintf: [wreg-fsr1h+status,2+status,0+pclath+cstack]
   885                           ;xprintf.c: 93: unsigned int r, i, j, w, f;
   886                           ;xprintf.c: 94: unsigned long v;
   887                           ;xprintf.c: 95: char s[16], c, d, *p;
   888                           ;xprintf.c: 98: for (;;) {
   889                           
   890                           
   891                           ;xprintf.c: 99: c = *fmt++;
   892  05CE  0020               	movlb	0	; select bank0
   893  05CF  0820               	movf	xvprintf@fmt,w
   894  05D0  0084               	movwf	4
   895  05D1  0821               	movf	xvprintf@fmt+1,w
   896  05D2  0085               	movwf	5
   897  05D3  0800               	movf	0,w	;code access
   898  05D4  00A3               	movwf	??_xvprintf
   899  05D5  0823               	movf	??_xvprintf,w
   900  05D6  00CF               	movwf	xvprintf@c
   901  05D7  3001               	movlw	1
   902  05D8  07A0               	addwf	xvprintf@fmt,f
   903  05D9  3000               	movlw	0
   904  05DA  3DA1               	addwfc	xvprintf@fmt+1,f
   905                           
   906                           ;xprintf.c: 100: if (!c) break;
   907  05DB  084F               	movf	xvprintf@c,w
   908  05DC  1903               	btfsc	3,2
   909  05DD  0008               	return
   910                           
   911                           ;xprintf.c: 101: if (c != '%') {
   912  05DE  3025               	movlw	37
   913  05DF  064F               	xorwf	xvprintf@c,w
   914  05E0  1903               	btfsc	3,2
   915  05E1  2DE7               	goto	l1423
   916                           
   917                           ;xprintf.c: 102: xputc(c); continue;
   918  05E2  084F               	movf	xvprintf@c,w
   919  05E3  3184  246A  3185   	fcall	_xputc
   920  05E6  2DCE               	goto	l108
   921  05E7                     l1423:	
   922                           
   923                           ;xprintf.c: 103: }
   924                           ;xprintf.c: 104: f = 0;
   925  05E7  0020               	movlb	0	; select bank0
   926  05E8  01CA               	clrf	xvprintf@f
   927  05E9  01CB               	clrf	xvprintf@f+1
   928                           
   929                           ;xprintf.c: 105: c = *fmt++;
   930  05EA  0820               	movf	xvprintf@fmt,w
   931  05EB  0084               	movwf	4
   932  05EC  0821               	movf	xvprintf@fmt+1,w
   933  05ED  0085               	movwf	5
   934  05EE  0800               	movf	0,w	;code access
   935  05EF  00A3               	movwf	??_xvprintf
   936  05F0  0823               	movf	??_xvprintf,w
   937  05F1  00CF               	movwf	xvprintf@c
   938  05F2  3001               	movlw	1
   939  05F3  07A0               	addwf	xvprintf@fmt,f
   940  05F4  3000               	movlw	0
   941  05F5  3DA1               	addwfc	xvprintf@fmt+1,f
   942                           
   943                           ;xprintf.c: 106: if (c == '0') {
   944  05F6  3030               	movlw	48
   945  05F7  064F               	xorwf	xvprintf@c,w
   946  05F8  1D03               	btfss	3,2
   947  05F9  2DFC               	goto	l1437
   948                           
   949                           ;xprintf.c: 107: f = 1; c = *fmt++;
   950  05FA  3001               	movlw	1
   951  05FB  2E01               	goto	L6
   952  05FC                     l1437:	
   953                           ;xprintf.c: 108: } else {
   954                           
   955                           
   956                           ;xprintf.c: 109: if (c == '-') {
   957  05FC  302D               	movlw	45
   958  05FD  064F               	xorwf	xvprintf@c,w
   959  05FE  1D03               	btfss	3,2
   960  05FF  2E10               	goto	l1445
   961                           
   962                           ;xprintf.c: 110: f = 2; c = *fmt++;
   963  0600  3002               	movlw	2
   964  0601                     L6:	
   965  0601  00CA               	movwf	xvprintf@f
   966  0602  3000               	movlw	0
   967  0603  00CB               	movwf	xvprintf@f+1
   968  0604  0820               	movf	xvprintf@fmt,w
   969  0605  0084               	movwf	4
   970  0606  0821               	movf	xvprintf@fmt+1,w
   971  0607  0085               	movwf	5
   972  0608  0800               	movf	0,w	;code access
   973  0609  00A3               	movwf	??_xvprintf
   974  060A  0823               	movf	??_xvprintf,w
   975  060B  00CF               	movwf	xvprintf@c
   976  060C  3001               	movlw	1
   977  060D  07A0               	addwf	xvprintf@fmt,f
   978  060E  3000               	movlw	0
   979  060F  3DA1               	addwfc	xvprintf@fmt+1,f
   980  0610                     l1445:	
   981                           
   982                           ;xprintf.c: 111: }
   983                           ;xprintf.c: 112: }
   984                           ;xprintf.c: 113: for (w = 0; c >= '0' && c <= '9'; c = *fmt++)
   985  0610  01C2               	clrf	xvprintf@w
   986  0611  01C3               	clrf	xvprintf@w+1
   987  0612  2E3A               	goto	l1453
   988  0613                     l1447:	
   989                           
   990                           ;xprintf.c: 114: w = w * 10 + c - '0';
   991  0613  084F               	movf	xvprintf@c,w
   992  0614  00A3               	movwf	??_xvprintf
   993  0615  01A4               	clrf	??_xvprintf+1
   994  0616  0843               	movf	xvprintf@w+1,w
   995  0617  00F1               	movwf	___wmul@multiplier+1
   996  0618  0842               	movf	xvprintf@w,w
   997  0619  00F0               	movwf	___wmul@multiplier
   998  061A  300A               	movlw	10
   999  061B  00F2               	movwf	___wmul@multiplicand
  1000  061C  3000               	movlw	0
  1001  061D  00F3               	movwf	___wmul@multiplicand+1
  1002  061E  3184  244F  3185   	fcall	___wmul
  1003  0621  0020               	movlb	0	; select bank0
  1004  0622  0823               	movf	??_xvprintf,w
  1005  0623  0770               	addwf	?___wmul,w
  1006  0624  00A5               	movwf	??_xvprintf+2
  1007  0625  0824               	movf	??_xvprintf+1,w
  1008  0626  3D71               	addwfc	?___wmul+1,w
  1009  0627  00A6               	movwf	??_xvprintf+3
  1010  0628  0825               	movf	??_xvprintf+2,w
  1011  0629  3ED0               	addlw	208
  1012  062A  00C2               	movwf	xvprintf@w
  1013  062B  30FF               	movlw	255
  1014  062C  3D26               	addwfc	??_xvprintf+3,w
  1015  062D  00C3               	movwf	xvprintf@w+1
  1016  062E  0820               	movf	xvprintf@fmt,w
  1017  062F  0084               	movwf	4
  1018  0630  0821               	movf	xvprintf@fmt+1,w
  1019  0631  0085               	movwf	5
  1020  0632  0800               	movf	0,w	;code access
  1021  0633  00A3               	movwf	??_xvprintf
  1022  0634  0823               	movf	??_xvprintf,w
  1023  0635  00CF               	movwf	xvprintf@c
  1024  0636  3001               	movlw	1
  1025  0637  07A0               	addwf	xvprintf@fmt,f
  1026  0638  3000               	movlw	0
  1027  0639  3DA1               	addwfc	xvprintf@fmt+1,f
  1028  063A                     l1453:	
  1029  063A  3030               	movlw	48
  1030  063B  024F               	subwf	xvprintf@c,w
  1031  063C  1C03               	skipc
  1032  063D  2E42               	goto	l1457
  1033  063E  303A               	movlw	58
  1034  063F  024F               	subwf	xvprintf@c,w
  1035  0640  1C03               	skipc
  1036  0641  2E13               	goto	l1447
  1037  0642                     l1457:	
  1038                           
  1039                           ;xprintf.c: 115: if (c == 'l' || c == 'L') {
  1040  0642  306C               	movlw	108
  1041  0643  064F               	xorwf	xvprintf@c,w
  1042  0644  1903               	btfsc	3,2
  1043  0645  2E4A               	goto	l123
  1044  0646  304C               	movlw	76
  1045  0647  064F               	xorwf	xvprintf@c,w
  1046  0648  1D03               	btfss	3,2
  1047  0649  2E57               	goto	l1465
  1048  064A                     l123:	
  1049                           
  1050                           ;xprintf.c: 116: f |= 4; c = *fmt++;
  1051  064A  154A               	bsf	xvprintf@f,2
  1052  064B  0820               	movf	xvprintf@fmt,w
  1053  064C  0084               	movwf	4
  1054  064D  0821               	movf	xvprintf@fmt+1,w
  1055  064E  0085               	movwf	5
  1056  064F  0800               	movf	0,w	;code access
  1057  0650  00A3               	movwf	??_xvprintf
  1058  0651  0823               	movf	??_xvprintf,w
  1059  0652  00CF               	movwf	xvprintf@c
  1060  0653  3001               	movlw	1
  1061  0654  07A0               	addwf	xvprintf@fmt,f
  1062  0655  3000               	movlw	0
  1063  0656  3DA1               	addwfc	xvprintf@fmt+1,f
  1064  0657                     l1465:	
  1065                           
  1066                           ;xprintf.c: 117: }
  1067                           ;xprintf.c: 118: if (!c) break;
  1068  0657  084F               	movf	xvprintf@c,w
  1069  0658  1903               	btfsc	3,2
  1070  0659  0008               	return
  1071                           
  1072                           ;xprintf.c: 119: d = c;
  1073  065A  084F               	movf	xvprintf@c,w
  1074  065B  00A3               	movwf	??_xvprintf
  1075  065C  0823               	movf	??_xvprintf,w
  1076  065D  00CE               	movwf	xvprintf@d
  1077                           
  1078                           ;xprintf.c: 120: if (d >= 'a') d -= 0x20;
  1079  065E  3061               	movlw	97
  1080  065F  024E               	subwf	xvprintf@d,w
  1081  0660  1C03               	skipc
  1082  0661  2ECD               	goto	l1507
  1083  0662  3020               	movlw	32
  1084  0663  02CE               	subwf	xvprintf@d,f
  1085                           
  1086                           ;xprintf.c: 121: switch (d) {
  1087  0664  2ECD               	goto	l1507
  1088  0665                     l1473:	
  1089                           ;xprintf.c: 122: case 'S' :
  1090                           
  1091                           
  1092                           ;xprintf.c: 123: p = (*(char* *)__va_arg((*(char* **)arp), (char*)0));
  1093  0665  0822               	movf	xvprintf@arp,w
  1094  0666  0086               	movwf	6
  1095  0667  0187               	clrf	7
  1096  0668  3F40               	moviw [0]fsr1
  1097  0669  0084               	movwf	4
  1098  066A  0185               	clrf	5
  1099  066B  0A81               	incf	1,f
  1100  066C  0800               	movf	0,w
  1101  066D  00A3               	movwf	??_xvprintf
  1102  066E  0823               	movf	??_xvprintf,w
  1103  066F  00BF               	movwf	xvprintf@p
  1104                           
  1105                           ;xprintf.c: 124: for (j = 0; p[j]; j++) ;
  1106  0670  01C4               	clrf	xvprintf@j
  1107  0671  01C5               	clrf	xvprintf@j+1
  1108  0672                     l1479:	
  1109  0672  0844               	movf	xvprintf@j,w
  1110  0673  073F               	addwf	xvprintf@p,w
  1111  0674  00A3               	movwf	??_xvprintf
  1112  0675  0823               	movf	??_xvprintf,w
  1113  0676  0086               	movwf	6
  1114  0677  0187               	clrf	7
  1115  0678  0801               	movf	1,w
  1116  0679  1903               	btfsc	3,2
  1117  067A  2E84               	goto	l1483
  1118  067B  3001               	movlw	1
  1119  067C  07C4               	addwf	xvprintf@j,f
  1120  067D  3000               	movlw	0
  1121  067E  3DC5               	addwfc	xvprintf@j+1,f
  1122  067F  2E72               	goto	l1479
  1123  0680                     l1481:	
  1124                           ;xprintf.c: 125: while (!(f & 2) && j++ < w) xputc(' ');
  1125                           
  1126  0680  3020               	movlw	32
  1127  0681  3184  246A  3185   	fcall	_xputc
  1128  0684                     l1483:	
  1129  0684  0020               	movlb	0	; select bank0
  1130  0685  18CA               	btfsc	xvprintf@f,1
  1131  0686  2E96               	goto	l1487
  1132  0687  0845               	movf	xvprintf@j+1,w
  1133  0688  00A4               	movwf	??_xvprintf+1
  1134  0689  0844               	movf	xvprintf@j,w
  1135  068A  00A3               	movwf	??_xvprintf
  1136  068B  0AC4               	incf	xvprintf@j,f
  1137  068C  1903               	skipnz
  1138  068D  0AC5               	incf	xvprintf@j+1,f
  1139  068E  0843               	movf	xvprintf@w+1,w
  1140  068F  0224               	subwf	??_xvprintf+1,w
  1141  0690  1D03               	skipz
  1142  0691  2E94               	goto	u1185
  1143  0692  0842               	movf	xvprintf@w,w
  1144  0693  0223               	subwf	??_xvprintf,w
  1145  0694                     u1185:	
  1146  0694  1C03               	skipc
  1147  0695  2E80               	goto	l1481
  1148  0696                     l1487:	
  1149                           
  1150                           ;xprintf.c: 126: xputs(p);
  1151  0696  083F               	movf	xvprintf@p,w
  1152  0697  3183  23F9  3185   	fcall	_xputs
  1153  069A                     l1491:	
  1154                           ;xprintf.c: 127: while (j++ < w) xputc(' ');
  1155                           
  1156  069A  0020               	movlb	0	; select bank0
  1157  069B  0845               	movf	xvprintf@j+1,w
  1158  069C  00A4               	movwf	??_xvprintf+1
  1159  069D  0844               	movf	xvprintf@j,w
  1160  069E  00A3               	movwf	??_xvprintf
  1161  069F  0AC4               	incf	xvprintf@j,f
  1162  06A0  1903               	skipnz
  1163  06A1  0AC5               	incf	xvprintf@j+1,f
  1164  06A2  0843               	movf	xvprintf@w+1,w
  1165  06A3  0224               	subwf	??_xvprintf+1,w
  1166  06A4  1D03               	skipz
  1167  06A5  2EA8               	goto	u1195
  1168  06A6  0842               	movf	xvprintf@w,w
  1169  06A7  0223               	subwf	??_xvprintf,w
  1170  06A8                     u1195:	
  1171  06A8  1803               	btfsc	3,0
  1172  06A9  2DCE               	goto	l108
  1173  06AA  3020               	movlw	32
  1174  06AB  3184  246A  3185   	fcall	_xputc
  1175  06AE  2E9A               	goto	l1491
  1176  06AF                     l1493:	
  1177                           ;xprintf.c: 129: case 'C' :
  1178                           
  1179                           ;xprintf.c: 128: continue;
  1180                           
  1181                           
  1182                           ;xprintf.c: 130: xputc((char)(*(int *)__va_arg((*(int **)arp), (int)0))); continue;
  1183  06AF  0822               	movf	xvprintf@arp,w
  1184  06B0  0086               	movwf	6
  1185  06B1  0187               	clrf	7
  1186  06B2  0801               	movf	1,w
  1187  06B3  0084               	movwf	4
  1188  06B4  0185               	clrf	5
  1189  06B5  3002               	movlw	2
  1190  06B6  0781               	addwf	1,f
  1191  06B7  0800               	movf	0,w
  1192  06B8  3184  246A  3185   	fcall	_xputc
  1193  06BB  2DCE               	goto	l108
  1194  06BC                     l1495:	
  1195                           ;xprintf.c: 131: case 'B' :
  1196                           
  1197                           
  1198                           ;xprintf.c: 132: r = 2; break;
  1199  06BC  3002               	movlw	2
  1200  06BD  0020               	movlb	0	; select bank0
  1201  06BE  2EC4               	goto	L3
  1202  06BF                     l1497:	
  1203                           ;xprintf.c: 133: case 'O' :
  1204                           
  1205                           
  1206                           ;xprintf.c: 134: r = 8; break;
  1207  06BF  3008               	movlw	8
  1208  06C0  2EC4               	goto	L3
  1209  06C1                     l1499:	
  1210                           ;xprintf.c: 135: case 'D' :
  1211                           
  1212                           
  1213                           ;xprintf.c: 136: case 'U' :
  1214                           ;xprintf.c: 137: r = 10; break;
  1215  06C1  300A               	movlw	10
  1216  06C2  2EC4               	goto	L3
  1217  06C3                     l1501:	
  1218                           ;xprintf.c: 138: case 'X' :
  1219                           
  1220                           
  1221                           ;xprintf.c: 139: r = 16; break;
  1222  06C3  3010               	movlw	16
  1223  06C4                     L3:	
  1224  06C4  00C0               	movwf	xvprintf@r
  1225  06C5  3000               	movlw	0
  1226  06C6  00C1               	movwf	xvprintf@r+1
  1227  06C7  2EE5               	goto	l141
  1228  06C8                     l1503:	
  1229                           ;xprintf.c: 140: default:
  1230                           
  1231                           
  1232                           ;xprintf.c: 141: xputc(c); continue;
  1233  06C8  084F               	movf	xvprintf@c,w
  1234  06C9  3184  246A  3185   	fcall	_xputc
  1235  06CC  2DCE               	goto	l108
  1236  06CD                     l1507:	
  1237                           ;xprintf.c: 142: }
  1238                           
  1239  06CD  0020               	movlb	0	; select bank0
  1240  06CE  084E               	movf	xvprintf@d,w
  1241                           
  1242                           ; Switch size 1, requested type "space"
  1243                           ; Number of cases is 7, Range of values is 66 to 88
  1244                           ; switch strategies available:
  1245                           ; Name         Instructions Cycles
  1246                           ; simple_byte           22    12 (average)
  1247                           ; direct_byte           55     9 (fixed)
  1248                           ; jumptable            263     9 (fixed)
  1249                           ;	Chosen strategy is simple_byte
  1250  06CF  3A42               	xorlw	66	; case 66
  1251  06D0  1903               	skipnz
  1252  06D1  2EBC               	goto	l1495
  1253  06D2  3A01               	xorlw	1	; case 67
  1254  06D3  1903               	skipnz
  1255  06D4  2EAF               	goto	l1493
  1256  06D5  3A07               	xorlw	7	; case 68
  1257  06D6  1903               	skipnz
  1258  06D7  2EC1               	goto	l1499
  1259  06D8  3A0B               	xorlw	11	; case 79
  1260  06D9  1903               	skipnz
  1261  06DA  2EBF               	goto	l1497
  1262  06DB  3A1C               	xorlw	28	; case 83
  1263  06DC  1903               	skipnz
  1264  06DD  2E65               	goto	l1473
  1265  06DE  3A06               	xorlw	6	; case 85
  1266  06DF  1903               	skipnz
  1267  06E0  2EC1               	goto	l1499
  1268  06E1  3A0D               	xorlw	13	; case 88
  1269  06E2  1903               	skipnz
  1270  06E3  2EC3               	goto	l1501
  1271  06E4  2EC8               	goto	l1503
  1272  06E5                     l141:	
  1273                           
  1274                           ;xprintf.c: 145: v = (f & 4) ? (*(long *)__va_arg((*(long **)arp), (long)0)) : ((d == 'D
      +                          ') ? (long)(*(int *)__va_arg((*(int **)arp), (int)0)) : (long)(*(unsigned int *)__va_arg
      +                          ((*(unsigned int **)arp), (unsigned int)0)));
  1275  06E5  0020               	movlb	0	; select bank0
  1276  06E6  194A               	btfsc	xvprintf@f,2
  1277  06E7  2F1D               	goto	l1517
  1278  06E8  3044               	movlw	68
  1279  06E9  064E               	xorwf	xvprintf@d,w
  1280  06EA  1903               	btfsc	3,2
  1281  06EB  2EFF               	goto	l1513
  1282  06EC  0822               	movf	xvprintf@arp,w
  1283  06ED  0086               	movwf	6
  1284  06EE  0187               	clrf	7
  1285  06EF  0801               	movf	1,w
  1286  06F0  0084               	movwf	4
  1287  06F1  0185               	clrf	5
  1288  06F2  3002               	movlw	2
  1289  06F3  0781               	addwf	1,f
  1290  06F4  3F00               	moviw [0]fsr0
  1291  06F5  00A3               	movwf	??_xvprintf
  1292  06F6  3F01               	moviw [1]fsr0
  1293  06F7  00A4               	movwf	??_xvprintf+1
  1294  06F8  0823               	movf	??_xvprintf,w
  1295  06F9  00B7               	movwf	_xvprintf$154
  1296  06FA  0824               	movf	??_xvprintf+1,w
  1297  06FB  00B8               	movwf	_xvprintf$154+1
  1298  06FC  01B9               	clrf	_xvprintf$154+2
  1299  06FD  01BA               	clrf	_xvprintf$154+3
  1300  06FE  2F14               	goto	l1515
  1301  06FF                     l1513:	
  1302  06FF  0822               	movf	xvprintf@arp,w
  1303  0700  0086               	movwf	6
  1304  0701  0187               	clrf	7
  1305  0702  0801               	movf	1,w
  1306  0703  0084               	movwf	4
  1307  0704  0185               	clrf	5
  1308  0705  3002               	movlw	2
  1309  0706  0781               	addwf	1,f
  1310  0707  3F00               	moviw [0]fsr0
  1311  0708  00A3               	movwf	??_xvprintf
  1312  0709  3F01               	moviw [1]fsr0
  1313  070A  00A4               	movwf	??_xvprintf+1
  1314  070B  0823               	movf	??_xvprintf,w
  1315  070C  00B7               	movwf	_xvprintf$154
  1316  070D  0824               	movf	??_xvprintf+1,w
  1317  070E  00B8               	movwf	_xvprintf$154+1
  1318  070F  0D89               	rlf	9,f
  1319  0710  3B89               	subwfb	9,f
  1320  0711  0989               	comf	9,f
  1321  0712  00B9               	movwf	_xvprintf$154+2
  1322  0713  00BA               	movwf	_xvprintf$154+3
  1323  0714                     l1515:	
  1324  0714  083A               	movf	_xvprintf$154+3,w
  1325  0715  00C9               	movwf	xvprintf@v+3
  1326  0716  0839               	movf	_xvprintf$154+2,w
  1327  0717  00C8               	movwf	xvprintf@v+2
  1328  0718  0838               	movf	_xvprintf$154+1,w
  1329  0719  00C7               	movwf	xvprintf@v+1
  1330  071A  0837               	movf	_xvprintf$154,w
  1331  071B  00C6               	movwf	xvprintf@v
  1332  071C  2F2D               	goto	l1519
  1333  071D                     l1517:	
  1334  071D  0822               	movf	xvprintf@arp,w
  1335  071E  0086               	movwf	6
  1336  071F  0187               	clrf	7
  1337  0720  0801               	movf	1,w
  1338  0721  0084               	movwf	4
  1339  0722  0185               	clrf	5
  1340  0723  3004               	movlw	4
  1341  0724  0781               	addwf	1,f
  1342  0725  3F00               	moviw [0]fsr0
  1343  0726  00C6               	movwf	xvprintf@v
  1344  0727  3F01               	moviw [1]fsr0
  1345  0728  00C7               	movwf	xvprintf@v+1
  1346  0729  3F02               	moviw [2]fsr0
  1347  072A  00C8               	movwf	xvprintf@v+2
  1348  072B  3F03               	moviw [3]fsr0
  1349  072C  00C9               	movwf	xvprintf@v+3
  1350  072D                     l1519:	
  1351                           
  1352                           ;xprintf.c: 146: if (d == 'D' && (v & 0x80000000)) {
  1353  072D  3044               	movlw	68
  1354  072E  064E               	xorwf	xvprintf@d,w
  1355  072F  1903               	btfsc	3,2
  1356  0730  1FC9               	btfss	xvprintf@v+3,7
  1357  0731  2F3E               	goto	l1525
  1358                           
  1359                           ;xprintf.c: 147: v = 0 - v;
  1360  0732  09C6               	comf	xvprintf@v,f
  1361  0733  09C7               	comf	xvprintf@v+1,f
  1362  0734  09C8               	comf	xvprintf@v+2,f
  1363  0735  09C9               	comf	xvprintf@v+3,f
  1364  0736  0AC6               	incf	xvprintf@v,f
  1365  0737  1903               	skipnz
  1366  0738  0AC7               	incf	xvprintf@v+1,f
  1367  0739  1903               	skipnz
  1368  073A  0AC8               	incf	xvprintf@v+2,f
  1369  073B  1903               	skipnz
  1370  073C  0AC9               	incf	xvprintf@v+3,f
  1371                           
  1372                           ;xprintf.c: 148: f |= 8;
  1373  073D  15CA               	bsf	xvprintf@f,3
  1374  073E                     l1525:	
  1375                           
  1376                           ;xprintf.c: 149: }
  1377                           ;xprintf.c: 150: i = 0;
  1378  073E  01CC               	clrf	xvprintf@i
  1379  073F  01CD               	clrf	xvprintf@i+1
  1380  0740                     l1527:	
  1381                           ;xprintf.c: 151: do {
  1382                           
  1383                           
  1384                           ;xprintf.c: 152: d = (char)(v % r); v /= r;
  1385  0740  0840               	movf	xvprintf@r,w
  1386  0741  00F0               	movwf	___llmod@divisor
  1387  0742  0841               	movf	xvprintf@r+1,w
  1388  0743  00F1               	movwf	___llmod@divisor+1
  1389  0744  01F2               	clrf	___llmod@divisor+2
  1390  0745  01F3               	clrf	___llmod@divisor+3
  1391  0746  0849               	movf	xvprintf@v+3,w
  1392  0747  00F7               	movwf	___llmod@dividend+3
  1393  0748  0848               	movf	xvprintf@v+2,w
  1394  0749  00F6               	movwf	___llmod@dividend+2
  1395  074A  0847               	movf	xvprintf@v+1,w
  1396  074B  00F5               	movwf	___llmod@dividend+1
  1397  074C  0846               	movf	xvprintf@v,w
  1398  074D  00F4               	movwf	___llmod@dividend
  1399  074E  3184  24D1  3185   	fcall	___llmod
  1400  0751  0870               	movf	?___llmod,w
  1401  0752  0020               	movlb	0	; select bank0
  1402  0753  00A3               	movwf	??_xvprintf
  1403  0754  0823               	movf	??_xvprintf,w
  1404  0755  00CE               	movwf	xvprintf@d
  1405  0756  0840               	movf	xvprintf@r,w
  1406  0757  00F0               	movwf	___lldiv@divisor
  1407  0758  0841               	movf	xvprintf@r+1,w
  1408  0759  00F1               	movwf	___lldiv@divisor+1
  1409  075A  01F2               	clrf	___lldiv@divisor+2
  1410  075B  01F3               	clrf	___lldiv@divisor+3
  1411  075C  0849               	movf	xvprintf@v+3,w
  1412  075D  00F7               	movwf	___lldiv@dividend+3
  1413  075E  0848               	movf	xvprintf@v+2,w
  1414  075F  00F6               	movwf	___lldiv@dividend+2
  1415  0760  0847               	movf	xvprintf@v+1,w
  1416  0761  00F5               	movwf	___lldiv@dividend+1
  1417  0762  0846               	movf	xvprintf@v,w
  1418  0763  00F4               	movwf	___lldiv@dividend
  1419  0764  3185  2513  3185   	fcall	___lldiv
  1420  0767  0873               	movf	?___lldiv+3,w
  1421  0768  0020               	movlb	0	; select bank0
  1422  0769  00C9               	movwf	xvprintf@v+3
  1423  076A  0872               	movf	?___lldiv+2,w
  1424  076B  00C8               	movwf	xvprintf@v+2
  1425  076C  0871               	movf	?___lldiv+1,w
  1426  076D  00C7               	movwf	xvprintf@v+1
  1427  076E  0870               	movf	?___lldiv,w
  1428  076F  00C6               	movwf	xvprintf@v
  1429                           
  1430                           ;xprintf.c: 153: if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
  1431  0770  300A               	movlw	10
  1432  0771  024E               	subwf	xvprintf@d,w
  1433  0772  1C03               	skipc
  1434  0773  2F82               	goto	l1541
  1435  0774  3078               	movlw	120
  1436  0775  064F               	xorwf	xvprintf@c,w
  1437  0776  1903               	btfsc	3,2
  1438  0777  2F7A               	goto	l1537
  1439  0778  3007               	movlw	7
  1440  0779  2F7B               	goto	L4
  1441  077A                     l1537:	
  1442  077A  3027               	movlw	39
  1443  077B                     L4:	
  1444  077B  00BB               	movwf	_xvprintf$155
  1445  077C  3000               	movlw	0
  1446  077D  00BC               	movwf	_xvprintf$155+1
  1447  077E  083B               	movf	_xvprintf$155,w
  1448  077F  00A3               	movwf	??_xvprintf
  1449  0780  0823               	movf	??_xvprintf,w
  1450  0781  07CE               	addwf	xvprintf@d,f
  1451  0782                     l1541:	
  1452                           
  1453                           ;xprintf.c: 154: s[i++] = d + '0';
  1454  0782  084E               	movf	xvprintf@d,w
  1455  0783  3E30               	addlw	48
  1456  0784  00A3               	movwf	??_xvprintf
  1457  0785  084C               	movf	xvprintf@i,w
  1458  0786  3E27               	addlw	(low (xvprintf@s| 0))& (0+255)
  1459  0787  0086               	movwf	6
  1460  0788  0187               	clrf	7
  1461  0789  0823               	movf	??_xvprintf,w
  1462  078A  0081               	movwf	1
  1463  078B  3001               	movlw	1
  1464  078C  07CC               	addwf	xvprintf@i,f
  1465  078D  3000               	movlw	0
  1466  078E  3DCD               	addwfc	xvprintf@i+1,f
  1467                           
  1468                           ;xprintf.c: 155: } while (v && i < sizeof(s));
  1469  078F  0849               	movf	xvprintf@v+3,w
  1470  0790  0448               	iorwf	xvprintf@v+2,w
  1471  0791  0447               	iorwf	xvprintf@v+1,w
  1472  0792  0446               	iorwf	xvprintf@v,w
  1473  0793  1903               	skipnz
  1474  0794  2F9C               	goto	l164
  1475  0795  3000               	movlw	0
  1476  0796  024D               	subwf	xvprintf@i+1,w
  1477  0797  3010               	movlw	16
  1478  0798  1903               	skipnz
  1479  0799  024C               	subwf	xvprintf@i,w
  1480  079A  1C03               	skipc
  1481  079B  2F40               	goto	l1527
  1482  079C                     l164:	
  1483                           
  1484                           ;xprintf.c: 156: if (f & 8) s[i++] = '-';
  1485  079C  1DCA               	btfss	xvprintf@f,3
  1486  079D  2FAA               	goto	l1553
  1487  079E  302D               	movlw	45
  1488  079F  00A3               	movwf	??_xvprintf
  1489  07A0  084C               	movf	xvprintf@i,w
  1490  07A1  3E27               	addlw	(low (xvprintf@s| 0))& (0+255)
  1491  07A2  0086               	movwf	6
  1492  07A3  0187               	clrf	7
  1493  07A4  0823               	movf	??_xvprintf,w
  1494  07A5  0081               	movwf	1
  1495  07A6  3001               	movlw	1
  1496  07A7  07CC               	addwf	xvprintf@i,f
  1497  07A8  3000               	movlw	0
  1498  07A9  3DCD               	addwfc	xvprintf@i+1,f
  1499  07AA                     l1553:	
  1500                           
  1501                           ;xprintf.c: 157: j = i; d = (f & 1) ? '0' : ' ';
  1502  07AA  084D               	movf	xvprintf@i+1,w
  1503  07AB  00C5               	movwf	xvprintf@j+1
  1504  07AC  084C               	movf	xvprintf@i,w
  1505  07AD  00C4               	movwf	xvprintf@j
  1506  07AE  184A               	btfsc	xvprintf@f,0
  1507  07AF  2FB2               	goto	l1559
  1508  07B0  3020               	movlw	32
  1509  07B1  2FB3               	goto	L5
  1510  07B2                     l1559:	
  1511  07B2  3030               	movlw	48
  1512  07B3                     L5:	
  1513  07B3  00BD               	movwf	_xvprintf$156
  1514  07B4  3000               	movlw	0
  1515  07B5  00BE               	movwf	_xvprintf$156+1
  1516  07B6  083D               	movf	_xvprintf$156,w
  1517  07B7  00A3               	movwf	??_xvprintf
  1518  07B8  0823               	movf	??_xvprintf,w
  1519  07B9  00CE               	movwf	xvprintf@d
  1520                           
  1521                           ;xprintf.c: 158: while (!(f & 2) && j++ < w) xputc(d);
  1522  07BA  2FBF               	goto	l1563
  1523  07BB                     l1561:	
  1524  07BB  084E               	movf	xvprintf@d,w
  1525  07BC  3184  246A  3185   	fcall	_xputc
  1526  07BF                     l1563:	
  1527  07BF  0020               	movlb	0	; select bank0
  1528  07C0  18CA               	btfsc	xvprintf@f,1
  1529  07C1  2FD1               	goto	l1567
  1530  07C2  0845               	movf	xvprintf@j+1,w
  1531  07C3  00A4               	movwf	??_xvprintf+1
  1532  07C4  0844               	movf	xvprintf@j,w
  1533  07C5  00A3               	movwf	??_xvprintf
  1534  07C6  0AC4               	incf	xvprintf@j,f
  1535  07C7  1903               	skipnz
  1536  07C8  0AC5               	incf	xvprintf@j+1,f
  1537  07C9  0843               	movf	xvprintf@w+1,w
  1538  07CA  0224               	subwf	??_xvprintf+1,w
  1539  07CB  1D03               	skipz
  1540  07CC  2FCF               	goto	u1315
  1541  07CD  0842               	movf	xvprintf@w,w
  1542  07CE  0223               	subwf	??_xvprintf,w
  1543  07CF                     u1315:	
  1544  07CF  1C03               	skipc
  1545  07D0  2FBB               	goto	l1561
  1546  07D1                     l1567:	
  1547                           ;xprintf.c: 159: do xputc(s[--i]); while(i);
  1548                           
  1549  07D1  3001               	movlw	1
  1550  07D2  02CC               	subwf	xvprintf@i,f
  1551  07D3  3000               	movlw	0
  1552  07D4  3BCD               	subwfb	xvprintf@i+1,f
  1553  07D5  084C               	movf	xvprintf@i,w
  1554  07D6  3E27               	addlw	(low (xvprintf@s| 0))& (0+255)
  1555  07D7  0086               	movwf	6
  1556  07D8  0187               	clrf	7
  1557  07D9  0801               	movf	1,w
  1558  07DA  3184  246A  3185   	fcall	_xputc
  1559  07DD  0020               	movlb	0	; select bank0
  1560  07DE  084C               	movf	xvprintf@i,w
  1561  07DF  044D               	iorwf	xvprintf@i+1,w
  1562  07E0  1903               	btfsc	3,2
  1563  07E1  2FE7               	goto	l1573
  1564  07E2  2FD1               	goto	l1567
  1565  07E3                     l1571:	
  1566                           ;xprintf.c: 160: while (j++ < w) xputc(' ');
  1567                           
  1568  07E3  3020               	movlw	32
  1569  07E4  3184  246A  3185   	fcall	_xputc
  1570  07E7                     l1573:	
  1571  07E7  0020               	movlb	0	; select bank0
  1572  07E8  0845               	movf	xvprintf@j+1,w
  1573  07E9  00A4               	movwf	??_xvprintf+1
  1574  07EA  0844               	movf	xvprintf@j,w
  1575  07EB  00A3               	movwf	??_xvprintf
  1576  07EC  0AC4               	incf	xvprintf@j,f
  1577  07ED  1903               	skipnz
  1578  07EE  0AC5               	incf	xvprintf@j+1,f
  1579  07EF  0843               	movf	xvprintf@w+1,w
  1580  07F0  0224               	subwf	??_xvprintf+1,w
  1581  07F1  1D03               	skipz
  1582  07F2  2FF5               	goto	u1335
  1583  07F3  0842               	movf	xvprintf@w,w
  1584  07F4  0223               	subwf	??_xvprintf,w
  1585  07F5                     u1335:	
  1586  07F5  1803               	btfsc	3,0
  1587  07F6  2DCE               	goto	l108
  1588  07F7  2FE3               	goto	l1571
  1589  07F8                     __end_of_xvprintf:	
  1590                           ;xprintf.c: 161: }
  1591                           
  1592                           
  1593                           	psect	text3
  1594  03F9                     __ptext3:	
  1595 ;; *************** function _xputs *****************
  1596 ;; Defined at:
  1597 ;;		line 44 in file "xprintf.c"
  1598 ;; Parameters:    Size  Location     Type
  1599 ;;  str             1    wreg     PTR const unsigned char 
  1600 ;;		 -> ?_xfprintf(1), ?_xsprintf(1), ?_xprintf(1), 
  1601 ;; Auto vars:     Size  Location     Type
  1602 ;;  str             1    7[COMMON] PTR const unsigned char 
  1603 ;;		 -> ?_xfprintf(1), ?_xsprintf(1), ?_xprintf(1), 
  1604 ;; Return value:  Size  Location     Type
  1605 ;;                  1    wreg      void 
  1606 ;; Registers used:
  1607 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  1608 ;; Tracked objects:
  1609 ;;		On entry : 0/0
  1610 ;;		On exit  : 0/0
  1611 ;;		Unchanged: 0/0
  1612 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  1613 ;;      Params:         0       0       0       0       0       0
  1614 ;;      Locals:         1       0       0       0       0       0
  1615 ;;      Temps:          1       0       0       0       0       0
  1616 ;;      Totals:         2       0       0       0       0       0
  1617 ;;Total ram usage:        2 bytes
  1618 ;; Hardware stack levels used:    1
  1619 ;; Hardware stack levels required when called:    3
  1620 ;; This function calls:
  1621 ;;		_xputc
  1622 ;; This function is called by:
  1623 ;;		_xvprintf
  1624 ;; This function uses a non-reentrant model
  1625 ;;
  1626                           
  1627                           
  1628                           ;psect for function _xputs
  1629  03F9                     _xputs:	
  1630                           
  1631                           ;incstack = 0
  1632                           ; Regs used in _xputs: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  1633                           ;xputs@str stored from wreg
  1634  03F9  00F7               	movwf	xputs@str
  1635  03FA                     l1345:	
  1636                           ;xprintf.c: 48: while (*str)
  1637                           
  1638  03FA  0877               	movf	xputs@str,w
  1639  03FB  0086               	movwf	6
  1640  03FC  0187               	clrf	7
  1641  03FD  0801               	movf	1,w
  1642  03FE  1903               	btfsc	3,2
  1643  03FF  0008               	return
  1644                           
  1645                           ;xprintf.c: 49: xputc(*str++);
  1646  0400  0877               	movf	xputs@str,w
  1647  0401  0086               	movwf	6
  1648  0402  0187               	clrf	7
  1649  0403  0801               	movf	1,w
  1650  0404  3184  246A  3183   	fcall	_xputc
  1651  0407  3001               	movlw	1
  1652  0408  00F6               	movwf	??_xputs
  1653  0409  0876               	movf	??_xputs,w
  1654  040A  07F7               	addwf	xputs@str,f
  1655  040B  2BFA               	goto	l1345
  1656  040C                     __end_of_xputs:	
  1657                           
  1658                           	psect	text4
  1659  046A                     __ptext4:	
  1660 ;; *************** function _xputc *****************
  1661 ;; Defined at:
  1662 ;;		line 26 in file "xprintf.c"
  1663 ;; Parameters:    Size  Location     Type
  1664 ;;  c               1    wreg     unsigned char 
  1665 ;; Auto vars:     Size  Location     Type
  1666 ;;  c               1    5[COMMON] unsigned char 
  1667 ;; Return value:  Size  Location     Type
  1668 ;;                  1    wreg      void 
  1669 ;; Registers used:
  1670 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  1671 ;; Tracked objects:
  1672 ;;		On entry : 0/0
  1673 ;;		On exit  : 0/0
  1674 ;;		Unchanged: 0/0
  1675 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  1676 ;;      Params:         0       0       0       0       0       0
  1677 ;;      Locals:         1       0       0       0       0       0
  1678 ;;      Temps:          1       0       0       0       0       0
  1679 ;;      Totals:         2       0       0       0       0       0
  1680 ;;Total ram usage:        2 bytes
  1681 ;; Hardware stack levels used:    1
  1682 ;; Hardware stack levels required when called:    2
  1683 ;; This function calls:
  1684 ;;		Absolute function
  1685 ;;		_LCD_Put
  1686 ;; This function is called by:
  1687 ;;		_xputs
  1688 ;;		_xvprintf
  1689 ;;		_xfputs
  1690 ;;		_put_dump
  1691 ;;		_xgets
  1692 ;; This function uses a non-reentrant model
  1693 ;;
  1694                           
  1695                           
  1696                           ;psect for function _xputc
  1697  046A                     _xputc:	
  1698                           
  1699                           ;incstack = 0
  1700                           ; Regs used in _xputc: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  1701                           ;xputc@c stored from wreg
  1702  046A  00F5               	movwf	xputc@c
  1703  046B  300A               	movlw	10
  1704  046C  0675               	xorwf	xputc@c,w
  1705  046D  1D03               	btfss	3,2
  1706  046E  2C79               	goto	l1327
  1707  046F  3027               	movlw	(low (STR_2| (0+32768)))& (0+255)
  1708  0470  00F4               	movwf	??_xputc
  1709  0471  0874               	movf	??_xputc,w
  1710  0472  00F3               	movwf	LCD_Put@word
  1711  0473  0020               	movlb	0	; select bank0
  1712  0474  085B               	movf	_xfunc_out+1,w
  1713  0475  008A               	movwf	10
  1714  0476  085A               	movf	_xfunc_out,w
  1715  0477  000A               	callw
  1716  0478  3184               	pagesel	$
  1717  0479                     l1327:	
  1718                           
  1719                           ;xprintf.c: 30: if (outptr) {
  1720  0479  0020               	movlb	0	; select bank0
  1721  047A  085C               	movf	_outptr,w
  1722  047B  1903               	btfsc	3,2
  1723  047C  2C89               	goto	l1335
  1724                           
  1725                           ;xprintf.c: 31: *outptr++ = (unsigned char)c;
  1726  047D  0875               	movf	xputc@c,w
  1727  047E  00F4               	movwf	??_xputc
  1728  047F  085C               	movf	_outptr,w
  1729  0480  0086               	movwf	6
  1730  0481  0187               	clrf	7
  1731  0482  0874               	movf	??_xputc,w
  1732  0483  0081               	movwf	1
  1733  0484  3001               	movlw	1
  1734  0485  00F4               	movwf	??_xputc
  1735  0486  0874               	movf	??_xputc,w
  1736  0487  07DC               	addwf	_outptr,f
  1737                           
  1738                           ;xprintf.c: 32: return;
  1739  0488  0008               	return
  1740  0489                     l1335:	
  1741                           
  1742                           ;xprintf.c: 33: }
  1743                           ;xprintf.c: 35: if (xfunc_out) xfunc_out((unsigned char)c);
  1744  0489  085A               	movf	_xfunc_out,w
  1745  048A  045B               	iorwf	_xfunc_out+1,w
  1746  048B  1903               	btfsc	3,2
  1747  048C  0008               	return
  1748  048D  0875               	movf	xputc@c,w
  1749  048E  00F4               	movwf	??_xputc
  1750  048F  0874               	movf	??_xputc,w
  1751  0490  00F3               	movwf	LCD_Put@word
  1752  0491  085B               	movf	_xfunc_out+1,w
  1753  0492  008A               	movwf	10
  1754  0493  085A               	movf	_xfunc_out,w
  1755  0494  000A               	callw
  1756  0495  3184               	pagesel	$
  1757  0496  0008               	return
  1758  0497                     __end_of_xputc:	
  1759                           
  1760                           	psect	text5
  1761  03D4                     __ptext5:	
  1762 ;; *************** function _LCD_Put *****************
  1763 ;; Defined at:
  1764 ;;		line 54 in file "LCD.c"
  1765 ;; Parameters:    Size  Location     Type
  1766 ;;  word            1    3[COMMON] char 
  1767 ;; Auto vars:     Size  Location     Type
  1768 ;;		None
  1769 ;; Return value:  Size  Location     Type
  1770 ;;                  1    wreg      void 
  1771 ;; Registers used:
  1772 ;;		wreg, status,2, status,0, pclath, cstack
  1773 ;; Tracked objects:
  1774 ;;		On entry : 0/0
  1775 ;;		On exit  : 0/0
  1776 ;;		Unchanged: 0/0
  1777 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  1778 ;;      Params:         1       0       0       0       0       0
  1779 ;;      Locals:         0       0       0       0       0       0
  1780 ;;      Temps:          0       0       0       0       0       0
  1781 ;;      Totals:         1       0       0       0       0       0
  1782 ;;Total ram usage:        1 bytes
  1783 ;; Hardware stack levels used:    1
  1784 ;; Hardware stack levels required when called:    1
  1785 ;; This function calls:
  1786 ;;		_LCD_WriteData
  1787 ;; This function is called by:
  1788 ;;		_main
  1789 ;;		_xputc
  1790 ;; This function uses a non-reentrant model
  1791 ;;
  1792                           
  1793                           
  1794                           ;psect for function _LCD_Put
  1795  03D4                     _LCD_Put:	
  1796                           
  1797                           ;LCD.c: 56: RA4 = 1;
  1798                           
  1799                           ;incstack = 0
  1800                           ; Regs used in _LCD_Put: [wreg+status,2+status,0+pclath+cstack]
  1801  03D4  0020               	movlb	0	; select bank0
  1802  03D5  160C               	bsf	12,4	;volatile
  1803                           
  1804                           ;LCD.c: 57: LCD_WriteData(word);
  1805  03D6  0873               	movf	LCD_Put@word,w
  1806  03D7  3184  2497         	fcall	_LCD_WriteData
  1807  03D9  0008               	return
  1808  03DA                     __end_of_LCD_Put:	
  1809                           
  1810                           	psect	text6
  1811  044F                     __ptext6:	
  1812 ;; *************** function ___wmul *****************
  1813 ;; Defined at:
  1814 ;;		line 15 in file "/opt/microchip/xc8/v1.41/sources/common/Umul16.c"
  1815 ;; Parameters:    Size  Location     Type
  1816 ;;  multiplier      2    0[COMMON] unsigned int 
  1817 ;;  multiplicand    2    2[COMMON] unsigned int 
  1818 ;; Auto vars:     Size  Location     Type
  1819 ;;  product         2    4[COMMON] unsigned int 
  1820 ;; Return value:  Size  Location     Type
  1821 ;;                  2    0[COMMON] unsigned int 
  1822 ;; Registers used:
  1823 ;;		wreg, status,2, status,0
  1824 ;; Tracked objects:
  1825 ;;		On entry : 0/0
  1826 ;;		On exit  : 0/0
  1827 ;;		Unchanged: 0/0
  1828 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  1829 ;;      Params:         4       0       0       0       0       0
  1830 ;;      Locals:         2       0       0       0       0       0
  1831 ;;      Temps:          0       0       0       0       0       0
  1832 ;;      Totals:         6       0       0       0       0       0
  1833 ;;Total ram usage:        6 bytes
  1834 ;; Hardware stack levels used:    1
  1835 ;; This function calls:
  1836 ;;		Nothing
  1837 ;; This function is called by:
  1838 ;;		_xvprintf
  1839 ;; This function uses a non-reentrant model
  1840 ;;
  1841                           
  1842                           
  1843                           ;psect for function ___wmul
  1844  044F                     ___wmul:	
  1845                           
  1846                           ;incstack = 0
  1847                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  1848  044F  01F4               	clrf	___wmul@product
  1849  0450  01F5               	clrf	___wmul@product+1
  1850  0451                     l1349:	
  1851  0451  1C70               	btfss	___wmul@multiplier,0
  1852  0452  2C57               	goto	l345
  1853  0453  0872               	movf	___wmul@multiplicand,w
  1854  0454  07F4               	addwf	___wmul@product,f
  1855  0455  0873               	movf	___wmul@multiplicand+1,w
  1856  0456  3DF5               	addwfc	___wmul@product+1,f
  1857  0457                     l345:	
  1858  0457  3001               	movlw	1
  1859  0458                     u905:	
  1860  0458  35F2               	lslf	___wmul@multiplicand,f
  1861  0459  0DF3               	rlf	___wmul@multiplicand+1,f
  1862  045A  0B89               	decfsz	9,f
  1863  045B  2C58               	goto	u905
  1864  045C  3001               	movlw	1
  1865  045D                     u915:	
  1866  045D  36F1               	lsrf	___wmul@multiplier+1,f
  1867  045E  0CF0               	rrf	___wmul@multiplier,f
  1868  045F  0B89               	decfsz	9,f
  1869  0460  2C5D               	goto	u915
  1870  0461  0870               	movf	___wmul@multiplier,w
  1871  0462  0471               	iorwf	___wmul@multiplier+1,w
  1872  0463  1D03               	btfss	3,2
  1873  0464  2C51               	goto	l1349
  1874  0465  0875               	movf	___wmul@product+1,w
  1875  0466  00F1               	movwf	?___wmul+1
  1876  0467  0874               	movf	___wmul@product,w
  1877  0468  00F0               	movwf	?___wmul
  1878  0469  0008               	return
  1879  046A                     __end_of___wmul:	
  1880                           
  1881                           	psect	text7
  1882  04D1                     __ptext7:	
  1883 ;; *************** function ___llmod *****************
  1884 ;; Defined at:
  1885 ;;		line 6 in file "/opt/microchip/xc8/v1.41/sources/common/llmod.c"
  1886 ;; Parameters:    Size  Location     Type
  1887 ;;  divisor         4    0[COMMON] unsigned long 
  1888 ;;  dividend        4    4[COMMON] unsigned long 
  1889 ;; Auto vars:     Size  Location     Type
  1890 ;;  counter         1    9[COMMON] unsigned char 
  1891 ;; Return value:  Size  Location     Type
  1892 ;;                  4    0[COMMON] unsigned long 
  1893 ;; Registers used:
  1894 ;;		wreg, status,2, status,0
  1895 ;; Tracked objects:
  1896 ;;		On entry : 0/0
  1897 ;;		On exit  : 0/0
  1898 ;;		Unchanged: 0/0
  1899 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  1900 ;;      Params:         8       0       0       0       0       0
  1901 ;;      Locals:         1       0       0       0       0       0
  1902 ;;      Temps:          1       0       0       0       0       0
  1903 ;;      Totals:        10       0       0       0       0       0
  1904 ;;Total ram usage:       10 bytes
  1905 ;; Hardware stack levels used:    1
  1906 ;; This function calls:
  1907 ;;		Nothing
  1908 ;; This function is called by:
  1909 ;;		_xvprintf
  1910 ;; This function uses a non-reentrant model
  1911 ;;
  1912                           
  1913                           
  1914                           ;psect for function ___llmod
  1915  04D1                     ___llmod:	
  1916                           
  1917                           ;incstack = 0
  1918                           ; Regs used in ___llmod: [wreg+status,2+status,0]
  1919  04D1  0873               	movf	___llmod@divisor+3,w
  1920  04D2  0472               	iorwf	___llmod@divisor+2,w
  1921  04D3  0471               	iorwf	___llmod@divisor+1,w
  1922  04D4  0470               	iorwf	___llmod@divisor,w
  1923  04D5  1903               	skipnz
  1924  04D6  2D0A               	goto	l1401
  1925  04D7  01F9               	clrf	___llmod@counter
  1926  04D8  0AF9               	incf	___llmod@counter,f
  1927  04D9                     l1391:	
  1928  04D9  1BF3               	btfsc	___llmod@divisor+3,7
  1929  04DA  2CE7               	goto	l1393
  1930  04DB  3001               	movlw	1
  1931  04DC                     u1015:	
  1932  04DC  35F0               	lslf	___llmod@divisor,f
  1933  04DD  0DF1               	rlf	___llmod@divisor+1,f
  1934  04DE  0DF2               	rlf	___llmod@divisor+2,f
  1935  04DF  0DF3               	rlf	___llmod@divisor+3,f
  1936  04E0  0B89               	decfsz	9,f
  1937  04E1  2CDC               	goto	u1015
  1938  04E2  3001               	movlw	1
  1939  04E3  00F8               	movwf	??___llmod
  1940  04E4  0878               	movf	??___llmod,w
  1941  04E5  07F9               	addwf	___llmod@counter,f
  1942  04E6  2CD9               	goto	l1391
  1943  04E7                     l1393:	
  1944  04E7  0873               	movf	___llmod@divisor+3,w
  1945  04E8  0277               	subwf	___llmod@dividend+3,w
  1946  04E9  1D03               	skipz
  1947  04EA  2CF5               	goto	u1035
  1948  04EB  0872               	movf	___llmod@divisor+2,w
  1949  04EC  0276               	subwf	___llmod@dividend+2,w
  1950  04ED  1D03               	skipz
  1951  04EE  2CF5               	goto	u1035
  1952  04EF  0871               	movf	___llmod@divisor+1,w
  1953  04F0  0275               	subwf	___llmod@dividend+1,w
  1954  04F1  1D03               	skipz
  1955  04F2  2CF5               	goto	u1035
  1956  04F3  0870               	movf	___llmod@divisor,w
  1957  04F4  0274               	subwf	___llmod@dividend,w
  1958  04F5                     u1035:	
  1959  04F5  1C03               	skipc
  1960  04F6  2CFF               	goto	l1397
  1961  04F7  0870               	movf	___llmod@divisor,w
  1962  04F8  02F4               	subwf	___llmod@dividend,f
  1963  04F9  0871               	movf	___llmod@divisor+1,w
  1964  04FA  3BF5               	subwfb	___llmod@dividend+1,f
  1965  04FB  0872               	movf	___llmod@divisor+2,w
  1966  04FC  3BF6               	subwfb	___llmod@dividend+2,f
  1967  04FD  0873               	movf	___llmod@divisor+3,w
  1968  04FE  3BF7               	subwfb	___llmod@dividend+3,f
  1969  04FF                     l1397:	
  1970  04FF  3001               	movlw	1
  1971  0500                     u1045:	
  1972  0500  36F3               	lsrf	___llmod@divisor+3,f
  1973  0501  0CF2               	rrf	___llmod@divisor+2,f
  1974  0502  0CF1               	rrf	___llmod@divisor+1,f
  1975  0503  0CF0               	rrf	___llmod@divisor,f
  1976  0504  0B89               	decfsz	9,f
  1977  0505  2D00               	goto	u1045
  1978  0506  3001               	movlw	1
  1979  0507  02F9               	subwf	___llmod@counter,f
  1980  0508  1D03               	btfss	3,2
  1981  0509  2CE7               	goto	l1393
  1982  050A                     l1401:	
  1983  050A  0877               	movf	___llmod@dividend+3,w
  1984  050B  00F3               	movwf	?___llmod+3
  1985  050C  0876               	movf	___llmod@dividend+2,w
  1986  050D  00F2               	movwf	?___llmod+2
  1987  050E  0875               	movf	___llmod@dividend+1,w
  1988  050F  00F1               	movwf	?___llmod+1
  1989  0510  0874               	movf	___llmod@dividend,w
  1990  0511  00F0               	movwf	?___llmod
  1991  0512  0008               	return
  1992  0513                     __end_of___llmod:	
  1993                           
  1994                           	psect	text8
  1995  0513                     __ptext8:	
  1996 ;; *************** function ___lldiv *****************
  1997 ;; Defined at:
  1998 ;;		line 6 in file "/opt/microchip/xc8/v1.41/sources/common/lldiv.c"
  1999 ;; Parameters:    Size  Location     Type
  2000 ;;  divisor         4    0[COMMON] unsigned long 
  2001 ;;  dividend        4    4[COMMON] unsigned long 
  2002 ;; Auto vars:     Size  Location     Type
  2003 ;;  quotient        4    9[COMMON] unsigned long 
  2004 ;;  counter         1   13[COMMON] unsigned char 
  2005 ;; Return value:  Size  Location     Type
  2006 ;;                  4    0[COMMON] unsigned long 
  2007 ;; Registers used:
  2008 ;;		wreg, status,2, status,0
  2009 ;; Tracked objects:
  2010 ;;		On entry : 0/0
  2011 ;;		On exit  : 0/0
  2012 ;;		Unchanged: 0/0
  2013 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  2014 ;;      Params:         8       0       0       0       0       0
  2015 ;;      Locals:         5       0       0       0       0       0
  2016 ;;      Temps:          1       0       0       0       0       0
  2017 ;;      Totals:        14       0       0       0       0       0
  2018 ;;Total ram usage:       14 bytes
  2019 ;; Hardware stack levels used:    1
  2020 ;; This function calls:
  2021 ;;		Nothing
  2022 ;; This function is called by:
  2023 ;;		_xvprintf
  2024 ;; This function uses a non-reentrant model
  2025 ;;
  2026                           
  2027                           
  2028                           ;psect for function ___lldiv
  2029  0513                     ___lldiv:	
  2030                           
  2031                           ;incstack = 0
  2032                           ; Regs used in ___lldiv: [wreg+status,2+status,0]
  2033  0513  3000               	movlw	0
  2034  0514  00FC               	movwf	___lldiv@quotient+3
  2035  0515  3000               	movlw	0
  2036  0516  00FB               	movwf	___lldiv@quotient+2
  2037  0517  3000               	movlw	0
  2038  0518  00FA               	movwf	___lldiv@quotient+1
  2039  0519  3000               	movlw	0
  2040  051A  00F9               	movwf	___lldiv@quotient
  2041  051B  0873               	movf	___lldiv@divisor+3,w
  2042  051C  0472               	iorwf	___lldiv@divisor+2,w
  2043  051D  0471               	iorwf	___lldiv@divisor+1,w
  2044  051E  0470               	iorwf	___lldiv@divisor,w
  2045  051F  1903               	skipnz
  2046  0520  2D5C               	goto	l1381
  2047  0521  01FD               	clrf	___lldiv@counter
  2048  0522  0AFD               	incf	___lldiv@counter,f
  2049  0523                     l1367:	
  2050  0523  1BF3               	btfsc	___lldiv@divisor+3,7
  2051  0524  2D31               	goto	l1369
  2052  0525  3001               	movlw	1
  2053  0526                     u945:	
  2054  0526  35F0               	lslf	___lldiv@divisor,f
  2055  0527  0DF1               	rlf	___lldiv@divisor+1,f
  2056  0528  0DF2               	rlf	___lldiv@divisor+2,f
  2057  0529  0DF3               	rlf	___lldiv@divisor+3,f
  2058  052A  0B89               	decfsz	9,f
  2059  052B  2D26               	goto	u945
  2060  052C  3001               	movlw	1
  2061  052D  00F8               	movwf	??___lldiv
  2062  052E  0878               	movf	??___lldiv,w
  2063  052F  07FD               	addwf	___lldiv@counter,f
  2064  0530  2D23               	goto	l1367
  2065  0531                     l1369:	
  2066  0531  3001               	movlw	1
  2067  0532                     u965:	
  2068  0532  35F9               	lslf	___lldiv@quotient,f
  2069  0533  0DFA               	rlf	___lldiv@quotient+1,f
  2070  0534  0DFB               	rlf	___lldiv@quotient+2,f
  2071  0535  0DFC               	rlf	___lldiv@quotient+3,f
  2072  0536  0B89               	decfsz	9,f
  2073  0537  2D32               	goto	u965
  2074  0538  0873               	movf	___lldiv@divisor+3,w
  2075  0539  0277               	subwf	___lldiv@dividend+3,w
  2076  053A  1D03               	skipz
  2077  053B  2D46               	goto	u975
  2078  053C  0872               	movf	___lldiv@divisor+2,w
  2079  053D  0276               	subwf	___lldiv@dividend+2,w
  2080  053E  1D03               	skipz
  2081  053F  2D46               	goto	u975
  2082  0540  0871               	movf	___lldiv@divisor+1,w
  2083  0541  0275               	subwf	___lldiv@dividend+1,w
  2084  0542  1D03               	skipz
  2085  0543  2D46               	goto	u975
  2086  0544  0870               	movf	___lldiv@divisor,w
  2087  0545  0274               	subwf	___lldiv@dividend,w
  2088  0546                     u975:	
  2089  0546  1C03               	skipc
  2090  0547  2D51               	goto	l1377
  2091  0548  0870               	movf	___lldiv@divisor,w
  2092  0549  02F4               	subwf	___lldiv@dividend,f
  2093  054A  0871               	movf	___lldiv@divisor+1,w
  2094  054B  3BF5               	subwfb	___lldiv@dividend+1,f
  2095  054C  0872               	movf	___lldiv@divisor+2,w
  2096  054D  3BF6               	subwfb	___lldiv@dividend+2,f
  2097  054E  0873               	movf	___lldiv@divisor+3,w
  2098  054F  3BF7               	subwfb	___lldiv@dividend+3,f
  2099  0550  1479               	bsf	___lldiv@quotient,0
  2100  0551                     l1377:	
  2101  0551  3001               	movlw	1
  2102  0552                     u985:	
  2103  0552  36F3               	lsrf	___lldiv@divisor+3,f
  2104  0553  0CF2               	rrf	___lldiv@divisor+2,f
  2105  0554  0CF1               	rrf	___lldiv@divisor+1,f
  2106  0555  0CF0               	rrf	___lldiv@divisor,f
  2107  0556  0B89               	decfsz	9,f
  2108  0557  2D52               	goto	u985
  2109  0558  3001               	movlw	1
  2110  0559  02FD               	subwf	___lldiv@counter,f
  2111  055A  1D03               	btfss	3,2
  2112  055B  2D31               	goto	l1369
  2113  055C                     l1381:	
  2114  055C  087C               	movf	___lldiv@quotient+3,w
  2115  055D  00F3               	movwf	?___lldiv+3
  2116  055E  087B               	movf	___lldiv@quotient+2,w
  2117  055F  00F2               	movwf	?___lldiv+2
  2118  0560  087A               	movf	___lldiv@quotient+1,w
  2119  0561  00F1               	movwf	?___lldiv+1
  2120  0562  0879               	movf	___lldiv@quotient,w
  2121  0563  00F0               	movwf	?___lldiv
  2122  0564  0008               	return
  2123  0565                     __end_of___lldiv:	
  2124                           
  2125                           	psect	text9
  2126  0565                     __ptext9:	
  2127 ;; *************** function _LCD_Init *****************
  2128 ;; Defined at:
  2129 ;;		line 28 in file "LCD.c"
  2130 ;; Parameters:    Size  Location     Type
  2131 ;;		None
  2132 ;; Auto vars:     Size  Location     Type
  2133 ;;		None
  2134 ;; Return value:  Size  Location     Type
  2135 ;;                  1    wreg      void 
  2136 ;; Registers used:
  2137 ;;		wreg, status,2, status,0, pclath, cstack
  2138 ;; Tracked objects:
  2139 ;;		On entry : 0/0
  2140 ;;		On exit  : 0/0
  2141 ;;		Unchanged: 0/0
  2142 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  2143 ;;      Params:         0       0       0       0       0       0
  2144 ;;      Locals:         0       0       0       0       0       0
  2145 ;;      Temps:          2       0       0       0       0       0
  2146 ;;      Totals:         2       0       0       0       0       0
  2147 ;;Total ram usage:        2 bytes
  2148 ;; Hardware stack levels used:    1
  2149 ;; Hardware stack levels required when called:    2
  2150 ;; This function calls:
  2151 ;;		_LCD_DisplayClear
  2152 ;;		_LCD_WriteData
  2153 ;; This function is called by:
  2154 ;;		_main
  2155 ;; This function uses a non-reentrant model
  2156 ;;
  2157                           
  2158                           
  2159                           ;psect for function _LCD_Init
  2160  0565                     _LCD_Init:	
  2161                           
  2162                           ;LCD.c: 30: RA4 = 0;
  2163                           
  2164                           ;incstack = 0
  2165                           ; Regs used in _LCD_Init: [wreg+status,2+status,0+pclath+cstack]
  2166  0565  0020               	movlb	0	; select bank0
  2167  0566  120C               	bcf	12,4	;volatile
  2168                           
  2169                           ;LCD.c: 31: RA3 = 0;
  2170  0567  118C               	bcf	12,3	;volatile
  2171                           
  2172                           ;LCD.c: 33: _delay((unsigned long)((30)*(32000000/4000.0)));
  2173  0568  3002               	movlw	2
  2174  0569  00F5               	movwf	??_LCD_Init+1
  2175  056A  3038               	movlw	56
  2176  056B  00F4               	movwf	??_LCD_Init
  2177  056C  30AD               	movlw	173
  2178  056D                     u1537:	
  2179  056D  0B89               	decfsz	9,f
  2180  056E  2D6D               	goto	u1537
  2181  056F  0BF4               	decfsz	??_LCD_Init,f
  2182  0570  2D6D               	goto	u1537
  2183  0571  0BF5               	decfsz	??_LCD_Init+1,f
  2184  0572  2D6D               	goto	u1537
  2185  0573  0000               	nop
  2186                           
  2187                           ;LCD.c: 34: PORTB = ( ((0x03&0x0C)<<1)|(0x03&0x03) );
  2188  0574  3003               	movlw	3
  2189  0575  0020               	movlb	0	; select bank0
  2190  0576  008D               	movwf	13	;volatile
  2191                           
  2192                           ;LCD.c: 35: {RA3 = 1; _delay((unsigned long)((1)*(32000000/4000000.0))); RA3 = 0; _delay
      +                          ((unsigned long)((1)*(32000000/4000000.0)));};
  2193  0577  158C               	bsf	12,3	;volatile
  2194  0578  3200               	nop2	;2 cycle nop
  2195  0579  3200               	nop2	;2 cycle nop
  2196  057A  3200               	nop2	;2 cycle nop
  2197  057B  3200               	nop2	;2 cycle nop
  2198  057C  0020               	movlb	0	; select bank0
  2199  057D  118C               	bcf	12,3	;volatile
  2200  057E  3200               	nop2	;2 cycle nop
  2201  057F  3200               	nop2	;2 cycle nop
  2202  0580  3200               	nop2	;2 cycle nop
  2203  0581  3200               	nop2	;2 cycle nop
  2204                           
  2205                           ;LCD.c: 36: _delay((unsigned long)((5)*(32000000/4000.0)));
  2206  0582  3034               	movlw	52
  2207  0583  00F4               	movwf	??_LCD_Init
  2208  0584  30F2               	movlw	242
  2209  0585                     u1547:	
  2210  0585  0B89               	decfsz	9,f
  2211  0586  2D85               	goto	u1547
  2212  0587  0BF4               	decfsz	??_LCD_Init,f
  2213  0588  2D85               	goto	u1547
  2214                           
  2215                           ;LCD.c: 37: {RA3 = 1; _delay((unsigned long)((1)*(32000000/4000000.0))); RA3 = 0; _delay
      +                          ((unsigned long)((1)*(32000000/4000000.0)));};
  2216  0589  0020               	movlb	0	; select bank0
  2217  058A  158C               	bsf	12,3	;volatile
  2218  058B  3200               	nop2	;2 cycle nop
  2219  058C  3200               	nop2	;2 cycle nop
  2220  058D  3200               	nop2	;2 cycle nop
  2221  058E  3200               	nop2	;2 cycle nop
  2222  058F  0020               	movlb	0	; select bank0
  2223  0590  118C               	bcf	12,3	;volatile
  2224  0591  3200               	nop2	;2 cycle nop
  2225  0592  3200               	nop2	;2 cycle nop
  2226  0593  3200               	nop2	;2 cycle nop
  2227  0594  3200               	nop2	;2 cycle nop
  2228                           
  2229                           ;LCD.c: 38: _delay((unsigned long)((400)*(32000000/4000000.0)));
  2230  0595  3005               	movlw	5
  2231  0596  00F4               	movwf	??_LCD_Init
  2232  0597  3026               	movlw	38
  2233  0598                     u1557:	
  2234  0598  0B89               	decfsz	9,f
  2235  0599  2D98               	goto	u1557
  2236  059A  0BF4               	decfsz	??_LCD_Init,f
  2237  059B  2D98               	goto	u1557
  2238  059C  3200               	nop2
  2239                           
  2240                           ;LCD.c: 39: {RA3 = 1; _delay((unsigned long)((1)*(32000000/4000000.0))); RA3 = 0; _delay
      +                          ((unsigned long)((1)*(32000000/4000000.0)));};
  2241  059D  0020               	movlb	0	; select bank0
  2242  059E  158C               	bsf	12,3	;volatile
  2243  059F  3200               	nop2	;2 cycle nop
  2244  05A0  3200               	nop2	;2 cycle nop
  2245  05A1  3200               	nop2	;2 cycle nop
  2246  05A2  3200               	nop2	;2 cycle nop
  2247  05A3  0020               	movlb	0	; select bank0
  2248  05A4  118C               	bcf	12,3	;volatile
  2249  05A5  3200               	nop2	;2 cycle nop
  2250  05A6  3200               	nop2	;2 cycle nop
  2251  05A7  3200               	nop2	;2 cycle nop
  2252  05A8  3200               	nop2	;2 cycle nop
  2253                           
  2254                           ;LCD.c: 40: _delay((unsigned long)((400)*(32000000/4000000.0)));
  2255  05A9  3005               	movlw	5
  2256  05AA  00F4               	movwf	??_LCD_Init
  2257  05AB  3026               	movlw	38
  2258  05AC                     u1567:	
  2259  05AC  0B89               	decfsz	9,f
  2260  05AD  2DAC               	goto	u1567
  2261  05AE  0BF4               	decfsz	??_LCD_Init,f
  2262  05AF  2DAC               	goto	u1567
  2263  05B0  3200               	nop2
  2264                           
  2265                           ;LCD.c: 41: PORTB = ( ((0x02&0x0C)<<1)|(0x02&0x03) );
  2266  05B1  3002               	movlw	2
  2267  05B2  0020               	movlb	0	; select bank0
  2268  05B3  008D               	movwf	13	;volatile
  2269                           
  2270                           ;LCD.c: 42: {RA3 = 1; _delay((unsigned long)((1)*(32000000/4000000.0))); RA3 = 0; _delay
      +                          ((unsigned long)((1)*(32000000/4000000.0)));};
  2271  05B4  158C               	bsf	12,3	;volatile
  2272  05B5  3200               	nop2	;2 cycle nop
  2273  05B6  3200               	nop2	;2 cycle nop
  2274  05B7  3200               	nop2	;2 cycle nop
  2275  05B8  3200               	nop2	;2 cycle nop
  2276  05B9  0020               	movlb	0	; select bank0
  2277  05BA  118C               	bcf	12,3	;volatile
  2278  05BB  3200               	nop2	;2 cycle nop
  2279  05BC  3200               	nop2	;2 cycle nop
  2280  05BD  3200               	nop2	;2 cycle nop
  2281  05BE  3200               	nop2	;2 cycle nop
  2282                           
  2283                           ;LCD.c: 44: LCD_WriteData(0x28);
  2284  05BF  3028               	movlw	40
  2285  05C0  3184  2497  3185   	fcall	_LCD_WriteData
  2286                           
  2287                           ;LCD.c: 45: LCD_WriteData(0x0c);
  2288  05C3  300C               	movlw	12
  2289  05C4  3184  2497  3185   	fcall	_LCD_WriteData
  2290                           
  2291                           ;LCD.c: 46: LCD_DisplayClear();
  2292  05C7  3183  23DA  3185   	fcall	_LCD_DisplayClear
  2293                           
  2294                           ;LCD.c: 47: LCD_WriteData(0x06);
  2295  05CA  3006               	movlw	6
  2296  05CB  3184  2497         	fcall	_LCD_WriteData
  2297  05CD  0008               	return
  2298  05CE                     __end_of_LCD_Init:	
  2299                           
  2300                           	psect	text10
  2301  03DA                     __ptext10:	
  2302 ;; *************** function _LCD_DisplayClear *****************
  2303 ;; Defined at:
  2304 ;;		line 64 in file "LCD.c"
  2305 ;; Parameters:    Size  Location     Type
  2306 ;;		None
  2307 ;; Auto vars:     Size  Location     Type
  2308 ;;		None
  2309 ;; Return value:  Size  Location     Type
  2310 ;;                  1    wreg      void 
  2311 ;; Registers used:
  2312 ;;		wreg, status,2, status,0, pclath, cstack
  2313 ;; Tracked objects:
  2314 ;;		On entry : 0/0
  2315 ;;		On exit  : 0/0
  2316 ;;		Unchanged: 0/0
  2317 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  2318 ;;      Params:         0       0       0       0       0       0
  2319 ;;      Locals:         0       0       0       0       0       0
  2320 ;;      Temps:          1       0       0       0       0       0
  2321 ;;      Totals:         1       0       0       0       0       0
  2322 ;;Total ram usage:        1 bytes
  2323 ;; Hardware stack levels used:    1
  2324 ;; Hardware stack levels required when called:    1
  2325 ;; This function calls:
  2326 ;;		_LCD_WriteData
  2327 ;; This function is called by:
  2328 ;;		_LCD_Init
  2329 ;; This function uses a non-reentrant model
  2330 ;;
  2331                           
  2332                           
  2333                           ;psect for function _LCD_DisplayClear
  2334  03DA                     _LCD_DisplayClear:	
  2335                           
  2336                           ;LCD.c: 66: RA4 = 0;
  2337                           
  2338                           ;incstack = 0
  2339                           ; Regs used in _LCD_DisplayClear: [wreg+status,2+status,0+pclath+cstack]
  2340  03DA  0020               	movlb	0	; select bank0
  2341  03DB  120C               	bcf	12,4	;volatile
  2342                           
  2343                           ;LCD.c: 67: LCD_WriteData(0x01);
  2344  03DC  3001               	movlw	1
  2345  03DD  3184  2497  3183   	fcall	_LCD_WriteData
  2346                           
  2347                           ;LCD.c: 68: _delay((unsigned long)((2)*(32000000/4000.0)));
  2348  03E0  3015               	movlw	21
  2349  03E1  00F3               	movwf	??_LCD_DisplayClear
  2350  03E2  30C6               	movlw	198
  2351  03E3                     u1577:	
  2352  03E3  0B89               	decfsz	9,f
  2353  03E4  2BE3               	goto	u1577
  2354  03E5  0BF3               	decfsz	??_LCD_DisplayClear,f
  2355  03E6  2BE3               	goto	u1577
  2356  03E7  3200               	nop2
  2357  03E8  0008               	return
  2358  03E9                     __end_of_LCD_DisplayClear:	
  2359                           
  2360                           	psect	text11
  2361  0421                     __ptext11:	
  2362 ;; *************** function _LCD_CursorPosition *****************
  2363 ;; Defined at:
  2364 ;;		line 86 in file "LCD.c"
  2365 ;; Parameters:    Size  Location     Type
  2366 ;;  tx              1    wreg     unsigned char 
  2367 ;;  ty              1    3[COMMON] unsigned char 
  2368 ;; Auto vars:     Size  Location     Type
  2369 ;;  tx              1    5[COMMON] unsigned char 
  2370 ;; Return value:  Size  Location     Type
  2371 ;;                  1    wreg      void 
  2372 ;; Registers used:
  2373 ;;		wreg, status,2, status,0, pclath, cstack
  2374 ;; Tracked objects:
  2375 ;;		On entry : 0/0
  2376 ;;		On exit  : 0/0
  2377 ;;		Unchanged: 0/0
  2378 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  2379 ;;      Params:         1       0       0       0       0       0
  2380 ;;      Locals:         1       0       0       0       0       0
  2381 ;;      Temps:          1       0       0       0       0       0
  2382 ;;      Totals:         3       0       0       0       0       0
  2383 ;;Total ram usage:        3 bytes
  2384 ;; Hardware stack levels used:    1
  2385 ;; Hardware stack levels required when called:    1
  2386 ;; This function calls:
  2387 ;;		_LCD_WriteData
  2388 ;; This function is called by:
  2389 ;;		_main
  2390 ;; This function uses a non-reentrant model
  2391 ;;
  2392                           
  2393                           
  2394                           ;psect for function _LCD_CursorPosition
  2395  0421                     _LCD_CursorPosition:	
  2396                           
  2397                           ;incstack = 0
  2398                           ; Regs used in _LCD_CursorPosition: [wreg+status,2+status,0+pclath+cstack]
  2399                           ;LCD_CursorPosition@tx stored from wreg
  2400  0421  00F5               	movwf	LCD_CursorPosition@tx
  2401                           
  2402                           ;LCD.c: 88: RA4 = 0;
  2403  0422  0020               	movlb	0	; select bank0
  2404  0423  120C               	bcf	12,4	;volatile
  2405                           
  2406                           ;LCD.c: 89: LCD_WriteData(0x80|tx|(0x40*ty));
  2407  0424  0873               	movf	LCD_CursorPosition@ty,w
  2408  0425  00F4               	movwf	??_LCD_CursorPosition
  2409  0426  3005               	movlw	5
  2410  0427                     u1345:	
  2411  0427  35F4               	lslf	??_LCD_CursorPosition,f
  2412  0428  3EFF               	addlw	-1
  2413  0429  1D03               	skipz
  2414  042A  2C27               	goto	u1345
  2415  042B  3574               	lslf	??_LCD_CursorPosition,w
  2416  042C  0475               	iorwf	LCD_CursorPosition@tx,w
  2417  042D  3880               	iorlw	-128
  2418  042E  3184  2497  3184   	fcall	_LCD_WriteData
  2419                           
  2420                           ;LCD.c: 90: _delay((unsigned long)((40)*(32000000/4000000.0)));
  2421  0431  306A               	movlw	106
  2422  0432                     u1587:	
  2423  0432  0B89               	decfsz	9,f
  2424  0433  2C32               	goto	u1587
  2425  0434  3200               	nop2
  2426  0435  0008               	return
  2427  0436                     __end_of_LCD_CursorPosition:	
  2428                           
  2429                           	psect	text12
  2430  0497                     __ptext12:	
  2431 ;; *************** function _LCD_WriteData *****************
  2432 ;; Defined at:
  2433 ;;		line 15 in file "LCD.c"
  2434 ;; Parameters:    Size  Location     Type
  2435 ;;  point           1    wreg     char 
  2436 ;; Auto vars:     Size  Location     Type
  2437 ;;  point           1    2[COMMON] char 
  2438 ;; Return value:  Size  Location     Type
  2439 ;;                  1    wreg      void 
  2440 ;; Registers used:
  2441 ;;		wreg, status,2, status,0
  2442 ;; Tracked objects:
  2443 ;;		On entry : 0/0
  2444 ;;		On exit  : 0/0
  2445 ;;		Unchanged: 0/0
  2446 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  2447 ;;      Params:         0       0       0       0       0       0
  2448 ;;      Locals:         1       0       0       0       0       0
  2449 ;;      Temps:          2       0       0       0       0       0
  2450 ;;      Totals:         3       0       0       0       0       0
  2451 ;;Total ram usage:        3 bytes
  2452 ;; Hardware stack levels used:    1
  2453 ;; This function calls:
  2454 ;;		Nothing
  2455 ;; This function is called by:
  2456 ;;		_LCD_Init
  2457 ;;		_LCD_Put
  2458 ;;		_LCD_DisplayClear
  2459 ;;		_LCD_CursorPosition
  2460 ;;		_LCD_CursorHome
  2461 ;;		_LCD_CursorShift
  2462 ;;		_LCD_DispShift
  2463 ;; This function uses a non-reentrant model
  2464 ;;
  2465                           
  2466                           
  2467                           ;psect for function _LCD_WriteData
  2468  0497                     _LCD_WriteData:	
  2469                           
  2470                           ;incstack = 0
  2471                           ; Regs used in _LCD_WriteData: [wreg+status,2+status,0]
  2472                           ;LCD_WriteData@point stored from wreg
  2473  0497  00F2               	movwf	LCD_WriteData@point
  2474                           
  2475                           ;LCD.c: 17: _delay((unsigned long)((80)*(32000000/4000000.0)));
  2476  0498  30D5               	movlw	213
  2477  0499                     u1597:	
  2478  0499  0B89               	decfsz	9,f
  2479  049A  2C99               	goto	u1597
  2480  049B  0000               	nop
  2481                           
  2482                           ;LCD.c: 18: PORTB = ( (((point>>4)&0x0F&0x0C)<<1)|((point>>4)&0x0F&0x03) );
  2483  049C  0872               	movf	LCD_WriteData@point,w
  2484  049D  00F0               	movwf	??_LCD_WriteData
  2485  049E  3004               	movlw	4
  2486  049F                     u845:	
  2487  049F  1003               	clrc
  2488  04A0  1BF0               	btfsc	??_LCD_WriteData,7
  2489  04A1  1403               	setc
  2490  04A2  0CF0               	rrf	??_LCD_WriteData,f
  2491  04A3  0B89               	decfsz	9,f
  2492  04A4  2C9F               	goto	u845
  2493  04A5  3003               	movlw	3
  2494  04A6  0570               	andwf	??_LCD_WriteData,w
  2495  04A7  00F1               	movwf	??_LCD_WriteData+1
  2496  04A8  0E72               	swapf	LCD_WriteData@point,w
  2497  04A9  390F               	andlw	15
  2498  04AA  1989               	btfsc	9,3
  2499  04AB  38F0               	iorlw	240
  2500  04AC  390C               	andlw	12
  2501  04AD  0709               	addwf	9,w
  2502  04AE  0471               	iorwf	??_LCD_WriteData+1,w
  2503  04AF  0020               	movlb	0	; select bank0
  2504  04B0  008D               	movwf	13	;volatile
  2505                           
  2506                           ;LCD.c: 19: {RA3 = 1; _delay((unsigned long)((1)*(32000000/4000000.0))); RA3 = 0; _delay
      +                          ((unsigned long)((1)*(32000000/4000000.0)));};
  2507  04B1  158C               	bsf	12,3	;volatile
  2508  04B2  3200               	nop2	;2 cycle nop
  2509  04B3  3200               	nop2	;2 cycle nop
  2510  04B4  3200               	nop2	;2 cycle nop
  2511  04B5  3200               	nop2	;2 cycle nop
  2512  04B6  0020               	movlb	0	; select bank0
  2513  04B7  118C               	bcf	12,3	;volatile
  2514  04B8  3200               	nop2	;2 cycle nop
  2515  04B9  3200               	nop2	;2 cycle nop
  2516  04BA  3200               	nop2	;2 cycle nop
  2517  04BB  3200               	nop2	;2 cycle nop
  2518                           
  2519                           ;LCD.c: 20: PORTB = ( ((point&0x0F&0x0C)<<1)|(point&0x0F&0x03) );
  2520  04BC  3003               	movlw	3
  2521  04BD  0572               	andwf	LCD_WriteData@point,w
  2522  04BE  00F0               	movwf	??_LCD_WriteData
  2523  04BF  0872               	movf	LCD_WriteData@point,w
  2524  04C0  390C               	andlw	12
  2525  04C1  0709               	addwf	9,w
  2526  04C2  0470               	iorwf	??_LCD_WriteData,w
  2527  04C3  0020               	movlb	0	; select bank0
  2528  04C4  008D               	movwf	13	;volatile
  2529                           
  2530                           ;LCD.c: 21: {RA3 = 1; _delay((unsigned long)((1)*(32000000/4000000.0))); RA3 = 0; _delay
      +                          ((unsigned long)((1)*(32000000/4000000.0)));};
  2531  04C5  158C               	bsf	12,3	;volatile
  2532  04C6  3200               	nop2	;2 cycle nop
  2533  04C7  3200               	nop2	;2 cycle nop
  2534  04C8  3200               	nop2	;2 cycle nop
  2535  04C9  3200               	nop2	;2 cycle nop
  2536  04CA  0020               	movlb	0	; select bank0
  2537  04CB  118C               	bcf	12,3	;volatile
  2538  04CC  3200               	nop2	;2 cycle nop
  2539  04CD  3200               	nop2	;2 cycle nop
  2540  04CE  3200               	nop2	;2 cycle nop
  2541  04CF  3200               	nop2	;2 cycle nop
  2542  04D0  0008               	return
  2543  04D1                     __end_of_LCD_WriteData:	
  2544                           
  2545                           	psect	text13
  2546  040C                     __ptext13:	
  2547 ;; *************** function _Basic_Init *****************
  2548 ;; Defined at:
  2549 ;;		line 26 in file "main.c"
  2550 ;; Parameters:    Size  Location     Type
  2551 ;;		None
  2552 ;; Auto vars:     Size  Location     Type
  2553 ;;		None
  2554 ;; Return value:  Size  Location     Type
  2555 ;;                  1    wreg      char 
  2556 ;; Registers used:
  2557 ;;		wreg, status,2
  2558 ;; Tracked objects:
  2559 ;;		On entry : 0/0
  2560 ;;		On exit  : 0/0
  2561 ;;		Unchanged: 0/0
  2562 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  2563 ;;      Params:         0       0       0       0       0       0
  2564 ;;      Locals:         0       0       0       0       0       0
  2565 ;;      Temps:          0       0       0       0       0       0
  2566 ;;      Totals:         0       0       0       0       0       0
  2567 ;;Total ram usage:        0 bytes
  2568 ;; Hardware stack levels used:    1
  2569 ;; This function calls:
  2570 ;;		Nothing
  2571 ;; This function is called by:
  2572 ;;		_main
  2573 ;; This function uses a non-reentrant model
  2574 ;;
  2575                           
  2576                           
  2577                           ;psect for function _Basic_Init
  2578  040C                     _Basic_Init:	
  2579                           
  2580                           ;main.c: 28: OSCCON = 0xF3;
  2581                           
  2582                           ;incstack = 0
  2583                           ; Regs used in _Basic_Init: [wreg+status,2]
  2584  040C  30F3               	movlw	243
  2585  040D  0021               	movlb	1	; select bank1
  2586  040E  0099               	movwf	25	;volatile
  2587                           
  2588                           ;main.c: 32: TRISA = 0x07;
  2589  040F  3007               	movlw	7
  2590  0410  008C               	movwf	12	;volatile
  2591                           
  2592                           ;main.c: 33: ANSELA = 0x07;
  2593  0411  3007               	movlw	7
  2594  0412  0023               	movlb	3	; select bank3
  2595  0413  008C               	movwf	12	;volatile
  2596                           
  2597                           ;main.c: 35: TRISB = 0x40;
  2598  0414  3040               	movlw	64
  2599  0415  0021               	movlb	1	; select bank1
  2600  0416  008D               	movwf	13	;volatile
  2601                           
  2602                           ;main.c: 36: ANSELB = 0x00;
  2603  0417  0023               	movlb	3	; select bank3
  2604  0418  018D               	clrf	13	;volatile
  2605                           
  2606                           ;main.c: 38: APFCON0 = 0x08;
  2607  0419  3008               	movlw	8
  2608  041A  0022               	movlb	2	; select bank2
  2609  041B  009D               	movwf	29	;volatile
  2610                           
  2611                           ;main.c: 39: APFCON1 = 0x00;
  2612  041C  019E               	clrf	30	;volatile
  2613                           
  2614                           ;main.c: 41: PORTA = 0x00;
  2615  041D  0020               	movlb	0	; select bank0
  2616  041E  018C               	clrf	12	;volatile
  2617                           
  2618                           ;main.c: 42: PORTB = 0x00;
  2619  041F  018D               	clrf	13	;volatile
  2620  0420  0008               	return
  2621  0421                     __end_of_Basic_Init:	
  2622                           ;main.c: 44: return 0;
  2623                           ;	Return value of _Basic_Init is never used
  2624                           
  2625  007E                     btemp	set	126	;btemp
  2626  007E                     wtemp0	set	126
=======
   733                           ;incstack = 0
   734                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
   735  0446  3184  2401  3184   	fcall	_Basic_Init
   736                           
   737                           ;main.c: 15: LCD_Init();
   738  0449  3185  2565  3184   	fcall	_LCD_Init
   739                           
   740                           ;main.c: 16: xfunc_out = (void(*)(unsigned char))(LCD_Put);
   741  044C  30C9               	movlw	low _LCD_Put
   742  044D  0020               	movlb	0	; select bank0
   743  044E  00DC               	movwf	_xfunc_out
   744  044F  3003               	movlw	high _LCD_Put
   745  0450  00DD               	movwf	_xfunc_out+1
   746                           
   747                           ;main.c: 17: uint16_t i = 0;
   748  0451  01D8               	clrf	main@i
   749  0452  01D9               	clrf	main@i+1
   750  0453                     l1687:	
   751                           ;main.c: 18: while(1)
   752                           
   753                           
   754                           ;main.c: 19: {
   755                           ;main.c: 20: LCD_CursorPosition(0,0);
   756  0453  01F3               	clrf	LCD_CursorPosition@ty
   757  0454  3000               	movlw	0
   758  0455  3184  2416  3184   	fcall	_LCD_CursorPosition
   759                           
   760                           ;main.c: 21: xprintf("Hellow World %d",i++);
   761  0458  3000               	movlw	low (STR_1| (0+32768))
   762  0459  0020               	movlb	0	; select bank0
   763  045A  00D0               	movwf	xprintf@fmt
   764  045B  3088               	movlw	high (STR_1| (0+32768))
   765  045C  00D1               	movwf	xprintf@fmt+1
   766  045D  0859               	movf	main@i+1,w
   767  045E  00D3               	movwf	?_xprintf+3
   768  045F  0858               	movf	main@i,w
   769  0460  00D2               	movwf	?_xprintf+2
   770  0461  3183  23DE  3184   	fcall	_xprintf
   771  0464  3001               	movlw	1
   772  0465  0020               	movlb	0	; select bank0
   773  0466  07D8               	addwf	main@i,f
   774  0467  3000               	movlw	0
   775  0468  3DD9               	addwfc	main@i+1,f
   776  0469  2C53               	goto	l1687
   777  046A                     __end_of_main:	
   778                           ;main.c: 22: }
   779                           ;main.c: 23: return 0;
   780                           ;	Return value of _main is never used
   781                           
   782                           
   783                           	psect	text1
   784  03DE                     __ptext1:	
   785 ;; *************** function _xprintf *****************
   786 ;; Defined at:
   787 ;;		line 165 in file "xprintf.c"
   788 ;; Parameters:    Size  Location     Type
   789 ;;  fmt             2   48[BANK0 ] PTR const unsigned char 
   790 ;;		 -> STR_6(7), STR_5(6), STR_4(6), STR_3(7), 
   791 ;;		 -> STR_1(16), 
   792 ;; Auto vars:     Size  Location     Type
   793 ;;  arp             1   55[BANK0 ] PTR void [1]
   794 ;;		 -> ?_xfprintf(1), ?_xsprintf(1), ?_xprintf(1), 
   795 ;; Return value:  Size  Location     Type
   796 ;;                  1    wreg      void 
   797 ;; Registers used:
   798 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
   799 ;; Tracked objects:
   800 ;;		On entry : 0/0
   801 ;;		On exit  : 0/0
   802 ;;		Unchanged: 0/0
   803 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
   804 ;;      Params:         0       6       0       0       0       0
   805 ;;      Locals:         0       1       0       0       0       0
   806 ;;      Temps:          0       1       0       0       0       0
   807 ;;      Totals:         0       8       0       0       0       0
   808 ;;Total ram usage:        8 bytes
   809 ;; Hardware stack levels used:    1
   810 ;; Hardware stack levels required when called:    5
   811 ;; This function calls:
   812 ;;		_xvprintf
   813 ;; This function is called by:
   814 ;;		_main
   815 ;;		_put_dump
   816 ;; This function uses a non-reentrant model
   817 ;;
   818                           
   819                           
   820                           ;psect for function _xprintf
   821  03DE                     _xprintf:	
   822                           
   823                           ;xprintf.c: 170: va_list arp;
   824                           ;xprintf.c: 173: *arp = __va_start();
   825                           
   826                           ;incstack = 0
   827                           ; Regs used in _xprintf: [wreg-fsr1h+status,2+status,0+pclath+cstack]
   828  03DE  3052               	movlw	(low ((?_xprintf| 0+2)))& (0+255)
   829  03DF  0020               	movlb	0	; select bank0
   830  03E0  00D6               	movwf	??_xprintf
   831  03E1  0856               	movf	??_xprintf,w
   832  03E2  00D7               	movwf	xprintf@arp
   833                           
   834                           ;xprintf.c: 174: xvprintf(fmt, arp);
   835  03E3  0851               	movf	xprintf@fmt+1,w
   836  03E4  00A1               	movwf	xvprintf@fmt+1
   837  03E5  0850               	movf	xprintf@fmt,w
   838  03E6  00A0               	movwf	xvprintf@fmt
   839  03E7  3057               	movlw	(low (xprintf@arp| 0))& (0+255)
   840  03E8  00D6               	movwf	??_xprintf
   841  03E9  0856               	movf	??_xprintf,w
   842  03EA  00A2               	movwf	xvprintf@arp
   843  03EB  3185  25CE         	fcall	_xvprintf
   844  03ED  0008               	return
   845  03EE                     __end_of_xprintf:	
   846                           
   847                           	psect	text2
   848  05CE                     __ptext2:	
   849 ;; *************** function _xvprintf *****************
   850 ;; Defined at:
   851 ;;		line 88 in file "xprintf.c"
   852 ;; Parameters:    Size  Location     Type
   853 ;;  fmt             2    0[BANK0 ] PTR const unsigned char 
   854 ;;		 -> STR_6(7), STR_5(6), STR_4(6), STR_3(7), 
   855 ;;		 -> STR_1(16), 
   856 ;;  arp             1    2[BANK0 ] PTR PTR void 
   857 ;;		 -> xfprintf@arp(1), xsprintf@arp(1), xprintf@arp(1), 
   858 ;; Auto vars:     Size  Location     Type
   859 ;;  s              16    7[BANK0 ] unsigned char [16]
   860 ;;  v               4   38[BANK0 ] unsigned long 
   861 ;;  i               2   44[BANK0 ] unsigned int 
   862 ;;  f               2   42[BANK0 ] unsigned int 
   863 ;;  j               2   36[BANK0 ] unsigned int 
   864 ;;  w               2   34[BANK0 ] unsigned int 
   865 ;;  r               2   32[BANK0 ] unsigned int 
   866 ;;  c               1   47[BANK0 ] unsigned char 
   867 ;;  d               1   46[BANK0 ] unsigned char 
   868 ;;  p               1   31[BANK0 ] PTR unsigned char 
   869 ;;		 -> ?_xfprintf(1), ?_xsprintf(1), ?_xprintf(1), 
   870 ;; Return value:  Size  Location     Type
   871 ;;                  1    wreg      void 
   872 ;; Registers used:
   873 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
   874 ;; Tracked objects:
   875 ;;		On entry : 0/0
   876 ;;		On exit  : 0/0
   877 ;;		Unchanged: 0/0
   878 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
   879 ;;      Params:         0       3       0       0       0       0
   880 ;;      Locals:         0      41       0       0       0       0
   881 ;;      Temps:          0       4       0       0       0       0
   882 ;;      Totals:         0      48       0       0       0       0
   883 ;;Total ram usage:       48 bytes
   884 ;; Hardware stack levels used:    1
   885 ;; Hardware stack levels required when called:    4
   886 ;; This function calls:
   887 ;;		___lldiv
   888 ;;		___llmod
   889 ;;		___wmul
   890 ;;		_xputc
   891 ;;		_xputs
   892 ;; This function is called by:
   893 ;;		_xprintf
   894 ;;		_xsprintf
   895 ;;		_xfprintf
   896 ;; This function uses a non-reentrant model
   897 ;;
   898                           
   899                           
   900                           ;psect for function _xvprintf
   901  05CE                     _xvprintf:	
   902  05CE                     l108:	
   903                           ;incstack = 0
   904                           ; Regs used in _xvprintf: [wreg-fsr1h+status,2+status,0+pclath+cstack]
   905                           ;xprintf.c: 93: unsigned int r, i, j, w, f;
   906                           ;xprintf.c: 94: unsigned long v;
   907                           ;xprintf.c: 95: char s[16], c, d, *p;
   908                           ;xprintf.c: 98: for (;;) {
   909                           
   910                           
   911                           ;xprintf.c: 99: c = *fmt++;
   912  05CE  0020               	movlb	0	; select bank0
   913  05CF  0820               	movf	xvprintf@fmt,w
   914  05D0  0084               	movwf	4
   915  05D1  0821               	movf	xvprintf@fmt+1,w
   916  05D2  0085               	movwf	5
   917  05D3  0800               	movf	0,w	;code access
   918  05D4  00A3               	movwf	??_xvprintf
   919  05D5  0823               	movf	??_xvprintf,w
   920  05D6  00CF               	movwf	xvprintf@c
   921  05D7  3001               	movlw	1
   922  05D8  07A0               	addwf	xvprintf@fmt,f
   923  05D9  3000               	movlw	0
   924  05DA  3DA1               	addwfc	xvprintf@fmt+1,f
   925                           
   926                           ;xprintf.c: 100: if (!c) break;
   927  05DB  084F               	movf	xvprintf@c,w
   928  05DC  1903               	btfsc	3,2
   929  05DD  0008               	return
   930                           
   931                           ;xprintf.c: 101: if (c != '%') {
   932  05DE  3025               	movlw	37
   933  05DF  064F               	xorwf	xvprintf@c,w
   934  05E0  1903               	btfsc	3,2
   935  05E1  2DE7               	goto	l1427
   936                           
   937                           ;xprintf.c: 102: xputc(c); continue;
   938  05E2  084F               	movf	xvprintf@c,w
   939  05E3  3184  246A  3185   	fcall	_xputc
   940  05E6  2DCE               	goto	l108
   941  05E7                     l1427:	
   942                           
   943                           ;xprintf.c: 103: }
   944                           ;xprintf.c: 104: f = 0;
   945  05E7  0020               	movlb	0	; select bank0
   946  05E8  01CA               	clrf	xvprintf@f
   947  05E9  01CB               	clrf	xvprintf@f+1
   948                           
   949                           ;xprintf.c: 105: c = *fmt++;
   950  05EA  0820               	movf	xvprintf@fmt,w
   951  05EB  0084               	movwf	4
   952  05EC  0821               	movf	xvprintf@fmt+1,w
   953  05ED  0085               	movwf	5
   954  05EE  0800               	movf	0,w	;code access
   955  05EF  00A3               	movwf	??_xvprintf
   956  05F0  0823               	movf	??_xvprintf,w
   957  05F1  00CF               	movwf	xvprintf@c
   958  05F2  3001               	movlw	1
   959  05F3  07A0               	addwf	xvprintf@fmt,f
   960  05F4  3000               	movlw	0
   961  05F5  3DA1               	addwfc	xvprintf@fmt+1,f
   962                           
   963                           ;xprintf.c: 106: if (c == '0') {
   964  05F6  3030               	movlw	48
   965  05F7  064F               	xorwf	xvprintf@c,w
   966  05F8  1D03               	btfss	3,2
   967  05F9  2DFC               	goto	l1441
   968                           
   969                           ;xprintf.c: 107: f = 1; c = *fmt++;
   970  05FA  3001               	movlw	1
   971  05FB  2E01               	goto	L6
   972  05FC                     l1441:	
   973                           ;xprintf.c: 108: } else {
   974                           
   975                           
   976                           ;xprintf.c: 109: if (c == '-') {
   977  05FC  302D               	movlw	45
   978  05FD  064F               	xorwf	xvprintf@c,w
   979  05FE  1D03               	btfss	3,2
   980  05FF  2E10               	goto	l1449
   981                           
   982                           ;xprintf.c: 110: f = 2; c = *fmt++;
   983  0600  3002               	movlw	2
   984  0601                     L6:	
   985  0601  00CA               	movwf	xvprintf@f
   986  0602  3000               	movlw	0
   987  0603  00CB               	movwf	xvprintf@f+1
   988  0604  0820               	movf	xvprintf@fmt,w
   989  0605  0084               	movwf	4
   990  0606  0821               	movf	xvprintf@fmt+1,w
   991  0607  0085               	movwf	5
   992  0608  0800               	movf	0,w	;code access
   993  0609  00A3               	movwf	??_xvprintf
   994  060A  0823               	movf	??_xvprintf,w
   995  060B  00CF               	movwf	xvprintf@c
   996  060C  3001               	movlw	1
   997  060D  07A0               	addwf	xvprintf@fmt,f
   998  060E  3000               	movlw	0
   999  060F  3DA1               	addwfc	xvprintf@fmt+1,f
  1000  0610                     l1449:	
  1001                           
  1002                           ;xprintf.c: 111: }
  1003                           ;xprintf.c: 112: }
  1004                           ;xprintf.c: 113: for (w = 0; c >= '0' && c <= '9'; c = *fmt++)
  1005  0610  01C2               	clrf	xvprintf@w
  1006  0611  01C3               	clrf	xvprintf@w+1
  1007  0612  2E3A               	goto	l1457
  1008  0613                     l1451:	
  1009                           
  1010                           ;xprintf.c: 114: w = w * 10 + c - '0';
  1011  0613  084F               	movf	xvprintf@c,w
  1012  0614  00A3               	movwf	??_xvprintf
  1013  0615  01A4               	clrf	??_xvprintf+1
  1014  0616  0843               	movf	xvprintf@w+1,w
  1015  0617  00F1               	movwf	___wmul@multiplier+1
  1016  0618  0842               	movf	xvprintf@w,w
  1017  0619  00F0               	movwf	___wmul@multiplier
  1018  061A  300A               	movlw	10
  1019  061B  00F2               	movwf	___wmul@multiplicand
  1020  061C  3000               	movlw	0
  1021  061D  00F3               	movwf	___wmul@multiplicand+1
  1022  061E  3184  242B  3185   	fcall	___wmul
  1023  0621  0020               	movlb	0	; select bank0
  1024  0622  0823               	movf	??_xvprintf,w
  1025  0623  0770               	addwf	?___wmul,w
  1026  0624  00A5               	movwf	??_xvprintf+2
  1027  0625  0824               	movf	??_xvprintf+1,w
  1028  0626  3D71               	addwfc	?___wmul+1,w
  1029  0627  00A6               	movwf	??_xvprintf+3
  1030  0628  0825               	movf	??_xvprintf+2,w
  1031  0629  3ED0               	addlw	208
  1032  062A  00C2               	movwf	xvprintf@w
  1033  062B  30FF               	movlw	255
  1034  062C  3D26               	addwfc	??_xvprintf+3,w
  1035  062D  00C3               	movwf	xvprintf@w+1
  1036  062E  0820               	movf	xvprintf@fmt,w
  1037  062F  0084               	movwf	4
  1038  0630  0821               	movf	xvprintf@fmt+1,w
  1039  0631  0085               	movwf	5
  1040  0632  0800               	movf	0,w	;code access
  1041  0633  00A3               	movwf	??_xvprintf
  1042  0634  0823               	movf	??_xvprintf,w
  1043  0635  00CF               	movwf	xvprintf@c
  1044  0636  3001               	movlw	1
  1045  0637  07A0               	addwf	xvprintf@fmt,f
  1046  0638  3000               	movlw	0
  1047  0639  3DA1               	addwfc	xvprintf@fmt+1,f
  1048  063A                     l1457:	
  1049  063A  3030               	movlw	48
  1050  063B  024F               	subwf	xvprintf@c,w
  1051  063C  1C03               	skipc
  1052  063D  2E42               	goto	l1461
  1053  063E  303A               	movlw	58
  1054  063F  024F               	subwf	xvprintf@c,w
  1055  0640  1C03               	skipc
  1056  0641  2E13               	goto	l1451
  1057  0642                     l1461:	
  1058                           
  1059                           ;xprintf.c: 115: if (c == 'l' || c == 'L') {
  1060  0642  306C               	movlw	108
  1061  0643  064F               	xorwf	xvprintf@c,w
  1062  0644  1903               	btfsc	3,2
  1063  0645  2E4A               	goto	l123
  1064  0646  304C               	movlw	76
  1065  0647  064F               	xorwf	xvprintf@c,w
  1066  0648  1D03               	btfss	3,2
  1067  0649  2E57               	goto	l1469
  1068  064A                     l123:	
  1069                           
  1070                           ;xprintf.c: 116: f |= 4; c = *fmt++;
  1071  064A  154A               	bsf	xvprintf@f,2
  1072  064B  0820               	movf	xvprintf@fmt,w
  1073  064C  0084               	movwf	4
  1074  064D  0821               	movf	xvprintf@fmt+1,w
  1075  064E  0085               	movwf	5
  1076  064F  0800               	movf	0,w	;code access
  1077  0650  00A3               	movwf	??_xvprintf
  1078  0651  0823               	movf	??_xvprintf,w
  1079  0652  00CF               	movwf	xvprintf@c
  1080  0653  3001               	movlw	1
  1081  0654  07A0               	addwf	xvprintf@fmt,f
  1082  0655  3000               	movlw	0
  1083  0656  3DA1               	addwfc	xvprintf@fmt+1,f
  1084  0657                     l1469:	
  1085                           
  1086                           ;xprintf.c: 117: }
  1087                           ;xprintf.c: 118: if (!c) break;
  1088  0657  084F               	movf	xvprintf@c,w
  1089  0658  1903               	btfsc	3,2
  1090  0659  0008               	return
  1091                           
  1092                           ;xprintf.c: 119: d = c;
  1093  065A  084F               	movf	xvprintf@c,w
  1094  065B  00A3               	movwf	??_xvprintf
  1095  065C  0823               	movf	??_xvprintf,w
  1096  065D  00CE               	movwf	xvprintf@d
  1097                           
  1098                           ;xprintf.c: 120: if (d >= 'a') d -= 0x20;
  1099  065E  3061               	movlw	97
  1100  065F  024E               	subwf	xvprintf@d,w
  1101  0660  1C03               	skipc
  1102  0661  2ECD               	goto	l1511
  1103  0662  3020               	movlw	32
  1104  0663  02CE               	subwf	xvprintf@d,f
  1105                           
  1106                           ;xprintf.c: 121: switch (d) {
  1107  0664  2ECD               	goto	l1511
  1108  0665                     l1477:	
  1109                           ;xprintf.c: 122: case 'S' :
  1110                           
  1111                           
  1112                           ;xprintf.c: 123: p = (*(char* *)__va_arg((*(char* **)arp), (char*)0));
  1113  0665  0822               	movf	xvprintf@arp,w
  1114  0666  0086               	movwf	6
  1115  0667  0187               	clrf	7
  1116  0668  3F40               	moviw [0]fsr1
  1117  0669  0084               	movwf	4
  1118  066A  0185               	clrf	5
  1119  066B  0A81               	incf	1,f
  1120  066C  0800               	movf	0,w
  1121  066D  00A3               	movwf	??_xvprintf
  1122  066E  0823               	movf	??_xvprintf,w
  1123  066F  00BF               	movwf	xvprintf@p
  1124                           
  1125                           ;xprintf.c: 124: for (j = 0; p[j]; j++) ;
  1126  0670  01C4               	clrf	xvprintf@j
  1127  0671  01C5               	clrf	xvprintf@j+1
  1128  0672                     l1483:	
  1129  0672  0844               	movf	xvprintf@j,w
  1130  0673  073F               	addwf	xvprintf@p,w
  1131  0674  00A3               	movwf	??_xvprintf
  1132  0675  0823               	movf	??_xvprintf,w
  1133  0676  0086               	movwf	6
  1134  0677  0187               	clrf	7
  1135  0678  0801               	movf	1,w
  1136  0679  1903               	btfsc	3,2
  1137  067A  2E84               	goto	l1487
  1138  067B  3001               	movlw	1
  1139  067C  07C4               	addwf	xvprintf@j,f
  1140  067D  3000               	movlw	0
  1141  067E  3DC5               	addwfc	xvprintf@j+1,f
  1142  067F  2E72               	goto	l1483
  1143  0680                     l1485:	
  1144                           ;xprintf.c: 125: while (!(f & 2) && j++ < w) xputc(' ');
  1145                           
  1146  0680  3020               	movlw	32
  1147  0681  3184  246A  3185   	fcall	_xputc
  1148  0684                     l1487:	
  1149  0684  0020               	movlb	0	; select bank0
  1150  0685  18CA               	btfsc	xvprintf@f,1
  1151  0686  2E96               	goto	l1491
  1152  0687  0845               	movf	xvprintf@j+1,w
  1153  0688  00A4               	movwf	??_xvprintf+1
  1154  0689  0844               	movf	xvprintf@j,w
  1155  068A  00A3               	movwf	??_xvprintf
  1156  068B  0AC4               	incf	xvprintf@j,f
  1157  068C  1903               	skipnz
  1158  068D  0AC5               	incf	xvprintf@j+1,f
  1159  068E  0843               	movf	xvprintf@w+1,w
  1160  068F  0224               	subwf	??_xvprintf+1,w
  1161  0690  1D03               	skipz
  1162  0691  2E94               	goto	u1185
  1163  0692  0842               	movf	xvprintf@w,w
  1164  0693  0223               	subwf	??_xvprintf,w
  1165  0694                     u1185:	
  1166  0694  1C03               	skipc
  1167  0695  2E80               	goto	l1485
  1168  0696                     l1491:	
  1169                           
  1170                           ;xprintf.c: 126: xputs(p);
  1171  0696  083F               	movf	xvprintf@p,w
  1172  0697  3183  23EE  3185   	fcall	_xputs
  1173  069A                     l1495:	
  1174                           ;xprintf.c: 127: while (j++ < w) xputc(' ');
  1175                           
  1176  069A  0020               	movlb	0	; select bank0
  1177  069B  0845               	movf	xvprintf@j+1,w
  1178  069C  00A4               	movwf	??_xvprintf+1
  1179  069D  0844               	movf	xvprintf@j,w
  1180  069E  00A3               	movwf	??_xvprintf
  1181  069F  0AC4               	incf	xvprintf@j,f
  1182  06A0  1903               	skipnz
  1183  06A1  0AC5               	incf	xvprintf@j+1,f
  1184  06A2  0843               	movf	xvprintf@w+1,w
  1185  06A3  0224               	subwf	??_xvprintf+1,w
  1186  06A4  1D03               	skipz
  1187  06A5  2EA8               	goto	u1195
  1188  06A6  0842               	movf	xvprintf@w,w
  1189  06A7  0223               	subwf	??_xvprintf,w
  1190  06A8                     u1195:	
  1191  06A8  1803               	btfsc	3,0
  1192  06A9  2DCE               	goto	l108
  1193  06AA  3020               	movlw	32
  1194  06AB  3184  246A  3185   	fcall	_xputc
  1195  06AE  2E9A               	goto	l1495
  1196  06AF                     l1497:	
  1197                           ;xprintf.c: 129: case 'C' :
  1198                           
  1199                           ;xprintf.c: 128: continue;
  1200                           
  1201                           
  1202                           ;xprintf.c: 130: xputc((char)(*(int *)__va_arg((*(int **)arp), (int)0))); continue;
  1203  06AF  0822               	movf	xvprintf@arp,w
  1204  06B0  0086               	movwf	6
  1205  06B1  0187               	clrf	7
  1206  06B2  0801               	movf	1,w
  1207  06B3  0084               	movwf	4
  1208  06B4  0185               	clrf	5
  1209  06B5  3002               	movlw	2
  1210  06B6  0781               	addwf	1,f
  1211  06B7  0800               	movf	0,w
  1212  06B8  3184  246A  3185   	fcall	_xputc
  1213  06BB  2DCE               	goto	l108
  1214  06BC                     l1499:	
  1215                           ;xprintf.c: 131: case 'B' :
  1216                           
  1217                           
  1218                           ;xprintf.c: 132: r = 2; break;
  1219  06BC  3002               	movlw	2
  1220  06BD  0020               	movlb	0	; select bank0
  1221  06BE  2EC4               	goto	L3
  1222  06BF                     l1501:	
  1223                           ;xprintf.c: 133: case 'O' :
  1224                           
  1225                           
  1226                           ;xprintf.c: 134: r = 8; break;
  1227  06BF  3008               	movlw	8
  1228  06C0  2EC4               	goto	L3
  1229  06C1                     l1503:	
  1230                           ;xprintf.c: 135: case 'D' :
  1231                           
  1232                           
  1233                           ;xprintf.c: 136: case 'U' :
  1234                           ;xprintf.c: 137: r = 10; break;
  1235  06C1  300A               	movlw	10
  1236  06C2  2EC4               	goto	L3
  1237  06C3                     l1505:	
  1238                           ;xprintf.c: 138: case 'X' :
  1239                           
  1240                           
  1241                           ;xprintf.c: 139: r = 16; break;
  1242  06C3  3010               	movlw	16
  1243  06C4                     L3:	
  1244  06C4  00C0               	movwf	xvprintf@r
  1245  06C5  3000               	movlw	0
  1246  06C6  00C1               	movwf	xvprintf@r+1
  1247  06C7  2EE5               	goto	l141
  1248  06C8                     l1507:	
  1249                           ;xprintf.c: 140: default:
  1250                           
  1251                           
  1252                           ;xprintf.c: 141: xputc(c); continue;
  1253  06C8  084F               	movf	xvprintf@c,w
  1254  06C9  3184  246A  3185   	fcall	_xputc
  1255  06CC  2DCE               	goto	l108
  1256  06CD                     l1511:	
  1257                           ;xprintf.c: 142: }
  1258                           
  1259  06CD  0020               	movlb	0	; select bank0
  1260  06CE  084E               	movf	xvprintf@d,w
  1261                           
  1262                           ; Switch size 1, requested type "space"
  1263                           ; Number of cases is 7, Range of values is 66 to 88
  1264                           ; switch strategies available:
  1265                           ; Name         Instructions Cycles
  1266                           ; simple_byte           22    12 (average)
  1267                           ; direct_byte           55     9 (fixed)
  1268                           ; jumptable            263     9 (fixed)
  1269                           ;	Chosen strategy is simple_byte
  1270  06CF  3A42               	xorlw	66	; case 66
  1271  06D0  1903               	skipnz
  1272  06D1  2EBC               	goto	l1499
  1273  06D2  3A01               	xorlw	1	; case 67
  1274  06D3  1903               	skipnz
  1275  06D4  2EAF               	goto	l1497
  1276  06D5  3A07               	xorlw	7	; case 68
  1277  06D6  1903               	skipnz
  1278  06D7  2EC1               	goto	l1503
  1279  06D8  3A0B               	xorlw	11	; case 79
  1280  06D9  1903               	skipnz
  1281  06DA  2EBF               	goto	l1501
  1282  06DB  3A1C               	xorlw	28	; case 83
  1283  06DC  1903               	skipnz
  1284  06DD  2E65               	goto	l1477
  1285  06DE  3A06               	xorlw	6	; case 85
  1286  06DF  1903               	skipnz
  1287  06E0  2EC1               	goto	l1503
  1288  06E1  3A0D               	xorlw	13	; case 88
  1289  06E2  1903               	skipnz
  1290  06E3  2EC3               	goto	l1505
  1291  06E4  2EC8               	goto	l1507
  1292  06E5                     l141:	
  1293                           
  1294                           ;xprintf.c: 145: v = (f & 4) ? (*(long *)__va_arg((*(long **)arp), (long)0)) : ((d == 'D
      +                          ') ? (long)(*(int *)__va_arg((*(int **)arp), (int)0)) : (long)(*(unsigned int *)__va_arg
      +                          ((*(unsigned int **)arp), (unsigned int)0)));
  1295  06E5  0020               	movlb	0	; select bank0
  1296  06E6  194A               	btfsc	xvprintf@f,2
  1297  06E7  2F1D               	goto	l1521
  1298  06E8  3044               	movlw	68
  1299  06E9  064E               	xorwf	xvprintf@d,w
  1300  06EA  1903               	btfsc	3,2
  1301  06EB  2EFF               	goto	l1517
  1302  06EC  0822               	movf	xvprintf@arp,w
  1303  06ED  0086               	movwf	6
  1304  06EE  0187               	clrf	7
  1305  06EF  0801               	movf	1,w
  1306  06F0  0084               	movwf	4
  1307  06F1  0185               	clrf	5
  1308  06F2  3002               	movlw	2
  1309  06F3  0781               	addwf	1,f
  1310  06F4  3F00               	moviw [0]fsr0
  1311  06F5  00A3               	movwf	??_xvprintf
  1312  06F6  3F01               	moviw [1]fsr0
  1313  06F7  00A4               	movwf	??_xvprintf+1
  1314  06F8  0823               	movf	??_xvprintf,w
  1315  06F9  00B7               	movwf	_xvprintf$155
  1316  06FA  0824               	movf	??_xvprintf+1,w
  1317  06FB  00B8               	movwf	_xvprintf$155+1
  1318  06FC  01B9               	clrf	_xvprintf$155+2
  1319  06FD  01BA               	clrf	_xvprintf$155+3
  1320  06FE  2F14               	goto	l1519
  1321  06FF                     l1517:	
  1322  06FF  0822               	movf	xvprintf@arp,w
  1323  0700  0086               	movwf	6
  1324  0701  0187               	clrf	7
  1325  0702  0801               	movf	1,w
  1326  0703  0084               	movwf	4
  1327  0704  0185               	clrf	5
  1328  0705  3002               	movlw	2
  1329  0706  0781               	addwf	1,f
  1330  0707  3F00               	moviw [0]fsr0
  1331  0708  00A3               	movwf	??_xvprintf
  1332  0709  3F01               	moviw [1]fsr0
  1333  070A  00A4               	movwf	??_xvprintf+1
  1334  070B  0823               	movf	??_xvprintf,w
  1335  070C  00B7               	movwf	_xvprintf$155
  1336  070D  0824               	movf	??_xvprintf+1,w
  1337  070E  00B8               	movwf	_xvprintf$155+1
  1338  070F  0D89               	rlf	9,f
  1339  0710  3B89               	subwfb	9,f
  1340  0711  0989               	comf	9,f
  1341  0712  00B9               	movwf	_xvprintf$155+2
  1342  0713  00BA               	movwf	_xvprintf$155+3
  1343  0714                     l1519:	
  1344  0714  083A               	movf	_xvprintf$155+3,w
  1345  0715  00C9               	movwf	xvprintf@v+3
  1346  0716  0839               	movf	_xvprintf$155+2,w
  1347  0717  00C8               	movwf	xvprintf@v+2
  1348  0718  0838               	movf	_xvprintf$155+1,w
  1349  0719  00C7               	movwf	xvprintf@v+1
  1350  071A  0837               	movf	_xvprintf$155,w
  1351  071B  00C6               	movwf	xvprintf@v
  1352  071C  2F2D               	goto	l1523
  1353  071D                     l1521:	
  1354  071D  0822               	movf	xvprintf@arp,w
  1355  071E  0086               	movwf	6
  1356  071F  0187               	clrf	7
  1357  0720  0801               	movf	1,w
  1358  0721  0084               	movwf	4
  1359  0722  0185               	clrf	5
  1360  0723  3004               	movlw	4
  1361  0724  0781               	addwf	1,f
  1362  0725  3F00               	moviw [0]fsr0
  1363  0726  00C6               	movwf	xvprintf@v
  1364  0727  3F01               	moviw [1]fsr0
  1365  0728  00C7               	movwf	xvprintf@v+1
  1366  0729  3F02               	moviw [2]fsr0
  1367  072A  00C8               	movwf	xvprintf@v+2
  1368  072B  3F03               	moviw [3]fsr0
  1369  072C  00C9               	movwf	xvprintf@v+3
  1370  072D                     l1523:	
  1371                           
  1372                           ;xprintf.c: 146: if (d == 'D' && (v & 0x80000000)) {
  1373  072D  3044               	movlw	68
  1374  072E  064E               	xorwf	xvprintf@d,w
  1375  072F  1903               	btfsc	3,2
  1376  0730  1FC9               	btfss	xvprintf@v+3,7
  1377  0731  2F3E               	goto	l1529
  1378                           
  1379                           ;xprintf.c: 147: v = 0 - v;
  1380  0732  09C6               	comf	xvprintf@v,f
  1381  0733  09C7               	comf	xvprintf@v+1,f
  1382  0734  09C8               	comf	xvprintf@v+2,f
  1383  0735  09C9               	comf	xvprintf@v+3,f
  1384  0736  0AC6               	incf	xvprintf@v,f
  1385  0737  1903               	skipnz
  1386  0738  0AC7               	incf	xvprintf@v+1,f
  1387  0739  1903               	skipnz
  1388  073A  0AC8               	incf	xvprintf@v+2,f
  1389  073B  1903               	skipnz
  1390  073C  0AC9               	incf	xvprintf@v+3,f
  1391                           
  1392                           ;xprintf.c: 148: f |= 8;
  1393  073D  15CA               	bsf	xvprintf@f,3
  1394  073E                     l1529:	
  1395                           
  1396                           ;xprintf.c: 149: }
  1397                           ;xprintf.c: 150: i = 0;
  1398  073E  01CC               	clrf	xvprintf@i
  1399  073F  01CD               	clrf	xvprintf@i+1
  1400  0740                     l1531:	
  1401                           ;xprintf.c: 151: do {
  1402                           
  1403                           
  1404                           ;xprintf.c: 152: d = (char)(v % r); v /= r;
  1405  0740  0840               	movf	xvprintf@r,w
  1406  0741  00F0               	movwf	___llmod@divisor
  1407  0742  0841               	movf	xvprintf@r+1,w
  1408  0743  00F1               	movwf	___llmod@divisor+1
  1409  0744  01F2               	clrf	___llmod@divisor+2
  1410  0745  01F3               	clrf	___llmod@divisor+3
  1411  0746  0849               	movf	xvprintf@v+3,w
  1412  0747  00F7               	movwf	___llmod@dividend+3
  1413  0748  0848               	movf	xvprintf@v+2,w
  1414  0749  00F6               	movwf	___llmod@dividend+2
  1415  074A  0847               	movf	xvprintf@v+1,w
  1416  074B  00F5               	movwf	___llmod@dividend+1
  1417  074C  0846               	movf	xvprintf@v,w
  1418  074D  00F4               	movwf	___llmod@dividend
  1419  074E  3184  24D1  3185   	fcall	___llmod
  1420  0751  0870               	movf	?___llmod,w
  1421  0752  0020               	movlb	0	; select bank0
  1422  0753  00A3               	movwf	??_xvprintf
  1423  0754  0823               	movf	??_xvprintf,w
  1424  0755  00CE               	movwf	xvprintf@d
  1425  0756  0840               	movf	xvprintf@r,w
  1426  0757  00F0               	movwf	___lldiv@divisor
  1427  0758  0841               	movf	xvprintf@r+1,w
  1428  0759  00F1               	movwf	___lldiv@divisor+1
  1429  075A  01F2               	clrf	___lldiv@divisor+2
  1430  075B  01F3               	clrf	___lldiv@divisor+3
  1431  075C  0849               	movf	xvprintf@v+3,w
  1432  075D  00F7               	movwf	___lldiv@dividend+3
  1433  075E  0848               	movf	xvprintf@v+2,w
  1434  075F  00F6               	movwf	___lldiv@dividend+2
  1435  0760  0847               	movf	xvprintf@v+1,w
  1436  0761  00F5               	movwf	___lldiv@dividend+1
  1437  0762  0846               	movf	xvprintf@v,w
  1438  0763  00F4               	movwf	___lldiv@dividend
  1439  0764  3185  2513  3185   	fcall	___lldiv
  1440  0767  0873               	movf	?___lldiv+3,w
  1441  0768  0020               	movlb	0	; select bank0
  1442  0769  00C9               	movwf	xvprintf@v+3
  1443  076A  0872               	movf	?___lldiv+2,w
  1444  076B  00C8               	movwf	xvprintf@v+2
  1445  076C  0871               	movf	?___lldiv+1,w
  1446  076D  00C7               	movwf	xvprintf@v+1
  1447  076E  0870               	movf	?___lldiv,w
  1448  076F  00C6               	movwf	xvprintf@v
  1449                           
  1450                           ;xprintf.c: 153: if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
  1451  0770  300A               	movlw	10
  1452  0771  024E               	subwf	xvprintf@d,w
  1453  0772  1C03               	skipc
  1454  0773  2F82               	goto	l1545
  1455  0774  3078               	movlw	120
  1456  0775  064F               	xorwf	xvprintf@c,w
  1457  0776  1903               	btfsc	3,2
  1458  0777  2F7A               	goto	l1541
  1459  0778  3007               	movlw	7
  1460  0779  2F7B               	goto	L4
  1461  077A                     l1541:	
  1462  077A  3027               	movlw	39
  1463  077B                     L4:	
  1464  077B  00BB               	movwf	_xvprintf$156
  1465  077C  3000               	movlw	0
  1466  077D  00BC               	movwf	_xvprintf$156+1
  1467  077E  083B               	movf	_xvprintf$156,w
  1468  077F  00A3               	movwf	??_xvprintf
  1469  0780  0823               	movf	??_xvprintf,w
  1470  0781  07CE               	addwf	xvprintf@d,f
  1471  0782                     l1545:	
  1472                           
  1473                           ;xprintf.c: 154: s[i++] = d + '0';
  1474  0782  084E               	movf	xvprintf@d,w
  1475  0783  3E30               	addlw	48
  1476  0784  00A3               	movwf	??_xvprintf
  1477  0785  084C               	movf	xvprintf@i,w
  1478  0786  3E27               	addlw	(low (xvprintf@s| 0))& (0+255)
  1479  0787  0086               	movwf	6
  1480  0788  0187               	clrf	7
  1481  0789  0823               	movf	??_xvprintf,w
  1482  078A  0081               	movwf	1
  1483  078B  3001               	movlw	1
  1484  078C  07CC               	addwf	xvprintf@i,f
  1485  078D  3000               	movlw	0
  1486  078E  3DCD               	addwfc	xvprintf@i+1,f
  1487                           
  1488                           ;xprintf.c: 155: } while (v && i < sizeof(s));
  1489  078F  0849               	movf	xvprintf@v+3,w
  1490  0790  0448               	iorwf	xvprintf@v+2,w
  1491  0791  0447               	iorwf	xvprintf@v+1,w
  1492  0792  0446               	iorwf	xvprintf@v,w
  1493  0793  1903               	skipnz
  1494  0794  2F9C               	goto	l164
  1495  0795  3000               	movlw	0
  1496  0796  024D               	subwf	xvprintf@i+1,w
  1497  0797  3010               	movlw	16
  1498  0798  1903               	skipnz
  1499  0799  024C               	subwf	xvprintf@i,w
  1500  079A  1C03               	skipc
  1501  079B  2F40               	goto	l1531
  1502  079C                     l164:	
  1503                           
  1504                           ;xprintf.c: 156: if (f & 8) s[i++] = '-';
  1505  079C  1DCA               	btfss	xvprintf@f,3
  1506  079D  2FAA               	goto	l1557
  1507  079E  302D               	movlw	45
  1508  079F  00A3               	movwf	??_xvprintf
  1509  07A0  084C               	movf	xvprintf@i,w
  1510  07A1  3E27               	addlw	(low (xvprintf@s| 0))& (0+255)
  1511  07A2  0086               	movwf	6
  1512  07A3  0187               	clrf	7
  1513  07A4  0823               	movf	??_xvprintf,w
  1514  07A5  0081               	movwf	1
  1515  07A6  3001               	movlw	1
  1516  07A7  07CC               	addwf	xvprintf@i,f
  1517  07A8  3000               	movlw	0
  1518  07A9  3DCD               	addwfc	xvprintf@i+1,f
  1519  07AA                     l1557:	
  1520                           
  1521                           ;xprintf.c: 157: j = i; d = (f & 1) ? '0' : ' ';
  1522  07AA  084D               	movf	xvprintf@i+1,w
  1523  07AB  00C5               	movwf	xvprintf@j+1
  1524  07AC  084C               	movf	xvprintf@i,w
  1525  07AD  00C4               	movwf	xvprintf@j
  1526  07AE  184A               	btfsc	xvprintf@f,0
  1527  07AF  2FB2               	goto	l1563
  1528  07B0  3020               	movlw	32
  1529  07B1  2FB3               	goto	L5
  1530  07B2                     l1563:	
  1531  07B2  3030               	movlw	48
  1532  07B3                     L5:	
  1533  07B3  00BD               	movwf	_xvprintf$157
  1534  07B4  3000               	movlw	0
  1535  07B5  00BE               	movwf	_xvprintf$157+1
  1536  07B6  083D               	movf	_xvprintf$157,w
  1537  07B7  00A3               	movwf	??_xvprintf
  1538  07B8  0823               	movf	??_xvprintf,w
  1539  07B9  00CE               	movwf	xvprintf@d
  1540                           
  1541                           ;xprintf.c: 158: while (!(f & 2) && j++ < w) xputc(d);
  1542  07BA  2FBF               	goto	l1567
  1543  07BB                     l1565:	
  1544  07BB  084E               	movf	xvprintf@d,w
  1545  07BC  3184  246A  3185   	fcall	_xputc
  1546  07BF                     l1567:	
  1547  07BF  0020               	movlb	0	; select bank0
  1548  07C0  18CA               	btfsc	xvprintf@f,1
  1549  07C1  2FD1               	goto	l1571
  1550  07C2  0845               	movf	xvprintf@j+1,w
  1551  07C3  00A4               	movwf	??_xvprintf+1
  1552  07C4  0844               	movf	xvprintf@j,w
  1553  07C5  00A3               	movwf	??_xvprintf
  1554  07C6  0AC4               	incf	xvprintf@j,f
  1555  07C7  1903               	skipnz
  1556  07C8  0AC5               	incf	xvprintf@j+1,f
  1557  07C9  0843               	movf	xvprintf@w+1,w
  1558  07CA  0224               	subwf	??_xvprintf+1,w
  1559  07CB  1D03               	skipz
  1560  07CC  2FCF               	goto	u1315
  1561  07CD  0842               	movf	xvprintf@w,w
  1562  07CE  0223               	subwf	??_xvprintf,w
  1563  07CF                     u1315:	
  1564  07CF  1C03               	skipc
  1565  07D0  2FBB               	goto	l1565
  1566  07D1                     l1571:	
  1567                           ;xprintf.c: 159: do xputc(s[--i]); while(i);
  1568                           
  1569  07D1  3001               	movlw	1
  1570  07D2  02CC               	subwf	xvprintf@i,f
  1571  07D3  3000               	movlw	0
  1572  07D4  3BCD               	subwfb	xvprintf@i+1,f
  1573  07D5  084C               	movf	xvprintf@i,w
  1574  07D6  3E27               	addlw	(low (xvprintf@s| 0))& (0+255)
  1575  07D7  0086               	movwf	6
  1576  07D8  0187               	clrf	7
  1577  07D9  0801               	movf	1,w
  1578  07DA  3184  246A  3185   	fcall	_xputc
  1579  07DD  0020               	movlb	0	; select bank0
  1580  07DE  084C               	movf	xvprintf@i,w
  1581  07DF  044D               	iorwf	xvprintf@i+1,w
  1582  07E0  1903               	btfsc	3,2
  1583  07E1  2FE7               	goto	l1577
  1584  07E2  2FD1               	goto	l1571
  1585  07E3                     l1575:	
  1586                           ;xprintf.c: 160: while (j++ < w) xputc(' ');
  1587                           
  1588  07E3  3020               	movlw	32
  1589  07E4  3184  246A  3185   	fcall	_xputc
  1590  07E7                     l1577:	
  1591  07E7  0020               	movlb	0	; select bank0
  1592  07E8  0845               	movf	xvprintf@j+1,w
  1593  07E9  00A4               	movwf	??_xvprintf+1
  1594  07EA  0844               	movf	xvprintf@j,w
  1595  07EB  00A3               	movwf	??_xvprintf
  1596  07EC  0AC4               	incf	xvprintf@j,f
  1597  07ED  1903               	skipnz
  1598  07EE  0AC5               	incf	xvprintf@j+1,f
  1599  07EF  0843               	movf	xvprintf@w+1,w
  1600  07F0  0224               	subwf	??_xvprintf+1,w
  1601  07F1  1D03               	skipz
  1602  07F2  2FF5               	goto	u1335
  1603  07F3  0842               	movf	xvprintf@w,w
  1604  07F4  0223               	subwf	??_xvprintf,w
  1605  07F5                     u1335:	
  1606  07F5  1803               	btfsc	3,0
  1607  07F6  2DCE               	goto	l108
  1608  07F7  2FE3               	goto	l1575
  1609  07F8                     __end_of_xvprintf:	
  1610                           ;xprintf.c: 161: }
  1611                           
  1612                           
  1613                           	psect	text3
  1614  03EE                     __ptext3:	
  1615 ;; *************** function _xputs *****************
  1616 ;; Defined at:
  1617 ;;		line 44 in file "xprintf.c"
  1618 ;; Parameters:    Size  Location     Type
  1619 ;;  str             1    wreg     PTR const unsigned char 
  1620 ;;		 -> ?_xfprintf(1), ?_xsprintf(1), ?_xprintf(1), 
  1621 ;; Auto vars:     Size  Location     Type
  1622 ;;  str             1    7[COMMON] PTR const unsigned char 
  1623 ;;		 -> ?_xfprintf(1), ?_xsprintf(1), ?_xprintf(1), 
  1624 ;; Return value:  Size  Location     Type
  1625 ;;                  1    wreg      void 
  1626 ;; Registers used:
  1627 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  1628 ;; Tracked objects:
  1629 ;;		On entry : 0/0
  1630 ;;		On exit  : 0/0
  1631 ;;		Unchanged: 0/0
  1632 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  1633 ;;      Params:         0       0       0       0       0       0
  1634 ;;      Locals:         1       0       0       0       0       0
  1635 ;;      Temps:          1       0       0       0       0       0
  1636 ;;      Totals:         2       0       0       0       0       0
  1637 ;;Total ram usage:        2 bytes
  1638 ;; Hardware stack levels used:    1
  1639 ;; Hardware stack levels required when called:    3
  1640 ;; This function calls:
  1641 ;;		_xputc
  1642 ;; This function is called by:
  1643 ;;		_xvprintf
  1644 ;; This function uses a non-reentrant model
  1645 ;;
  1646                           
  1647                           
  1648                           ;psect for function _xputs
  1649  03EE                     _xputs:	
  1650                           
  1651                           ;incstack = 0
  1652                           ; Regs used in _xputs: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  1653                           ;xputs@str stored from wreg
  1654  03EE  00F7               	movwf	xputs@str
  1655  03EF                     l1349:	
  1656                           ;xprintf.c: 48: while (*str)
  1657                           
  1658  03EF  0877               	movf	xputs@str,w
  1659  03F0  0086               	movwf	6
  1660  03F1  0187               	clrf	7
  1661  03F2  0801               	movf	1,w
  1662  03F3  1903               	btfsc	3,2
  1663  03F4  0008               	return
  1664                           
  1665                           ;xprintf.c: 49: xputc(*str++);
  1666  03F5  0877               	movf	xputs@str,w
  1667  03F6  0086               	movwf	6
  1668  03F7  0187               	clrf	7
  1669  03F8  0801               	movf	1,w
  1670  03F9  3184  246A  3183   	fcall	_xputc
  1671  03FC  3001               	movlw	1
  1672  03FD  00F6               	movwf	??_xputs
  1673  03FE  0876               	movf	??_xputs,w
  1674  03FF  07F7               	addwf	xputs@str,f
  1675  0400  2BEF               	goto	l1349
  1676  0401                     __end_of_xputs:	
  1677                           
  1678                           	psect	text4
  1679  046A                     __ptext4:	
  1680 ;; *************** function _xputc *****************
  1681 ;; Defined at:
  1682 ;;		line 26 in file "xprintf.c"
  1683 ;; Parameters:    Size  Location     Type
  1684 ;;  c               1    wreg     unsigned char 
  1685 ;; Auto vars:     Size  Location     Type
  1686 ;;  c               1    5[COMMON] unsigned char 
  1687 ;; Return value:  Size  Location     Type
  1688 ;;                  1    wreg      void 
  1689 ;; Registers used:
  1690 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  1691 ;; Tracked objects:
  1692 ;;		On entry : 0/0
  1693 ;;		On exit  : 0/0
  1694 ;;		Unchanged: 0/0
  1695 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  1696 ;;      Params:         0       0       0       0       0       0
  1697 ;;      Locals:         1       0       0       0       0       0
  1698 ;;      Temps:          1       0       0       0       0       0
  1699 ;;      Totals:         2       0       0       0       0       0
  1700 ;;Total ram usage:        2 bytes
  1701 ;; Hardware stack levels used:    1
  1702 ;; Hardware stack levels required when called:    2
  1703 ;; This function calls:
  1704 ;;		Absolute function
  1705 ;;		_LCD_Put
  1706 ;; This function is called by:
  1707 ;;		_xputs
  1708 ;;		_xvprintf
  1709 ;;		_xfputs
  1710 ;;		_put_dump
  1711 ;;		_xgets
  1712 ;; This function uses a non-reentrant model
  1713 ;;
  1714                           
  1715                           
  1716                           ;psect for function _xputc
  1717  046A                     _xputc:	
  1718                           
  1719                           ;incstack = 0
  1720                           ; Regs used in _xputc: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  1721                           ;xputc@c stored from wreg
  1722  046A  00F5               	movwf	xputc@c
  1723  046B  300A               	movlw	10
  1724  046C  0675               	xorwf	xputc@c,w
  1725  046D  1D03               	btfss	3,2
  1726  046E  2C79               	goto	l1331
  1727  046F  302A               	movlw	(low (STR_2| (0+32768)))& (0+255)
  1728  0470  00F4               	movwf	??_xputc
  1729  0471  0874               	movf	??_xputc,w
  1730  0472  00F3               	movwf	LCD_Put@word
  1731  0473  0020               	movlb	0	; select bank0
  1732  0474  085D               	movf	_xfunc_out+1,w
  1733  0475  008A               	movwf	10
  1734  0476  085C               	movf	_xfunc_out,w
  1735  0477  000A               	callw
  1736  0478  3184               	pagesel	$
  1737  0479                     l1331:	
  1738                           
  1739                           ;xprintf.c: 30: if (outptr) {
  1740  0479  0020               	movlb	0	; select bank0
  1741  047A  085E               	movf	_outptr,w
  1742  047B  1903               	btfsc	3,2
  1743  047C  2C89               	goto	l1339
  1744                           
  1745                           ;xprintf.c: 31: *outptr++ = (unsigned char)c;
  1746  047D  0875               	movf	xputc@c,w
  1747  047E  00F4               	movwf	??_xputc
  1748  047F  085E               	movf	_outptr,w
  1749  0480  0086               	movwf	6
  1750  0481  0187               	clrf	7
  1751  0482  0874               	movf	??_xputc,w
  1752  0483  0081               	movwf	1
  1753  0484  3001               	movlw	1
  1754  0485  00F4               	movwf	??_xputc
  1755  0486  0874               	movf	??_xputc,w
  1756  0487  07DE               	addwf	_outptr,f
  1757                           
  1758                           ;xprintf.c: 32: return;
  1759  0488  0008               	return
  1760  0489                     l1339:	
  1761                           
  1762                           ;xprintf.c: 33: }
  1763                           ;xprintf.c: 35: if (xfunc_out) xfunc_out((unsigned char)c);
  1764  0489  085C               	movf	_xfunc_out,w
  1765  048A  045D               	iorwf	_xfunc_out+1,w
  1766  048B  1903               	btfsc	3,2
  1767  048C  0008               	return
  1768  048D  0875               	movf	xputc@c,w
  1769  048E  00F4               	movwf	??_xputc
  1770  048F  0874               	movf	??_xputc,w
  1771  0490  00F3               	movwf	LCD_Put@word
  1772  0491  085D               	movf	_xfunc_out+1,w
  1773  0492  008A               	movwf	10
  1774  0493  085C               	movf	_xfunc_out,w
  1775  0494  000A               	callw
  1776  0495  3184               	pagesel	$
  1777  0496  0008               	return
  1778  0497                     __end_of_xputc:	
  1779                           
  1780                           	psect	text5
  1781  03C9                     __ptext5:	
  1782 ;; *************** function _LCD_Put *****************
  1783 ;; Defined at:
  1784 ;;		line 54 in file "LCD.c"
  1785 ;; Parameters:    Size  Location     Type
  1786 ;;  word            1    3[COMMON] char 
  1787 ;; Auto vars:     Size  Location     Type
  1788 ;;		None
  1789 ;; Return value:  Size  Location     Type
  1790 ;;                  1    wreg      void 
  1791 ;; Registers used:
  1792 ;;		wreg, status,2, status,0, pclath, cstack
  1793 ;; Tracked objects:
  1794 ;;		On entry : 0/0
  1795 ;;		On exit  : 0/0
  1796 ;;		Unchanged: 0/0
  1797 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  1798 ;;      Params:         1       0       0       0       0       0
  1799 ;;      Locals:         0       0       0       0       0       0
  1800 ;;      Temps:          0       0       0       0       0       0
  1801 ;;      Totals:         1       0       0       0       0       0
  1802 ;;Total ram usage:        1 bytes
  1803 ;; Hardware stack levels used:    1
  1804 ;; Hardware stack levels required when called:    1
  1805 ;; This function calls:
  1806 ;;		_LCD_WriteData
  1807 ;; This function is called by:
  1808 ;;		_main
  1809 ;;		_xputc
  1810 ;; This function uses a non-reentrant model
  1811 ;;
  1812                           
  1813                           
  1814                           ;psect for function _LCD_Put
  1815  03C9                     _LCD_Put:	
  1816                           
  1817                           ;LCD.c: 56: RA4 = 1;
  1818                           
  1819                           ;incstack = 0
  1820                           ; Regs used in _LCD_Put: [wreg+status,2+status,0+pclath+cstack]
  1821  03C9  0020               	movlb	0	; select bank0
  1822  03CA  160C               	bsf	12,4	;volatile
  1823                           
  1824                           ;LCD.c: 57: LCD_WriteData(word);
  1825  03CB  0873               	movf	LCD_Put@word,w
  1826  03CC  3184  2497         	fcall	_LCD_WriteData
  1827  03CE  0008               	return
  1828  03CF                     __end_of_LCD_Put:	
  1829                           
  1830                           	psect	text6
  1831  042B                     __ptext6:	
  1832 ;; *************** function ___wmul *****************
  1833 ;; Defined at:
  1834 ;;		line 15 in file "/opt/microchip/xc8/v1.41/sources/common/Umul16.c"
  1835 ;; Parameters:    Size  Location     Type
  1836 ;;  multiplier      2    0[COMMON] unsigned int 
  1837 ;;  multiplicand    2    2[COMMON] unsigned int 
  1838 ;; Auto vars:     Size  Location     Type
  1839 ;;  product         2    4[COMMON] unsigned int 
  1840 ;; Return value:  Size  Location     Type
  1841 ;;                  2    0[COMMON] unsigned int 
  1842 ;; Registers used:
  1843 ;;		wreg, status,2, status,0
  1844 ;; Tracked objects:
  1845 ;;		On entry : 0/0
  1846 ;;		On exit  : 0/0
  1847 ;;		Unchanged: 0/0
  1848 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  1849 ;;      Params:         4       0       0       0       0       0
  1850 ;;      Locals:         2       0       0       0       0       0
  1851 ;;      Temps:          0       0       0       0       0       0
  1852 ;;      Totals:         6       0       0       0       0       0
  1853 ;;Total ram usage:        6 bytes
  1854 ;; Hardware stack levels used:    1
  1855 ;; This function calls:
  1856 ;;		Nothing
  1857 ;; This function is called by:
  1858 ;;		_xvprintf
  1859 ;; This function uses a non-reentrant model
  1860 ;;
  1861                           
  1862                           
  1863                           ;psect for function ___wmul
  1864  042B                     ___wmul:	
  1865                           
  1866                           ;incstack = 0
  1867                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  1868  042B  01F4               	clrf	___wmul@product
  1869  042C  01F5               	clrf	___wmul@product+1
  1870  042D                     l1353:	
  1871  042D  1C70               	btfss	___wmul@multiplier,0
  1872  042E  2C33               	goto	l345
  1873  042F  0872               	movf	___wmul@multiplicand,w
  1874  0430  07F4               	addwf	___wmul@product,f
  1875  0431  0873               	movf	___wmul@multiplicand+1,w
  1876  0432  3DF5               	addwfc	___wmul@product+1,f
  1877  0433                     l345:	
  1878  0433  3001               	movlw	1
  1879  0434                     u905:	
  1880  0434  35F2               	lslf	___wmul@multiplicand,f
  1881  0435  0DF3               	rlf	___wmul@multiplicand+1,f
  1882  0436  0B89               	decfsz	9,f
  1883  0437  2C34               	goto	u905
  1884  0438  3001               	movlw	1
  1885  0439                     u915:	
  1886  0439  36F1               	lsrf	___wmul@multiplier+1,f
  1887  043A  0CF0               	rrf	___wmul@multiplier,f
  1888  043B  0B89               	decfsz	9,f
  1889  043C  2C39               	goto	u915
  1890  043D  0870               	movf	___wmul@multiplier,w
  1891  043E  0471               	iorwf	___wmul@multiplier+1,w
  1892  043F  1D03               	btfss	3,2
  1893  0440  2C2D               	goto	l1353
  1894  0441  0875               	movf	___wmul@product+1,w
  1895  0442  00F1               	movwf	?___wmul+1
  1896  0443  0874               	movf	___wmul@product,w
  1897  0444  00F0               	movwf	?___wmul
  1898  0445  0008               	return
  1899  0446                     __end_of___wmul:	
  1900                           
  1901                           	psect	text7
  1902  04D1                     __ptext7:	
  1903 ;; *************** function ___llmod *****************
  1904 ;; Defined at:
  1905 ;;		line 6 in file "/opt/microchip/xc8/v1.41/sources/common/llmod.c"
  1906 ;; Parameters:    Size  Location     Type
  1907 ;;  divisor         4    0[COMMON] unsigned long 
  1908 ;;  dividend        4    4[COMMON] unsigned long 
  1909 ;; Auto vars:     Size  Location     Type
  1910 ;;  counter         1    9[COMMON] unsigned char 
  1911 ;; Return value:  Size  Location     Type
  1912 ;;                  4    0[COMMON] unsigned long 
  1913 ;; Registers used:
  1914 ;;		wreg, status,2, status,0
  1915 ;; Tracked objects:
  1916 ;;		On entry : 0/0
  1917 ;;		On exit  : 0/0
  1918 ;;		Unchanged: 0/0
  1919 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  1920 ;;      Params:         8       0       0       0       0       0
  1921 ;;      Locals:         1       0       0       0       0       0
  1922 ;;      Temps:          1       0       0       0       0       0
  1923 ;;      Totals:        10       0       0       0       0       0
  1924 ;;Total ram usage:       10 bytes
  1925 ;; Hardware stack levels used:    1
  1926 ;; This function calls:
  1927 ;;		Nothing
  1928 ;; This function is called by:
  1929 ;;		_xvprintf
  1930 ;; This function uses a non-reentrant model
  1931 ;;
  1932                           
  1933                           
  1934                           ;psect for function ___llmod
  1935  04D1                     ___llmod:	
  1936                           
  1937                           ;incstack = 0
  1938                           ; Regs used in ___llmod: [wreg+status,2+status,0]
  1939  04D1  0873               	movf	___llmod@divisor+3,w
  1940  04D2  0472               	iorwf	___llmod@divisor+2,w
  1941  04D3  0471               	iorwf	___llmod@divisor+1,w
  1942  04D4  0470               	iorwf	___llmod@divisor,w
  1943  04D5  1903               	skipnz
  1944  04D6  2D0A               	goto	l1405
  1945  04D7  01F9               	clrf	___llmod@counter
  1946  04D8  0AF9               	incf	___llmod@counter,f
  1947  04D9                     l1395:	
  1948  04D9  1BF3               	btfsc	___llmod@divisor+3,7
  1949  04DA  2CE7               	goto	l1397
  1950  04DB  3001               	movlw	1
  1951  04DC                     u1015:	
  1952  04DC  35F0               	lslf	___llmod@divisor,f
  1953  04DD  0DF1               	rlf	___llmod@divisor+1,f
  1954  04DE  0DF2               	rlf	___llmod@divisor+2,f
  1955  04DF  0DF3               	rlf	___llmod@divisor+3,f
  1956  04E0  0B89               	decfsz	9,f
  1957  04E1  2CDC               	goto	u1015
  1958  04E2  3001               	movlw	1
  1959  04E3  00F8               	movwf	??___llmod
  1960  04E4  0878               	movf	??___llmod,w
  1961  04E5  07F9               	addwf	___llmod@counter,f
  1962  04E6  2CD9               	goto	l1395
  1963  04E7                     l1397:	
  1964  04E7  0873               	movf	___llmod@divisor+3,w
  1965  04E8  0277               	subwf	___llmod@dividend+3,w
  1966  04E9  1D03               	skipz
  1967  04EA  2CF5               	goto	u1035
  1968  04EB  0872               	movf	___llmod@divisor+2,w
  1969  04EC  0276               	subwf	___llmod@dividend+2,w
  1970  04ED  1D03               	skipz
  1971  04EE  2CF5               	goto	u1035
  1972  04EF  0871               	movf	___llmod@divisor+1,w
  1973  04F0  0275               	subwf	___llmod@dividend+1,w
  1974  04F1  1D03               	skipz
  1975  04F2  2CF5               	goto	u1035
  1976  04F3  0870               	movf	___llmod@divisor,w
  1977  04F4  0274               	subwf	___llmod@dividend,w
  1978  04F5                     u1035:	
  1979  04F5  1C03               	skipc
  1980  04F6  2CFF               	goto	l1401
  1981  04F7  0870               	movf	___llmod@divisor,w
  1982  04F8  02F4               	subwf	___llmod@dividend,f
  1983  04F9  0871               	movf	___llmod@divisor+1,w
  1984  04FA  3BF5               	subwfb	___llmod@dividend+1,f
  1985  04FB  0872               	movf	___llmod@divisor+2,w
  1986  04FC  3BF6               	subwfb	___llmod@dividend+2,f
  1987  04FD  0873               	movf	___llmod@divisor+3,w
  1988  04FE  3BF7               	subwfb	___llmod@dividend+3,f
  1989  04FF                     l1401:	
  1990  04FF  3001               	movlw	1
  1991  0500                     u1045:	
  1992  0500  36F3               	lsrf	___llmod@divisor+3,f
  1993  0501  0CF2               	rrf	___llmod@divisor+2,f
  1994  0502  0CF1               	rrf	___llmod@divisor+1,f
  1995  0503  0CF0               	rrf	___llmod@divisor,f
  1996  0504  0B89               	decfsz	9,f
  1997  0505  2D00               	goto	u1045
  1998  0506  3001               	movlw	1
  1999  0507  02F9               	subwf	___llmod@counter,f
  2000  0508  1D03               	btfss	3,2
  2001  0509  2CE7               	goto	l1397
  2002  050A                     l1405:	
  2003  050A  0877               	movf	___llmod@dividend+3,w
  2004  050B  00F3               	movwf	?___llmod+3
  2005  050C  0876               	movf	___llmod@dividend+2,w
  2006  050D  00F2               	movwf	?___llmod+2
  2007  050E  0875               	movf	___llmod@dividend+1,w
  2008  050F  00F1               	movwf	?___llmod+1
  2009  0510  0874               	movf	___llmod@dividend,w
  2010  0511  00F0               	movwf	?___llmod
  2011  0512  0008               	return
  2012  0513                     __end_of___llmod:	
  2013                           
  2014                           	psect	text8
  2015  0513                     __ptext8:	
  2016 ;; *************** function ___lldiv *****************
  2017 ;; Defined at:
  2018 ;;		line 6 in file "/opt/microchip/xc8/v1.41/sources/common/lldiv.c"
  2019 ;; Parameters:    Size  Location     Type
  2020 ;;  divisor         4    0[COMMON] unsigned long 
  2021 ;;  dividend        4    4[COMMON] unsigned long 
  2022 ;; Auto vars:     Size  Location     Type
  2023 ;;  quotient        4    9[COMMON] unsigned long 
  2024 ;;  counter         1   13[COMMON] unsigned char 
  2025 ;; Return value:  Size  Location     Type
  2026 ;;                  4    0[COMMON] unsigned long 
  2027 ;; Registers used:
  2028 ;;		wreg, status,2, status,0
  2029 ;; Tracked objects:
  2030 ;;		On entry : 0/0
  2031 ;;		On exit  : 0/0
  2032 ;;		Unchanged: 0/0
  2033 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  2034 ;;      Params:         8       0       0       0       0       0
  2035 ;;      Locals:         5       0       0       0       0       0
  2036 ;;      Temps:          1       0       0       0       0       0
  2037 ;;      Totals:        14       0       0       0       0       0
  2038 ;;Total ram usage:       14 bytes
  2039 ;; Hardware stack levels used:    1
  2040 ;; This function calls:
  2041 ;;		Nothing
  2042 ;; This function is called by:
  2043 ;;		_xvprintf
  2044 ;; This function uses a non-reentrant model
  2045 ;;
  2046                           
  2047                           
  2048                           ;psect for function ___lldiv
  2049  0513                     ___lldiv:	
  2050                           
  2051                           ;incstack = 0
  2052                           ; Regs used in ___lldiv: [wreg+status,2+status,0]
  2053  0513  3000               	movlw	0
  2054  0514  00FC               	movwf	___lldiv@quotient+3
  2055  0515  3000               	movlw	0
  2056  0516  00FB               	movwf	___lldiv@quotient+2
  2057  0517  3000               	movlw	0
  2058  0518  00FA               	movwf	___lldiv@quotient+1
  2059  0519  3000               	movlw	0
  2060  051A  00F9               	movwf	___lldiv@quotient
  2061  051B  0873               	movf	___lldiv@divisor+3,w
  2062  051C  0472               	iorwf	___lldiv@divisor+2,w
  2063  051D  0471               	iorwf	___lldiv@divisor+1,w
  2064  051E  0470               	iorwf	___lldiv@divisor,w
  2065  051F  1903               	skipnz
  2066  0520  2D5C               	goto	l1385
  2067  0521  01FD               	clrf	___lldiv@counter
  2068  0522  0AFD               	incf	___lldiv@counter,f
  2069  0523                     l1371:	
  2070  0523  1BF3               	btfsc	___lldiv@divisor+3,7
  2071  0524  2D31               	goto	l1373
  2072  0525  3001               	movlw	1
  2073  0526                     u945:	
  2074  0526  35F0               	lslf	___lldiv@divisor,f
  2075  0527  0DF1               	rlf	___lldiv@divisor+1,f
  2076  0528  0DF2               	rlf	___lldiv@divisor+2,f
  2077  0529  0DF3               	rlf	___lldiv@divisor+3,f
  2078  052A  0B89               	decfsz	9,f
  2079  052B  2D26               	goto	u945
  2080  052C  3001               	movlw	1
  2081  052D  00F8               	movwf	??___lldiv
  2082  052E  0878               	movf	??___lldiv,w
  2083  052F  07FD               	addwf	___lldiv@counter,f
  2084  0530  2D23               	goto	l1371
  2085  0531                     l1373:	
  2086  0531  3001               	movlw	1
  2087  0532                     u965:	
  2088  0532  35F9               	lslf	___lldiv@quotient,f
  2089  0533  0DFA               	rlf	___lldiv@quotient+1,f
  2090  0534  0DFB               	rlf	___lldiv@quotient+2,f
  2091  0535  0DFC               	rlf	___lldiv@quotient+3,f
  2092  0536  0B89               	decfsz	9,f
  2093  0537  2D32               	goto	u965
  2094  0538  0873               	movf	___lldiv@divisor+3,w
  2095  0539  0277               	subwf	___lldiv@dividend+3,w
  2096  053A  1D03               	skipz
  2097  053B  2D46               	goto	u975
  2098  053C  0872               	movf	___lldiv@divisor+2,w
  2099  053D  0276               	subwf	___lldiv@dividend+2,w
  2100  053E  1D03               	skipz
  2101  053F  2D46               	goto	u975
  2102  0540  0871               	movf	___lldiv@divisor+1,w
  2103  0541  0275               	subwf	___lldiv@dividend+1,w
  2104  0542  1D03               	skipz
  2105  0543  2D46               	goto	u975
  2106  0544  0870               	movf	___lldiv@divisor,w
  2107  0545  0274               	subwf	___lldiv@dividend,w
  2108  0546                     u975:	
  2109  0546  1C03               	skipc
  2110  0547  2D51               	goto	l1381
  2111  0548  0870               	movf	___lldiv@divisor,w
  2112  0549  02F4               	subwf	___lldiv@dividend,f
  2113  054A  0871               	movf	___lldiv@divisor+1,w
  2114  054B  3BF5               	subwfb	___lldiv@dividend+1,f
  2115  054C  0872               	movf	___lldiv@divisor+2,w
  2116  054D  3BF6               	subwfb	___lldiv@dividend+2,f
  2117  054E  0873               	movf	___lldiv@divisor+3,w
  2118  054F  3BF7               	subwfb	___lldiv@dividend+3,f
  2119  0550  1479               	bsf	___lldiv@quotient,0
  2120  0551                     l1381:	
  2121  0551  3001               	movlw	1
  2122  0552                     u985:	
  2123  0552  36F3               	lsrf	___lldiv@divisor+3,f
  2124  0553  0CF2               	rrf	___lldiv@divisor+2,f
  2125  0554  0CF1               	rrf	___lldiv@divisor+1,f
  2126  0555  0CF0               	rrf	___lldiv@divisor,f
  2127  0556  0B89               	decfsz	9,f
  2128  0557  2D52               	goto	u985
  2129  0558  3001               	movlw	1
  2130  0559  02FD               	subwf	___lldiv@counter,f
  2131  055A  1D03               	btfss	3,2
  2132  055B  2D31               	goto	l1373
  2133  055C                     l1385:	
  2134  055C  087C               	movf	___lldiv@quotient+3,w
  2135  055D  00F3               	movwf	?___lldiv+3
  2136  055E  087B               	movf	___lldiv@quotient+2,w
  2137  055F  00F2               	movwf	?___lldiv+2
  2138  0560  087A               	movf	___lldiv@quotient+1,w
  2139  0561  00F1               	movwf	?___lldiv+1
  2140  0562  0879               	movf	___lldiv@quotient,w
  2141  0563  00F0               	movwf	?___lldiv
  2142  0564  0008               	return
  2143  0565                     __end_of___lldiv:	
  2144                           
  2145                           	psect	text9
  2146  0565                     __ptext9:	
  2147 ;; *************** function _LCD_Init *****************
  2148 ;; Defined at:
  2149 ;;		line 28 in file "LCD.c"
  2150 ;; Parameters:    Size  Location     Type
  2151 ;;		None
  2152 ;; Auto vars:     Size  Location     Type
  2153 ;;		None
  2154 ;; Return value:  Size  Location     Type
  2155 ;;                  1    wreg      void 
  2156 ;; Registers used:
  2157 ;;		wreg, status,2, status,0, pclath, cstack
  2158 ;; Tracked objects:
  2159 ;;		On entry : 0/0
  2160 ;;		On exit  : 0/0
  2161 ;;		Unchanged: 0/0
  2162 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  2163 ;;      Params:         0       0       0       0       0       0
  2164 ;;      Locals:         0       0       0       0       0       0
  2165 ;;      Temps:          2       0       0       0       0       0
  2166 ;;      Totals:         2       0       0       0       0       0
  2167 ;;Total ram usage:        2 bytes
  2168 ;; Hardware stack levels used:    1
  2169 ;; Hardware stack levels required when called:    2
  2170 ;; This function calls:
  2171 ;;		_LCD_DisplayClear
  2172 ;;		_LCD_WriteData
  2173 ;; This function is called by:
  2174 ;;		_main
  2175 ;; This function uses a non-reentrant model
  2176 ;;
  2177                           
  2178                           
  2179                           ;psect for function _LCD_Init
  2180  0565                     _LCD_Init:	
  2181                           
  2182                           ;LCD.c: 30: RA4 = 0;
  2183                           
  2184                           ;incstack = 0
  2185                           ; Regs used in _LCD_Init: [wreg+status,2+status,0+pclath+cstack]
  2186  0565  0020               	movlb	0	; select bank0
  2187  0566  120C               	bcf	12,4	;volatile
  2188                           
  2189                           ;LCD.c: 31: RA3 = 0;
  2190  0567  118C               	bcf	12,3	;volatile
  2191                           
  2192                           ;LCD.c: 33: _delay((unsigned long)((30)*(32000000/4000.0)));
  2193  0568  3002               	movlw	2
  2194  0569  00F5               	movwf	??_LCD_Init+1
  2195  056A  3038               	movlw	56
  2196  056B  00F4               	movwf	??_LCD_Init
  2197  056C  30AD               	movlw	173
  2198  056D                     u1537:	
  2199  056D  0B89               	decfsz	9,f
  2200  056E  2D6D               	goto	u1537
  2201  056F  0BF4               	decfsz	??_LCD_Init,f
  2202  0570  2D6D               	goto	u1537
  2203  0571  0BF5               	decfsz	??_LCD_Init+1,f
  2204  0572  2D6D               	goto	u1537
  2205  0573  0000               	nop
  2206                           
  2207                           ;LCD.c: 34: PORTB = ( ((0x03&0x0C)<<1)|(0x03&0x03) );
  2208  0574  3003               	movlw	3
  2209  0575  0020               	movlb	0	; select bank0
  2210  0576  008D               	movwf	13	;volatile
  2211                           
  2212                           ;LCD.c: 35: {RA3 = 1; _delay((unsigned long)((1)*(32000000/4000000.0))); RA3 = 0; _delay
      +                          ((unsigned long)((1)*(32000000/4000000.0)));};
  2213  0577  158C               	bsf	12,3	;volatile
  2214  0578  3200               	nop2	;2 cycle nop
  2215  0579  3200               	nop2	;2 cycle nop
  2216  057A  3200               	nop2	;2 cycle nop
  2217  057B  3200               	nop2	;2 cycle nop
  2218  057C  0020               	movlb	0	; select bank0
  2219  057D  118C               	bcf	12,3	;volatile
  2220  057E  3200               	nop2	;2 cycle nop
  2221  057F  3200               	nop2	;2 cycle nop
  2222  0580  3200               	nop2	;2 cycle nop
  2223  0581  3200               	nop2	;2 cycle nop
  2224                           
  2225                           ;LCD.c: 36: _delay((unsigned long)((5)*(32000000/4000.0)));
  2226  0582  3034               	movlw	52
  2227  0583  00F4               	movwf	??_LCD_Init
  2228  0584  30F2               	movlw	242
  2229  0585                     u1547:	
  2230  0585  0B89               	decfsz	9,f
  2231  0586  2D85               	goto	u1547
  2232  0587  0BF4               	decfsz	??_LCD_Init,f
  2233  0588  2D85               	goto	u1547
  2234                           
  2235                           ;LCD.c: 37: {RA3 = 1; _delay((unsigned long)((1)*(32000000/4000000.0))); RA3 = 0; _delay
      +                          ((unsigned long)((1)*(32000000/4000000.0)));};
  2236  0589  0020               	movlb	0	; select bank0
  2237  058A  158C               	bsf	12,3	;volatile
  2238  058B  3200               	nop2	;2 cycle nop
  2239  058C  3200               	nop2	;2 cycle nop
  2240  058D  3200               	nop2	;2 cycle nop
  2241  058E  3200               	nop2	;2 cycle nop
  2242  058F  0020               	movlb	0	; select bank0
  2243  0590  118C               	bcf	12,3	;volatile
  2244  0591  3200               	nop2	;2 cycle nop
  2245  0592  3200               	nop2	;2 cycle nop
  2246  0593  3200               	nop2	;2 cycle nop
  2247  0594  3200               	nop2	;2 cycle nop
  2248                           
  2249                           ;LCD.c: 38: _delay((unsigned long)((400)*(32000000/4000000.0)));
  2250  0595  3005               	movlw	5
  2251  0596  00F4               	movwf	??_LCD_Init
  2252  0597  3026               	movlw	38
  2253  0598                     u1557:	
  2254  0598  0B89               	decfsz	9,f
  2255  0599  2D98               	goto	u1557
  2256  059A  0BF4               	decfsz	??_LCD_Init,f
  2257  059B  2D98               	goto	u1557
  2258  059C  3200               	nop2
  2259                           
  2260                           ;LCD.c: 39: {RA3 = 1; _delay((unsigned long)((1)*(32000000/4000000.0))); RA3 = 0; _delay
      +                          ((unsigned long)((1)*(32000000/4000000.0)));};
  2261  059D  0020               	movlb	0	; select bank0
  2262  059E  158C               	bsf	12,3	;volatile
  2263  059F  3200               	nop2	;2 cycle nop
  2264  05A0  3200               	nop2	;2 cycle nop
  2265  05A1  3200               	nop2	;2 cycle nop
  2266  05A2  3200               	nop2	;2 cycle nop
  2267  05A3  0020               	movlb	0	; select bank0
  2268  05A4  118C               	bcf	12,3	;volatile
  2269  05A5  3200               	nop2	;2 cycle nop
  2270  05A6  3200               	nop2	;2 cycle nop
  2271  05A7  3200               	nop2	;2 cycle nop
  2272  05A8  3200               	nop2	;2 cycle nop
  2273                           
  2274                           ;LCD.c: 40: _delay((unsigned long)((400)*(32000000/4000000.0)));
  2275  05A9  3005               	movlw	5
  2276  05AA  00F4               	movwf	??_LCD_Init
  2277  05AB  3026               	movlw	38
  2278  05AC                     u1567:	
  2279  05AC  0B89               	decfsz	9,f
  2280  05AD  2DAC               	goto	u1567
  2281  05AE  0BF4               	decfsz	??_LCD_Init,f
  2282  05AF  2DAC               	goto	u1567
  2283  05B0  3200               	nop2
  2284                           
  2285                           ;LCD.c: 41: PORTB = ( ((0x02&0x0C)<<1)|(0x02&0x03) );
  2286  05B1  3002               	movlw	2
  2287  05B2  0020               	movlb	0	; select bank0
  2288  05B3  008D               	movwf	13	;volatile
  2289                           
  2290                           ;LCD.c: 42: {RA3 = 1; _delay((unsigned long)((1)*(32000000/4000000.0))); RA3 = 0; _delay
      +                          ((unsigned long)((1)*(32000000/4000000.0)));};
  2291  05B4  158C               	bsf	12,3	;volatile
  2292  05B5  3200               	nop2	;2 cycle nop
  2293  05B6  3200               	nop2	;2 cycle nop
  2294  05B7  3200               	nop2	;2 cycle nop
  2295  05B8  3200               	nop2	;2 cycle nop
  2296  05B9  0020               	movlb	0	; select bank0
  2297  05BA  118C               	bcf	12,3	;volatile
  2298  05BB  3200               	nop2	;2 cycle nop
  2299  05BC  3200               	nop2	;2 cycle nop
  2300  05BD  3200               	nop2	;2 cycle nop
  2301  05BE  3200               	nop2	;2 cycle nop
  2302                           
  2303                           ;LCD.c: 44: LCD_WriteData(0x28);
  2304  05BF  3028               	movlw	40
  2305  05C0  3184  2497  3185   	fcall	_LCD_WriteData
  2306                           
  2307                           ;LCD.c: 45: LCD_WriteData(0x0c);
  2308  05C3  300C               	movlw	12
  2309  05C4  3184  2497  3185   	fcall	_LCD_WriteData
  2310                           
  2311                           ;LCD.c: 46: LCD_DisplayClear();
  2312  05C7  3183  23CF  3185   	fcall	_LCD_DisplayClear
  2313                           
  2314                           ;LCD.c: 47: LCD_WriteData(0x06);
  2315  05CA  3006               	movlw	6
  2316  05CB  3184  2497         	fcall	_LCD_WriteData
  2317  05CD  0008               	return
  2318  05CE                     __end_of_LCD_Init:	
  2319                           
  2320                           	psect	text10
  2321  03CF                     __ptext10:	
  2322 ;; *************** function _LCD_DisplayClear *****************
  2323 ;; Defined at:
  2324 ;;		line 64 in file "LCD.c"
  2325 ;; Parameters:    Size  Location     Type
  2326 ;;		None
  2327 ;; Auto vars:     Size  Location     Type
  2328 ;;		None
  2329 ;; Return value:  Size  Location     Type
  2330 ;;                  1    wreg      void 
  2331 ;; Registers used:
  2332 ;;		wreg, status,2, status,0, pclath, cstack
  2333 ;; Tracked objects:
  2334 ;;		On entry : 0/0
  2335 ;;		On exit  : 0/0
  2336 ;;		Unchanged: 0/0
  2337 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  2338 ;;      Params:         0       0       0       0       0       0
  2339 ;;      Locals:         0       0       0       0       0       0
  2340 ;;      Temps:          1       0       0       0       0       0
  2341 ;;      Totals:         1       0       0       0       0       0
  2342 ;;Total ram usage:        1 bytes
  2343 ;; Hardware stack levels used:    1
  2344 ;; Hardware stack levels required when called:    1
  2345 ;; This function calls:
  2346 ;;		_LCD_WriteData
  2347 ;; This function is called by:
  2348 ;;		_LCD_Init
  2349 ;; This function uses a non-reentrant model
  2350 ;;
  2351                           
  2352                           
  2353                           ;psect for function _LCD_DisplayClear
  2354  03CF                     _LCD_DisplayClear:	
  2355                           
  2356                           ;LCD.c: 66: RA4 = 0;
  2357                           
  2358                           ;incstack = 0
  2359                           ; Regs used in _LCD_DisplayClear: [wreg+status,2+status,0+pclath+cstack]
  2360  03CF  0020               	movlb	0	; select bank0
  2361  03D0  120C               	bcf	12,4	;volatile
  2362                           
  2363                           ;LCD.c: 67: LCD_WriteData(0x01);
  2364  03D1  3001               	movlw	1
  2365  03D2  3184  2497  3183   	fcall	_LCD_WriteData
  2366                           
  2367                           ;LCD.c: 68: _delay((unsigned long)((2)*(32000000/4000.0)));
  2368  03D5  3015               	movlw	21
  2369  03D6  00F3               	movwf	??_LCD_DisplayClear
  2370  03D7  30C6               	movlw	198
  2371  03D8                     u1577:	
  2372  03D8  0B89               	decfsz	9,f
  2373  03D9  2BD8               	goto	u1577
  2374  03DA  0BF3               	decfsz	??_LCD_DisplayClear,f
  2375  03DB  2BD8               	goto	u1577
  2376  03DC  3200               	nop2
  2377  03DD  0008               	return
  2378  03DE                     __end_of_LCD_DisplayClear:	
  2379                           
  2380                           	psect	text11
  2381  0416                     __ptext11:	
  2382 ;; *************** function _LCD_CursorPosition *****************
  2383 ;; Defined at:
  2384 ;;		line 86 in file "LCD.c"
  2385 ;; Parameters:    Size  Location     Type
  2386 ;;  tx              1    wreg     unsigned char 
  2387 ;;  ty              1    3[COMMON] unsigned char 
  2388 ;; Auto vars:     Size  Location     Type
  2389 ;;  tx              1    5[COMMON] unsigned char 
  2390 ;; Return value:  Size  Location     Type
  2391 ;;                  1    wreg      void 
  2392 ;; Registers used:
  2393 ;;		wreg, status,2, status,0, pclath, cstack
  2394 ;; Tracked objects:
  2395 ;;		On entry : 0/0
  2396 ;;		On exit  : 0/0
  2397 ;;		Unchanged: 0/0
  2398 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  2399 ;;      Params:         1       0       0       0       0       0
  2400 ;;      Locals:         1       0       0       0       0       0
  2401 ;;      Temps:          1       0       0       0       0       0
  2402 ;;      Totals:         3       0       0       0       0       0
  2403 ;;Total ram usage:        3 bytes
  2404 ;; Hardware stack levels used:    1
  2405 ;; Hardware stack levels required when called:    1
  2406 ;; This function calls:
  2407 ;;		_LCD_WriteData
  2408 ;; This function is called by:
  2409 ;;		_main
  2410 ;; This function uses a non-reentrant model
  2411 ;;
  2412                           
  2413                           
  2414                           ;psect for function _LCD_CursorPosition
  2415  0416                     _LCD_CursorPosition:	
  2416                           
  2417                           ;incstack = 0
  2418                           ; Regs used in _LCD_CursorPosition: [wreg+status,2+status,0+pclath+cstack]
  2419                           ;LCD_CursorPosition@tx stored from wreg
  2420  0416  00F5               	movwf	LCD_CursorPosition@tx
  2421                           
  2422                           ;LCD.c: 88: RA4 = 0;
  2423  0417  0020               	movlb	0	; select bank0
  2424  0418  120C               	bcf	12,4	;volatile
  2425                           
  2426                           ;LCD.c: 89: LCD_WriteData(0x80|tx|(0x40*ty));
  2427  0419  0873               	movf	LCD_CursorPosition@ty,w
  2428  041A  00F4               	movwf	??_LCD_CursorPosition
  2429  041B  3005               	movlw	5
  2430  041C                     u1345:	
  2431  041C  35F4               	lslf	??_LCD_CursorPosition,f
  2432  041D  3EFF               	addlw	-1
  2433  041E  1D03               	skipz
  2434  041F  2C1C               	goto	u1345
  2435  0420  3574               	lslf	??_LCD_CursorPosition,w
  2436  0421  0475               	iorwf	LCD_CursorPosition@tx,w
  2437  0422  3880               	iorlw	-128
  2438  0423  3184  2497  3184   	fcall	_LCD_WriteData
  2439                           
  2440                           ;LCD.c: 90: _delay((unsigned long)((40)*(32000000/4000000.0)));
  2441  0426  306A               	movlw	106
  2442  0427                     u1587:	
  2443  0427  0B89               	decfsz	9,f
  2444  0428  2C27               	goto	u1587
  2445  0429  3200               	nop2
  2446  042A  0008               	return
  2447  042B                     __end_of_LCD_CursorPosition:	
  2448                           
  2449                           	psect	text12
  2450  0497                     __ptext12:	
  2451 ;; *************** function _LCD_WriteData *****************
  2452 ;; Defined at:
  2453 ;;		line 15 in file "LCD.c"
  2454 ;; Parameters:    Size  Location     Type
  2455 ;;  point           1    wreg     char 
  2456 ;; Auto vars:     Size  Location     Type
  2457 ;;  point           1    2[COMMON] char 
  2458 ;; Return value:  Size  Location     Type
  2459 ;;                  1    wreg      void 
  2460 ;; Registers used:
  2461 ;;		wreg, status,2, status,0
  2462 ;; Tracked objects:
  2463 ;;		On entry : 0/0
  2464 ;;		On exit  : 0/0
  2465 ;;		Unchanged: 0/0
  2466 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  2467 ;;      Params:         0       0       0       0       0       0
  2468 ;;      Locals:         1       0       0       0       0       0
  2469 ;;      Temps:          2       0       0       0       0       0
  2470 ;;      Totals:         3       0       0       0       0       0
  2471 ;;Total ram usage:        3 bytes
  2472 ;; Hardware stack levels used:    1
  2473 ;; This function calls:
  2474 ;;		Nothing
  2475 ;; This function is called by:
  2476 ;;		_LCD_Init
  2477 ;;		_LCD_Put
  2478 ;;		_LCD_DisplayClear
  2479 ;;		_LCD_CursorPosition
  2480 ;;		_LCD_CursorHome
  2481 ;;		_LCD_CursorShift
  2482 ;;		_LCD_DispShift
  2483 ;; This function uses a non-reentrant model
  2484 ;;
  2485                           
  2486                           
  2487                           ;psect for function _LCD_WriteData
  2488  0497                     _LCD_WriteData:	
  2489                           
  2490                           ;incstack = 0
  2491                           ; Regs used in _LCD_WriteData: [wreg+status,2+status,0]
  2492                           ;LCD_WriteData@point stored from wreg
  2493  0497  00F2               	movwf	LCD_WriteData@point
  2494                           
  2495                           ;LCD.c: 17: _delay((unsigned long)((80)*(32000000/4000000.0)));
  2496  0498  30D5               	movlw	213
  2497  0499                     u1597:	
  2498  0499  0B89               	decfsz	9,f
  2499  049A  2C99               	goto	u1597
  2500  049B  0000               	nop
  2501                           
  2502                           ;LCD.c: 18: PORTB = ( (((point>>4)&0x0F&0x0C)<<1)|((point>>4)&0x0F&0x03) );
  2503  049C  0872               	movf	LCD_WriteData@point,w
  2504  049D  00F0               	movwf	??_LCD_WriteData
  2505  049E  3004               	movlw	4
  2506  049F                     u845:	
  2507  049F  1003               	clrc
  2508  04A0  1BF0               	btfsc	??_LCD_WriteData,7
  2509  04A1  1403               	setc
  2510  04A2  0CF0               	rrf	??_LCD_WriteData,f
  2511  04A3  0B89               	decfsz	9,f
  2512  04A4  2C9F               	goto	u845
  2513  04A5  3003               	movlw	3
  2514  04A6  0570               	andwf	??_LCD_WriteData,w
  2515  04A7  00F1               	movwf	??_LCD_WriteData+1
  2516  04A8  0E72               	swapf	LCD_WriteData@point,w
  2517  04A9  390F               	andlw	15
  2518  04AA  1989               	btfsc	9,3
  2519  04AB  38F0               	iorlw	240
  2520  04AC  390C               	andlw	12
  2521  04AD  0709               	addwf	9,w
  2522  04AE  0471               	iorwf	??_LCD_WriteData+1,w
  2523  04AF  0020               	movlb	0	; select bank0
  2524  04B0  008D               	movwf	13	;volatile
  2525                           
  2526                           ;LCD.c: 19: {RA3 = 1; _delay((unsigned long)((1)*(32000000/4000000.0))); RA3 = 0; _delay
      +                          ((unsigned long)((1)*(32000000/4000000.0)));};
  2527  04B1  158C               	bsf	12,3	;volatile
  2528  04B2  3200               	nop2	;2 cycle nop
  2529  04B3  3200               	nop2	;2 cycle nop
  2530  04B4  3200               	nop2	;2 cycle nop
  2531  04B5  3200               	nop2	;2 cycle nop
  2532  04B6  0020               	movlb	0	; select bank0
  2533  04B7  118C               	bcf	12,3	;volatile
  2534  04B8  3200               	nop2	;2 cycle nop
  2535  04B9  3200               	nop2	;2 cycle nop
  2536  04BA  3200               	nop2	;2 cycle nop
  2537  04BB  3200               	nop2	;2 cycle nop
  2538                           
  2539                           ;LCD.c: 20: PORTB = ( ((point&0x0F&0x0C)<<1)|(point&0x0F&0x03) );
  2540  04BC  3003               	movlw	3
  2541  04BD  0572               	andwf	LCD_WriteData@point,w
  2542  04BE  00F0               	movwf	??_LCD_WriteData
  2543  04BF  0872               	movf	LCD_WriteData@point,w
  2544  04C0  390C               	andlw	12
  2545  04C1  0709               	addwf	9,w
  2546  04C2  0470               	iorwf	??_LCD_WriteData,w
  2547  04C3  0020               	movlb	0	; select bank0
  2548  04C4  008D               	movwf	13	;volatile
  2549                           
  2550                           ;LCD.c: 21: {RA3 = 1; _delay((unsigned long)((1)*(32000000/4000000.0))); RA3 = 0; _delay
      +                          ((unsigned long)((1)*(32000000/4000000.0)));};
  2551  04C5  158C               	bsf	12,3	;volatile
  2552  04C6  3200               	nop2	;2 cycle nop
  2553  04C7  3200               	nop2	;2 cycle nop
  2554  04C8  3200               	nop2	;2 cycle nop
  2555  04C9  3200               	nop2	;2 cycle nop
  2556  04CA  0020               	movlb	0	; select bank0
  2557  04CB  118C               	bcf	12,3	;volatile
  2558  04CC  3200               	nop2	;2 cycle nop
  2559  04CD  3200               	nop2	;2 cycle nop
  2560  04CE  3200               	nop2	;2 cycle nop
  2561  04CF  3200               	nop2	;2 cycle nop
  2562  04D0  0008               	return
  2563  04D1                     __end_of_LCD_WriteData:	
  2564                           
  2565                           	psect	text13
  2566  0401                     __ptext13:	
  2567 ;; *************** function _Basic_Init *****************
  2568 ;; Defined at:
  2569 ;;		line 26 in file "main.c"
  2570 ;; Parameters:    Size  Location     Type
  2571 ;;		None
  2572 ;; Auto vars:     Size  Location     Type
  2573 ;;		None
  2574 ;; Return value:  Size  Location     Type
  2575 ;;                  1    wreg      char 
  2576 ;; Registers used:
  2577 ;;		wreg, status,2
  2578 ;; Tracked objects:
  2579 ;;		On entry : 0/0
  2580 ;;		On exit  : 0/0
  2581 ;;		Unchanged: 0/0
  2582 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  2583 ;;      Params:         0       0       0       0       0       0
  2584 ;;      Locals:         0       0       0       0       0       0
  2585 ;;      Temps:          0       0       0       0       0       0
  2586 ;;      Totals:         0       0       0       0       0       0
  2587 ;;Total ram usage:        0 bytes
  2588 ;; Hardware stack levels used:    1
  2589 ;; This function calls:
  2590 ;;		Nothing
  2591 ;; This function is called by:
  2592 ;;		_main
  2593 ;; This function uses a non-reentrant model
  2594 ;;
  2595                           
  2596                           
  2597                           ;psect for function _Basic_Init
  2598  0401                     _Basic_Init:	
  2599                           
  2600                           ;main.c: 28: OSCCON = 0xF3;
  2601                           
  2602                           ;incstack = 0
  2603                           ; Regs used in _Basic_Init: [wreg+status,2]
  2604  0401  30F3               	movlw	243
  2605  0402  0021               	movlb	1	; select bank1
  2606  0403  0099               	movwf	25	;volatile
  2607                           
  2608                           ;main.c: 32: TRISA = 0x07;
  2609  0404  3007               	movlw	7
  2610  0405  008C               	movwf	12	;volatile
  2611                           
  2612                           ;main.c: 33: ANSELA = 0x07;
  2613  0406  3007               	movlw	7
  2614  0407  0023               	movlb	3	; select bank3
  2615  0408  008C               	movwf	12	;volatile
  2616                           
  2617                           ;main.c: 35: TRISB = 0x40;
  2618  0409  3040               	movlw	64
  2619  040A  0021               	movlb	1	; select bank1
  2620  040B  008D               	movwf	13	;volatile
  2621                           
  2622                           ;main.c: 36: ANSELB = 0x00;
  2623  040C  0023               	movlb	3	; select bank3
  2624  040D  018D               	clrf	13	;volatile
  2625                           
  2626                           ;main.c: 38: APFCON0 = 0x08;
  2627  040E  3008               	movlw	8
  2628  040F  0022               	movlb	2	; select bank2
  2629  0410  009D               	movwf	29	;volatile
  2630                           
  2631                           ;main.c: 39: APFCON1 = 0x00;
  2632  0411  019E               	clrf	30	;volatile
  2633                           
  2634                           ;main.c: 41: PORTA = 0x00;
  2635  0412  0020               	movlb	0	; select bank0
  2636  0413  018C               	clrf	12	;volatile
  2637                           
  2638                           ;main.c: 42: PORTB = 0x00;
  2639  0414  018D               	clrf	13	;volatile
  2640  0415  0008               	return
  2641  0416                     __end_of_Basic_Init:	
  2642                           ;main.c: 44: return 0;
  2643                           ;	Return value of _Basic_Init is never used
  2644                           
  2645  007E                     btemp	set	126	;btemp
  2646  007E                     wtemp0	set	126
>>>>>>> LCD


Data Sizes:
    Strings     44
    Constant    0
    Data        0
    BSS         5
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     58      63
    BANK1            80      0       0
    BANK2            80      0       0
    BANK3            80      0       0
    BANK4            48      0       0

Pointer List with Targets:

    xfunc_in	PTR FTN()unsigned char  size(2) Largest target is 1
		 -> Absolute function(), 

    xprintf@fmt	PTR const unsigned char  size(2) Largest target is 16
		 -> STR_6(CODE[7]), STR_5(CODE[6]), STR_4(CODE[6]), STR_3(CODE[7]), 
		 -> STR_1(CODE[16]), 

    xprintf@arp	PTR void [1] size(1) Largest target is 1
		 -> ?_xfprintf(COMMON[1]), ?_xsprintf(COMMON[1]), ?_xprintf(BANK0[1]), 

    xvprintf@arp	PTR PTR void  size(1) Largest target is 1
		 -> xfprintf@arp(COMMON[1]), xsprintf@arp(COMMON[1]), xprintf@arp(BANK0[1]), 

    xvprintf@p	PTR unsigned char  size(1) Largest target is 1
		 -> ?_xfprintf(COMMON[1]), ?_xsprintf(COMMON[1]), ?_xprintf(BANK0[1]), 

    xvprintf@fmt	PTR const unsigned char  size(2) Largest target is 16
		 -> STR_6(CODE[7]), STR_5(CODE[6]), STR_4(CODE[6]), STR_3(CODE[7]), 
		 -> STR_1(CODE[16]), 

    xputs@str	PTR const unsigned char  size(1) Largest target is 1
		 -> ?_xfprintf(COMMON[1]), ?_xsprintf(COMMON[1]), ?_xprintf(BANK0[1]), 

    outptr	PTR unsigned char  size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    xfunc_out	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), LCD_Put(), 


Critical Paths under _main in COMMON

    _xvprintf->___lldiv
    _xputs->_xputc
    _xputc->_LCD_Put
    _LCD_Put->_LCD_WriteData
    _LCD_Init->_LCD_DisplayClear
    _LCD_DisplayClear->_LCD_WriteData
    _LCD_CursorPosition->_LCD_WriteData

Critical Paths under _main in BANK0

    _main->_xprintf
    _xprintf->_xvprintf

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0    4097
                                             56 BANK0      2     2      0
                         _Basic_Init
                 _LCD_CursorPosition
                           _LCD_Init
                            _xprintf
 ---------------------------------------------------------------------------------
 (1) _xprintf                                              8     2      6    3701
                                             48 BANK0      8     2      6
                           _xvprintf
 ---------------------------------------------------------------------------------
 (2) _xvprintf                                            48    45      3    3326
                                              0 BANK0     48    45      3
                            ___lldiv
                            ___llmod
                             ___wmul
                              _xputc
                              _xputs
 ---------------------------------------------------------------------------------
 (3) _xputs                                                2     2      0     337
                                              6 COMMON     2     2      0
                              _xputc
 ---------------------------------------------------------------------------------
 (4) _xputc                                                2     2      0     262
                                              4 COMMON     2     2      0
                   Absolute function *
                            _LCD_Put *
 ---------------------------------------------------------------------------------
 (5) _LCD_Put                                              1     0      1     196
                                              3 COMMON     1     0      1
                      _LCD_WriteData
 ---------------------------------------------------------------------------------
 (5) Absolute function(Fake)                               1     0      1       0
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     220
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (3) ___llmod                                             10     2      8     287
                                              0 COMMON    10     2      8
 ---------------------------------------------------------------------------------
 (3) ___lldiv                                             14     6      8     290
                                              0 COMMON    14     6      8
 ---------------------------------------------------------------------------------
 (1) _LCD_Init                                             2     2      0     176
                                              4 COMMON     2     2      0
                   _LCD_DisplayClear
                      _LCD_WriteData
 ---------------------------------------------------------------------------------
 (2) _LCD_DisplayClear                                     1     1      0      88
                                              3 COMMON     1     1      0
                      _LCD_WriteData
 ---------------------------------------------------------------------------------
 (1) _LCD_CursorPosition                                   3     2      1     196
                                              3 COMMON     3     2      1
                      _LCD_WriteData
 ---------------------------------------------------------------------------------
 (6) _LCD_WriteData                                        3     3      0      88
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (1) _Basic_Init                                           0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Basic_Init
   _LCD_CursorPosition
     _LCD_WriteData
   _LCD_Init
     _LCD_DisplayClear
       _LCD_WriteData
     _LCD_WriteData
   _xprintf
     _xvprintf
       ___lldiv
       ___llmod
       ___wmul
       _xputc
         Absolute function(Fake) *
         _LCD_Put *
           _LCD_WriteData
       _xputs
         _xputc
           Absolute function(Fake) *
           _LCD_Put *
             _LCD_WriteData

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             170      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      E       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0      4D       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BANK0               50     3A      3F       6       78.8%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BITBANK1            50      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BANK1               50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BITBANK2            50      0       0       9        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BANK2               50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BITBANK3            50      0       0      11        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BANK3               50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BITBANK4            30      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BANK4               30      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
DATA                 0      0      4D      15        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.41 build -162212810 
<<<<<<< HEAD
Symbol Table                                                                                   Fri Mar  3 08:06:44 2017

                __CFG_CP$OFF 0000          ___wmul@multiplicand 0072                          l123 064A  
                        l108 05CE                          l141 06E5                          l164 079C  
                        l345 0457                          _RA3 0063                          _RA4 0064  
               __CFG_CPD$OFF 0000                          u905 0458                          u915 045D  
                        u845 049F                          u945 0526                          u965 0532  
                        u975 0546                          u985 0552                 __CFG_BORV$LO 0000  
                        wreg 0009                   _Basic_Init 040C                 __CFG_LVP$OFF 0000  
            __end_of_LCD_Put 03DA                         l1401 050A                         l1501 06C3  
                       l1335 0489                         l1327 0479                         l1503 06C8  
                       l1423 05E7                         l1345 03FA                         l1513 06FF  
                       l1515 0714                         l1507 06CD                         l1381 055C  
                       l1349 0451                         l1541 0782                         l1525 073E  
                       l1517 071D                         l1453 063A                         l1445 0610  
                       l1437 05FC                         l1367 0523                         l1391 04D9  
                       l1527 0740                         l1519 072D                         l1447 0613  
                       l1377 0551                         l1369 0531                         l1393 04E7  
                       l1561 07BB                         l1553 07AA                         l1537 077A  
                       l1481 0680                         l1473 0665                         l1465 0657  
                       l1457 0642                         l1571 07E3                         l1563 07BF  
                       l1491 069A                         l1483 0684                         l1397 04FF  
                       l1573 07E7                         l1493 06AF                         l1567 07D1  
                       l1559 07B2                         l1495 06BC                         l1487 0696  
                       l1479 0672                         l1497 06BF                         l1681 0441  
                       l1499 06C1                         STR_1 0800                         STR_2 0827  
                       STR_3 080D                         STR_4 081B                         STR_5 0821  
                       STR_6 0814                         u1015 04DC                         u1035 04F5  
=======
Symbol Table                                                                                   Fri Mar  3 09:40:58 2017

                __CFG_CP$OFF 0000          ___wmul@multiplicand 0072                          l123 064A  
                        l108 05CE                          l141 06E5                          l164 079C  
                        l345 0433                          _RA3 0063                          _RA4 0064  
               __CFG_CPD$OFF 0000                          u905 0434                          u915 0439  
                        u845 049F                          u945 0526                          u965 0532  
                        u975 0546                          u985 0552                 __CFG_BORV$LO 0000  
                        wreg 0009                   _Basic_Init 0401                 __CFG_LVP$OFF 0000  
            __end_of_LCD_Put 03CF                         l1401 04FF                         l1331 0479  
                       l1405 050A                         l1501 06BF                         l1503 06C1  
                       l1511 06CD                         l1353 042D                         l1521 071D  
                       l1505 06C3                         l1441 05FC                         l1371 0523  
                       l1339 0489                         l1531 0740                         l1523 072D  
                       l1507 06C8                         l1451 0613                         l1427 05E7  
                       l1381 0551                         l1373 0531                         l1349 03EF  
                       l1541 077A                         l1517 06FF                         l1461 0642  
                       l1519 0714                         l1385 055C                         l1545 0782  
                       l1529 073E                         l1457 063A                         l1449 0610  
                       l1395 04D9                         l1571 07D1                         l1563 07B2  
                       l1491 0696                         l1483 0672                         l1397 04E7  
                       l1565 07BB                         l1557 07AA                         l1485 0680  
                       l1477 0665                         l1469 0657                         l1575 07E3  
                       l1567 07BF                         l1495 069A                         l1487 0684  
                       l1577 07E7                         l1497 06AF                         l1499 06BC  
                       l1687 0453                         STR_1 0800                         STR_2 082A  
                       STR_3 0810                         STR_4 081E                         STR_5 0824  
                       STR_6 0817                         u1015 04DC                         u1035 04F5  
>>>>>>> LCD
                       u1045 0500                         u1315 07CF                         u1335 07F5  
                       u1345 041C                         u1185 0694                         u1195 06A8  
                       u1537 056D                         u1547 0585                         u1557 0598  
                       u1567 05AC                         u1577 03D8                         u1587 0427  
                       u1597 0499                 __CFG_WRT$OFF 0000                         _main 0446  
                       fsr0h 0005                         fsr1h 0007                         indf0 0000  
                       fsr0l 0004                         indf1 0001                         fsr1l 0006  
                       btemp 007E                __CFG_BOREN$ON 0000                         start 0002  
              __CFG_IESO$OFF 0000                _LCD_WriteData 0497                __CFG_MCLRE$ON 0000  
<<<<<<< HEAD
   __end_of_LCD_DisplayClear 03E9             __end_of_LCD_Init 05CE                __CFG_PLLEN$ON 0000  
                LCD_Put@word 0073                        ?_main 0070                __CFG_WDTE$OFF 0000  
            __end_of___lldiv 0565              __end_of___llmod 0513                        _PORTA 000C  
                      _PORTB 000D                        _TRISA 008C                        _TRISB 008D  
              __CFG_PWRTE$ON 0000               __CFG_FCMEN$OFF 0000                        _xputc 046A  
                      _xputs 03F9                        pclath 000A                        status 0003  
                      wtemp0 007E              __end_of_xprintf 03F9           _LCD_CursorPosition 0421  
             ?_LCD_WriteData 0070              __initialization 07F8                 __end_of_main 044F  
        ?_LCD_CursorPosition 0073                       ??_main 007E                    ??_LCD_Put 0074  
                ?_Basic_Init 0070             ___llmod@dividend 0074         ??_LCD_CursorPosition 0074  
                     _ANSELA 018C                       _ANSELB 018D                       ?_xputc 0070  
                     ?_xputs 0070                       _OSCCON 0099                       ___wmul 044F  
                  ??___lldiv 0078                    ??___llmod 0078                       _outptr 005C  
                     xputc@c 0075                    ??_xprintf 0056      __end_of__initialization 07FD  
                  ?_LCD_Init 0070              ??_LCD_WriteData 0070             __end_of_xvprintf 07F8  
             __pcstackCOMMON 0070          __size_of_Basic_Init 0015                __end_of_xputc 0497  
              __end_of_xputs 040C                      ??_xputc 0074                      ??_xputs 0076  
                 __pbssBANK0 0058                   ??_LCD_Init 0074                   __pmaintext 0436  
                    ?___wmul 0070            ?_LCD_DisplayClear 0070                      _APFCON0 011D  
                    _APFCON1 011E           ??_LCD_DisplayClear 0073                      _LCD_Put 03D4  
               _xvprintf$154 0037                 _xvprintf$155 003B                 _xvprintf$156 003D  
                    ___lldiv 0513              __size_of___wmul 001B                      ___llmod 04D1  
            __CFG_STVREN$OFF 0000                      __ptext1 03E9                      __ptext2 05CE  
                    __ptext3 03F9                      __ptext4 046A                      __ptext5 03D4  
                    __ptext6 044F                      __ptext7 04D1                      __ptext8 0513  
                    __ptext9 0565                    ?_xvprintf 0020                 ??_Basic_Init 0070  
       end_of_initialization 07FD                      _xprintf 03E9              ___lldiv@divisor 0070  
            ___lldiv@counter 007D           __end_of_Basic_Init 0421                 __pstringtext 0800  
           __CFG_FOSC$INTOSC 0000                   ??_xvprintf 0023  __size_of_LCD_CursorPosition 0015  
          __size_of_LCD_Init 0069               __end_of___wmul 046A          start_initialization 07F8  
            ___llmod@divisor 0070              ___llmod@counter 0079         LCD_CursorPosition@tx 0075  
       LCD_CursorPosition@ty 0073        __end_of_LCD_WriteData 04D1                     ??___wmul 0074  
                   ?_LCD_Put 0073                    ___latbits 0001                __pcstackBANK0 0020  
  __size_of_LCD_DisplayClear 000F                     ?___lldiv 0070                     ?___llmod 0070  
          __size_of_xvprintf 022A                     ?_xprintf 0050               __size_of_xputc 002D  
             __size_of_xputs 0013                     _LCD_Init 0565               ___wmul@product 0074  
          ___wmul@multiplier 0070                    _xfunc_out 005A             __size_of_LCD_Put 0006  
           __size_of___lldiv 0052             __size_of___llmod 0042           LCD_WriteData@point 0072  
 __end_of_LCD_CursorPosition 0436                     __ptext10 03DA                     __ptext11 0421  
                   __ptext12 0497                     __ptext13 040C             _LCD_DisplayClear 03DA  
           __size_of_xprintf 0010                __size_of_main 0019                     _xfunc_in 0058  
                   _xvprintf 05CE                   xprintf@arp 0057                   xprintf@fmt 0050  
           ___lldiv@dividend 0074            __CFG_CLKOUTEN$OFF 0000                  xvprintf@arp 0022  
                xvprintf@fmt 0020             ___lldiv@quotient 0079       __size_of_LCD_WriteData 003A  
                   xputs@str 0077                    xvprintf@c 004F                    xvprintf@d 004E  
                  xvprintf@f 004A                    xvprintf@i 004C                    xvprintf@j 0044  
                  xvprintf@p 003F                    xvprintf@r 0040                    xvprintf@s 0027  
                  xvprintf@v 0046                    xvprintf@w 0042  
=======
   __end_of_LCD_DisplayClear 03DE             __end_of_LCD_Init 05CE                __CFG_PLLEN$ON 0000  
                LCD_Put@word 0073                        ?_main 0070                __CFG_WDTE$OFF 0000  
            __end_of___lldiv 0565              __end_of___llmod 0513                        _PORTA 000C  
                      _PORTB 000D                        _TRISA 008C                        _TRISB 008D  
              __CFG_PWRTE$ON 0000               __CFG_FCMEN$OFF 0000                        main@i 0058  
                      _xputc 046A                        _xputs 03EE                        pclath 000A  
                      status 0003                        wtemp0 007E              __end_of_xprintf 03EE  
         _LCD_CursorPosition 0416               ?_LCD_WriteData 0070              __initialization 07F8  
               __end_of_main 046A          ?_LCD_CursorPosition 0073                       ??_main 007E  
                  ??_LCD_Put 0074                  ?_Basic_Init 0070             ___llmod@dividend 0074  
       ??_LCD_CursorPosition 0074                       _ANSELA 018C                       _ANSELB 018D  
                     ?_xputc 0070                       ?_xputs 0070                       _OSCCON 0099  
                     ___wmul 042B                    ??___lldiv 0078                    ??___llmod 0078  
                     _outptr 005E                       xputc@c 0075                    ??_xprintf 0056  
    __end_of__initialization 07FD                    ?_LCD_Init 0070              ??_LCD_WriteData 0070  
           __end_of_xvprintf 07F8               __pcstackCOMMON 0070          __size_of_Basic_Init 0015  
              __end_of_xputc 0497                __end_of_xputs 0401                      ??_xputc 0074  
                    ??_xputs 0076                   __pbssBANK0 005A                   ??_LCD_Init 0074  
                 __pmaintext 0446                      ?___wmul 0070            ?_LCD_DisplayClear 0070  
                    _APFCON0 011D                      _APFCON1 011E           ??_LCD_DisplayClear 0073  
                    _LCD_Put 03C9                 _xvprintf$155 0037                 _xvprintf$156 003B  
               _xvprintf$157 003D                      ___lldiv 0513              __size_of___wmul 001B  
                    ___llmod 04D1              __CFG_STVREN$OFF 0000                      __ptext1 03DE  
                    __ptext2 05CE                      __ptext3 03EE                      __ptext4 046A  
                    __ptext5 03C9                      __ptext6 042B                      __ptext7 04D1  
                    __ptext8 0513                      __ptext9 0565                    ?_xvprintf 0020  
               ??_Basic_Init 0070         end_of_initialization 07FD                      _xprintf 03DE  
            ___lldiv@divisor 0070              ___lldiv@counter 007D           __end_of_Basic_Init 0416  
               __pstringtext 0800             __CFG_FOSC$INTOSC 0000                   ??_xvprintf 0023  
__size_of_LCD_CursorPosition 0015            __size_of_LCD_Init 0069               __end_of___wmul 0446  
        start_initialization 07F8              ___llmod@divisor 0070              ___llmod@counter 0079  
       LCD_CursorPosition@tx 0075         LCD_CursorPosition@ty 0073        __end_of_LCD_WriteData 04D1  
                   ??___wmul 0074                     ?_LCD_Put 0073                    ___latbits 0001  
              __pcstackBANK0 0020    __size_of_LCD_DisplayClear 000F                     ?___lldiv 0070  
                   ?___llmod 0070            __size_of_xvprintf 022A                     ?_xprintf 0050  
             __size_of_xputc 002D               __size_of_xputs 0013                     _LCD_Init 0565  
             ___wmul@product 0074            ___wmul@multiplier 0070                    _xfunc_out 005C  
           __size_of_LCD_Put 0006             __size_of___lldiv 0052             __size_of___llmod 0042  
         LCD_WriteData@point 0072   __end_of_LCD_CursorPosition 042B                     __ptext10 03CF  
                   __ptext11 0416                     __ptext12 0497                     __ptext13 0401  
           _LCD_DisplayClear 03CF             __size_of_xprintf 0010                __size_of_main 0024  
                   _xfunc_in 005A                     _xvprintf 05CE                   xprintf@arp 0057  
                 xprintf@fmt 0050             ___lldiv@dividend 0074            __CFG_CLKOUTEN$OFF 0000  
                xvprintf@arp 0022                  xvprintf@fmt 0020             ___lldiv@quotient 0079  
     __size_of_LCD_WriteData 003A                     xputs@str 0077                    xvprintf@c 004F  
                  xvprintf@d 004E                    xvprintf@f 004A                    xvprintf@i 004C  
                  xvprintf@j 0044                    xvprintf@p 003F                    xvprintf@r 0040  
                  xvprintf@s 0027                    xvprintf@v 0046                    xvprintf@w 0042  
>>>>>>> LCD
