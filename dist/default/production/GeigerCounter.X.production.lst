

Microchip Technology PIC LITE Macro Assembler V1.41 build -162212810 
                                                                                               Tue Jun 27 19:52:16 2017

Microchip Technology Omniscient Code Generator v1.41 (Free mode) build 201701250102
     1                           	processor	16F1827
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK1,global,class=CODE,delta=2
     5                           	psect	idataBANK2,global,class=CODE,delta=2
     6                           	psect	stringtext,global,class=STRCODE,delta=2
     7                           	psect	cinit,global,class=CODE,merge=1,delta=2
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    10                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    11                           	psect	dataBANK2,global,class=BANK2,space=1,delta=1
    12                           	psect	inittext,global,class=CODE,delta=2
    13                           	psect	clrtext,global,class=CODE,delta=2
    14                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1
    15                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    16                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    17                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    18                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    19                           	psect	text1,local,class=CODE,merge=1,delta=2
    20                           	psect	text2,local,class=CODE,merge=1,delta=2
    21                           	psect	text3,local,class=CODE,merge=1,delta=2,group=2
    22                           	psect	text4,local,class=CODE,merge=1,delta=2,group=2
    23                           	psect	text5,local,class=CODE,merge=1,delta=2,group=2
    24                           	psect	text6,local,class=CODE,merge=1,delta=2,group=2
    25                           	psect	text7,local,class=CODE,merge=1,delta=2
    26                           	psect	text8,local,class=CODE,merge=1,delta=2
    27                           	psect	text9,local,class=CODE,merge=1,delta=2
    28                           	psect	text10,local,class=CODE,merge=1,delta=2
    29                           	psect	text11,local,class=CODE,merge=1,delta=2
    30                           	psect	text12,local,class=CODE,merge=1,delta=2
    31                           	psect	text13,local,class=CODE,merge=1,delta=2
    32                           	psect	text14,local,class=CODE,merge=1,delta=2
    33                           	psect	text15,local,class=CODE,merge=1,delta=2
    34                           	psect	text16,local,class=CODE,merge=1,delta=2
    35                           	psect	text17,local,class=CODE,merge=1,delta=2
    36                           	psect	text18,local,class=CODE,merge=1,delta=2
    37                           	psect	text19,local,class=CODE,merge=1,delta=2
    38                           	psect	text20,local,class=CODE,merge=1,delta=2
    39                           	psect	text21,local,class=CODE,merge=1,delta=2
    40                           	psect	text22,local,class=CODE,merge=1,delta=2
    41                           	psect	text23,local,class=CODE,merge=1,delta=2
    42                           	psect	text24,local,class=CODE,merge=1,delta=2
    43                           	psect	text25,local,class=CODE,merge=1,delta=2
    44                           	psect	text26,local,class=CODE,merge=1,delta=2
    45                           	psect	text27,local,class=CODE,merge=1,delta=2
    46                           	psect	text28,local,class=CODE,merge=1,delta=2
    47                           	psect	text29,local,class=CODE,merge=1,delta=2
    48                           	psect	text30,local,class=CODE,merge=1,delta=2
    49                           	psect	text31,local,class=CODE,merge=1,delta=2
    50                           	psect	text32,local,class=CODE,merge=1,delta=2
    51                           	psect	text33,local,class=CODE,merge=1,delta=2
    52                           	psect	intentry,global,class=CODE,delta=2
    53                           	psect	text35,local,class=CODE,merge=1,delta=2
    54                           	psect	text36,local,class=CODE,merge=1,delta=2
    55                           	psect	text37,local,class=CODE,merge=1,delta=2
    56                           	psect	text38,local,class=CODE,merge=1,delta=2
    57                           	psect	text39,local,class=CODE,merge=1,delta=2
    58                           	psect	text40,local,class=CODE,merge=1,delta=2
    59                           	psect	text41,local,class=CODE,merge=1,delta=2
    60                           	psect	text42,local,class=CODE,merge=1,delta=2,group=2
    61                           	psect	text43,local,class=CODE,merge=1,delta=2
    62                           	psect	text44,local,class=CODE,merge=1,delta=2
    63                           	psect	text45,local,class=CODE,merge=1,delta=2
    64                           	psect	text46,local,class=CODE,merge=1,delta=2
    65                           	dabs	1,0x7E,2
    66  0000                     
    67                           ; Version 1.41
    68                           ; Generated 25/01/2017 GMT
    69                           ; 
    70                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    71                           ; All rights reserved.
    72                           ; 
    73                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    74                           ; 
    75                           ; Redistribution and use in source and binary forms, with or without modification, are
    76                           ; permitted provided that the following conditions are met:
    77                           ; 
    78                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    79                           ;        conditions and the following disclaimer.
    80                           ; 
    81                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    82                           ;        of conditions and the following disclaimer in the documentation and/or other
    83                           ;        materials provided with the distribution.
    84                           ; 
    85                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    86                           ;        software without specific prior written permission.
    87                           ; 
    88                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    89                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    90                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    91                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    92                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    93                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    94                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    95                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    96                           ; 
    97                           ; 
    98                           ; Code-generator required, PIC16F1827 Definitions
    99                           ; 
   100                           ; SFR Addresses
   101  0000                     	;# 
   102  0001                     	;# 
   103  0002                     	;# 
   104  0003                     	;# 
   105  0004                     	;# 
   106  0005                     	;# 
   107  0006                     	;# 
   108  0007                     	;# 
   109  0008                     	;# 
   110  0009                     	;# 
   111  000A                     	;# 
   112  000B                     	;# 
   113  000C                     	;# 
   114  000D                     	;# 
   115  0011                     	;# 
   116  0012                     	;# 
   117  0013                     	;# 
   118  0014                     	;# 
   119  0015                     	;# 
   120  0016                     	;# 
   121  0016                     	;# 
   122  0017                     	;# 
   123  0018                     	;# 
   124  0019                     	;# 
   125  001A                     	;# 
   126  001B                     	;# 
   127  001C                     	;# 
   128  001E                     	;# 
   129  001F                     	;# 
   130  008C                     	;# 
   131  008D                     	;# 
   132  0091                     	;# 
   133  0092                     	;# 
   134  0093                     	;# 
   135  0094                     	;# 
   136  0095                     	;# 
   137  0096                     	;# 
   138  0097                     	;# 
   139  0098                     	;# 
   140  0099                     	;# 
   141  009A                     	;# 
   142  009B                     	;# 
   143  009B                     	;# 
   144  009C                     	;# 
   145  009D                     	;# 
   146  009E                     	;# 
   147  010C                     	;# 
   148  010D                     	;# 
   149  0111                     	;# 
   150  0112                     	;# 
   151  0113                     	;# 
   152  0114                     	;# 
   153  0115                     	;# 
   154  0116                     	;# 
   155  0117                     	;# 
   156  0118                     	;# 
   157  0119                     	;# 
   158  011A                     	;# 
   159  011B                     	;# 
   160  011D                     	;# 
   161  011E                     	;# 
   162  018C                     	;# 
   163  018D                     	;# 
   164  0191                     	;# 
   165  0191                     	;# 
   166  0192                     	;# 
   167  0193                     	;# 
   168  0193                     	;# 
   169  0193                     	;# 
   170  0194                     	;# 
   171  0195                     	;# 
   172  0196                     	;# 
   173  0199                     	;# 
   174  019A                     	;# 
   175  019B                     	;# 
   176  019B                     	;# 
   177  019B                     	;# 
   178  019B                     	;# 
   179  019C                     	;# 
   180  019C                     	;# 
   181  019D                     	;# 
   182  019E                     	;# 
   183  019F                     	;# 
   184  020C                     	;# 
   185  020D                     	;# 
   186  0211                     	;# 
   187  0211                     	;# 
   188  0212                     	;# 
   189  0212                     	;# 
   190  0213                     	;# 
   191  0213                     	;# 
   192  0214                     	;# 
   193  0214                     	;# 
   194  0215                     	;# 
   195  0215                     	;# 
   196  0215                     	;# 
   197  0216                     	;# 
   198  0216                     	;# 
   199  0217                     	;# 
   200  0217                     	;# 
   201  0219                     	;# 
   202  021A                     	;# 
   203  021B                     	;# 
   204  021C                     	;# 
   205  021D                     	;# 
   206  021E                     	;# 
   207  021F                     	;# 
   208  0291                     	;# 
   209  0291                     	;# 
   210  0292                     	;# 
   211  0293                     	;# 
   212  0294                     	;# 
   213  0295                     	;# 
   214  0295                     	;# 
   215  0296                     	;# 
   216  0298                     	;# 
   217  0298                     	;# 
   218  0299                     	;# 
   219  029A                     	;# 
   220  029B                     	;# 
   221  029C                     	;# 
   222  029C                     	;# 
   223  029D                     	;# 
   224  029E                     	;# 
   225  029E                     	;# 
   226  0311                     	;# 
   227  0311                     	;# 
   228  0312                     	;# 
   229  0313                     	;# 
   230  0318                     	;# 
   231  0318                     	;# 
   232  0319                     	;# 
   233  031A                     	;# 
   234  0394                     	;# 
   235  0395                     	;# 
   236  0396                     	;# 
   237  039A                     	;# 
   238  039C                     	;# 
   239  039D                     	;# 
   240  039E                     	;# 
   241  039F                     	;# 
   242  0415                     	;# 
   243  0416                     	;# 
   244  0417                     	;# 
   245  041C                     	;# 
   246  041D                     	;# 
   247  041E                     	;# 
   248  0FE4                     	;# 
   249  0FE5                     	;# 
   250  0FE6                     	;# 
   251  0FE7                     	;# 
   252  0FE8                     	;# 
   253  0FE9                     	;# 
   254  0FEA                     	;# 
   255  0FEB                     	;# 
   256  0FED                     	;# 
   257  0FEE                     	;# 
   258  0FEF                     	;# 
   259  0000                     	;# 
   260  0001                     	;# 
   261  0002                     	;# 
   262  0003                     	;# 
   263  0004                     	;# 
   264  0005                     	;# 
   265  0006                     	;# 
   266  0007                     	;# 
   267  0008                     	;# 
   268  0009                     	;# 
   269  000A                     	;# 
   270  000B                     	;# 
   271  000C                     	;# 
   272  000D                     	;# 
   273  0011                     	;# 
   274  0012                     	;# 
   275  0013                     	;# 
   276  0014                     	;# 
   277  0015                     	;# 
   278  0016                     	;# 
   279  0016                     	;# 
   280  0017                     	;# 
   281  0018                     	;# 
   282  0019                     	;# 
   283  001A                     	;# 
   284  001B                     	;# 
   285  001C                     	;# 
   286  001E                     	;# 
   287  001F                     	;# 
   288  008C                     	;# 
   289  008D                     	;# 
   290  0091                     	;# 
   291  0092                     	;# 
   292  0093                     	;# 
   293  0094                     	;# 
   294  0095                     	;# 
   295  0096                     	;# 
   296  0097                     	;# 
   297  0098                     	;# 
   298  0099                     	;# 
   299  009A                     	;# 
   300  009B                     	;# 
   301  009B                     	;# 
   302  009C                     	;# 
   303  009D                     	;# 
   304  009E                     	;# 
   305  010C                     	;# 
   306  010D                     	;# 
   307  0111                     	;# 
   308  0112                     	;# 
   309  0113                     	;# 
   310  0114                     	;# 
   311  0115                     	;# 
   312  0116                     	;# 
   313  0117                     	;# 
   314  0118                     	;# 
   315  0119                     	;# 
   316  011A                     	;# 
   317  011B                     	;# 
   318  011D                     	;# 
   319  011E                     	;# 
   320  018C                     	;# 
   321  018D                     	;# 
   322  0191                     	;# 
   323  0191                     	;# 
   324  0192                     	;# 
   325  0193                     	;# 
   326  0193                     	;# 
   327  0193                     	;# 
   328  0194                     	;# 
   329  0195                     	;# 
   330  0196                     	;# 
   331  0199                     	;# 
   332  019A                     	;# 
   333  019B                     	;# 
   334  019B                     	;# 
   335  019B                     	;# 
   336  019B                     	;# 
   337  019C                     	;# 
   338  019C                     	;# 
   339  019D                     	;# 
   340  019E                     	;# 
   341  019F                     	;# 
   342  020C                     	;# 
   343  020D                     	;# 
   344  0211                     	;# 
   345  0211                     	;# 
   346  0212                     	;# 
   347  0212                     	;# 
   348  0213                     	;# 
   349  0213                     	;# 
   350  0214                     	;# 
   351  0214                     	;# 
   352  0215                     	;# 
   353  0215                     	;# 
   354  0215                     	;# 
   355  0216                     	;# 
   356  0216                     	;# 
   357  0217                     	;# 
   358  0217                     	;# 
   359  0219                     	;# 
   360  021A                     	;# 
   361  021B                     	;# 
   362  021C                     	;# 
   363  021D                     	;# 
   364  021E                     	;# 
   365  021F                     	;# 
   366  0291                     	;# 
   367  0291                     	;# 
   368  0292                     	;# 
   369  0293                     	;# 
   370  0294                     	;# 
   371  0295                     	;# 
   372  0295                     	;# 
   373  0296                     	;# 
   374  0298                     	;# 
   375  0298                     	;# 
   376  0299                     	;# 
   377  029A                     	;# 
   378  029B                     	;# 
   379  029C                     	;# 
   380  029C                     	;# 
   381  029D                     	;# 
   382  029E                     	;# 
   383  029E                     	;# 
   384  0311                     	;# 
   385  0311                     	;# 
   386  0312                     	;# 
   387  0313                     	;# 
   388  0318                     	;# 
   389  0318                     	;# 
   390  0319                     	;# 
   391  031A                     	;# 
   392  0394                     	;# 
   393  0395                     	;# 
   394  0396                     	;# 
   395  039A                     	;# 
   396  039C                     	;# 
   397  039D                     	;# 
   398  039E                     	;# 
   399  039F                     	;# 
   400  0415                     	;# 
   401  0416                     	;# 
   402  0417                     	;# 
   403  041C                     	;# 
   404  041D                     	;# 
   405  041E                     	;# 
   406  0FE4                     	;# 
   407  0FE5                     	;# 
   408  0FE6                     	;# 
   409  0FE7                     	;# 
   410  0FE8                     	;# 
   411  0FE9                     	;# 
   412  0FEA                     	;# 
   413  0FEB                     	;# 
   414  0FED                     	;# 
   415  0FEE                     	;# 
   416  0FEF                     	;# 
   417  0000                     	;# 
   418  0001                     	;# 
   419  0002                     	;# 
   420  0003                     	;# 
   421  0004                     	;# 
   422  0005                     	;# 
   423  0006                     	;# 
   424  0007                     	;# 
   425  0008                     	;# 
   426  0009                     	;# 
   427  000A                     	;# 
   428  000B                     	;# 
   429  000C                     	;# 
   430  000D                     	;# 
   431  0011                     	;# 
   432  0012                     	;# 
   433  0013                     	;# 
   434  0014                     	;# 
   435  0015                     	;# 
   436  0016                     	;# 
   437  0016                     	;# 
   438  0017                     	;# 
   439  0018                     	;# 
   440  0019                     	;# 
   441  001A                     	;# 
   442  001B                     	;# 
   443  001C                     	;# 
   444  001E                     	;# 
   445  001F                     	;# 
   446  008C                     	;# 
   447  008D                     	;# 
   448  0091                     	;# 
   449  0092                     	;# 
   450  0093                     	;# 
   451  0094                     	;# 
   452  0095                     	;# 
   453  0096                     	;# 
   454  0097                     	;# 
   455  0098                     	;# 
   456  0099                     	;# 
   457  009A                     	;# 
   458  009B                     	;# 
   459  009B                     	;# 
   460  009C                     	;# 
   461  009D                     	;# 
   462  009E                     	;# 
   463  010C                     	;# 
   464  010D                     	;# 
   465  0111                     	;# 
   466  0112                     	;# 
   467  0113                     	;# 
   468  0114                     	;# 
   469  0115                     	;# 
   470  0116                     	;# 
   471  0117                     	;# 
   472  0118                     	;# 
   473  0119                     	;# 
   474  011A                     	;# 
   475  011B                     	;# 
   476  011D                     	;# 
   477  011E                     	;# 
   478  018C                     	;# 
   479  018D                     	;# 
   480  0191                     	;# 
   481  0191                     	;# 
   482  0192                     	;# 
   483  0193                     	;# 
   484  0193                     	;# 
   485  0193                     	;# 
   486  0194                     	;# 
   487  0195                     	;# 
   488  0196                     	;# 
   489  0199                     	;# 
   490  019A                     	;# 
   491  019B                     	;# 
   492  019B                     	;# 
   493  019B                     	;# 
   494  019B                     	;# 
   495  019C                     	;# 
   496  019C                     	;# 
   497  019D                     	;# 
   498  019E                     	;# 
   499  019F                     	;# 
   500  020C                     	;# 
   501  020D                     	;# 
   502  0211                     	;# 
   503  0211                     	;# 
   504  0212                     	;# 
   505  0212                     	;# 
   506  0213                     	;# 
   507  0213                     	;# 
   508  0214                     	;# 
   509  0214                     	;# 
   510  0215                     	;# 
   511  0215                     	;# 
   512  0215                     	;# 
   513  0216                     	;# 
   514  0216                     	;# 
   515  0217                     	;# 
   516  0217                     	;# 
   517  0219                     	;# 
   518  021A                     	;# 
   519  021B                     	;# 
   520  021C                     	;# 
   521  021D                     	;# 
   522  021E                     	;# 
   523  021F                     	;# 
   524  0291                     	;# 
   525  0291                     	;# 
   526  0292                     	;# 
   527  0293                     	;# 
   528  0294                     	;# 
   529  0295                     	;# 
   530  0295                     	;# 
   531  0296                     	;# 
   532  0298                     	;# 
   533  0298                     	;# 
   534  0299                     	;# 
   535  029A                     	;# 
   536  029B                     	;# 
   537  029C                     	;# 
   538  029C                     	;# 
   539  029D                     	;# 
   540  029E                     	;# 
   541  029E                     	;# 
   542  0311                     	;# 
   543  0311                     	;# 
   544  0312                     	;# 
   545  0313                     	;# 
   546  0318                     	;# 
   547  0318                     	;# 
   548  0319                     	;# 
   549  031A                     	;# 
   550  0394                     	;# 
   551  0395                     	;# 
   552  0396                     	;# 
   553  039A                     	;# 
   554  039C                     	;# 
   555  039D                     	;# 
   556  039E                     	;# 
   557  039F                     	;# 
   558  0415                     	;# 
   559  0416                     	;# 
   560  0417                     	;# 
   561  041C                     	;# 
   562  041D                     	;# 
   563  041E                     	;# 
   564  0FE4                     	;# 
   565  0FE5                     	;# 
   566  0FE6                     	;# 
   567  0FE7                     	;# 
   568  0FE8                     	;# 
   569  0FE9                     	;# 
   570  0FEA                     	;# 
   571  0FEB                     	;# 
   572  0FED                     	;# 
   573  0FEE                     	;# 
   574  0FEF                     	;# 
   575  0000                     	;# 
   576  0001                     	;# 
   577  0002                     	;# 
   578  0003                     	;# 
   579  0004                     	;# 
   580  0005                     	;# 
   581  0006                     	;# 
   582  0007                     	;# 
   583  0008                     	;# 
   584  0009                     	;# 
   585  000A                     	;# 
   586  000B                     	;# 
   587  000C                     	;# 
   588  000D                     	;# 
   589  0011                     	;# 
   590  0012                     	;# 
   591  0013                     	;# 
   592  0014                     	;# 
   593  0015                     	;# 
   594  0016                     	;# 
   595  0016                     	;# 
   596  0017                     	;# 
   597  0018                     	;# 
   598  0019                     	;# 
   599  001A                     	;# 
   600  001B                     	;# 
   601  001C                     	;# 
   602  001E                     	;# 
   603  001F                     	;# 
   604  008C                     	;# 
   605  008D                     	;# 
   606  0091                     	;# 
   607  0092                     	;# 
   608  0093                     	;# 
   609  0094                     	;# 
   610  0095                     	;# 
   611  0096                     	;# 
   612  0097                     	;# 
   613  0098                     	;# 
   614  0099                     	;# 
   615  009A                     	;# 
   616  009B                     	;# 
   617  009B                     	;# 
   618  009C                     	;# 
   619  009D                     	;# 
   620  009E                     	;# 
   621  010C                     	;# 
   622  010D                     	;# 
   623  0111                     	;# 
   624  0112                     	;# 
   625  0113                     	;# 
   626  0114                     	;# 
   627  0115                     	;# 
   628  0116                     	;# 
   629  0117                     	;# 
   630  0118                     	;# 
   631  0119                     	;# 
   632  011A                     	;# 
   633  011B                     	;# 
   634  011D                     	;# 
   635  011E                     	;# 
   636  018C                     	;# 
   637  018D                     	;# 
   638  0191                     	;# 
   639  0191                     	;# 
   640  0192                     	;# 
   641  0193                     	;# 
   642  0193                     	;# 
   643  0193                     	;# 
   644  0194                     	;# 
   645  0195                     	;# 
   646  0196                     	;# 
   647  0199                     	;# 
   648  019A                     	;# 
   649  019B                     	;# 
   650  019B                     	;# 
   651  019B                     	;# 
   652  019B                     	;# 
   653  019C                     	;# 
   654  019C                     	;# 
   655  019D                     	;# 
   656  019E                     	;# 
   657  019F                     	;# 
   658  020C                     	;# 
   659  020D                     	;# 
   660  0211                     	;# 
   661  0211                     	;# 
   662  0212                     	;# 
   663  0212                     	;# 
   664  0213                     	;# 
   665  0213                     	;# 
   666  0214                     	;# 
   667  0214                     	;# 
   668  0215                     	;# 
   669  0215                     	;# 
   670  0215                     	;# 
   671  0216                     	;# 
   672  0216                     	;# 
   673  0217                     	;# 
   674  0217                     	;# 
   675  0219                     	;# 
   676  021A                     	;# 
   677  021B                     	;# 
   678  021C                     	;# 
   679  021D                     	;# 
   680  021E                     	;# 
   681  021F                     	;# 
   682  0291                     	;# 
   683  0291                     	;# 
   684  0292                     	;# 
   685  0293                     	;# 
   686  0294                     	;# 
   687  0295                     	;# 
   688  0295                     	;# 
   689  0296                     	;# 
   690  0298                     	;# 
   691  0298                     	;# 
   692  0299                     	;# 
   693  029A                     	;# 
   694  029B                     	;# 
   695  029C                     	;# 
   696  029C                     	;# 
   697  029D                     	;# 
   698  029E                     	;# 
   699  029E                     	;# 
   700  0311                     	;# 
   701  0311                     	;# 
   702  0312                     	;# 
   703  0313                     	;# 
   704  0318                     	;# 
   705  0318                     	;# 
   706  0319                     	;# 
   707  031A                     	;# 
   708  0394                     	;# 
   709  0395                     	;# 
   710  0396                     	;# 
   711  039A                     	;# 
   712  039C                     	;# 
   713  039D                     	;# 
   714  039E                     	;# 
   715  039F                     	;# 
   716  0415                     	;# 
   717  0416                     	;# 
   718  0417                     	;# 
   719  041C                     	;# 
   720  041D                     	;# 
   721  041E                     	;# 
   722  0FE4                     	;# 
   723  0FE5                     	;# 
   724  0FE6                     	;# 
   725  0FE7                     	;# 
   726  0FE8                     	;# 
   727  0FE9                     	;# 
   728  0FEA                     	;# 
   729  0FEB                     	;# 
   730  0FED                     	;# 
   731  0FEE                     	;# 
   732  0FEF                     	;# 
   733  0000                     	;# 
   734  0001                     	;# 
   735  0002                     	;# 
   736  0003                     	;# 
   737  0004                     	;# 
   738  0005                     	;# 
   739  0006                     	;# 
   740  0007                     	;# 
   741  0008                     	;# 
   742  0009                     	;# 
   743  000A                     	;# 
   744  000B                     	;# 
   745  000C                     	;# 
   746  000D                     	;# 
   747  0011                     	;# 
   748  0012                     	;# 
   749  0013                     	;# 
   750  0014                     	;# 
   751  0015                     	;# 
   752  0016                     	;# 
   753  0016                     	;# 
   754  0017                     	;# 
   755  0018                     	;# 
   756  0019                     	;# 
   757  001A                     	;# 
   758  001B                     	;# 
   759  001C                     	;# 
   760  001E                     	;# 
   761  001F                     	;# 
   762  008C                     	;# 
   763  008D                     	;# 
   764  0091                     	;# 
   765  0092                     	;# 
   766  0093                     	;# 
   767  0094                     	;# 
   768  0095                     	;# 
   769  0096                     	;# 
   770  0097                     	;# 
   771  0098                     	;# 
   772  0099                     	;# 
   773  009A                     	;# 
   774  009B                     	;# 
   775  009B                     	;# 
   776  009C                     	;# 
   777  009D                     	;# 
   778  009E                     	;# 
   779  010C                     	;# 
   780  010D                     	;# 
   781  0111                     	;# 
   782  0112                     	;# 
   783  0113                     	;# 
   784  0114                     	;# 
   785  0115                     	;# 
   786  0116                     	;# 
   787  0117                     	;# 
   788  0118                     	;# 
   789  0119                     	;# 
   790  011A                     	;# 
   791  011B                     	;# 
   792  011D                     	;# 
   793  011E                     	;# 
   794  018C                     	;# 
   795  018D                     	;# 
   796  0191                     	;# 
   797  0191                     	;# 
   798  0192                     	;# 
   799  0193                     	;# 
   800  0193                     	;# 
   801  0193                     	;# 
   802  0194                     	;# 
   803  0195                     	;# 
   804  0196                     	;# 
   805  0199                     	;# 
   806  019A                     	;# 
   807  019B                     	;# 
   808  019B                     	;# 
   809  019B                     	;# 
   810  019B                     	;# 
   811  019C                     	;# 
   812  019C                     	;# 
   813  019D                     	;# 
   814  019E                     	;# 
   815  019F                     	;# 
   816  020C                     	;# 
   817  020D                     	;# 
   818  0211                     	;# 
   819  0211                     	;# 
   820  0212                     	;# 
   821  0212                     	;# 
   822  0213                     	;# 
   823  0213                     	;# 
   824  0214                     	;# 
   825  0214                     	;# 
   826  0215                     	;# 
   827  0215                     	;# 
   828  0215                     	;# 
   829  0216                     	;# 
   830  0216                     	;# 
   831  0217                     	;# 
   832  0217                     	;# 
   833  0219                     	;# 
   834  021A                     	;# 
   835  021B                     	;# 
   836  021C                     	;# 
   837  021D                     	;# 
   838  021E                     	;# 
   839  021F                     	;# 
   840  0291                     	;# 
   841  0291                     	;# 
   842  0292                     	;# 
   843  0293                     	;# 
   844  0294                     	;# 
   845  0295                     	;# 
   846  0295                     	;# 
   847  0296                     	;# 
   848  0298                     	;# 
   849  0298                     	;# 
   850  0299                     	;# 
   851  029A                     	;# 
   852  029B                     	;# 
   853  029C                     	;# 
   854  029C                     	;# 
   855  029D                     	;# 
   856  029E                     	;# 
   857  029E                     	;# 
   858  0311                     	;# 
   859  0311                     	;# 
   860  0312                     	;# 
   861  0313                     	;# 
   862  0318                     	;# 
   863  0318                     	;# 
   864  0319                     	;# 
   865  031A                     	;# 
   866  0394                     	;# 
   867  0395                     	;# 
   868  0396                     	;# 
   869  039A                     	;# 
   870  039C                     	;# 
   871  039D                     	;# 
   872  039E                     	;# 
   873  039F                     	;# 
   874  0415                     	;# 
   875  0416                     	;# 
   876  0417                     	;# 
   877  041C                     	;# 
   878  041D                     	;# 
   879  041E                     	;# 
   880  0FE4                     	;# 
   881  0FE5                     	;# 
   882  0FE6                     	;# 
   883  0FE7                     	;# 
   884  0FE8                     	;# 
   885  0FE9                     	;# 
   886  0FEA                     	;# 
   887  0FEB                     	;# 
   888  0FED                     	;# 
   889  0FEE                     	;# 
   890  0FEF                     	;# 
   891  0000                     	;# 
   892  0001                     	;# 
   893  0002                     	;# 
   894  0003                     	;# 
   895  0004                     	;# 
   896  0005                     	;# 
   897  0006                     	;# 
   898  0007                     	;# 
   899  0008                     	;# 
   900  0009                     	;# 
   901  000A                     	;# 
   902  000B                     	;# 
   903  000C                     	;# 
   904  000D                     	;# 
   905  0011                     	;# 
   906  0012                     	;# 
   907  0013                     	;# 
   908  0014                     	;# 
   909  0015                     	;# 
   910  0016                     	;# 
   911  0016                     	;# 
   912  0017                     	;# 
   913  0018                     	;# 
   914  0019                     	;# 
   915  001A                     	;# 
   916  001B                     	;# 
   917  001C                     	;# 
   918  001E                     	;# 
   919  001F                     	;# 
   920  008C                     	;# 
   921  008D                     	;# 
   922  0091                     	;# 
   923  0092                     	;# 
   924  0093                     	;# 
   925  0094                     	;# 
   926  0095                     	;# 
   927  0096                     	;# 
   928  0097                     	;# 
   929  0098                     	;# 
   930  0099                     	;# 
   931  009A                     	;# 
   932  009B                     	;# 
   933  009B                     	;# 
   934  009C                     	;# 
   935  009D                     	;# 
   936  009E                     	;# 
   937  010C                     	;# 
   938  010D                     	;# 
   939  0111                     	;# 
   940  0112                     	;# 
   941  0113                     	;# 
   942  0114                     	;# 
   943  0115                     	;# 
   944  0116                     	;# 
   945  0117                     	;# 
   946  0118                     	;# 
   947  0119                     	;# 
   948  011A                     	;# 
   949  011B                     	;# 
   950  011D                     	;# 
   951  011E                     	;# 
   952  018C                     	;# 
   953  018D                     	;# 
   954  0191                     	;# 
   955  0191                     	;# 
   956  0192                     	;# 
   957  0193                     	;# 
   958  0193                     	;# 
   959  0193                     	;# 
   960  0194                     	;# 
   961  0195                     	;# 
   962  0196                     	;# 
   963  0199                     	;# 
   964  019A                     	;# 
   965  019B                     	;# 
   966  019B                     	;# 
   967  019B                     	;# 
   968  019B                     	;# 
   969  019C                     	;# 
   970  019C                     	;# 
   971  019D                     	;# 
   972  019E                     	;# 
   973  019F                     	;# 
   974  020C                     	;# 
   975  020D                     	;# 
   976  0211                     	;# 
   977  0211                     	;# 
   978  0212                     	;# 
   979  0212                     	;# 
   980  0213                     	;# 
   981  0213                     	;# 
   982  0214                     	;# 
   983  0214                     	;# 
   984  0215                     	;# 
   985  0215                     	;# 
   986  0215                     	;# 
   987  0216                     	;# 
   988  0216                     	;# 
   989  0217                     	;# 
   990  0217                     	;# 
   991  0219                     	;# 
   992  021A                     	;# 
   993  021B                     	;# 
   994  021C                     	;# 
   995  021D                     	;# 
   996  021E                     	;# 
   997  021F                     	;# 
   998  0291                     	;# 
   999  0291                     	;# 
  1000  0292                     	;# 
  1001  0293                     	;# 
  1002  0294                     	;# 
  1003  0295                     	;# 
  1004  0295                     	;# 
  1005  0296                     	;# 
  1006  0298                     	;# 
  1007  0298                     	;# 
  1008  0299                     	;# 
  1009  029A                     	;# 
  1010  029B                     	;# 
  1011  029C                     	;# 
  1012  029C                     	;# 
  1013  029D                     	;# 
  1014  029E                     	;# 
  1015  029E                     	;# 
  1016  0311                     	;# 
  1017  0311                     	;# 
  1018  0312                     	;# 
  1019  0313                     	;# 
  1020  0318                     	;# 
  1021  0318                     	;# 
  1022  0319                     	;# 
  1023  031A                     	;# 
  1024  0394                     	;# 
  1025  0395                     	;# 
  1026  0396                     	;# 
  1027  039A                     	;# 
  1028  039C                     	;# 
  1029  039D                     	;# 
  1030  039E                     	;# 
  1031  039F                     	;# 
  1032  0415                     	;# 
  1033  0416                     	;# 
  1034  0417                     	;# 
  1035  041C                     	;# 
  1036  041D                     	;# 
  1037  041E                     	;# 
  1038  0FE4                     	;# 
  1039  0FE5                     	;# 
  1040  0FE6                     	;# 
  1041  0FE7                     	;# 
  1042  0FE8                     	;# 
  1043  0FE9                     	;# 
  1044  0FEA                     	;# 
  1045  0FEB                     	;# 
  1046  0FED                     	;# 
  1047  0FEE                     	;# 
  1048  0FEF                     	;# 
  1049  0000                     	;# 
  1050  0001                     	;# 
  1051  0002                     	;# 
  1052  0003                     	;# 
  1053  0004                     	;# 
  1054  0005                     	;# 
  1055  0006                     	;# 
  1056  0007                     	;# 
  1057  0008                     	;# 
  1058  0009                     	;# 
  1059  000A                     	;# 
  1060  000B                     	;# 
  1061  000C                     	;# 
  1062  000D                     	;# 
  1063  0011                     	;# 
  1064  0012                     	;# 
  1065  0013                     	;# 
  1066  0014                     	;# 
  1067  0015                     	;# 
  1068  0016                     	;# 
  1069  0016                     	;# 
  1070  0017                     	;# 
  1071  0018                     	;# 
  1072  0019                     	;# 
  1073  001A                     	;# 
  1074  001B                     	;# 
  1075  001C                     	;# 
  1076  001E                     	;# 
  1077  001F                     	;# 
  1078  008C                     	;# 
  1079  008D                     	;# 
  1080  0091                     	;# 
  1081  0092                     	;# 
  1082  0093                     	;# 
  1083  0094                     	;# 
  1084  0095                     	;# 
  1085  0096                     	;# 
  1086  0097                     	;# 
  1087  0098                     	;# 
  1088  0099                     	;# 
  1089  009A                     	;# 
  1090  009B                     	;# 
  1091  009B                     	;# 
  1092  009C                     	;# 
  1093  009D                     	;# 
  1094  009E                     	;# 
  1095  010C                     	;# 
  1096  010D                     	;# 
  1097  0111                     	;# 
  1098  0112                     	;# 
  1099  0113                     	;# 
  1100  0114                     	;# 
  1101  0115                     	;# 
  1102  0116                     	;# 
  1103  0117                     	;# 
  1104  0118                     	;# 
  1105  0119                     	;# 
  1106  011A                     	;# 
  1107  011B                     	;# 
  1108  011D                     	;# 
  1109  011E                     	;# 
  1110  018C                     	;# 
  1111  018D                     	;# 
  1112  0191                     	;# 
  1113  0191                     	;# 
  1114  0192                     	;# 
  1115  0193                     	;# 
  1116  0193                     	;# 
  1117  0193                     	;# 
  1118  0194                     	;# 
  1119  0195                     	;# 
  1120  0196                     	;# 
  1121  0199                     	;# 
  1122  019A                     	;# 
  1123  019B                     	;# 
  1124  019B                     	;# 
  1125  019B                     	;# 
  1126  019B                     	;# 
  1127  019C                     	;# 
  1128  019C                     	;# 
  1129  019D                     	;# 
  1130  019E                     	;# 
  1131  019F                     	;# 
  1132  020C                     	;# 
  1133  020D                     	;# 
  1134  0211                     	;# 
  1135  0211                     	;# 
  1136  0212                     	;# 
  1137  0212                     	;# 
  1138  0213                     	;# 
  1139  0213                     	;# 
  1140  0214                     	;# 
  1141  0214                     	;# 
  1142  0215                     	;# 
  1143  0215                     	;# 
  1144  0215                     	;# 
  1145  0216                     	;# 
  1146  0216                     	;# 
  1147  0217                     	;# 
  1148  0217                     	;# 
  1149  0219                     	;# 
  1150  021A                     	;# 
  1151  021B                     	;# 
  1152  021C                     	;# 
  1153  021D                     	;# 
  1154  021E                     	;# 
  1155  021F                     	;# 
  1156  0291                     	;# 
  1157  0291                     	;# 
  1158  0292                     	;# 
  1159  0293                     	;# 
  1160  0294                     	;# 
  1161  0295                     	;# 
  1162  0295                     	;# 
  1163  0296                     	;# 
  1164  0298                     	;# 
  1165  0298                     	;# 
  1166  0299                     	;# 
  1167  029A                     	;# 
  1168  029B                     	;# 
  1169  029C                     	;# 
  1170  029C                     	;# 
  1171  029D                     	;# 
  1172  029E                     	;# 
  1173  029E                     	;# 
  1174  0311                     	;# 
  1175  0311                     	;# 
  1176  0312                     	;# 
  1177  0313                     	;# 
  1178  0318                     	;# 
  1179  0318                     	;# 
  1180  0319                     	;# 
  1181  031A                     	;# 
  1182  0394                     	;# 
  1183  0395                     	;# 
  1184  0396                     	;# 
  1185  039A                     	;# 
  1186  039C                     	;# 
  1187  039D                     	;# 
  1188  039E                     	;# 
  1189  039F                     	;# 
  1190  0415                     	;# 
  1191  0416                     	;# 
  1192  0417                     	;# 
  1193  041C                     	;# 
  1194  041D                     	;# 
  1195  041E                     	;# 
  1196  0FE4                     	;# 
  1197  0FE5                     	;# 
  1198  0FE6                     	;# 
  1199  0FE7                     	;# 
  1200  0FE8                     	;# 
  1201  0FE9                     	;# 
  1202  0FEA                     	;# 
  1203  0FEB                     	;# 
  1204  0FED                     	;# 
  1205  0FEE                     	;# 
  1206  0FEF                     	;# 
  1207  0000                     	;# 
  1208  0001                     	;# 
  1209  0002                     	;# 
  1210  0003                     	;# 
  1211  0004                     	;# 
  1212  0005                     	;# 
  1213  0006                     	;# 
  1214  0007                     	;# 
  1215  0008                     	;# 
  1216  0009                     	;# 
  1217  000A                     	;# 
  1218  000B                     	;# 
  1219  000C                     	;# 
  1220  000D                     	;# 
  1221  0011                     	;# 
  1222  0012                     	;# 
  1223  0013                     	;# 
  1224  0014                     	;# 
  1225  0015                     	;# 
  1226  0016                     	;# 
  1227  0016                     	;# 
  1228  0017                     	;# 
  1229  0018                     	;# 
  1230  0019                     	;# 
  1231  001A                     	;# 
  1232  001B                     	;# 
  1233  001C                     	;# 
  1234  001E                     	;# 
  1235  001F                     	;# 
  1236  008C                     	;# 
  1237  008D                     	;# 
  1238  0091                     	;# 
  1239  0092                     	;# 
  1240  0093                     	;# 
  1241  0094                     	;# 
  1242  0095                     	;# 
  1243  0096                     	;# 
  1244  0097                     	;# 
  1245  0098                     	;# 
  1246  0099                     	;# 
  1247  009A                     	;# 
  1248  009B                     	;# 
  1249  009B                     	;# 
  1250  009C                     	;# 
  1251  009D                     	;# 
  1252  009E                     	;# 
  1253  010C                     	;# 
  1254  010D                     	;# 
  1255  0111                     	;# 
  1256  0112                     	;# 
  1257  0113                     	;# 
  1258  0114                     	;# 
  1259  0115                     	;# 
  1260  0116                     	;# 
  1261  0117                     	;# 
  1262  0118                     	;# 
  1263  0119                     	;# 
  1264  011A                     	;# 
  1265  011B                     	;# 
  1266  011D                     	;# 
  1267  011E                     	;# 
  1268  018C                     	;# 
  1269  018D                     	;# 
  1270  0191                     	;# 
  1271  0191                     	;# 
  1272  0192                     	;# 
  1273  0193                     	;# 
  1274  0193                     	;# 
  1275  0193                     	;# 
  1276  0194                     	;# 
  1277  0195                     	;# 
  1278  0196                     	;# 
  1279  0199                     	;# 
  1280  019A                     	;# 
  1281  019B                     	;# 
  1282  019B                     	;# 
  1283  019B                     	;# 
  1284  019B                     	;# 
  1285  019C                     	;# 
  1286  019C                     	;# 
  1287  019D                     	;# 
  1288  019E                     	;# 
  1289  019F                     	;# 
  1290  020C                     	;# 
  1291  020D                     	;# 
  1292  0211                     	;# 
  1293  0211                     	;# 
  1294  0212                     	;# 
  1295  0212                     	;# 
  1296  0213                     	;# 
  1297  0213                     	;# 
  1298  0214                     	;# 
  1299  0214                     	;# 
  1300  0215                     	;# 
  1301  0215                     	;# 
  1302  0215                     	;# 
  1303  0216                     	;# 
  1304  0216                     	;# 
  1305  0217                     	;# 
  1306  0217                     	;# 
  1307  0219                     	;# 
  1308  021A                     	;# 
  1309  021B                     	;# 
  1310  021C                     	;# 
  1311  021D                     	;# 
  1312  021E                     	;# 
  1313  021F                     	;# 
  1314  0291                     	;# 
  1315  0291                     	;# 
  1316  0292                     	;# 
  1317  0293                     	;# 
  1318  0294                     	;# 
  1319  0295                     	;# 
  1320  0295                     	;# 
  1321  0296                     	;# 
  1322  0298                     	;# 
  1323  0298                     	;# 
  1324  0299                     	;# 
  1325  029A                     	;# 
  1326  029B                     	;# 
  1327  029C                     	;# 
  1328  029C                     	;# 
  1329  029D                     	;# 
  1330  029E                     	;# 
  1331  029E                     	;# 
  1332  0311                     	;# 
  1333  0311                     	;# 
  1334  0312                     	;# 
  1335  0313                     	;# 
  1336  0318                     	;# 
  1337  0318                     	;# 
  1338  0319                     	;# 
  1339  031A                     	;# 
  1340  0394                     	;# 
  1341  0395                     	;# 
  1342  0396                     	;# 
  1343  039A                     	;# 
  1344  039C                     	;# 
  1345  039D                     	;# 
  1346  039E                     	;# 
  1347  039F                     	;# 
  1348  0415                     	;# 
  1349  0416                     	;# 
  1350  0417                     	;# 
  1351  041C                     	;# 
  1352  041D                     	;# 
  1353  041E                     	;# 
  1354  0FE4                     	;# 
  1355  0FE5                     	;# 
  1356  0FE6                     	;# 
  1357  0FE7                     	;# 
  1358  0FE8                     	;# 
  1359  0FE9                     	;# 
  1360  0FEA                     	;# 
  1361  0FEB                     	;# 
  1362  0FED                     	;# 
  1363  0FEE                     	;# 
  1364  0FEF                     	;# 
  1365  0000                     	;# 
  1366  0001                     	;# 
  1367  0002                     	;# 
  1368  0003                     	;# 
  1369  0004                     	;# 
  1370  0005                     	;# 
  1371  0006                     	;# 
  1372  0007                     	;# 
  1373  0008                     	;# 
  1374  0009                     	;# 
  1375  000A                     	;# 
  1376  000B                     	;# 
  1377  000C                     	;# 
  1378  000D                     	;# 
  1379  0011                     	;# 
  1380  0012                     	;# 
  1381  0013                     	;# 
  1382  0014                     	;# 
  1383  0015                     	;# 
  1384  0016                     	;# 
  1385  0016                     	;# 
  1386  0017                     	;# 
  1387  0018                     	;# 
  1388  0019                     	;# 
  1389  001A                     	;# 
  1390  001B                     	;# 
  1391  001C                     	;# 
  1392  001E                     	;# 
  1393  001F                     	;# 
  1394  008C                     	;# 
  1395  008D                     	;# 
  1396  0091                     	;# 
  1397  0092                     	;# 
  1398  0093                     	;# 
  1399  0094                     	;# 
  1400  0095                     	;# 
  1401  0096                     	;# 
  1402  0097                     	;# 
  1403  0098                     	;# 
  1404  0099                     	;# 
  1405  009A                     	;# 
  1406  009B                     	;# 
  1407  009B                     	;# 
  1408  009C                     	;# 
  1409  009D                     	;# 
  1410  009E                     	;# 
  1411  010C                     	;# 
  1412  010D                     	;# 
  1413  0111                     	;# 
  1414  0112                     	;# 
  1415  0113                     	;# 
  1416  0114                     	;# 
  1417  0115                     	;# 
  1418  0116                     	;# 
  1419  0117                     	;# 
  1420  0118                     	;# 
  1421  0119                     	;# 
  1422  011A                     	;# 
  1423  011B                     	;# 
  1424  011D                     	;# 
  1425  011E                     	;# 
  1426  018C                     	;# 
  1427  018D                     	;# 
  1428  0191                     	;# 
  1429  0191                     	;# 
  1430  0192                     	;# 
  1431  0193                     	;# 
  1432  0193                     	;# 
  1433  0193                     	;# 
  1434  0194                     	;# 
  1435  0195                     	;# 
  1436  0196                     	;# 
  1437  0199                     	;# 
  1438  019A                     	;# 
  1439  019B                     	;# 
  1440  019B                     	;# 
  1441  019B                     	;# 
  1442  019B                     	;# 
  1443  019C                     	;# 
  1444  019C                     	;# 
  1445  019D                     	;# 
  1446  019E                     	;# 
  1447  019F                     	;# 
  1448  020C                     	;# 
  1449  020D                     	;# 
  1450  0211                     	;# 
  1451  0211                     	;# 
  1452  0212                     	;# 
  1453  0212                     	;# 
  1454  0213                     	;# 
  1455  0213                     	;# 
  1456  0214                     	;# 
  1457  0214                     	;# 
  1458  0215                     	;# 
  1459  0215                     	;# 
  1460  0215                     	;# 
  1461  0216                     	;# 
  1462  0216                     	;# 
  1463  0217                     	;# 
  1464  0217                     	;# 
  1465  0219                     	;# 
  1466  021A                     	;# 
  1467  021B                     	;# 
  1468  021C                     	;# 
  1469  021D                     	;# 
  1470  021E                     	;# 
  1471  021F                     	;# 
  1472  0291                     	;# 
  1473  0291                     	;# 
  1474  0292                     	;# 
  1475  0293                     	;# 
  1476  0294                     	;# 
  1477  0295                     	;# 
  1478  0295                     	;# 
  1479  0296                     	;# 
  1480  0298                     	;# 
  1481  0298                     	;# 
  1482  0299                     	;# 
  1483  029A                     	;# 
  1484  029B                     	;# 
  1485  029C                     	;# 
  1486  029C                     	;# 
  1487  029D                     	;# 
  1488  029E                     	;# 
  1489  029E                     	;# 
  1490  0311                     	;# 
  1491  0311                     	;# 
  1492  0312                     	;# 
  1493  0313                     	;# 
  1494  0318                     	;# 
  1495  0318                     	;# 
  1496  0319                     	;# 
  1497  031A                     	;# 
  1498  0394                     	;# 
  1499  0395                     	;# 
  1500  0396                     	;# 
  1501  039A                     	;# 
  1502  039C                     	;# 
  1503  039D                     	;# 
  1504  039E                     	;# 
  1505  039F                     	;# 
  1506  0415                     	;# 
  1507  0416                     	;# 
  1508  0417                     	;# 
  1509  041C                     	;# 
  1510  041D                     	;# 
  1511  041E                     	;# 
  1512  0FE4                     	;# 
  1513  0FE5                     	;# 
  1514  0FE6                     	;# 
  1515  0FE7                     	;# 
  1516  0FE8                     	;# 
  1517  0FE9                     	;# 
  1518  0FEA                     	;# 
  1519  0FEB                     	;# 
  1520  0FED                     	;# 
  1521  0FEE                     	;# 
  1522  0FEF                     	;# 
  1523  0000                     	;# 
  1524  0001                     	;# 
  1525  0002                     	;# 
  1526  0003                     	;# 
  1527  0004                     	;# 
  1528  0005                     	;# 
  1529  0006                     	;# 
  1530  0007                     	;# 
  1531  0008                     	;# 
  1532  0009                     	;# 
  1533  000A                     	;# 
  1534  000B                     	;# 
  1535  000C                     	;# 
  1536  000D                     	;# 
  1537  0011                     	;# 
  1538  0012                     	;# 
  1539  0013                     	;# 
  1540  0014                     	;# 
  1541  0015                     	;# 
  1542  0016                     	;# 
  1543  0016                     	;# 
  1544  0017                     	;# 
  1545  0018                     	;# 
  1546  0019                     	;# 
  1547  001A                     	;# 
  1548  001B                     	;# 
  1549  001C                     	;# 
  1550  001E                     	;# 
  1551  001F                     	;# 
  1552  008C                     	;# 
  1553  008D                     	;# 
  1554  0091                     	;# 
  1555  0092                     	;# 
  1556  0093                     	;# 
  1557  0094                     	;# 
  1558  0095                     	;# 
  1559  0096                     	;# 
  1560  0097                     	;# 
  1561  0098                     	;# 
  1562  0099                     	;# 
  1563  009A                     	;# 
  1564  009B                     	;# 
  1565  009B                     	;# 
  1566  009C                     	;# 
  1567  009D                     	;# 
  1568  009E                     	;# 
  1569  010C                     	;# 
  1570  010D                     	;# 
  1571  0111                     	;# 
  1572  0112                     	;# 
  1573  0113                     	;# 
  1574  0114                     	;# 
  1575  0115                     	;# 
  1576  0116                     	;# 
  1577  0117                     	;# 
  1578  0118                     	;# 
  1579  0119                     	;# 
  1580  011A                     	;# 
  1581  011B                     	;# 
  1582  011D                     	;# 
  1583  011E                     	;# 
  1584  018C                     	;# 
  1585  018D                     	;# 
  1586  0191                     	;# 
  1587  0191                     	;# 
  1588  0192                     	;# 
  1589  0193                     	;# 
  1590  0193                     	;# 
  1591  0193                     	;# 
  1592  0194                     	;# 
  1593  0195                     	;# 
  1594  0196                     	;# 
  1595  0199                     	;# 
  1596  019A                     	;# 
  1597  019B                     	;# 
  1598  019B                     	;# 
  1599  019B                     	;# 
  1600  019B                     	;# 
  1601  019C                     	;# 
  1602  019C                     	;# 
  1603  019D                     	;# 
  1604  019E                     	;# 
  1605  019F                     	;# 
  1606  020C                     	;# 
  1607  020D                     	;# 
  1608  0211                     	;# 
  1609  0211                     	;# 
  1610  0212                     	;# 
  1611  0212                     	;# 
  1612  0213                     	;# 
  1613  0213                     	;# 
  1614  0214                     	;# 
  1615  0214                     	;# 
  1616  0215                     	;# 
  1617  0215                     	;# 
  1618  0215                     	;# 
  1619  0216                     	;# 
  1620  0216                     	;# 
  1621  0217                     	;# 
  1622  0217                     	;# 
  1623  0219                     	;# 
  1624  021A                     	;# 
  1625  021B                     	;# 
  1626  021C                     	;# 
  1627  021D                     	;# 
  1628  021E                     	;# 
  1629  021F                     	;# 
  1630  0291                     	;# 
  1631  0291                     	;# 
  1632  0292                     	;# 
  1633  0293                     	;# 
  1634  0294                     	;# 
  1635  0295                     	;# 
  1636  0295                     	;# 
  1637  0296                     	;# 
  1638  0298                     	;# 
  1639  0298                     	;# 
  1640  0299                     	;# 
  1641  029A                     	;# 
  1642  029B                     	;# 
  1643  029C                     	;# 
  1644  029C                     	;# 
  1645  029D                     	;# 
  1646  029E                     	;# 
  1647  029E                     	;# 
  1648  0311                     	;# 
  1649  0311                     	;# 
  1650  0312                     	;# 
  1651  0313                     	;# 
  1652  0318                     	;# 
  1653  0318                     	;# 
  1654  0319                     	;# 
  1655  031A                     	;# 
  1656  0394                     	;# 
  1657  0395                     	;# 
  1658  0396                     	;# 
  1659  039A                     	;# 
  1660  039C                     	;# 
  1661  039D                     	;# 
  1662  039E                     	;# 
  1663  039F                     	;# 
  1664  0415                     	;# 
  1665  0416                     	;# 
  1666  0417                     	;# 
  1667  041C                     	;# 
  1668  041D                     	;# 
  1669  041E                     	;# 
  1670  0FE4                     	;# 
  1671  0FE5                     	;# 
  1672  0FE6                     	;# 
  1673  0FE7                     	;# 
  1674  0FE8                     	;# 
  1675  0FE9                     	;# 
  1676  0FEA                     	;# 
  1677  0FEB                     	;# 
  1678  0FED                     	;# 
  1679  0FEE                     	;# 
  1680  0FEF                     	;# 
  1681  0000                     	;# 
  1682  0001                     	;# 
  1683  0002                     	;# 
  1684  0003                     	;# 
  1685  0004                     	;# 
  1686  0005                     	;# 
  1687  0006                     	;# 
  1688  0007                     	;# 
  1689  0008                     	;# 
  1690  0009                     	;# 
  1691  000A                     	;# 
  1692  000B                     	;# 
  1693  000C                     	;# 
  1694  000D                     	;# 
  1695  0011                     	;# 
  1696  0012                     	;# 
  1697  0013                     	;# 
  1698  0014                     	;# 
  1699  0015                     	;# 
  1700  0016                     	;# 
  1701  0016                     	;# 
  1702  0017                     	;# 
  1703  0018                     	;# 
  1704  0019                     	;# 
  1705  001A                     	;# 
  1706  001B                     	;# 
  1707  001C                     	;# 
  1708  001E                     	;# 
  1709  001F                     	;# 
  1710  008C                     	;# 
  1711  008D                     	;# 
  1712  0091                     	;# 
  1713  0092                     	;# 
  1714  0093                     	;# 
  1715  0094                     	;# 
  1716  0095                     	;# 
  1717  0096                     	;# 
  1718  0097                     	;# 
  1719  0098                     	;# 
  1720  0099                     	;# 
  1721  009A                     	;# 
  1722  009B                     	;# 
  1723  009B                     	;# 
  1724  009C                     	;# 
  1725  009D                     	;# 
  1726  009E                     	;# 
  1727  010C                     	;# 
  1728  010D                     	;# 
  1729  0111                     	;# 
  1730  0112                     	;# 
  1731  0113                     	;# 
  1732  0114                     	;# 
  1733  0115                     	;# 
  1734  0116                     	;# 
  1735  0117                     	;# 
  1736  0118                     	;# 
  1737  0119                     	;# 
  1738  011A                     	;# 
  1739  011B                     	;# 
  1740  011D                     	;# 
  1741  011E                     	;# 
  1742  018C                     	;# 
  1743  018D                     	;# 
  1744  0191                     	;# 
  1745  0191                     	;# 
  1746  0192                     	;# 
  1747  0193                     	;# 
  1748  0193                     	;# 
  1749  0193                     	;# 
  1750  0194                     	;# 
  1751  0195                     	;# 
  1752  0196                     	;# 
  1753  0199                     	;# 
  1754  019A                     	;# 
  1755  019B                     	;# 
  1756  019B                     	;# 
  1757  019B                     	;# 
  1758  019B                     	;# 
  1759  019C                     	;# 
  1760  019C                     	;# 
  1761  019D                     	;# 
  1762  019E                     	;# 
  1763  019F                     	;# 
  1764  020C                     	;# 
  1765  020D                     	;# 
  1766  0211                     	;# 
  1767  0211                     	;# 
  1768  0212                     	;# 
  1769  0212                     	;# 
  1770  0213                     	;# 
  1771  0213                     	;# 
  1772  0214                     	;# 
  1773  0214                     	;# 
  1774  0215                     	;# 
  1775  0215                     	;# 
  1776  0215                     	;# 
  1777  0216                     	;# 
  1778  0216                     	;# 
  1779  0217                     	;# 
  1780  0217                     	;# 
  1781  0219                     	;# 
  1782  021A                     	;# 
  1783  021B                     	;# 
  1784  021C                     	;# 
  1785  021D                     	;# 
  1786  021E                     	;# 
  1787  021F                     	;# 
  1788  0291                     	;# 
  1789  0291                     	;# 
  1790  0292                     	;# 
  1791  0293                     	;# 
  1792  0294                     	;# 
  1793  0295                     	;# 
  1794  0295                     	;# 
  1795  0296                     	;# 
  1796  0298                     	;# 
  1797  0298                     	;# 
  1798  0299                     	;# 
  1799  029A                     	;# 
  1800  029B                     	;# 
  1801  029C                     	;# 
  1802  029C                     	;# 
  1803  029D                     	;# 
  1804  029E                     	;# 
  1805  029E                     	;# 
  1806  0311                     	;# 
  1807  0311                     	;# 
  1808  0312                     	;# 
  1809  0313                     	;# 
  1810  0318                     	;# 
  1811  0318                     	;# 
  1812  0319                     	;# 
  1813  031A                     	;# 
  1814  0394                     	;# 
  1815  0395                     	;# 
  1816  0396                     	;# 
  1817  039A                     	;# 
  1818  039C                     	;# 
  1819  039D                     	;# 
  1820  039E                     	;# 
  1821  039F                     	;# 
  1822  0415                     	;# 
  1823  0416                     	;# 
  1824  0417                     	;# 
  1825  041C                     	;# 
  1826  041D                     	;# 
  1827  041E                     	;# 
  1828  0FE4                     	;# 
  1829  0FE5                     	;# 
  1830  0FE6                     	;# 
  1831  0FE7                     	;# 
  1832  0FE8                     	;# 
  1833  0FE9                     	;# 
  1834  0FEA                     	;# 
  1835  0FEB                     	;# 
  1836  0FED                     	;# 
  1837  0FEE                     	;# 
  1838  0FEF                     	;# 
  1839                           
  1840                           	psect	idataBANK1
  1841  0E03                     __pidataBANK1:	
  1842                           
  1843                           ;initializer for _DAC_VoltageTable
  1844  0E03  34DE               	retlw	low (STR_7| (0+32768))
  1845  0E04  3483               	retlw	high (STR_7| (0+32768))
  1846  0E05  348E               	retlw	low (STR_8| (0+32768))
  1847  0E06  3483               	retlw	high (STR_8| (0+32768))
  1848  0E07  34E3               	retlw	low (STR_9| (0+32768))
  1849  0E08  3483               	retlw	high (STR_9| (0+32768))
  1850  0E09  3494               	retlw	low (STR_10| (0+32768))
  1851  0E0A  3483               	retlw	high (STR_10| (0+32768))
  1852  0E0B  34E8               	retlw	low (STR_11| (0+32768))
  1853  0E0C  3483               	retlw	high (STR_11| (0+32768))
  1854  0E0D  349A               	retlw	low (STR_12| (0+32768))
  1855  0E0E  3483               	retlw	high (STR_12| (0+32768))
  1856  0E0F  34ED               	retlw	low (STR_13| (0+32768))
  1857  0E10  3483               	retlw	high (STR_13| (0+32768))
  1858  0E11  34A0               	retlw	low (STR_14| (0+32768))
  1859  0E12  3483               	retlw	high (STR_14| (0+32768))
  1860  0E13  34F2               	retlw	low (STR_15| (0+32768))
  1861  0E14  3483               	retlw	high (STR_15| (0+32768))
  1862  0E15  34A6               	retlw	low (STR_16| (0+32768))
  1863  0E16  3483               	retlw	high (STR_16| (0+32768))
  1864  0E17  34CF               	retlw	low (STR_17| (0+32768))
  1865  0E18  3483               	retlw	high (STR_17| (0+32768))
  1866  0E19  3482               	retlw	low (STR_18| (0+32768))
  1867  0E1A  3483               	retlw	high (STR_18| (0+32768))
  1868  0E1B  34D4               	retlw	low (STR_19| (0+32768))
  1869  0E1C  3483               	retlw	high (STR_19| (0+32768))
  1870  0E1D  3488               	retlw	low (STR_20| (0+32768))
  1871  0E1E  3483               	retlw	high (STR_20| (0+32768))
  1872  0E1F  34D9               	retlw	low (STR_21| (0+32768))
  1873  0E20  3483               	retlw	high (STR_21| (0+32768))
  1874                           
  1875                           	psect	idataBANK2
  1876  0F44                     __pidataBANK2:	
  1877                           
  1878                           ;initializer for _H7826_01_Gain
  1879  0F44  34AC               	retlw	low (STR_37| (0+32768))
  1880  0F45  3483               	retlw	high (STR_37| (0+32768))
  1881  0F46  34B1               	retlw	low (STR_38| (0+32768))
  1882  0F47  3483               	retlw	high (STR_38| (0+32768))
  1883  0F48  34C5               	retlw	low (STR_39| (0+32768))
  1884  0F49  3483               	retlw	high (STR_39| (0+32768))
  1885  0F4A  34B6               	retlw	low (STR_40| (0+32768))
  1886  0F4B  3483               	retlw	high (STR_40| (0+32768))
  1887  0F4C  3464               	retlw	low (STR_41| (0+32768))
  1888  0F4D  3483               	retlw	high (STR_41| (0+32768))
  1889  0F4E  346A               	retlw	low (STR_42| (0+32768))
  1890  0F4F  3483               	retlw	high (STR_42| (0+32768))
  1891  0F50  3470               	retlw	low (STR_43| (0+32768))
  1892  0F51  3483               	retlw	high (STR_43| (0+32768))
  1893  0F52  3458               	retlw	low (STR_44| (0+32768))
  1894  0F53  3483               	retlw	high (STR_44| (0+32768))
  1895  0F54  3413               	retlw	low (STR_45| (0+32768))
  1896  0F55  3483               	retlw	high (STR_45| (0+32768))
  1897  0F56  343D               	retlw	low (STR_46| (0+32768))
  1898  0F57  3483               	retlw	high (STR_46| (0+32768))
  1899  0F58  341A               	retlw	low (STR_47| (0+32768))
  1900  0F59  3483               	retlw	high (STR_47| (0+32768))
  1901  0F5A  3421               	retlw	low (STR_48| (0+32768))
  1902  0F5B  3483               	retlw	high (STR_48| (0+32768))
  1903  0F5C  344B               	retlw	low (STR_49| (0+32768))
  1904  0F5D  3483               	retlw	high (STR_49| (0+32768))
  1905  0F5E  3405               	retlw	low (STR_50| (0+32768))
  1906  0F5F  3483               	retlw	high (STR_50| (0+32768))
  1907  0F60  340C               	retlw	low (STR_51| (0+32768))
  1908  0F61  3483               	retlw	high (STR_51| (0+32768))
  1909                           
  1910                           ;initializer for _H7826_Gain
  1911  0F62  34C0               	retlw	low (STR_22| (0+32768))
  1912  0F63  3483               	retlw	high (STR_22| (0+32768))
  1913  0F64  34BB               	retlw	low (STR_23| (0+32768))
  1914  0F65  3483               	retlw	high (STR_23| (0+32768))
  1915  0F66  34CA               	retlw	low (STR_24| (0+32768))
  1916  0F67  3483               	retlw	high (STR_24| (0+32768))
  1917  0F68  347C               	retlw	low (STR_25| (0+32768))
  1918  0F69  3483               	retlw	high (STR_25| (0+32768))
  1919  0F6A  3452               	retlw	low (STR_26| (0+32768))
  1920  0F6B  3483               	retlw	high (STR_26| (0+32768))
  1921  0F6C  345E               	retlw	low (STR_27| (0+32768))
  1922  0F6D  3483               	retlw	high (STR_27| (0+32768))
  1923  0F6E  3476               	retlw	low (STR_28| (0+32768))
  1924  0F6F  3483               	retlw	high (STR_28| (0+32768))
  1925  0F70  342F               	retlw	low (STR_29| (0+32768))
  1926  0F71  3483               	retlw	high (STR_29| (0+32768))
  1927  0F72  3428               	retlw	low (STR_30| (0+32768))
  1928  0F73  3483               	retlw	high (STR_30| (0+32768))
  1929  0F74  3436               	retlw	low (STR_31| (0+32768))
  1930  0F75  3483               	retlw	high (STR_31| (0+32768))
  1931  0F76  34FE               	retlw	low (STR_32| (0+32768))
  1932  0F77  3482               	retlw	high (STR_32| (0+32768))
  1933  0F78  3444               	retlw	low (STR_33| (0+32768))
  1934  0F79  3483               	retlw	high (STR_33| (0+32768))
  1935  0F7A  34EE               	retlw	low (STR_34| (0+32768))
  1936  0F7B  3482               	retlw	high (STR_34| (0+32768))
  1937  0F7C  34E6               	retlw	low (STR_35| (0+32768))
  1938  0F7D  3482               	retlw	high (STR_35| (0+32768))
  1939  0F7E  34DE               	retlw	low (STR_36| (0+32768))
  1940  0F7F  3482               	retlw	high (STR_36| (0+32768))
  1941                           
  1942                           	psect	stringtext
  1943  026B                     __pstringtext:	
  1944  026B                     _dpowers:	
  1945  026B  3401               	retlw	1
  1946  026C  3400               	retlw	0
  1947  026D  3400               	retlw	0
  1948  026E  3400               	retlw	0
  1949  026F  340A               	retlw	10
  1950  0270  3400               	retlw	0
  1951  0271  3400               	retlw	0
  1952  0272  3400               	retlw	0
  1953  0273  3464               	retlw	100
  1954  0274  3400               	retlw	0
  1955  0275  3400               	retlw	0
  1956  0276  3400               	retlw	0
  1957  0277  34E8               	retlw	232
  1958  0278  3403               	retlw	3
  1959  0279  3400               	retlw	0
  1960  027A  3400               	retlw	0
  1961  027B  3410               	retlw	16
  1962  027C  3427               	retlw	39
  1963  027D  3400               	retlw	0
  1964  027E  3400               	retlw	0
  1965  027F  34A0               	retlw	160
  1966  0280  3486               	retlw	134
  1967  0281  3401               	retlw	1
  1968  0282  3400               	retlw	0
  1969  0283  3440               	retlw	64
  1970  0284  3442               	retlw	66
  1971  0285  340F               	retlw	15
  1972  0286  3400               	retlw	0
  1973  0287  3480               	retlw	128
  1974  0288  3496               	retlw	150
  1975  0289  3498               	retlw	152
  1976  028A  3400               	retlw	0
  1977  028B  3400               	retlw	0
  1978  028C  34E1               	retlw	225
  1979  028D  34F5               	retlw	245
  1980  028E  3405               	retlw	5
  1981  028F  3400               	retlw	0
  1982  0290  34CA               	retlw	202
  1983  0291  349A               	retlw	154
  1984  0292  343B               	retlw	59
  1985  0293                     __end_of_dpowers:	
  1986  0293                     _DAC_DataTable:	
  1987  0293  3499               	retlw	153
  1988  0294  3401               	retlw	1
  1989  0295  34C2               	retlw	194
  1990  0296  3401               	retlw	1
  1991  0297  34EB               	retlw	235
  1992  0298  3401               	retlw	1
  1993  0299  3414               	retlw	20
  1994  029A  3402               	retlw	2
  1995  029B  343D               	retlw	61
  1996  029C  3402               	retlw	2
  1997  029D  3466               	retlw	102
  1998  029E  3402               	retlw	2
  1999  029F  348F               	retlw	143
  2000  02A0  3402               	retlw	2
  2001  02A1  34B8               	retlw	184
  2002  02A2  3402               	retlw	2
  2003  02A3  34E1               	retlw	225
  2004  02A4  3402               	retlw	2
  2005  02A5  340A               	retlw	10
  2006  02A6  3403               	retlw	3
  2007  02A7  3433               	retlw	51
  2008  02A8  3403               	retlw	3
  2009  02A9  345B               	retlw	91
  2010  02AA  3403               	retlw	3
  2011  02AB  3484               	retlw	132
  2012  02AC  3403               	retlw	3
  2013  02AD  34AD               	retlw	173
  2014  02AE  3403               	retlw	3
  2015  02AF  34D6               	retlw	214
  2016  02B0  3403               	retlw	3
  2017  02B1                     __end_of_DAC_DataTable:	
  2018  0016                     _TMR1	set	22
  2019  000C                     _PORTA	set	12
  2020  001F                     _CPSCON1	set	31
  2021  001E                     _CPSCON0	set	30
  2022  0015                     _TMR0	set	21
  2023  0019                     _T1GCON	set	25
  2024  0018                     _T1CON	set	24
  2025  000D                     _PORTB	set	13
  2026  001B                     _PR2	set	27
  2027  001A                     _TMR2	set	26
  2028  001C                     _T2CON	set	28
  2029  009B                     _TMR6IF	set	155
  2030  0088                     _TMR1IF	set	136
  2031  00C0                     _TMR1ON	set	192
  2032  005F                     _GIE	set	95
  2033  005E                     _PEIE	set	94
  2034  00A1                     _BCL2IF	set	161
  2035  00A0                     _SSP2IF	set	160
  2036  0099                     _OSCCON	set	153
  2037  0095                     _OPTION_REG	set	149
  2038  008D                     _TRISB	set	141
  2039  008C                     _TRISA	set	140
  2040  049B                     _TMR6IE	set	1179
  2041  0488                     _TMR1IE	set	1160
  2042  04A1                     _BCL2IE	set	1185
  2043  04A0                     _SSP2IE	set	1184
  2044  011E                     _APFCON1	set	286
  2045  011D                     _APFCON0	set	285
  2046  0866                     _LATA6	set	2150
  2047  0863                     _LATA3	set	2147
  2048  0864                     _LATA4	set	2148
  2049  018D                     _ANSELB	set	397
  2050  018C                     _ANSELA	set	396
  2051  020D                     _WPUB	set	525
  2052  021C                     _SSP2STATbits	set	540
  2053  0219                     _SSP2BUF	set	537
  2054  021E                     _SSP2CON2	set	542
  2055  021B                     _SSP2MSK	set	539
  2056  021E                     _SSP2CON2bits	set	542
  2057  021D                     _SSP2CON1bits	set	541
  2058  021A                     _SSP2ADD	set	538
  2059  021C                     _SSP2STAT	set	540
  2060  021D                     _SSP2CON1	set	541
  2061  0298                     _CCPR2L	set	664
  2062  029E                     _CCPTMRS	set	670
  2063  029A                     _CCP2CON	set	666
  2064  041E                     _T6CON	set	1054
  2065  041C                     _TMR6	set	1052
  2066  041D                     _PR6	set	1053
  2067  02B1                     STR_3:	
  2068  02B1  3420               	retlw	32	;' '
  2069  02B2  3420               	retlw	32	;' '
  2070  02B3  3420               	retlw	32	;' '
  2071  02B4  3420               	retlw	32	;' '
  2072  02B5  3425               	retlw	37	;'%'
  2073  02B6  3430               	retlw	48	;'0'
  2074  02B7  3432               	retlw	50	;'2'
  2075  02B8  3464               	retlw	100	;'d'
  2076  02B9  343A               	retlw	58	;':'
  2077  02BA  3425               	retlw	37	;'%'
  2078  02BB  3430               	retlw	48	;'0'
  2079  02BC  3432               	retlw	50	;'2'
  2080  02BD  3464               	retlw	100	;'d'
  2081  02BE  3400               	retlw	0
  2082  02BF                     STR_4:	
  2083  02BF  3453               	retlw	83	;'S'
  2084  02C0  3445               	retlw	69	;'E'
  2085  02C1  344C               	retlw	76	;'L'
  2086  02C2  3445               	retlw	69	;'E'
  2087  02C3  3443               	retlw	67	;'C'
  2088  02C4  3454               	retlw	84	;'T'
  2089  02C5  3446               	retlw	70	;'F'
  2090  02C6  3455               	retlw	85	;'U'
  2091  02C7  344E               	retlw	78	;'N'
  2092  02C8  3443               	retlw	67	;'C'
  2093  02C9  3400               	retlw	0
  2094  02CA                     STR_6:	
  2095  02CA  3450               	retlw	80	;'P'
  2096  02CB  344D               	retlw	77	;'M'
  2097  02CC  3454               	retlw	84	;'T'
  2098  02CD  3444               	retlw	68	;'D'
  2099  02CE  3445               	retlw	69	;'E'
  2100  02CF  3456               	retlw	86	;'V'
  2101  02D0  3449               	retlw	73	;'I'
  2102  02D1  3443               	retlw	67	;'C'
  2103  02D2  3445               	retlw	69	;'E'
  2104  02D3  3400               	retlw	0
  2105  02D4                     STR_1:	
  2106  02D4  3425               	retlw	37	;'%'
  2107  02D5  3437               	retlw	55	;'7'
  2108  02D6  346C               	retlw	108	;'l'
  2109  02D7  3475               	retlw	117	;'u'
  2110  02D8  3420               	retlw	32	;' '
  2111  02D9  3425               	retlw	37	;'%'
  2112  02DA  3437               	retlw	55	;'7'
  2113  02DB  346C               	retlw	108	;'l'
  2114  02DC  3475               	retlw	117	;'u'
  2115  02DD  3400               	retlw	0
  2116  02DE                     STR_36:	
  2117  02DE  3432               	retlw	50	;'2'
  2118  02DF  3437               	retlw	55	;'7'
  2119  02E0  3437               	retlw	55	;'7'
  2120  02E1  3434               	retlw	52	;'4'
  2121  02E2  3435               	retlw	53	;'5'
  2122  02E3  3436               	retlw	54	;'6'
  2123  02E4  3432               	retlw	50	;'2'
  2124  02E5  3400               	retlw	0
  2125  02E6                     STR_35:	
  2126  02E6  3431               	retlw	49	;'1'
  2127  02E7  3439               	retlw	57	;'9'
  2128  02E8  3434               	retlw	52	;'4'
  2129  02E9  3430               	retlw	48	;'0'
  2130  02EA  3436               	retlw	54	;'6'
  2131  02EB  3437               	retlw	55	;'7'
  2132  02EC  3433               	retlw	51	;'3'
  2133  02ED  3400               	retlw	0
  2134  02EE                     STR_34:	
  2135  02EE  3431               	retlw	49	;'1'
  2136  02EF  3433               	retlw	51	;'3'
  2137  02F0  3433               	retlw	51	;'3'
  2138  02F1  3436               	retlw	54	;'6'
  2139  02F2  3430               	retlw	48	;'0'
  2140  02F3  3430               	retlw	48	;'0'
  2141  02F4  3436               	retlw	54	;'6'
  2142  02F5  3400               	retlw	0
  2143  02F6                     STR_5:	
  2144  02F6  3441               	retlw	65	;'A'
  2145  02F7  3444               	retlw	68	;'D'
  2146  02F8  344A               	retlw	74	;'J'
  2147  02F9  3447               	retlw	71	;'G'
  2148  02FA  3441               	retlw	65	;'A'
  2149  02FB  3449               	retlw	73	;'I'
  2150  02FC  344E               	retlw	78	;'N'
  2151  02FD  3400               	retlw	0
  2152  02FE                     STR_32:	
  2153  02FE  3436               	retlw	54	;'6'
  2154  02FF  3430               	retlw	48	;'0'
  2155  0300  3430               	retlw	48	;'0'
  2156  0301  3430               	retlw	48	;'0'
  2157  0302  3430               	retlw	48	;'0'
  2158  0303  3430               	retlw	48	;'0'
  2159  0304  3400               	retlw	0
  2160  0305                     STR_50:	
  2161  0305  3437               	retlw	55	;'7'
  2162  0306  3430               	retlw	48	;'0'
  2163  0307  3430               	retlw	48	;'0'
  2164  0308  3438               	retlw	56	;'8'
  2165  0309  3439               	retlw	57	;'9'
  2166  030A  3430               	retlw	48	;'0'
  2167  030B  3400               	retlw	0
  2168  030C                     STR_51:	
  2169  030C  3439               	retlw	57	;'9'
  2170  030D  3436               	retlw	54	;'6'
  2171  030E  3438               	retlw	56	;'8'
  2172  030F  3434               	retlw	52	;'4'
  2173  0310  3437               	retlw	55	;'7'
  2174  0311  3432               	retlw	50	;'2'
  2175  0312  3400               	retlw	0
  2176  0313                     STR_45:	
  2177  0313  3431               	retlw	49	;'1'
  2178  0314  3430               	retlw	48	;'0'
  2179  0315  3438               	retlw	56	;'8'
  2180  0316  3438               	retlw	56	;'8'
  2181  0317  3434               	retlw	52	;'4'
  2182  0318  3433               	retlw	51	;'3'
  2183  0319  3400               	retlw	0
  2184  031A                     STR_47:	
  2185  031A  3432               	retlw	50	;'2'
  2186  031B  3434               	retlw	52	;'4'
  2187  031C  3432               	retlw	50	;'2'
  2188  031D  3433               	retlw	51	;'3'
  2189  031E  3436               	retlw	54	;'6'
  2190  031F  3434               	retlw	52	;'4'
  2191  0320  3400               	retlw	0
  2192  0321                     STR_48:	
  2193  0321  3433               	retlw	51	;'3'
  2194  0322  3435               	retlw	53	;'5'
  2195  0323  3431               	retlw	49	;'1'
  2196  0324  3431               	retlw	49	;'1'
  2197  0325  3432               	retlw	50	;'2'
  2198  0326  3437               	retlw	55	;'7'
  2199  0327  3400               	retlw	0
  2200  0328                     STR_30:	
  2201  0328  3432               	retlw	50	;'2'
  2202  0329  3434               	retlw	52	;'4'
  2203  032A  3437               	retlw	55	;'7'
  2204  032B  3436               	retlw	54	;'6'
  2205  032C  3434               	retlw	52	;'4'
  2206  032D  3437               	retlw	55	;'7'
  2207  032E  3400               	retlw	0
  2208  032F                     STR_29:	
  2209  032F  3431               	retlw	49	;'1'
  2210  0330  3435               	retlw	53	;'5'
  2211  0331  3433               	retlw	51	;'3'
  2212  0332  3432               	retlw	50	;'2'
  2213  0333  3432               	retlw	50	;'2'
  2214  0334  3438               	retlw	56	;'8'
  2215  0335  3400               	retlw	0
  2216  0336                     STR_31:	
  2217  0336  3433               	retlw	51	;'3'
  2218  0337  3438               	retlw	56	;'8'
  2219  0338  3439               	retlw	57	;'9'
  2220  0339  3439               	retlw	57	;'9'
  2221  033A  3438               	retlw	56	;'8'
  2222  033B  3438               	retlw	56	;'8'
  2223  033C  3400               	retlw	0
  2224  033D                     STR_46:	
  2225  033D  3431               	retlw	49	;'1'
  2226  033E  3436               	retlw	54	;'6'
  2227  033F  3434               	retlw	52	;'4'
  2228  0340  3431               	retlw	49	;'1'
  2229  0341  3433               	retlw	51	;'3'
  2230  0342  3439               	retlw	57	;'9'
  2231  0343  3400               	retlw	0
  2232  0344                     STR_33:	
  2233  0344  3439               	retlw	57	;'9'
  2234  0345  3430               	retlw	48	;'0'
  2235  0346  3433               	retlw	51	;'3'
  2236  0347  3438               	retlw	56	;'8'
  2237  0348  3439               	retlw	57	;'9'
  2238  0349  3439               	retlw	57	;'9'
  2239  034A  3400               	retlw	0
  2240  034B                     STR_49:	
  2241  034B  3434               	retlw	52	;'4'
  2242  034C  3439               	retlw	57	;'9'
  2243  034D  3439               	retlw	57	;'9'
  2244  034E  3439               	retlw	57	;'9'
  2245  034F  3439               	retlw	57	;'9'
  2246  0350  3439               	retlw	57	;'9'
  2247  0351  3400               	retlw	0
  2248  0352                     STR_26:	
  2249  0352  3433               	retlw	51	;'3'
  2250  0353  3430               	retlw	48	;'0'
  2251  0354  3430               	retlw	48	;'0'
  2252  0355  3430               	retlw	48	;'0'
  2253  0356  3430               	retlw	48	;'0'
  2254  0357  3400               	retlw	0
  2255  0358                     STR_44:	
  2256  0358  3437               	retlw	55	;'7'
  2257  0359  3430               	retlw	48	;'0'
  2258  035A  3435               	retlw	53	;'5'
  2259  035B  3430               	retlw	48	;'0'
  2260  035C  3430               	retlw	48	;'0'
  2261  035D  3400               	retlw	0
  2262  035E                     STR_27:	
  2263  035E  3435               	retlw	53	;'5'
  2264  035F  3433               	retlw	51	;'3'
  2265  0360  3435               	retlw	53	;'5'
  2266  0361  3435               	retlw	53	;'5'
  2267  0362  3433               	retlw	51	;'3'
  2268  0363  3400               	retlw	0
  2269  0364                     STR_41:	
  2270  0364  3431               	retlw	49	;'1'
  2271  0365  3436               	retlw	54	;'6'
  2272  0366  3431               	retlw	49	;'1'
  2273  0367  3432               	retlw	50	;'2'
  2274  0368  3435               	retlw	53	;'5'
  2275  0369  3400               	retlw	0
  2276  036A                     STR_42:	
  2277  036A  3432               	retlw	50	;'2'
  2278  036B  3437               	retlw	55	;'7'
  2279  036C  3432               	retlw	50	;'2'
  2280  036D  3433               	retlw	51	;'3'
  2281  036E  3438               	retlw	56	;'8'
  2282  036F  3400               	retlw	0
  2283  0370                     STR_43:	
  2284  0370  3434               	retlw	52	;'4'
  2285  0371  3434               	retlw	52	;'4'
  2286  0372  3434               	retlw	52	;'4'
  2287  0373  3437               	retlw	55	;'7'
  2288  0374  3438               	retlw	56	;'8'
  2289  0375  3400               	retlw	0
  2290  0376                     STR_28:	
  2291  0376  3439               	retlw	57	;'9'
  2292  0377  3432               	retlw	50	;'2'
  2293  0378  3430               	retlw	48	;'0'
  2294  0379  3438               	retlw	56	;'8'
  2295  037A  3438               	retlw	56	;'8'
  2296  037B  3400               	retlw	0
  2297  037C                     STR_25:	
  2298  037C  3431               	retlw	49	;'1'
  2299  037D  3436               	retlw	54	;'6'
  2300  037E  3430               	retlw	48	;'0'
  2301  037F  3439               	retlw	57	;'9'
  2302  0380  3439               	retlw	57	;'9'
  2303  0381  3400               	retlw	0
  2304  0382                     STR_18:	
  2305  0382  3431               	retlw	49	;'1'
  2306  0383  342E               	retlw	46	;'.'
  2307  0384  3430               	retlw	48	;'0'
  2308  0385  3435               	retlw	53	;'5'
  2309  0386  3456               	retlw	86	;'V'
  2310  0387  3400               	retlw	0
  2311  0388                     STR_20:	
  2312  0388  3431               	retlw	49	;'1'
  2313  0389  342E               	retlw	46	;'.'
  2314  038A  3431               	retlw	49	;'1'
  2315  038B  3435               	retlw	53	;'5'
  2316  038C  3456               	retlw	86	;'V'
  2317  038D  3400               	retlw	0
  2318  038E                     STR_8:	
  2319  038E  3430               	retlw	48	;'0'
  2320  038F  342E               	retlw	46	;'.'
  2321  0390  3435               	retlw	53	;'5'
  2322  0391  3435               	retlw	53	;'5'
  2323  0392  3456               	retlw	86	;'V'
  2324  0393  3400               	retlw	0
  2325  0394                     STR_10:	
  2326  0394  3430               	retlw	48	;'0'
  2327  0395  342E               	retlw	46	;'.'
  2328  0396  3436               	retlw	54	;'6'
  2329  0397  3435               	retlw	53	;'5'
  2330  0398  3456               	retlw	86	;'V'
  2331  0399  3400               	retlw	0
  2332  039A                     STR_12:	
  2333  039A  3430               	retlw	48	;'0'
  2334  039B  342E               	retlw	46	;'.'
  2335  039C  3437               	retlw	55	;'7'
  2336  039D  3435               	retlw	53	;'5'
  2337  039E  3456               	retlw	86	;'V'
  2338  039F  3400               	retlw	0
  2339  03A0                     STR_14:	
  2340  03A0  3430               	retlw	48	;'0'
  2341  03A1  342E               	retlw	46	;'.'
  2342  03A2  3438               	retlw	56	;'8'
  2343  03A3  3435               	retlw	53	;'5'
  2344  03A4  3456               	retlw	86	;'V'
  2345  03A5  3400               	retlw	0
  2346  03A6                     STR_16:	
  2347  03A6  3430               	retlw	48	;'0'
  2348  03A7  342E               	retlw	46	;'.'
  2349  03A8  3439               	retlw	57	;'9'
  2350  03A9  3435               	retlw	53	;'5'
  2351  03AA  3456               	retlw	86	;'V'
  2352  03AB  3400               	retlw	0
  2353  03AC                     STR_37:	
  2354  03AC  3431               	retlw	49	;'1'
  2355  03AD  3432               	retlw	50	;'2'
  2356  03AE  3435               	retlw	53	;'5'
  2357  03AF  3430               	retlw	48	;'0'
  2358  03B0  3400               	retlw	0
  2359  03B1                     STR_38:	
  2360  03B1  3432               	retlw	50	;'2'
  2361  03B2  3435               	retlw	53	;'5'
  2362  03B3  3438               	retlw	56	;'8'
  2363  03B4  3430               	retlw	48	;'0'
  2364  03B5  3400               	retlw	0
  2365  03B6                     STR_40:	
  2366  03B6  3439               	retlw	57	;'9'
  2367  03B7  3431               	retlw	49	;'1'
  2368  03B8  3438               	retlw	56	;'8'
  2369  03B9  3432               	retlw	50	;'2'
  2370  03BA  3400               	retlw	0
  2371  03BB                     STR_23:	
  2372  03BB  3433               	retlw	51	;'3'
  2373  03BC  3439               	retlw	57	;'9'
  2374  03BD  3435               	retlw	53	;'5'
  2375  03BE  3437               	retlw	55	;'7'
  2376  03BF  3400               	retlw	0
  2377  03C0                     STR_22:	
  2378  03C0  3431               	retlw	49	;'1'
  2379  03C1  3437               	retlw	55	;'7'
  2380  03C2  3437               	retlw	55	;'7'
  2381  03C3  3437               	retlw	55	;'7'
  2382  03C4  3400               	retlw	0
  2383  03C5                     STR_39:	
  2384  03C5  3434               	retlw	52	;'4'
  2385  03C6  3439               	retlw	57	;'9'
  2386  03C7  3439               	retlw	57	;'9'
  2387  03C8  3438               	retlw	56	;'8'
  2388  03C9  3400               	retlw	0
  2389  03CA                     STR_24:	
  2390  03CA  3438               	retlw	56	;'8'
  2391  03CB  3432               	retlw	50	;'2'
  2392  03CC  3431               	retlw	49	;'1'
  2393  03CD  3439               	retlw	57	;'9'
  2394  03CE  3400               	retlw	0
  2395  03CF                     STR_17:	
  2396  03CF  3431               	retlw	49	;'1'
  2397  03D0  342E               	retlw	46	;'.'
  2398  03D1  3430               	retlw	48	;'0'
  2399  03D2  3456               	retlw	86	;'V'
  2400  03D3  3400               	retlw	0
  2401  03D4                     STR_19:	
  2402  03D4  3431               	retlw	49	;'1'
  2403  03D5  342E               	retlw	46	;'.'
  2404  03D6  3431               	retlw	49	;'1'
  2405  03D7  3456               	retlw	86	;'V'
  2406  03D8  3400               	retlw	0
  2407  03D9                     STR_21:	
  2408  03D9  3431               	retlw	49	;'1'
  2409  03DA  342E               	retlw	46	;'.'
  2410  03DB  3432               	retlw	50	;'2'
  2411  03DC  3456               	retlw	86	;'V'
  2412  03DD  3400               	retlw	0
  2413  03DE                     STR_7:	
  2414  03DE  3430               	retlw	48	;'0'
  2415  03DF  342E               	retlw	46	;'.'
  2416  03E0  3435               	retlw	53	;'5'
  2417  03E1  3456               	retlw	86	;'V'
  2418  03E2  3400               	retlw	0
  2419  03E3                     STR_9:	
  2420  03E3  3430               	retlw	48	;'0'
  2421  03E4  342E               	retlw	46	;'.'
  2422  03E5  3436               	retlw	54	;'6'
  2423  03E6  3456               	retlw	86	;'V'
  2424  03E7  3400               	retlw	0
  2425  03E8                     STR_11:	
  2426  03E8  3430               	retlw	48	;'0'
  2427  03E9  342E               	retlw	46	;'.'
  2428  03EA  3437               	retlw	55	;'7'
  2429  03EB  3456               	retlw	86	;'V'
  2430  03EC  3400               	retlw	0
  2431  03ED                     STR_13:	
  2432  03ED  3430               	retlw	48	;'0'
  2433  03EE  342E               	retlw	46	;'.'
  2434  03EF  3438               	retlw	56	;'8'
  2435  03F0  3456               	retlw	86	;'V'
  2436  03F1  3400               	retlw	0
  2437  03F2                     STR_15:	
  2438  03F2  3430               	retlw	48	;'0'
  2439  03F3  342E               	retlw	46	;'.'
  2440  03F4  3439               	retlw	57	;'9'
  2441  03F5  3456               	retlw	86	;'V'
  2442  03F6  3400               	retlw	0
  2443  03F7                     STR_2:	
  2444  03F7  3425               	retlw	37	;'%'
  2445  03F8  3436               	retlw	54	;'6'
  2446  03F9  346C               	retlw	108	;'l'
  2447  03FA  3475               	retlw	117	;'u'
  2448  03FB  3400               	retlw	0
  2449                           
  2450                           ; #config settings
  2451  0000                     
  2452                           	psect	cinit
  2453  002D                     start_initialization:	
  2454  002D                     __initialization:	
  2455                           
  2456                           ; Initialize objects allocated to BANK1
  2457  002D  3003               	movlw	low __pidataBANK1
  2458  002E  0084               	movwf	4
  2459  002F  308E               	movlw	(high __pidataBANK1)| (0+128)
  2460  0030  0085               	movwf	5
  2461  0031  30CA               	movlw	low __pdataBANK1
  2462  0032  0086               	movwf	6
  2463  0033  3000               	movlw	high __pdataBANK1
  2464  0034  0087               	movwf	7
  2465  0035  301E               	movlw	30
  2466  0036  318C  2477  3180   	fcall	init_ram
  2467                           
  2468                           ; Initialize objects allocated to BANK2
  2469  0039  3044               	movlw	low __pidataBANK2
  2470  003A  0084               	movwf	4
  2471  003B  308F               	movlw	(high __pidataBANK2)| (0+128)
  2472  003C  0085               	movwf	5
  2473  003D  3020               	movlw	low __pdataBANK2
  2474  003E  0086               	movwf	6
  2475  003F  3001               	movlw	high __pdataBANK2
  2476  0040  0087               	movwf	7
  2477  0041  303C               	movlw	60
  2478  0042  318C  2477  3180   	fcall	init_ram
  2479                           
  2480                           ; Clear objects allocated to BANK0
  2481  0045  3054               	movlw	low __pbssBANK0
  2482  0046  0084               	movwf	4
  2483  0047  3000               	movlw	high __pbssBANK0
  2484  0048  0085               	movwf	5
  2485  0049  300E               	movlw	14
  2486  004A  318C  2471  3180   	fcall	clear_ram0
  2487                           
  2488                           ; Clear objects allocated to BANK1
  2489  004D  30A0               	movlw	low __pbssBANK1
  2490  004E  0084               	movwf	4
  2491  004F  3000               	movlw	high __pbssBANK1
  2492  0050  0085               	movwf	5
  2493  0051  302A               	movlw	42
  2494  0052  318C  2471         	fcall	clear_ram0
  2495  0054                     end_of_initialization:	
  2496                           ;End of C runtime variable initialization code
  2497                           
  2498  0054                     __end_of__initialization:	
  2499  0054  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  2500  0055  0020               	movlb	0
  2501  0056  3183  2BFC         	ljmp	_main	;jump to C main() function
  2502                           
  2503                           	psect	bssBANK0
  2504  0054                     __pbssBANK0:	
  2505  0054                     _tcnt:	
  2506  0054                     	ds	8
  2507  005C                     _mode:	
  2508  005C                     	ds	2
  2509  005E                     _count:	
  2510  005E                     	ds	2
  2511  0060                     mTouch_Read@channel:	
  2512  0060                     	ds	1
  2513  0061                     _ConfigReg:	
  2514  0061                     	ds	1
  2515                           
  2516                           	psect	bssBANK1
  2517  00A0                     __pbssBANK1:	
  2518  00A0                     _cnts:	
  2519  00A0                     	ds	12
  2520  00AC                     _mTouch_Interval:	
  2521  00AC                     	ds	3
  2522  00AF                     _CPS_Data:	
  2523  00AF                     	ds	3
  2524  00B2                     _CPS_PreData:	
  2525  00B2                     	ds	3
  2526  00B5                     _I2C2_Config:	
  2527  00B5                     	ds	19
  2528  00C8                     _VoltageReg:	
  2529  00C8                     	ds	2
  2530                           
  2531                           	psect	dataBANK1
  2532  00CA                     __pdataBANK1:	
  2533  00CA                     _DAC_VoltageTable:	
  2534  00CA                     	ds	30
  2535                           
  2536                           	psect	dataBANK2
  2537  0120                     __pdataBANK2:	
  2538  0120                     _H7826_01_Gain:	
  2539  0120                     	ds	30
  2540  013E                     _H7826_Gain:	
  2541  013E                     	ds	30
  2542                           
  2543                           	psect	inittext
  2544  0C77                     init_ram:	
  2545  0C77  00FE               	movwf	126
  2546  0C78                     initloop:	
  2547  0C78  0012               	moviw fsr0++
  2548  0C79  001E               	movwi fsr1++
  2549  0C7A  0BFE               	decfsz	126,f
  2550  0C7B  2C78               	goto	initloop
  2551  0C7C  3400               	retlw	0
  2552                           
  2553                           	psect	clrtext
  2554  0C71                     clear_ram0:	
  2555                           ;	Called with FSR0 containing the base address, and
  2556                           ;	WREG with the size to clear
  2557                           
  2558  0C71  0064               	clrwdt	;clear the watchdog before getting into this loop
  2559  0C72                     clrloop0:	
  2560  0C72  0180               	clrf	0	;clear RAM location pointed to by FSR
  2561  0C73  3101               	addfsr 0,1
  2562  0C74  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  2563  0C75  2C72               	goto	clrloop0	;have we reached the end yet?
  2564  0C76  3400               	retlw	0	;all done for this memory range, return
  2565                           
  2566                           	psect	cstackBANK2
  2567  015C                     __pcstackBANK2:	
  2568  015C                     printf@prec:	
  2569                           
  2570                           ; 2 bytes @ 0x0
  2571  015C                     	ds	2
  2572  015E                     printf@val:	
  2573                           
  2574                           ; 4 bytes @ 0x2
  2575  015E                     	ds	4
  2576  0162                     printf@ap:	
  2577                           
  2578                           ; 1 bytes @ 0x6
  2579  0162                     	ds	1
  2580  0163                     printf@flag:	
  2581                           
  2582                           ; 1 bytes @ 0x7
  2583  0163                     	ds	1
  2584  0164                     printf@width:	
  2585                           
  2586                           ; 2 bytes @ 0x8
  2587  0164                     	ds	2
  2588  0166                     printf@c:	
  2589                           
  2590                           ; 1 bytes @ 0xA
  2591  0166                     	ds	1
  2592                           
  2593                           	psect	cstackBANK1
  2594  00E8                     __pcstackBANK1:	
  2595  00E8                     ??_printf:	
  2596                           
  2597                           ; 1 bytes @ 0x0
  2598  00E8                     	ds	6
  2599                           
  2600                           	psect	cstackCOMMON
  2601  0070                     __pcstackCOMMON:	
  2602  0070                     ?_isdigit:	
  2603  0070                     ?_LCD_DisplayClear:	
  2604                           ; 1 bit 
  2605                           
  2606  0070                     ?_Timer1_ClearRecord:	
  2607                           ; 1 bytes @ 0x0
  2608                           
  2609  0070                     ?_Basic_Init:	
  2610                           ; 1 bytes @ 0x0
  2611                           
  2612  0070                     ?_mTouch_Check:	
  2613                           ; 1 bytes @ 0x0
  2614                           
  2615  0070                     ?_mTouch_IntervalDecrement:	
  2616                           ; 1 bytes @ 0x0
  2617                           
  2618  0070                     ??_mTouch_IntervalDecrement:	
  2619                           ; 1 bytes @ 0x0
  2620                           
  2621  0070                     ?_Buzzer_Init:	
  2622                           ; 1 bytes @ 0x0
  2623                           
  2624  0070                     ?_Buzzer_SetDuty:	
  2625                           ; 1 bytes @ 0x0
  2626                           
  2627  0070                     ?_Buzzer_Count1ms:	
  2628                           ; 1 bytes @ 0x0
  2629                           
  2630  0070                     ?_I2C2_PinInit:	
  2631                           ; 1 bytes @ 0x0
  2632                           
  2633  0070                     ?_I2C2_Interrupt:	
  2634                           ; 1 bytes @ 0x0
  2635                           
  2636  0070                     ??_I2C2_Interrupt:	
  2637                           ; 1 bytes @ 0x0
  2638                           
  2639  0070                     ?_I2C_CommonInterrupt:	
  2640                           ; 1 bytes @ 0x0
  2641                           
  2642  0070                     ?_LCD_WriteData:	
  2643                           ; 1 bytes @ 0x0
  2644                           
  2645  0070                     ?_LCD_Init:	
  2646                           ; 1 bytes @ 0x0
  2647                           
  2648  0070                     ?_putch:	
  2649                           ; 1 bytes @ 0x0
  2650                           
  2651  0070                     ?_LCD_CursorHome:	
  2652                           ; 1 bytes @ 0x0
  2653                           
  2654  0070                     ?_DAC_Initialize:	
  2655                           ; 1 bytes @ 0x0
  2656                           
  2657  0070                     ?_Timer1_Init:	
  2658                           ; 1 bytes @ 0x0
  2659                           
  2660  0070                     ?_Timer1_StartCount:	
  2661                           ; 1 bytes @ 0x0
  2662                           
  2663  0070                     ?_Timer1_GetSecond:	
  2664                           ; 1 bytes @ 0x0
  2665                           
  2666  0070                     ?_Timer1_GetMinute:	
  2667                           ; 1 bytes @ 0x0
  2668                           
  2669  0070                     ?_Timer1_Count1ms:	
  2670                           ; 1 bytes @ 0x0
  2671                           
  2672  0070                     ?_Timer1_DetectAssignCount:	
  2673                           ; 1 bytes @ 0x0
  2674                           
  2675  0070                     ??_Timer1_DetectAssignCount:	
  2676                           ; 1 bytes @ 0x0
  2677                           
  2678  0070                     ?_Timer6_Init:	
  2679                           ; 1 bytes @ 0x0
  2680                           
  2681  0070                     ?_Timer6_CheckFlag:	
  2682                           ; 1 bytes @ 0x0
  2683                           
  2684  0070                     ??_Timer6_CheckFlag:	
  2685                           ; 1 bytes @ 0x0
  2686                           
  2687  0070                     ?_mTouch_PortInit:	
  2688                           ; 1 bytes @ 0x0
  2689                           
  2690  0070                     ?_mTouch_Init:	
  2691                           ; 1 bytes @ 0x0
  2692                           
  2693  0070                     ?_mTouch_Read:	
  2694                           ; 1 bytes @ 0x0
  2695                           
  2696  0070                     ??_mTouch_Read:	
  2697                           ; 1 bytes @ 0x0
  2698                           
  2699  0070                     ?_main:	
  2700                           ; 1 bytes @ 0x0
  2701                           
  2702  0070                     ?_Handler:	
  2703                           ; 1 bytes @ 0x0
  2704                           
  2705  0070                     ?i1_Buzzer_MiliSecond:	
  2706                           ; 1 bytes @ 0x0
  2707                           
  2708  0070                     ?___lmul:	
  2709                           ; 1 bytes @ 0x0
  2710                           
  2711  0070                     Buzzer_SetDuty@duty:	
  2712                           ; 4 bytes @ 0x0
  2713                           
  2714  0070                     i1Buzzer_MiliSecond@time:	
  2715                           ; 2 bytes @ 0x0
  2716                           
  2717  0070                     ___lmul@multiplier:	
  2718                           ; 2 bytes @ 0x0
  2719                           
  2720                           
  2721                           ; 4 bytes @ 0x0
  2722  0070                     	ds	1
  2723  0071                     ??_I2C_CommonInterrupt:	
  2724                           
  2725                           ; 1 bytes @ 0x1
  2726  0071                     	ds	1
  2727  0072                     ??_Buzzer_SetDuty:	
  2728  0072                     ??i1_Buzzer_MiliSecond:	
  2729                           ; 1 bytes @ 0x2
  2730                           
  2731                           
  2732                           ; 1 bytes @ 0x2
  2733  0072                     	ds	2
  2734  0074                     Buzzer_SetDuty@CCP2CON_Pre:	
  2735  0074                     ___lmul@multiplicand:	
  2736                           ; 1 bytes @ 0x4
  2737                           
  2738                           
  2739                           ; 4 bytes @ 0x4
  2740  0074                     	ds	1
  2741  0075                     ??_Buzzer_Count1ms:	
  2742                           
  2743                           ; 1 bytes @ 0x5
  2744  0075                     	ds	3
  2745  0078                     ??___lmul:	
  2746  0078                     ___lmul@product:	
  2747                           ; 1 bytes @ 0x8
  2748                           
  2749                           
  2750                           ; 4 bytes @ 0x8
  2751  0078                     	ds	4
  2752  007C                     ??i1___lldiv:	
  2753                           
  2754                           ; 1 bytes @ 0xC
  2755  007C                     	ds	1
  2756  007D                     ??_Timer1_Count1ms:	
  2757                           
  2758                           ; 1 bytes @ 0xD
  2759  007D                     	ds	1
  2760                           
  2761                           	psect	cstackBANK0
  2762  0020                     __pcstackBANK0:	
  2763  0020                     ?i1___lldiv:	
  2764  0020                     i1___lldiv@divisor:	
  2765                           ; 4 bytes @ 0x0
  2766                           
  2767                           
  2768                           ; 4 bytes @ 0x0
  2769  0020                     	ds	4
  2770  0024                     i1___lldiv@dividend:	
  2771                           
  2772                           ; 4 bytes @ 0x4
  2773  0024                     	ds	4
  2774  0028                     i1___lldiv@quotient:	
  2775                           
  2776                           ; 4 bytes @ 0x8
  2777  0028                     	ds	4
  2778  002C                     i1___lldiv@counter:	
  2779                           
  2780                           ; 1 bytes @ 0xC
  2781  002C                     	ds	1
  2782  002D                     ??_Handler:	
  2783                           
  2784                           ; 1 bytes @ 0xD
  2785  002D                     	ds	1
  2786  002E                     ??_Timer1_ClearRecord:	
  2787  002E                     ??_Basic_Init:	
  2788                           ; 1 bytes @ 0xE
  2789                           
  2790  002E                     ??_isdigit:	
  2791                           ; 1 bytes @ 0xE
  2792                           
  2793  002E                     ??_Buzzer_Init:	
  2794                           ; 1 bytes @ 0xE
  2795                           
  2796  002E                     ?_Buzzer_MiliSecond:	
  2797                           ; 1 bytes @ 0xE
  2798                           
  2799  002E                     ??_I2C2_PinInit:	
  2800                           ; 1 bytes @ 0xE
  2801                           
  2802  002E                     ?_I2C2_Transmit:	
  2803                           ; 1 bytes @ 0xE
  2804                           
  2805  002E                     ??_LCD_WriteData:	
  2806                           ; 1 bytes @ 0xE
  2807                           
  2808  002E                     ??_Timer1_Init:	
  2809                           ; 1 bytes @ 0xE
  2810                           
  2811  002E                     ??_Timer1_StartCount:	
  2812                           ; 1 bytes @ 0xE
  2813                           
  2814  002E                     ??_Timer1_GetSecond:	
  2815                           ; 1 bytes @ 0xE
  2816                           
  2817  002E                     ??_Timer1_GetMinute:	
  2818                           ; 1 bytes @ 0xE
  2819                           
  2820  002E                     ??_Timer6_Init:	
  2821                           ; 1 bytes @ 0xE
  2822                           
  2823  002E                     ??_mTouch_PortInit:	
  2824                           ; 1 bytes @ 0xE
  2825                           
  2826  002E                     ?___wmul:	
  2827                           ; 1 bytes @ 0xE
  2828                           
  2829  002E                     ?_Timer1_GetCountSum:	
  2830                           ; 2 bytes @ 0xE
  2831                           
  2832  002E                     ?_Timer1_GetCPM:	
  2833                           ; 4 bytes @ 0xE
  2834                           
  2835  002E                     ?_Timer1_GetCPS:	
  2836                           ; 4 bytes @ 0xE
  2837                           
  2838  002E                     ?___lldiv:	
  2839                           ; 4 bytes @ 0xE
  2840                           
  2841  002E                     I2C2_Transmit@pData:	
  2842                           ; 4 bytes @ 0xE
  2843                           
  2844  002E                     _isdigit$788:	
  2845                           ; 1 bytes @ 0xE
  2846                           
  2847  002E                     Buzzer_MiliSecond@time:	
  2848                           ; 1 bytes @ 0xE
  2849                           
  2850  002E                     ___wmul@multiplier:	
  2851                           ; 2 bytes @ 0xE
  2852                           
  2853  002E                     ___lldiv@divisor:	
  2854                           ; 2 bytes @ 0xE
  2855                           
  2856                           
  2857                           ; 4 bytes @ 0xE
  2858  002E                     	ds	1
  2859  002F                     ?_I2C2_Setting:	
  2860  002F                     ??_mTouch_Init:	
  2861                           ; 1 bytes @ 0xF
  2862                           
  2863  002F                     I2C2_Setting@mode:	
  2864                           ; 1 bytes @ 0xF
  2865                           
  2866  002F                     I2C2_Transmit@size:	
  2867                           ; 1 bytes @ 0xF
  2868                           
  2869  002F                     isdigit@c:	
  2870                           ; 1 bytes @ 0xF
  2871                           
  2872                           
  2873                           ; 1 bytes @ 0xF
  2874  002F                     	ds	1
  2875  0030                     ??_mTouch_Check:	
  2876  0030                     ??_Buzzer_MiliSecond:	
  2877                           ; 1 bytes @ 0x10
  2878                           
  2879  0030                     ??_I2C2_Transmit:	
  2880                           ; 1 bytes @ 0x10
  2881                           
  2882  0030                     I2C2_Setting@Speed:	
  2883                           ; 1 bytes @ 0x10
  2884                           
  2885  0030                     LCD_WriteData@point:	
  2886                           ; 1 bytes @ 0x10
  2887                           
  2888  0030                     ___wmul@multiplicand:	
  2889                           ; 1 bytes @ 0x10
  2890                           
  2891                           
  2892                           ; 2 bytes @ 0x10
  2893  0030                     	ds	1
  2894  0031                     ??_LCD_DisplayClear:	
  2895  0031                     ??_I2C2_Setting:	
  2896                           ; 1 bytes @ 0x11
  2897                           
  2898  0031                     ??_putch:	
  2899                           ; 1 bytes @ 0x11
  2900                           
  2901  0031                     ??_LCD_CursorHome:	
  2902                           ; 1 bytes @ 0x11
  2903                           
  2904  0031                     ?_LCD_CursorPosition:	
  2905                           ; 1 bytes @ 0x11
  2906                           
  2907  0031                     putch@c:	
  2908                           ; 1 bytes @ 0x11
  2909                           
  2910  0031                     LCD_CursorPosition@ty:	
  2911                           ; 1 bytes @ 0x11
  2912                           
  2913                           
  2914                           ; 1 bytes @ 0x11
  2915  0031                     	ds	1
  2916  0032                     ??_LCD_Init:	
  2917  0032                     ??_LCD_CursorPosition:	
  2918                           ; 1 bytes @ 0x12
  2919                           
  2920  0032                     ??_Timer1_GetCountSum:	
  2921                           ; 1 bytes @ 0x12
  2922                           
  2923  0032                     ??_Timer1_GetCPM:	
  2924                           ; 1 bytes @ 0x12
  2925                           
  2926  0032                     ??_Timer1_GetCPS:	
  2927                           ; 1 bytes @ 0x12
  2928                           
  2929  0032                     ??___wmul:	
  2930                           ; 1 bytes @ 0x12
  2931                           
  2932  0032                     I2C2_Setting@address:	
  2933                           ; 1 bytes @ 0x12
  2934                           
  2935  0032                     I2C2_Transmit@address:	
  2936                           ; 1 bytes @ 0x12
  2937                           
  2938  0032                     ___wmul@product:	
  2939                           ; 1 bytes @ 0x12
  2940                           
  2941  0032                     ___lldiv@dividend:	
  2942                           ; 2 bytes @ 0x12
  2943                           
  2944                           
  2945                           ; 4 bytes @ 0x12
  2946  0032                     	ds	1
  2947  0033                     ?_I2C_Init:	
  2948  0033                     I2C2_Transmit@i:	
  2949                           ; 1 bytes @ 0x13
  2950                           
  2951  0033                     I2C_Init@address:	
  2952                           ; 1 bytes @ 0x13
  2953                           
  2954  0033                     LCD_CursorPosition@tx:	
  2955                           ; 1 bytes @ 0x13
  2956                           
  2957                           
  2958                           ; 1 bytes @ 0x13
  2959  0033                     	ds	1
  2960  0034                     I2C2_Transmit@i_172:	
  2961  0034                     I2C_Init@mode:	
  2962                           ; 1 bytes @ 0x14
  2963                           
  2964                           
  2965                           ; 1 bytes @ 0x14
  2966  0034                     	ds	1
  2967  0035                     I2C2_Transmit@result:	
  2968  0035                     I2C_Init@Speed:	
  2969                           ; 1 bytes @ 0x15
  2970                           
  2971  0035                     mTouch_Check@chan:	
  2972                           ; 1 bytes @ 0x15
  2973                           
  2974                           
  2975                           ; 1 bytes @ 0x15
  2976  0035                     	ds	1
  2977  0036                     ??_I2C_Init:	
  2978  0036                     ?_I2C_Transmit:	
  2979                           ; 1 bytes @ 0x16
  2980                           
  2981  0036                     ??___lldiv:	
  2982                           ; 1 bytes @ 0x16
  2983                           
  2984  0036                     I2C_Transmit@address:	
  2985                           ; 1 bytes @ 0x16
  2986                           
  2987                           
  2988                           ; 1 bytes @ 0x16
  2989  0036                     	ds	1
  2990  0037                     I2C_Transmit@pData:	
  2991  0037                     ___lldiv@quotient:	
  2992                           ; 1 bytes @ 0x17
  2993                           
  2994                           
  2995                           ; 4 bytes @ 0x17
  2996  0037                     	ds	1
  2997  0038                     I2C_Init@I2Cx:	
  2998  0038                     I2C_Transmit@size:	
  2999                           ; 1 bytes @ 0x18
  3000                           
  3001                           
  3002                           ; 1 bytes @ 0x18
  3003  0038                     	ds	1
  3004  0039                     ??_I2C_Transmit:	
  3005                           
  3006                           ; 1 bytes @ 0x19
  3007  0039                     	ds	2
  3008  003B                     ___lldiv@counter:	
  3009                           
  3010                           ; 1 bytes @ 0x1B
  3011  003B                     	ds	1
  3012  003C                     ?___llmod:	
  3013  003C                     I2C_Transmit@I2Cx:	
  3014                           ; 4 bytes @ 0x1C
  3015                           
  3016  003C                     ___llmod@divisor:	
  3017                           ; 1 bytes @ 0x1C
  3018                           
  3019                           
  3020                           ; 4 bytes @ 0x1C
  3021  003C                     	ds	1
  3022  003D                     I2C_Transmit@result:	
  3023                           
  3024                           ; 1 bytes @ 0x1D
  3025  003D                     	ds	1
  3026  003E                     ??_DAC_Initialize:	
  3027  003E                     ?_DAC_WriteVoltage:	
  3028                           ; 1 bytes @ 0x1E
  3029                           
  3030  003E                     DAC_WriteVoltage@volue:	
  3031                           ; 1 bytes @ 0x1E
  3032                           
  3033                           
  3034                           ; 2 bytes @ 0x1E
  3035  003E                     	ds	2
  3036  0040                     ??_DAC_WriteVoltage:	
  3037  0040                     ___llmod@dividend:	
  3038                           ; 1 bytes @ 0x20
  3039                           
  3040                           
  3041                           ; 4 bytes @ 0x20
  3042  0040                     	ds	4
  3043  0044                     ??___llmod:	
  3044                           
  3045                           ; 1 bytes @ 0x24
  3046  0044                     	ds	1
  3047  0045                     ___llmod@counter:	
  3048                           
  3049                           ; 1 bytes @ 0x25
  3050  0045                     	ds	1
  3051  0046                     ?_printf:	
  3052  0046                     printf@f:	
  3053                           ; 2 bytes @ 0x26
  3054                           
  3055                           
  3056                           ; 2 bytes @ 0x26
  3057  0046                     	ds	10
  3058  0050                     ??_main:	
  3059                           
  3060                           ; 1 bytes @ 0x30
  3061  0050                     	ds	4
  3062                           
  3063                           	psect	maintext
  3064  03FC                     __pmaintext:	
  3065 ;;
  3066 ;;Main: autosize = 0, tempsize = 4, incstack = 0, save=0
  3067 ;;
  3068 ;; *************** function _main *****************
  3069 ;; Defined at:
  3070 ;;		line 23 in file "main.c"
  3071 ;; Parameters:    Size  Location     Type
  3072 ;;		None
  3073 ;; Auto vars:     Size  Location     Type
  3074 ;;		None
  3075 ;; Return value:  Size  Location     Type
  3076 ;;                  1    wreg      char 
  3077 ;; Registers used:
  3078 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3079 ;; Tracked objects:
  3080 ;;		On entry : B1F/0
  3081 ;;		On exit  : 0/0
  3082 ;;		Unchanged: 0/0
  3083 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  3084 ;;      Params:         0       0       0       0       0       0
  3085 ;;      Locals:         0       0       0       0       0       0
  3086 ;;      Temps:          0       4       0       0       0       0
  3087 ;;      Totals:         0       4       0       0       0       0
  3088 ;;Total ram usage:        4 bytes
  3089 ;; Hardware stack levels required when called:    7
  3090 ;; This function calls:
  3091 ;;		_Basic_Init
  3092 ;;		_Buzzer_Init
  3093 ;;		_DAC_Initialize
  3094 ;;		_DAC_WriteVoltage
  3095 ;;		_LCD_CursorHome
  3096 ;;		_LCD_CursorPosition
  3097 ;;		_LCD_Init
  3098 ;;		_Timer1_GetCPM
  3099 ;;		_Timer1_GetCPS
  3100 ;;		_Timer1_GetCountSum
  3101 ;;		_Timer1_GetMinute
  3102 ;;		_Timer1_GetSecond
  3103 ;;		_Timer1_Init
  3104 ;;		_Timer1_StartCount
  3105 ;;		_Timer6_Init
  3106 ;;		_mTouch_Check
  3107 ;;		_mTouch_Init
  3108 ;;		_printf
  3109 ;; This function is called by:
  3110 ;;		Startup code after reset
  3111 ;; This function uses a non-reentrant model
  3112 ;;
  3113                           
  3114                           
  3115                           ;psect for function _main
  3116  03FC                     _main:	
  3117                           
  3118                           ;main.c: 25: Basic_Init();
  3119                           
  3120                           ;incstack = 0
  3121                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3122  03FC  318D  251B  3183   	fcall	_Basic_Init
  3123                           
  3124                           ;main.c: 26: LATA6 = 1;
  3125  03FF  0022               	movlb	2	; select bank2
  3126  0400  170C               	bsf	12,6	;volatile
  3127                           
  3128                           ;main.c: 27: Buzzer_Init();
  3129  0401  318E  2687  3183   	fcall	_Buzzer_Init
  3130                           
  3131                           ;main.c: 28: LCD_Init();
  3132  0404  3185  25FA  3183   	fcall	_LCD_Init
  3133                           
  3134                           ;main.c: 29: Timer1_Init();
  3135  0407  318E  2641  3183   	fcall	_Timer1_Init
  3136                           
  3137                           ;main.c: 30: mTouch_Init();
  3138  040A  3187  27EB  3183   	fcall	_mTouch_Init
  3139                           
  3140                           ;main.c: 31: Timer6_Init();
  3141  040D  318D  253D  3183   	fcall	_Timer6_Init
  3142                           
  3143                           ;main.c: 32: DAC_Initialize();
  3144  0410  318E  2621  3183   	fcall	_DAC_Initialize
  3145                           
  3146                           ;main.c: 34: Timer1_StartCount();
  3147  0413  318C  246C  3183   	fcall	_Timer1_StartCount
  3148                           
  3149                           ;main.c: 36: mode.ModeNum = 0;
  3150  0416  0020               	movlb	0	; select bank0
  3151  0417  01DD               	clrf	_mode+1
  3152                           
  3153                           ;main.c: 38: DAC_WriteVoltage(DAC_DataTable[6]);
  3154  0418  309F               	movlw	low ((_DAC_DataTable+12)| (0+32768))
  3155  0419  0084               	movwf	4
  3156  041A  3082               	movlw	high ((_DAC_DataTable+12)| (0+32768))
  3157  041B  0085               	movwf	5
  3158  041C  3F00               	moviw [0]fsr0
  3159  041D  00BE               	movwf	DAC_WriteVoltage@volue
  3160  041E  3F01               	moviw [1]fsr0
  3161  041F  00BF               	movwf	DAC_WriteVoltage@volue+1
  3162  0420  318F  270A  3183   	fcall	_DAC_WriteVoltage
  3163  0423                     l3202:	
  3164                           ;main.c: 40: while(1)
  3165                           
  3166                           
  3167                           ;main.c: 41: {
  3168                           ;main.c: 42: if(mTouch_Check(2)&&(mode.ModeNum<4-1))
  3169  0423  3002               	movlw	2
  3170  0424  3187  2763  3183   	fcall	_mTouch_Check
  3171  0427  3A00               	xorlw	0
  3172  0428  1903               	skipnz
  3173  0429  2C34               	goto	l3208
  3174  042A  3003               	movlw	3
  3175  042B  0020               	movlb	0	; select bank0
  3176  042C  025D               	subwf	_mode+1,w
  3177  042D  1803               	skipnc
  3178  042E  2C34               	goto	l3208
  3179                           
  3180                           ;main.c: 43: mode.ModeNum++;
  3181  042F  3001               	movlw	1
  3182  0430  00D0               	movwf	??_main
  3183  0431  0850               	movf	??_main,w
  3184  0432  07DD               	addwf	_mode+1,f
  3185  0433  2C41               	goto	l3214
  3186  0434                     l3208:	
  3187                           
  3188                           ;main.c: 44: else if(mTouch_Check(1)&&(mode.ModeNum>0))
  3189  0434  3001               	movlw	1
  3190  0435  3187  2763  3183   	fcall	_mTouch_Check
  3191  0438  3A00               	xorlw	0
  3192  0439  1903               	skipnz
  3193  043A  2C41               	goto	l3214
  3194  043B  0020               	movlb	0	; select bank0
  3195  043C  085D               	movf	_mode+1,w
  3196  043D  1903               	btfsc	3,2
  3197  043E  2C41               	goto	l3214
  3198                           
  3199                           ;main.c: 45: mode.ModeNum--;
  3200  043F  3001               	movlw	1
  3201  0440  02DD               	subwf	_mode+1,f
  3202  0441                     l3214:	
  3203                           
  3204                           ;main.c: 47: LCD_CursorHome();
  3205  0441  318C  24EA  3183   	fcall	_LCD_CursorHome
  3206                           
  3207                           ;main.c: 48: switch(mode.ModeNum)
  3208  0444  2CB8               	goto	l3232
  3209  0445                     l3216:	
  3210                           ;main.c: 49: {
  3211                           ;main.c: 50: case COUNT:
  3212                           
  3213                           
  3214                           ;main.c: 51: printf("%7lu %7lu", Timer1_GetCPM(),Timer1_GetCountSum());
  3215  0445  30D4               	movlw	low (STR_1| (0+32768))
  3216  0446  0020               	movlb	0	; select bank0
  3217  0447  00C6               	movwf	printf@f
  3218  0448  3082               	movlw	high (STR_1| (0+32768))
  3219  0449  00C7               	movwf	printf@f+1
  3220  044A  318C  24BF  3183   	fcall	_Timer1_GetCPM
  3221  044D  0020               	movlb	0	; select bank0
  3222  044E  0831               	movf	?_Timer1_GetCPM+3,w
  3223  044F  00CB               	movwf	?_printf+5
  3224  0450  0830               	movf	?_Timer1_GetCPM+2,w
  3225  0451  00CA               	movwf	?_printf+4
  3226  0452  082F               	movf	?_Timer1_GetCPM+1,w
  3227  0453  00C9               	movwf	?_printf+3
  3228  0454  082E               	movf	?_Timer1_GetCPM,w
  3229  0455  00C8               	movwf	?_printf+2
  3230  0456  318D  252C  3183   	fcall	_Timer1_GetCountSum
  3231  0459  0020               	movlb	0	; select bank0
  3232  045A  0831               	movf	?_Timer1_GetCountSum+3,w
  3233  045B  00CF               	movwf	?_printf+9
  3234  045C  0830               	movf	?_Timer1_GetCountSum+2,w
  3235  045D  00CE               	movwf	?_printf+8
  3236  045E  082F               	movf	?_Timer1_GetCountSum+1,w
  3237  045F  00CD               	movwf	?_printf+7
  3238  0460  082E               	movf	?_Timer1_GetCountSum,w
  3239  0461  00CC               	movwf	?_printf+6
  3240  0462  3180  2058  3183   	fcall	_printf
  3241                           
  3242                           ;main.c: 52: LCD_CursorPosition(0,1);
  3243  0465  0020               	movlb	0	; select bank0
  3244  0466  01B1               	clrf	LCD_CursorPosition@ty
  3245  0467  0AB1               	incf	LCD_CursorPosition@ty,f
  3246  0468  3000               	movlw	0
  3247  0469  318D  2566  3183   	fcall	_LCD_CursorPosition
  3248                           
  3249                           ;main.c: 53: printf("%6lu",Timer1_GetCPS());
  3250  046C  30F7               	movlw	low (STR_2| (0+32768))
  3251  046D  0020               	movlb	0	; select bank0
  3252  046E  00C6               	movwf	printf@f
  3253  046F  3083               	movlw	high (STR_2| (0+32768))
  3254  0470  00C7               	movwf	printf@f+1
  3255  0471  318C  24CD  3183   	fcall	_Timer1_GetCPS
  3256  0474  0020               	movlb	0	; select bank0
  3257  0475  0831               	movf	?_Timer1_GetCPS+3,w
  3258  0476  00CB               	movwf	?_printf+5
  3259  0477  0830               	movf	?_Timer1_GetCPS+2,w
  3260  0478  00CA               	movwf	?_printf+4
  3261  0479  082F               	movf	?_Timer1_GetCPS+1,w
  3262  047A  00C9               	movwf	?_printf+3
  3263  047B  082E               	movf	?_Timer1_GetCPS,w
  3264  047C  00C8               	movwf	?_printf+2
  3265  047D  3180  2058  3183   	fcall	_printf
  3266                           
  3267                           ;main.c: 54: printf("    %02d:%02d",Timer1_GetMinute(),Timer1_GetSecond());
  3268  0480  30B1               	movlw	low (STR_3| (0+32768))
  3269  0481  0020               	movlb	0	; select bank0
  3270  0482  00C6               	movwf	printf@f
  3271  0483  3082               	movlw	high (STR_3| (0+32768))
  3272  0484  00C7               	movwf	printf@f+1
  3273  0485  318C  2466  3183   	fcall	_Timer1_GetMinute
  3274  0488  0020               	movlb	0	; select bank0
  3275  0489  00D0               	movwf	??_main
  3276  048A  01D1               	clrf	??_main+1
  3277  048B  0850               	movf	??_main,w
  3278  048C  00C8               	movwf	?_printf+2
  3279  048D  0851               	movf	??_main+1,w
  3280  048E  00C9               	movwf	?_printf+3
  3281  048F  318C  2469  3183   	fcall	_Timer1_GetSecond
  3282  0492  0020               	movlb	0	; select bank0
  3283  0493  00D2               	movwf	??_main+2
  3284  0494  01D3               	clrf	??_main+3
  3285  0495  0852               	movf	??_main+2,w
  3286  0496  00CA               	movwf	?_printf+4
  3287  0497  0853               	movf	??_main+3,w
  3288  0498  00CB               	movwf	?_printf+5
  3289  0499  3180  2058  3183   	fcall	_printf
  3290                           
  3291                           ;main.c: 55: break;
  3292  049C  2C23               	goto	l3202
  3293  049D                     l3224:	
  3294                           ;main.c: 56: case SELECTFUNC:
  3295                           
  3296                           
  3297                           ;main.c: 57: printf("SELECTFUNC");
  3298  049D  30BF               	movlw	low (STR_4| (0+32768))
  3299  049E  0020               	movlb	0	; select bank0
  3300  049F  00C6               	movwf	printf@f
  3301  04A0  3082               	movlw	high (STR_4| (0+32768))
  3302  04A1  00C7               	movwf	printf@f+1
  3303  04A2  3180  2058  3183   	fcall	_printf
  3304                           
  3305                           ;main.c: 58: break;
  3306  04A5  2C23               	goto	l3202
  3307  04A6                     l3226:	
  3308                           ;main.c: 59: case ADJGAIN:
  3309                           
  3310                           
  3311                           ;main.c: 60: printf("ADJGAIN");
  3312  04A6  30F6               	movlw	low (STR_5| (0+32768))
  3313  04A7  0020               	movlb	0	; select bank0
  3314  04A8  00C6               	movwf	printf@f
  3315  04A9  3082               	movlw	high (STR_5| (0+32768))
  3316  04AA  00C7               	movwf	printf@f+1
  3317  04AB  3180  2058  3183   	fcall	_printf
  3318                           
  3319                           ;main.c: 61: break;
  3320  04AE  2C23               	goto	l3202
  3321  04AF                     l3228:	
  3322                           ;main.c: 62: case PMTDEVICE:
  3323                           
  3324                           
  3325                           ;main.c: 63: printf("PMTDEVICE");
  3326  04AF  30CA               	movlw	low (STR_6| (0+32768))
  3327  04B0  0020               	movlb	0	; select bank0
  3328  04B1  00C6               	movwf	printf@f
  3329  04B2  3082               	movlw	high (STR_6| (0+32768))
  3330  04B3  00C7               	movwf	printf@f+1
  3331  04B4  3180  2058  3183   	fcall	_printf
  3332                           
  3333                           ;main.c: 65: }
  3334                           
  3335                           ;main.c: 64: break;
  3336  04B7  2C23               	goto	l3202
  3337  04B8                     l3232:	
  3338  04B8  0020               	movlb	0	; select bank0
  3339  04B9  085D               	movf	_mode+1,w
  3340                           
  3341                           ; Switch size 1, requested type "space"
  3342                           ; Number of cases is 4, Range of values is 0 to 3
  3343                           ; switch strategies available:
  3344                           ; Name         Instructions Cycles
  3345                           ; simple_byte           13     7 (average)
  3346                           ; direct_byte           14     6 (fixed)
  3347                           ; jumptable            260     6 (fixed)
  3348                           ;	Chosen strategy is simple_byte
  3349  04BA  3A00               	xorlw	0	; case 0
  3350  04BB  1903               	skipnz
  3351  04BC  2C45               	goto	l3216
  3352  04BD  3A01               	xorlw	1	; case 1
  3353  04BE  1903               	skipnz
  3354  04BF  2C9D               	goto	l3224
  3355  04C0  3A03               	xorlw	3	; case 2
  3356  04C1  1903               	skipnz
  3357  04C2  2CA6               	goto	l3226
  3358  04C3  3A01               	xorlw	1	; case 3
  3359  04C4  1903               	skipnz
  3360  04C5  2CAF               	goto	l3228
  3361  04C6  2C23               	goto	l3202
  3362  04C7  2C23               	goto	l3202
  3363  04C8                     __end_of_main:	
  3364                           ;main.c: 66: }
  3365                           ;main.c: 68: return 0;
  3366                           ;	Return value of _main is never used
  3367                           
  3368                           
  3369                           	psect	text1
  3370  0058                     __ptext1:	
  3371 ;; *************** function _printf *****************
  3372 ;; Defined at:
  3373 ;;		line 464 in file "/opt/microchip/xc8/v1.41/sources/common/doprnt.c"
  3374 ;; Parameters:    Size  Location     Type
  3375 ;;  f               2   38[BANK0 ] PTR const unsigned char 
  3376 ;;		 -> STR_6(10), STR_5(8), STR_4(11), STR_3(14), 
  3377 ;;		 -> STR_2(5), STR_1(10), 
  3378 ;; Auto vars:     Size  Location     Type
  3379 ;;  val             4    2[BANK2 ] unsigned long 
  3380 ;;  tmpval          4    0        struct .
  3381 ;;  width           2    8[BANK2 ] int 
  3382 ;;  prec            2    0[BANK2 ] int 
  3383 ;;  cp              2    0        PTR const unsigned char 
  3384 ;;  len             2    0        unsigned int 
  3385 ;;  c               1   10[BANK2 ] char 
  3386 ;;  flag            1    7[BANK2 ] unsigned char 
  3387 ;;  ap              1    6[BANK2 ] PTR void [1]
  3388 ;;		 -> ?_printf(2), 
  3389 ;; Return value:  Size  Location     Type
  3390 ;;                  2   38[BANK0 ] int 
  3391 ;; Registers used:
  3392 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3393 ;; Tracked objects:
  3394 ;;		On entry : 0/0
  3395 ;;		On exit  : 0/0
  3396 ;;		Unchanged: 0/0
  3397 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  3398 ;;      Params:         0      10       0       0       0       0
  3399 ;;      Locals:         0       0       0      11       0       0
  3400 ;;      Temps:          0       0       6       0       0       0
  3401 ;;      Totals:         0      10       6      11       0       0
  3402 ;;Total ram usage:       27 bytes
  3403 ;; Hardware stack levels used:    1
  3404 ;; Hardware stack levels required when called:    5
  3405 ;; This function calls:
  3406 ;;		___lldiv
  3407 ;;		___llmod
  3408 ;;		___wmul
  3409 ;;		_isdigit
  3410 ;;		_putch
  3411 ;; This function is called by:
  3412 ;;		_main
  3413 ;; This function uses a non-reentrant model
  3414 ;;
  3415                           
  3416                           
  3417                           ;psect for function _printf
  3418  0058                     _printf:	
  3419                           
  3420                           ;doprnt.c: 466: va_list ap;
  3421                           ;doprnt.c: 499: signed char c;
  3422                           ;doprnt.c: 501: int width;
  3423                           ;doprnt.c: 504: int prec;
  3424                           ;doprnt.c: 508: unsigned char flag;
  3425                           ;doprnt.c: 523: union {
  3426                           ;doprnt.c: 524: unsigned long vd;
  3427                           ;doprnt.c: 525: double integ;
  3428                           ;doprnt.c: 526: } tmpval;
  3429                           ;doprnt.c: 528: unsigned long val;
  3430                           ;doprnt.c: 529: unsigned len;
  3431                           ;doprnt.c: 530: const char * cp;
  3432                           ;doprnt.c: 533: *ap = __va_start();
  3433                           
  3434                           ;incstack = 0
  3435                           ; Regs used in _printf: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3436  0058  3048               	movlw	(low ((?_printf| 0+2)))& (0+255)
  3437  0059  0021               	movlb	1	; select bank1
  3438  005A  00E8               	movwf	??_printf^(0+128)
  3439  005B  0868               	movf	??_printf^(0+128),w
  3440  005C  0022               	movlb	2	; select bank2
  3441  005D  00E2               	movwf	printf@ap^(0+256)
  3442  005E                     l3160:	
  3443                           ;doprnt.c: 536: while(c = *f++) {
  3444                           
  3445  005E  0020               	movlb	0	; select bank0
  3446  005F  0847               	movf	printf@f+1,w
  3447  0060  0021               	movlb	1	; select bank1
  3448  0061  00E9               	movwf	(??_printf^(0+128)+1)
  3449  0062  0020               	movlb	0	; select bank0
  3450  0063  0846               	movf	printf@f,w
  3451  0064  0021               	movlb	1	; select bank1
  3452  0065  00E8               	movwf	??_printf^(0+128)
  3453  0066  0020               	movlb	0	; select bank0
  3454  0067  0AC6               	incf	printf@f,f
  3455  0068  1903               	skipnz
  3456  0069  0AC7               	incf	printf@f+1,f
  3457  006A  0021               	movlb	1	; select bank1
  3458  006B  0868               	movf	??_printf^(0+128),w
  3459  006C  0084               	movwf	4
  3460  006D  0869               	movf	(??_printf+1)^(0+128),w
  3461  006E  0085               	movwf	5
  3462  006F  0800               	movf	0,w	;code access
  3463  0070  00EA               	movwf	(??_printf+2)^(0+128)
  3464  0071  086A               	movf	(??_printf+2)^(0+128),w
  3465  0072  0022               	movlb	2	; select bank2
  3466  0073  00E6               	movwf	printf@c^(0+256)
  3467  0074  0866               	movf	printf@c^(0+256),w
  3468  0075  1903               	btfsc	3,2
  3469  0076  0008               	return
  3470                           
  3471                           ;doprnt.c: 538: if(c != '%')
  3472  0077  3025               	movlw	37
  3473  0078  0666               	xorwf	printf@c^(0+256),w
  3474  0079  1903               	btfsc	3,2
  3475  007A  2880               	goto	l3060
  3476                           
  3477                           ;doprnt.c: 540: {
  3478                           ;doprnt.c: 541: (putch(c) );
  3479  007B  0866               	movf	printf@c^(0+256),w
  3480  007C  318C  247D  3180   	fcall	_putch
  3481                           
  3482                           ;doprnt.c: 542: continue;
  3483  007F  285E               	goto	l3160
  3484  0080                     l3060:	
  3485                           
  3486                           ;doprnt.c: 543: }
  3487                           ;doprnt.c: 546: width = 0;
  3488  0080  0022               	movlb	2	; select bank2
  3489  0081  01E4               	clrf	printf@width^(0+256)
  3490  0082  01E5               	clrf	(printf@width+1)^(0+256)
  3491                           
  3492                           ;doprnt.c: 548: flag = 0;
  3493  0083  01E3               	clrf	printf@flag^(0+256)
  3494                           
  3495                           ;doprnt.c: 551: switch(*f) {
  3496                           
  3497                           ;doprnt.c: 550: for(;;) {
  3498  0084  288C               	goto	l3066
  3499  0085                     l542:	
  3500                           ;doprnt.c: 579: case '0':
  3501                           
  3502                           
  3503                           ;doprnt.c: 580: flag |= 0x04;
  3504  0085  0022               	movlb	2	; select bank2
  3505  0086  1563               	bsf	printf@flag^(0+256),2
  3506                           
  3507                           ;doprnt.c: 581: f++;
  3508  0087  3001               	movlw	1
  3509  0088  0020               	movlb	0	; select bank0
  3510  0089  07C6               	addwf	printf@f,f
  3511  008A  3000               	movlw	0
  3512  008B  3DC7               	addwfc	printf@f+1,f
  3513  008C                     l3066:	
  3514                           ;doprnt.c: 584: }
  3515                           
  3516                           ;doprnt.c: 582: continue;
  3517                           
  3518  008C  0020               	movlb	0	; select bank0
  3519  008D  0846               	movf	printf@f,w
  3520  008E  0084               	movwf	4
  3521  008F  0847               	movf	printf@f+1,w
  3522  0090  0085               	movwf	5
  3523  0091  0800               	movf	0,w	;code access
  3524                           
  3525                           ; Switch size 1, requested type "space"
  3526                           ; Number of cases is 1, Range of values is 48 to 48
  3527                           ; switch strategies available:
  3528                           ; Name         Instructions Cycles
  3529                           ; simple_byte            4     3 (average)
  3530                           ; direct_byte           11     9 (fixed)
  3531                           ; jumptable            263     9 (fixed)
  3532                           ;	Chosen strategy is simple_byte
  3533  0092  3A30               	xorlw	48	; case 48
  3534  0093  1903               	skipnz
  3535  0094  2885               	goto	l542
  3536  0095  2896               	goto	l3068
  3537  0096                     l3068:	
  3538                           ;doprnt.c: 586: }
  3539                           
  3540                           ;doprnt.c: 585: break;
  3541                           
  3542                           
  3543                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  3544  0096  0846               	movf	printf@f,w
  3545  0097  0084               	movwf	4
  3546  0098  0847               	movf	printf@f+1,w
  3547  0099  0085               	movwf	5
  3548  009A  0800               	movf	0,w	;code access
  3549  009B  318C  24DB  3180   	fcall	_isdigit
  3550  009E  1C03               	btfss	3,0
  3551  009F  28E3               	goto	l3082
  3552                           
  3553                           ;doprnt.c: 598: width = 0;
  3554  00A0  0022               	movlb	2	; select bank2
  3555  00A1  01E4               	clrf	printf@width^(0+256)
  3556  00A2  01E5               	clrf	(printf@width+1)^(0+256)
  3557  00A3                     l3072:	
  3558                           ;doprnt.c: 599: do {
  3559                           
  3560                           
  3561                           ;doprnt.c: 600: width *= 10;
  3562  00A3  300A               	movlw	10
  3563  00A4  0020               	movlb	0	; select bank0
  3564  00A5  00AE               	movwf	___wmul@multiplier
  3565  00A6  3000               	movlw	0
  3566  00A7  00AF               	movwf	___wmul@multiplier+1
  3567  00A8  0022               	movlb	2	; select bank2
  3568  00A9  0865               	movf	(printf@width+1)^(0+256),w
  3569  00AA  0020               	movlb	0	; select bank0
  3570  00AB  00B1               	movwf	___wmul@multiplicand+1
  3571  00AC  0022               	movlb	2	; select bank2
  3572  00AD  0864               	movf	printf@width^(0+256),w
  3573  00AE  0020               	movlb	0	; select bank0
  3574  00AF  00B0               	movwf	___wmul@multiplicand
  3575  00B0  318D  25E7  3180   	fcall	___wmul
  3576  00B3  0020               	movlb	0	; select bank0
  3577  00B4  082F               	movf	?___wmul+1,w
  3578  00B5  0022               	movlb	2	; select bank2
  3579  00B6  00E5               	movwf	(printf@width+1)^(0+256)
  3580  00B7  0020               	movlb	0	; select bank0
  3581  00B8  082E               	movf	?___wmul,w
  3582  00B9  0022               	movlb	2	; select bank2
  3583  00BA  00E4               	movwf	printf@width^(0+256)
  3584                           
  3585                           ;doprnt.c: 601: width += *f++ - '0';
  3586  00BB  0020               	movlb	0	; select bank0
  3587  00BC  0846               	movf	printf@f,w
  3588  00BD  0084               	movwf	4
  3589  00BE  0847               	movf	printf@f+1,w
  3590  00BF  0085               	movwf	5
  3591  00C0  0800               	movf	0,w	;code access
  3592  00C1  3ED0               	addlw	208
  3593  00C2  0021               	movlb	1	; select bank1
  3594  00C3  00E8               	movwf	??_printf^(0+128)
  3595  00C4  30FF               	movlw	255
  3596  00C5  1803               	skipnc
  3597  00C6  3000               	movlw	0
  3598  00C7  00E9               	movwf	(??_printf^(0+128)+1)
  3599  00C8  0868               	movf	??_printf^(0+128),w
  3600  00C9  0022               	movlb	2	; select bank2
  3601  00CA  07E4               	addwf	printf@width^(0+256),f
  3602  00CB  0021               	movlb	1	; select bank1
  3603  00CC  0869               	movf	(??_printf+1)^(0+128),w
  3604  00CD  0022               	movlb	2	; select bank2
  3605  00CE  3DE5               	addwfc	(printf@width+1)^(0+256),f
  3606  00CF  3001               	movlw	1
  3607  00D0  0020               	movlb	0	; select bank0
  3608  00D1  07C6               	addwf	printf@f,f
  3609  00D2  3000               	movlw	0
  3610  00D3  3DC7               	addwfc	printf@f+1,f
  3611                           
  3612                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  3613  00D4  0846               	movf	printf@f,w
  3614  00D5  0084               	movwf	4
  3615  00D6  0847               	movf	printf@f+1,w
  3616  00D7  0085               	movwf	5
  3617  00D8  0800               	movf	0,w	;code access
  3618  00D9  318C  24DB  3180   	fcall	_isdigit
  3619  00DC  1C03               	btfss	3,0
  3620  00DD  28E3               	goto	l3082
  3621  00DE  28A3               	goto	l3072
  3622  00DF                     l553:	
  3623                           ;doprnt.c: 641: case 'l':
  3624                           
  3625                           ;doprnt.c: 638: goto alldone;
  3626                           
  3627                           ;doprnt.c: 637: case 0:
  3628                           
  3629                           ;doprnt.c: 635: switch(c = *f++) {
  3630                           
  3631                           ;doprnt.c: 608: }
  3632                           ;doprnt.c: 633: loop:
  3633                           
  3634                           
  3635                           ;doprnt.c: 643: flag |= 0x10;
  3636  00DF  1663               	bsf	printf@flag^(0+256),4
  3637                           
  3638                           ;doprnt.c: 644: goto loop;
  3639  00E0  28E3               	goto	l3082
  3640  00E1                     l558:	
  3641                           ;doprnt.c: 817: case 'u':
  3642                           
  3643                           ;doprnt.c: 813: continue;
  3644                           
  3645                           ;doprnt.c: 802: default:
  3646                           
  3647                           ;doprnt.c: 698: case 'i':
  3648                           ;doprnt.c: 699: break;
  3649                           
  3650                           ;doprnt.c: 697: case 'd':
  3651                           
  3652                           
  3653                           ;doprnt.c: 818: flag |= 0x40;
  3654  00E1  1763               	bsf	printf@flag^(0+256),6
  3655                           
  3656                           ;doprnt.c: 822: }
  3657                           
  3658                           ;doprnt.c: 819: break;
  3659  00E2  2907               	goto	l556
  3660  00E3                     l3082:	
  3661  00E3  0020               	movlb	0	; select bank0
  3662  00E4  0847               	movf	printf@f+1,w
  3663  00E5  0021               	movlb	1	; select bank1
  3664  00E6  00E9               	movwf	(??_printf^(0+128)+1)
  3665  00E7  0020               	movlb	0	; select bank0
  3666  00E8  0846               	movf	printf@f,w
  3667  00E9  0021               	movlb	1	; select bank1
  3668  00EA  00E8               	movwf	??_printf^(0+128)
  3669  00EB  0020               	movlb	0	; select bank0
  3670  00EC  0AC6               	incf	printf@f,f
  3671  00ED  1903               	skipnz
  3672  00EE  0AC7               	incf	printf@f+1,f
  3673  00EF  0021               	movlb	1	; select bank1
  3674  00F0  0868               	movf	??_printf^(0+128),w
  3675  00F1  0084               	movwf	4
  3676  00F2  0869               	movf	(??_printf+1)^(0+128),w
  3677  00F3  0085               	movwf	5
  3678  00F4  0800               	movf	0,w	;code access
  3679  00F5  0022               	movlb	2	; select bank2
  3680  00F6  00E6               	movwf	printf@c^(0+256)
  3681                           
  3682                           ; Switch size 1, requested type "space"
  3683                           ; Number of cases is 5, Range of values is 0 to 117
  3684                           ; switch strategies available:
  3685                           ; Name         Instructions Cycles
  3686                           ; simple_byte           16     9 (average)
  3687                           ; direct_byte          242     6 (fixed)
  3688                           ; jumptable            260     6 (fixed)
  3689                           ;	Chosen strategy is simple_byte
  3690  00F7  3A00               	xorlw	0	; case 0
  3691  00F8  1903               	skipnz
  3692  00F9  2A6A               	goto	l586
  3693  00FA  3A64               	xorlw	100	; case 100
  3694  00FB  1903               	skipnz
  3695  00FC  2907               	goto	l556
  3696  00FD  3A0D               	xorlw	13	; case 105
  3697  00FE  1903               	skipnz
  3698  00FF  2907               	goto	l556
  3699  0100  3A05               	xorlw	5	; case 108
  3700  0101  1903               	skipnz
  3701  0102  28DF               	goto	l553
  3702  0103  3A19               	xorlw	25	; case 117
  3703  0104  1903               	skipnz
  3704  0105  28E1               	goto	l558
  3705  0106  285E               	goto	l3160
  3706  0107                     l556:	
  3707                           
  3708                           ;doprnt.c: 1251: if((flag & 0x40) == 0x00)
  3709  0107  1B63               	btfsc	printf@flag^(0+256),6
  3710  0108  2946               	goto	l559
  3711                           
  3712                           ;doprnt.c: 1253: {
  3713                           ;doprnt.c: 1255: if(flag & 0x10)
  3714  0109  1E63               	btfss	printf@flag^(0+256),4
  3715  010A  2918               	goto	l3090
  3716                           
  3717                           ;doprnt.c: 1256: val = (*(long *)__va_arg((*(long **)ap), (long)0));
  3718  010B  0862               	movf	printf@ap^(0+256),w
  3719  010C  0086               	movwf	6
  3720  010D  0187               	clrf	7
  3721  010E  3F40               	moviw [0]fsr1
  3722  010F  00DE               	movwf	printf@val^(0+256)
  3723  0110  3F41               	moviw [1]fsr1
  3724  0111  00DF               	movwf	(printf@val+1)^(0+256)
  3725  0112  3F42               	moviw [2]fsr1
  3726  0113  00E0               	movwf	(printf@val+2)^(0+256)
  3727  0114  3F43               	moviw [3]fsr1
  3728  0115  00E1               	movwf	(printf@val+3)^(0+256)
  3729  0116  3004               	movlw	4
  3730  0117  292D               	goto	L2
  3731  0118                     l3090:	
  3732                           
  3733                           ;doprnt.c: 1257: else
  3734                           ;doprnt.c: 1259: val = (long)(*(int *)__va_arg((*(int **)ap), (int)0));
  3735  0118  0862               	movf	printf@ap^(0+256),w
  3736  0119  0086               	movwf	6
  3737  011A  0187               	clrf	7
  3738  011B  3F40               	moviw [0]fsr1
  3739  011C  0021               	movlb	1	; select bank1
  3740  011D  00E8               	movwf	??_printf^(0+128)
  3741  011E  3F41               	moviw [1]fsr1
  3742  011F  00E9               	movwf	(??_printf^(0+128)+1)
  3743  0120  0868               	movf	??_printf^(0+128),w
  3744  0121  0022               	movlb	2	; select bank2
  3745  0122  00DE               	movwf	printf@val^(0+256)
  3746  0123  0021               	movlb	1	; select bank1
  3747  0124  0869               	movf	(??_printf+1)^(0+128),w
  3748  0125  0022               	movlb	2	; select bank2
  3749  0126  00DF               	movwf	(printf@val+1)^(0+256)
  3750  0127  0D89               	rlf	9,f
  3751  0128  3B89               	subwfb	9,f
  3752  0129  0989               	comf	9,f
  3753  012A  00E0               	movwf	(printf@val+2)^(0+256)
  3754  012B  00E1               	movwf	(printf@val+3)^(0+256)
  3755  012C  3002               	movlw	2
  3756  012D                     L2:	
  3757  012D  0021               	movlb	1	; select bank1
  3758  012E  00E8               	movwf	??_printf^(0+128)
  3759  012F  0868               	movf	??_printf^(0+128),w
  3760  0130  0022               	movlb	2	; select bank2
  3761  0131  07E2               	addwf	printf@ap^(0+256),f
  3762                           
  3763                           ;doprnt.c: 1261: if((long)val < 0) {
  3764  0132  1FE1               	btfss	(printf@val+3)^(0+256),7
  3765  0133  296C               	goto	l3108
  3766                           
  3767                           ;doprnt.c: 1262: flag |= 0x03;
  3768  0134  3003               	movlw	3
  3769  0135  0021               	movlb	1	; select bank1
  3770  0136  00E8               	movwf	??_printf^(0+128)
  3771  0137  0868               	movf	??_printf^(0+128),w
  3772  0138  0022               	movlb	2	; select bank2
  3773  0139  04E3               	iorwf	printf@flag^(0+256),f
  3774                           
  3775                           ;doprnt.c: 1263: val = -val;
  3776  013A  09DE               	comf	printf@val^(0+256),f
  3777  013B  09DF               	comf	(printf@val+1)^(0+256),f
  3778  013C  09E0               	comf	(printf@val+2)^(0+256),f
  3779  013D  09E1               	comf	(printf@val+3)^(0+256),f
  3780  013E  0ADE               	incf	printf@val^(0+256),f
  3781  013F  1903               	skipnz
  3782  0140  0ADF               	incf	(printf@val+1)^(0+256),f
  3783  0141  1903               	skipnz
  3784  0142  0AE0               	incf	(printf@val+2)^(0+256),f
  3785  0143  1903               	skipnz
  3786  0144  0AE1               	incf	(printf@val+3)^(0+256),f
  3787                           
  3788                           ;doprnt.c: 1264: }
  3789                           ;doprnt.c: 1266: }
  3790  0145  296C               	goto	l3108
  3791  0146                     l559:	
  3792                           
  3793                           ;doprnt.c: 1268: else
  3794                           ;doprnt.c: 1273: {
  3795                           ;doprnt.c: 1281: if(flag & 0x10)
  3796  0146  1E63               	btfss	printf@flag^(0+256),4
  3797  0147  2955               	goto	l3104
  3798                           
  3799                           ;doprnt.c: 1282: val = (*(unsigned long *)__va_arg((*(unsigned long **)ap), (unsigned lo
      +                          ng)0));
  3800  0148  0862               	movf	printf@ap^(0+256),w
  3801  0149  0086               	movwf	6
  3802  014A  0187               	clrf	7
  3803  014B  3F40               	moviw [0]fsr1
  3804  014C  00DE               	movwf	printf@val^(0+256)
  3805  014D  3F41               	moviw [1]fsr1
  3806  014E  00DF               	movwf	(printf@val+1)^(0+256)
  3807  014F  3F42               	moviw [2]fsr1
  3808  0150  00E0               	movwf	(printf@val+2)^(0+256)
  3809  0151  3F43               	moviw [3]fsr1
  3810  0152  00E1               	movwf	(printf@val+3)^(0+256)
  3811  0153  3004               	movlw	4
  3812  0154  2967               	goto	L3
  3813  0155                     l3104:	
  3814                           
  3815                           ;doprnt.c: 1283: else
  3816                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  3817  0155  0862               	movf	printf@ap^(0+256),w
  3818  0156  0086               	movwf	6
  3819  0157  0187               	clrf	7
  3820  0158  3F40               	moviw [0]fsr1
  3821  0159  0021               	movlb	1	; select bank1
  3822  015A  00E8               	movwf	??_printf^(0+128)
  3823  015B  3F41               	moviw [1]fsr1
  3824  015C  00E9               	movwf	(??_printf^(0+128)+1)
  3825  015D  0868               	movf	??_printf^(0+128),w
  3826  015E  0022               	movlb	2	; select bank2
  3827  015F  00DE               	movwf	printf@val^(0+256)
  3828  0160  0021               	movlb	1	; select bank1
  3829  0161  0869               	movf	(??_printf+1)^(0+128),w
  3830  0162  0022               	movlb	2	; select bank2
  3831  0163  00DF               	movwf	(printf@val^(0+256)+1)
  3832  0164  01E0               	clrf	(printf@val^(0+256)+2)
  3833  0165  01E1               	clrf	(printf@val^(0+256)+3)
  3834  0166  3002               	movlw	2
  3835  0167                     L3:	
  3836  0167  0021               	movlb	1	; select bank1
  3837  0168  00E8               	movwf	??_printf^(0+128)
  3838  0169  0868               	movf	??_printf^(0+128),w
  3839  016A  0022               	movlb	2	; select bank2
  3840  016B  07E2               	addwf	printf@ap^(0+256),f
  3841  016C                     l3108:	
  3842                           
  3843                           ;doprnt.c: 1287: }
  3844                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  3845  016C  01E6               	clrf	printf@c^(0+256)
  3846  016D  0AE6               	incf	printf@c^(0+256),f
  3847  016E  300A               	movlw	10
  3848  016F  0666               	xorwf	printf@c^(0+256),w
  3849  0170  1903               	btfsc	3,2
  3850  0171  29A9               	goto	l3120
  3851  0172                     l3114:	
  3852                           
  3853                           ;doprnt.c: 1306: if(val < dpowers[c])
  3854  0172  0866               	movf	printf@c^(0+256),w
  3855  0173  0021               	movlb	1	; select bank1
  3856  0174  00E8               	movwf	??_printf^(0+128)
  3857  0175  01E9               	clrf	(??_printf^(0+128)+1)
  3858  0176  35E8               	lslf	??_printf^(0+128),f
  3859  0177  0DE9               	rlf	(??_printf^(0+128)+1),f
  3860  0178  35E8               	lslf	??_printf^(0+128),f
  3861  0179  0DE9               	rlf	(??_printf^(0+128)+1),f
  3862  017A  306B               	movlw	low (_dpowers| (0+32768))
  3863  017B  0768               	addwf	??_printf^(0+128),w
  3864  017C  0084               	movwf	4
  3865  017D  3082               	movlw	high (_dpowers| (0+32768))
  3866  017E  3D69               	addwfc	(??_printf+1)^(0+128),w
  3867  017F  0085               	movwf	5
  3868  0180  3F00               	moviw [0]fsr0
  3869  0181  00EA               	movwf	(??_printf+2)^(0+128)
  3870  0182  3F01               	moviw [1]fsr0
  3871  0183  00EB               	movwf	((??_printf+2)^(0+128)+1)
  3872  0184  3F02               	moviw [2]fsr0
  3873  0185  00EC               	movwf	((??_printf+2)^(0+128)+2)
  3874  0186  3F03               	moviw [3]fsr0
  3875  0187  00ED               	movwf	((??_printf+2)^(0+128)+3)
  3876  0188  086D               	movf	(??_printf+5)^(0+128),w
  3877  0189  0022               	movlb	2	; select bank2
  3878  018A  0261               	subwf	(printf@val+3)^(0+256),w
  3879  018B  1D03               	skipz
  3880  018C  299D               	goto	u2765
  3881  018D  0021               	movlb	1	; select bank1
  3882  018E  086C               	movf	(??_printf+4)^(0+128),w
  3883  018F  0022               	movlb	2	; select bank2
  3884  0190  0260               	subwf	(printf@val+2)^(0+256),w
  3885  0191  1D03               	skipz
  3886  0192  299D               	goto	u2765
  3887  0193  0021               	movlb	1	; select bank1
  3888  0194  086B               	movf	(??_printf+3)^(0+128),w
  3889  0195  0022               	movlb	2	; select bank2
  3890  0196  025F               	subwf	(printf@val+1)^(0+256),w
  3891  0197  1D03               	skipz
  3892  0198  299D               	goto	u2765
  3893  0199  0021               	movlb	1	; select bank1
  3894  019A  086A               	movf	(??_printf+2)^(0+128),w
  3895  019B  0022               	movlb	2	; select bank2
  3896  019C  025E               	subwf	printf@val^(0+256),w
  3897  019D                     u2765:	
  3898  019D  1C03               	btfss	3,0
  3899  019E  29A9               	goto	l3120
  3900                           
  3901                           ;doprnt.c: 1307: break;
  3902  019F  3001               	movlw	1
  3903  01A0  0021               	movlb	1	; select bank1
  3904  01A1  00E8               	movwf	??_printf^(0+128)
  3905  01A2  0868               	movf	??_printf^(0+128),w
  3906  01A3  0022               	movlb	2	; select bank2
  3907  01A4  07E6               	addwf	printf@c^(0+256),f
  3908  01A5  300A               	movlw	10
  3909  01A6  0666               	xorwf	printf@c^(0+256),w
  3910  01A7  1D03               	btfss	3,2
  3911  01A8  2972               	goto	l3114
  3912  01A9                     l3120:	
  3913                           
  3914                           ;doprnt.c: 1345: if(width && flag & 0x03)
  3915  01A9  0864               	movf	printf@width^(0+256),w
  3916  01AA  0465               	iorwf	(printf@width+1)^(0+256),w
  3917  01AB  1903               	btfsc	3,2
  3918  01AC  29B5               	goto	l569
  3919  01AD  0863               	movf	printf@flag^(0+256),w
  3920  01AE  3903               	andlw	3
  3921  01AF  1903               	btfsc	3,2
  3922  01B0  29B5               	goto	l569
  3923                           
  3924                           ;doprnt.c: 1346: width--;
  3925  01B1  30FF               	movlw	255
  3926  01B2  07E4               	addwf	printf@width^(0+256),f
  3927  01B3  30FF               	movlw	255
  3928  01B4  3DE5               	addwfc	(printf@width+1)^(0+256),f
  3929  01B5                     l569:	
  3930                           
  3931                           ;doprnt.c: 1381: if(width > c)
  3932  01B5  0866               	movf	printf@c^(0+256),w
  3933  01B6  0021               	movlb	1	; select bank1
  3934  01B7  00E8               	movwf	??_printf^(0+128)
  3935  01B8  01E9               	clrf	(??_printf^(0+128)+1)
  3936  01B9  1BE8               	btfsc	??_printf^(0+128),7
  3937  01BA  03E9               	decf	(??_printf^(0+128)+1),f
  3938  01BB  0869               	movf	(??_printf+1)^(0+128),w
  3939  01BC  3A80               	xorlw	128
  3940  01BD  00EA               	movwf	(??_printf+2)^(0+128)
  3941  01BE  0022               	movlb	2	; select bank2
  3942  01BF  0865               	movf	(printf@width+1)^(0+256),w
  3943  01C0  3A80               	xorlw	128
  3944  01C1  0021               	movlb	1	; select bank1
  3945  01C2  026A               	subwf	(??_printf+2)^(0+128),w
  3946  01C3  1D03               	skipz
  3947  01C4  29C9               	goto	u2805
  3948  01C5  0022               	movlb	2	; select bank2
  3949  01C6  0864               	movf	printf@width^(0+256),w
  3950  01C7  0021               	movlb	1	; select bank1
  3951  01C8  0268               	subwf	??_printf^(0+128),w
  3952  01C9                     u2805:	
  3953  01C9  1803               	skipnc
  3954  01CA  29DA               	goto	l3128
  3955                           
  3956                           ;doprnt.c: 1382: width -= c;
  3957  01CB  0022               	movlb	2	; select bank2
  3958  01CC  0866               	movf	printf@c^(0+256),w
  3959  01CD  0021               	movlb	1	; select bank1
  3960  01CE  00E8               	movwf	??_printf^(0+128)
  3961  01CF  01E9               	clrf	(??_printf^(0+128)+1)
  3962  01D0  1BE8               	btfsc	??_printf^(0+128),7
  3963  01D1  03E9               	decf	(??_printf^(0+128)+1),f
  3964  01D2  0868               	movf	??_printf^(0+128),w
  3965  01D3  0022               	movlb	2	; select bank2
  3966  01D4  02E4               	subwf	printf@width^(0+256),f
  3967  01D5  0021               	movlb	1	; select bank1
  3968  01D6  0869               	movf	(??_printf+1)^(0+128),w
  3969  01D7  0022               	movlb	2	; select bank2
  3970  01D8  3BE5               	subwfb	(printf@width+1)^(0+256),f
  3971  01D9  29DD               	goto	l3130
  3972  01DA                     l3128:	
  3973                           
  3974                           ;doprnt.c: 1383: else
  3975                           ;doprnt.c: 1384: width = 0;
  3976  01DA  0022               	movlb	2	; select bank2
  3977  01DB  01E4               	clrf	printf@width^(0+256)
  3978  01DC  01E5               	clrf	(printf@width+1)^(0+256)
  3979  01DD                     l3130:	
  3980                           
  3981                           ;doprnt.c: 1387: if(flag & 0x04) {
  3982  01DD  1D63               	btfss	printf@flag^(0+256),2
  3983  01DE  29F6               	goto	l3142
  3984                           
  3985                           ;doprnt.c: 1392: if(flag & 0x03)
  3986  01DF  0863               	movf	printf@flag^(0+256),w
  3987  01E0  3903               	andlw	3
  3988  01E1  1903               	btfsc	3,2
  3989  01E2  29E7               	goto	l3136
  3990                           
  3991                           ;doprnt.c: 1393: (putch('-') );
  3992  01E3  302D               	movlw	45
  3993  01E4  318C  247D  3180   	fcall	_putch
  3994  01E7                     l3136:	
  3995                           
  3996                           ;doprnt.c: 1415: if(width)
  3997  01E7  0022               	movlb	2	; select bank2
  3998  01E8                     L4:	
  3999  01E8  0864               	movf	printf@width^(0+256),w
  4000  01E9  0465               	iorwf	(printf@width+1)^(0+256),w
  4001  01EA  1903               	btfsc	3,2
  4002  01EB  2A0F               	goto	l3152
  4003                           
  4004                           ;doprnt.c: 1417: (putch('0') );
  4005                           
  4006                           ;doprnt.c: 1416: do
  4007  01EC  3030               	movlw	48
  4008  01ED  318C  247D  3180   	fcall	_putch
  4009                           
  4010                           ;doprnt.c: 1418: while(--width);
  4011  01F0  30FF               	movlw	255
  4012  01F1  0022               	movlb	2	; select bank2
  4013  01F2  07E4               	addwf	printf@width^(0+256),f
  4014  01F3  30FF               	movlw	255
  4015  01F4  3DE5               	addwfc	(printf@width+1)^(0+256),f
  4016  01F5  29E8               	goto	L4
  4017  01F6                     l3142:	
  4018                           ;doprnt.c: 1420: } else
  4019                           
  4020                           
  4021                           ;doprnt.c: 1422: {
  4022                           ;doprnt.c: 1424: if(width
  4023                           ;doprnt.c: 1428: )
  4024  01F6  0864               	movf	printf@width^(0+256),w
  4025  01F7  0465               	iorwf	(printf@width+1)^(0+256),w
  4026  01F8  1903               	btfsc	3,2
  4027  01F9  2A07               	goto	l3148
  4028  01FA                     l3144:	
  4029                           ;doprnt.c: 1429: do
  4030                           
  4031                           
  4032                           ;doprnt.c: 1430: (putch(' ') );
  4033  01FA  3020               	movlw	32
  4034  01FB  318C  247D  3180   	fcall	_putch
  4035                           
  4036                           ;doprnt.c: 1431: while(--width);
  4037  01FE  30FF               	movlw	255
  4038  01FF  0022               	movlb	2	; select bank2
  4039  0200  07E4               	addwf	printf@width^(0+256),f
  4040  0201  30FF               	movlw	255
  4041  0202  3DE5               	addwfc	(printf@width+1)^(0+256),f
  4042  0203  0864               	movf	printf@width^(0+256),w
  4043  0204  0465               	iorwf	(printf@width+1)^(0+256),w
  4044  0205  1D03               	btfss	3,2
  4045  0206  29FA               	goto	l3144
  4046  0207                     l3148:	
  4047                           
  4048                           ;doprnt.c: 1438: if(flag & 0x03)
  4049  0207  0863               	movf	printf@flag^(0+256),w
  4050  0208  3903               	andlw	3
  4051  0209  1903               	btfsc	3,2
  4052  020A  2A0F               	goto	l3152
  4053                           
  4054                           ;doprnt.c: 1439: (putch('-') );
  4055  020B  302D               	movlw	45
  4056  020C  318C  247D  3180   	fcall	_putch
  4057  020F                     l3152:	
  4058                           
  4059                           ;doprnt.c: 1469: }
  4060                           ;doprnt.c: 1472: prec = c;
  4061  020F  0022               	movlb	2	; select bank2
  4062  0210  0866               	movf	printf@c^(0+256),w
  4063  0211  00DC               	movwf	printf@prec^(0+256)
  4064  0212  01DD               	clrf	(printf@prec+1)^(0+256)
  4065  0213  1BDC               	btfsc	printf@prec^(0+256),7
  4066  0214  03DD               	decf	(printf@prec+1)^(0+256),f
  4067  0215                     l3158:	
  4068                           ;doprnt.c: 1474: while(prec--) {
  4069                           
  4070  0215  30FF               	movlw	255
  4071  0216  0022               	movlb	2	; select bank2
  4072  0217  07DC               	addwf	printf@prec^(0+256),f
  4073  0218  30FF               	movlw	255
  4074  0219  3DDD               	addwfc	(printf@prec+1)^(0+256),f
  4075  021A  0A5C               	incf	printf@prec^(0+256),w
  4076  021B  1903               	btfsc	3,2
  4077  021C  0A5D               	incf	(printf@prec+1)^(0+256),w
  4078  021D  1903               	btfsc	3,2
  4079  021E  285E               	goto	l3160
  4080                           
  4081                           ;doprnt.c: 1478: {
  4082                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  4083  021F  3000               	movlw	0
  4084  0220  0020               	movlb	0	; select bank0
  4085  0221  00BF               	movwf	___llmod@divisor+3
  4086  0222  3000               	movlw	0
  4087  0223  00BE               	movwf	___llmod@divisor+2
  4088  0224  3000               	movlw	0
  4089  0225  00BD               	movwf	___llmod@divisor+1
  4090  0226  300A               	movlw	10
  4091  0227  00BC               	movwf	___llmod@divisor
  4092  0228  0022               	movlb	2	; select bank2
  4093  0229  085D               	movf	(printf@prec+1)^(0+256),w
  4094  022A  0085               	movwf	5
  4095  022B  085C               	movf	printf@prec^(0+256),w
  4096  022C  0084               	movwf	4
  4097  022D  3584               	lslf	4,f
  4098  022E  0D85               	rlf	5,f
  4099  022F  3584               	lslf	4,f
  4100  0230  0D85               	rlf	5,f
  4101  0231  306B               	movlw	low (_dpowers| (0+32768))
  4102  0232  0784               	addwf	4,f
  4103  0233  3082               	movlw	high (_dpowers| (0+32768))
  4104  0234  3D85               	addwfc	5,f
  4105  0235  3F00               	moviw [0]fsr0
  4106  0236  0020               	movlb	0	; select bank0
  4107  0237  00AE               	movwf	___lldiv@divisor
  4108  0238  3F01               	moviw [1]fsr0
  4109  0239  00AF               	movwf	___lldiv@divisor+1
  4110  023A  3F02               	moviw [2]fsr0
  4111  023B  00B0               	movwf	___lldiv@divisor+2
  4112  023C  3F03               	moviw [3]fsr0
  4113  023D  00B1               	movwf	___lldiv@divisor+3
  4114  023E  0022               	movlb	2	; select bank2
  4115  023F  0861               	movf	(printf@val+3)^(0+256),w
  4116  0240  0020               	movlb	0	; select bank0
  4117  0241  00B5               	movwf	___lldiv@dividend+3
  4118  0242  0022               	movlb	2	; select bank2
  4119  0243  0860               	movf	(printf@val+2)^(0+256),w
  4120  0244  0020               	movlb	0	; select bank0
  4121  0245  00B4               	movwf	___lldiv@dividend+2
  4122  0246  0022               	movlb	2	; select bank2
  4123  0247  085F               	movf	(printf@val+1)^(0+256),w
  4124  0248  0020               	movlb	0	; select bank0
  4125  0249  00B3               	movwf	___lldiv@dividend+1
  4126  024A  0022               	movlb	2	; select bank2
  4127  024B  085E               	movf	printf@val^(0+256),w
  4128  024C  0020               	movlb	0	; select bank0
  4129  024D  00B2               	movwf	___lldiv@dividend
  4130  024E  3186  26BD  3180   	fcall	___lldiv
  4131  0251  0020               	movlb	0	; select bank0
  4132  0252  0831               	movf	?___lldiv+3,w
  4133  0253  00C3               	movwf	___llmod@dividend+3
  4134  0254  0830               	movf	?___lldiv+2,w
  4135  0255  00C2               	movwf	___llmod@dividend+2
  4136  0256  082F               	movf	?___lldiv+1,w
  4137  0257  00C1               	movwf	___llmod@dividend+1
  4138  0258  082E               	movf	?___lldiv,w
  4139  0259  00C0               	movwf	___llmod@dividend
  4140  025A  318F  27BD  3180   	fcall	___llmod
  4141  025D  0020               	movlb	0	; select bank0
  4142  025E  083C               	movf	?___llmod,w
  4143  025F  3E30               	addlw	48
  4144  0260  0021               	movlb	1	; select bank1
  4145  0261  00E8               	movwf	??_printf^(0+128)
  4146  0262  0868               	movf	??_printf^(0+128),w
  4147  0263  0022               	movlb	2	; select bank2
  4148  0264  00E6               	movwf	printf@c^(0+256)
  4149                           
  4150                           ;doprnt.c: 1523: }
  4151                           ;doprnt.c: 1524: (putch(c) );
  4152  0265  0866               	movf	printf@c^(0+256),w
  4153  0266  318C  247D  3180   	fcall	_putch
  4154  0269  2A15               	goto	l3158
  4155  026A                     l586:	
  4156                           ;doprnt.c: 1540: return 0;
  4157                           ;	Return value of _printf is never used
  4158                           
  4159                           ;doprnt.c: 1525: }
  4160                           ;doprnt.c: 1533: }
  4161                           ;doprnt.c: 1535: alldone:
  4162                           
  4163  026A  0008               	return
  4164  026B                     __end_of_printf:	
  4165                           
  4166                           	psect	text2
  4167  0C7D                     __ptext2:	
  4168 ;; *************** function _putch *****************
  4169 ;; Defined at:
  4170 ;;		line 64 in file "LCD.c"
  4171 ;; Parameters:    Size  Location     Type
  4172 ;;  c               1    wreg     unsigned char 
  4173 ;; Auto vars:     Size  Location     Type
  4174 ;;  c               1   17[BANK0 ] unsigned char 
  4175 ;; Return value:  Size  Location     Type
  4176 ;;                  1    wreg      void 
  4177 ;; Registers used:
  4178 ;;		wreg, status,2, status,0, pclath, cstack
  4179 ;; Tracked objects:
  4180 ;;		On entry : 0/0
  4181 ;;		On exit  : 0/0
  4182 ;;		Unchanged: 0/0
  4183 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  4184 ;;      Params:         0       0       0       0       0       0
  4185 ;;      Locals:         0       1       0       0       0       0
  4186 ;;      Temps:          0       0       0       0       0       0
  4187 ;;      Totals:         0       1       0       0       0       0
  4188 ;;Total ram usage:        1 bytes
  4189 ;; Hardware stack levels used:    1
  4190 ;; Hardware stack levels required when called:    4
  4191 ;; This function calls:
  4192 ;;		_LCD_WriteData
  4193 ;; This function is called by:
  4194 ;;		_printf
  4195 ;; This function uses a non-reentrant model
  4196 ;;
  4197                           
  4198                           
  4199                           ;psect for function _putch
  4200  0C7D                     _putch:	
  4201                           
  4202                           ;incstack = 0
  4203                           ; Regs used in _putch: [wreg+status,2+status,0+pclath+cstack]
  4204                           ;putch@c stored from wreg
  4205  0C7D  0020               	movlb	0	; select bank0
  4206  0C7E  00B1               	movwf	putch@c
  4207                           
  4208                           ;LCD.c: 66: LATA3 = 1;
  4209  0C7F  0022               	movlb	2	; select bank2
  4210  0C80  158C               	bsf	12,3	;volatile
  4211                           
  4212                           ;LCD.c: 67: LCD_WriteData(c);
  4213  0C81  0020               	movlb	0	; select bank0
  4214  0C82  0831               	movf	putch@c,w
  4215  0C83  318F  2780         	fcall	_LCD_WriteData
  4216  0C85  0008               	return
  4217  0C86                     __end_of_putch:	
  4218                           
  4219                           	psect	text3
  4220  0CDB                     __ptext3:	
  4221 ;; *************** function _isdigit *****************
  4222 ;; Defined at:
  4223 ;;		line 8 in file "/opt/microchip/xc8/v1.41/sources/common/isdigit.c"
  4224 ;; Parameters:    Size  Location     Type
  4225 ;;  c               1    wreg     unsigned char 
  4226 ;; Auto vars:     Size  Location     Type
  4227 ;;  c               1   15[BANK0 ] unsigned char 
  4228 ;; Return value:  Size  Location     Type
  4229 ;;		None               void
  4230 ;; Registers used:
  4231 ;;		wreg, status,2, status,0
  4232 ;; Tracked objects:
  4233 ;;		On entry : 0/0
  4234 ;;		On exit  : 0/0
  4235 ;;		Unchanged: 0/0
  4236 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  4237 ;;      Params:         0       0       0       0       0       0
  4238 ;;      Locals:         0       2       0       0       0       0
  4239 ;;      Temps:          0       0       0       0       0       0
  4240 ;;      Totals:         0       2       0       0       0       0
  4241 ;;Total ram usage:        2 bytes
  4242 ;; Hardware stack levels used:    1
  4243 ;; Hardware stack levels required when called:    3
  4244 ;; This function calls:
  4245 ;;		Nothing
  4246 ;; This function is called by:
  4247 ;;		_printf
  4248 ;; This function uses a non-reentrant model
  4249 ;;
  4250                           
  4251                           
  4252                           ;psect for function _isdigit
  4253  0CDB                     _isdigit:	
  4254                           
  4255                           ;incstack = 0
  4256                           ; Regs used in _isdigit: [wreg+status,2+status,0]
  4257                           ;isdigit@c stored from wreg
  4258  0CDB  0020               	movlb	0	; select bank0
  4259  0CDC  00AF               	movwf	isdigit@c
  4260  0CDD  01AE               	clrf	_isdigit$788
  4261  0CDE  303A               	movlw	58
  4262  0CDF  022F               	subwf	isdigit@c,w
  4263  0CE0  1803               	skipnc
  4264  0CE1  2CE8               	goto	l2936
  4265  0CE2  3030               	movlw	48
  4266  0CE3  022F               	subwf	isdigit@c,w
  4267  0CE4  1C03               	skipc
  4268  0CE5  2CE8               	goto	l2936
  4269  0CE6  01AE               	clrf	_isdigit$788
  4270  0CE7  0AAE               	incf	_isdigit$788,f
  4271  0CE8                     l2936:	
  4272  0CE8  0C2E               	rrf	_isdigit$788,w
  4273  0CE9  0008               	return
  4274  0CEA                     __end_of_isdigit:	
  4275                           
  4276                           	psect	text4
  4277  0DE7                     __ptext4:	
  4278 ;; *************** function ___wmul *****************
  4279 ;; Defined at:
  4280 ;;		line 15 in file "/opt/microchip/xc8/v1.41/sources/common/Umul16.c"
  4281 ;; Parameters:    Size  Location     Type
  4282 ;;  multiplier      2   14[BANK0 ] unsigned int 
  4283 ;;  multiplicand    2   16[BANK0 ] unsigned int 
  4284 ;; Auto vars:     Size  Location     Type
  4285 ;;  product         2   18[BANK0 ] unsigned int 
  4286 ;; Return value:  Size  Location     Type
  4287 ;;                  2   14[BANK0 ] unsigned int 
  4288 ;; Registers used:
  4289 ;;		wreg, status,2, status,0
  4290 ;; Tracked objects:
  4291 ;;		On entry : 0/0
  4292 ;;		On exit  : 0/0
  4293 ;;		Unchanged: 0/0
  4294 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  4295 ;;      Params:         0       4       0       0       0       0
  4296 ;;      Locals:         0       2       0       0       0       0
  4297 ;;      Temps:          0       0       0       0       0       0
  4298 ;;      Totals:         0       6       0       0       0       0
  4299 ;;Total ram usage:        6 bytes
  4300 ;; Hardware stack levels used:    1
  4301 ;; Hardware stack levels required when called:    3
  4302 ;; This function calls:
  4303 ;;		Nothing
  4304 ;; This function is called by:
  4305 ;;		_printf
  4306 ;; This function uses a non-reentrant model
  4307 ;;
  4308                           
  4309                           
  4310                           ;psect for function ___wmul
  4311  0DE7                     ___wmul:	
  4312                           
  4313                           ;incstack = 0
  4314                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  4315  0DE7  0020               	movlb	0	; select bank0
  4316  0DE8  01B2               	clrf	___wmul@product
  4317  0DE9  01B3               	clrf	___wmul@product+1
  4318  0DEA                     l2942:	
  4319  0DEA  1C2E               	btfss	___wmul@multiplier,0
  4320  0DEB  2DF0               	goto	l711
  4321  0DEC  0830               	movf	___wmul@multiplicand,w
  4322  0DED  07B2               	addwf	___wmul@product,f
  4323  0DEE  0831               	movf	___wmul@multiplicand+1,w
  4324  0DEF  3DB3               	addwfc	___wmul@product+1,f
  4325  0DF0                     l711:	
  4326  0DF0  3001               	movlw	1
  4327  0DF1                     u2515:	
  4328  0DF1  35B0               	lslf	___wmul@multiplicand,f
  4329  0DF2  0DB1               	rlf	___wmul@multiplicand+1,f
  4330  0DF3  0B89               	decfsz	9,f
  4331  0DF4  2DF1               	goto	u2515
  4332  0DF5  3001               	movlw	1
  4333  0DF6                     u2525:	
  4334  0DF6  36AF               	lsrf	___wmul@multiplier+1,f
  4335  0DF7  0CAE               	rrf	___wmul@multiplier,f
  4336  0DF8  0B89               	decfsz	9,f
  4337  0DF9  2DF6               	goto	u2525
  4338  0DFA  082E               	movf	___wmul@multiplier,w
  4339  0DFB  042F               	iorwf	___wmul@multiplier+1,w
  4340  0DFC  1D03               	btfss	3,2
  4341  0DFD  2DEA               	goto	l2942
  4342  0DFE  0833               	movf	___wmul@product+1,w
  4343  0DFF  00AF               	movwf	?___wmul+1
  4344  0E00  0832               	movf	___wmul@product,w
  4345  0E01  00AE               	movwf	?___wmul
  4346  0E02  0008               	return
  4347  0E03                     __end_of___wmul:	
  4348                           
  4349                           	psect	text5
  4350  0FBD                     __ptext5:	
  4351 ;; *************** function ___llmod *****************
  4352 ;; Defined at:
  4353 ;;		line 6 in file "/opt/microchip/xc8/v1.41/sources/common/llmod.c"
  4354 ;; Parameters:    Size  Location     Type
  4355 ;;  divisor         4   28[BANK0 ] unsigned long 
  4356 ;;  dividend        4   32[BANK0 ] unsigned long 
  4357 ;; Auto vars:     Size  Location     Type
  4358 ;;  counter         1   37[BANK0 ] unsigned char 
  4359 ;; Return value:  Size  Location     Type
  4360 ;;                  4   28[BANK0 ] unsigned long 
  4361 ;; Registers used:
  4362 ;;		wreg, status,2, status,0
  4363 ;; Tracked objects:
  4364 ;;		On entry : 0/0
  4365 ;;		On exit  : 0/0
  4366 ;;		Unchanged: 0/0
  4367 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  4368 ;;      Params:         0       8       0       0       0       0
  4369 ;;      Locals:         0       1       0       0       0       0
  4370 ;;      Temps:          0       1       0       0       0       0
  4371 ;;      Totals:         0      10       0       0       0       0
  4372 ;;Total ram usage:       10 bytes
  4373 ;; Hardware stack levels used:    1
  4374 ;; Hardware stack levels required when called:    3
  4375 ;; This function calls:
  4376 ;;		Nothing
  4377 ;; This function is called by:
  4378 ;;		_printf
  4379 ;; This function uses a non-reentrant model
  4380 ;;
  4381                           
  4382                           
  4383                           ;psect for function ___llmod
  4384  0FBD                     ___llmod:	
  4385                           
  4386                           ;incstack = 0
  4387                           ; Regs used in ___llmod: [wreg+status,2+status,0]
  4388  0FBD  0020               	movlb	0	; select bank0
  4389  0FBE  083F               	movf	___llmod@divisor+3,w
  4390  0FBF  043E               	iorwf	___llmod@divisor+2,w
  4391  0FC0  043D               	iorwf	___llmod@divisor+1,w
  4392  0FC1  043C               	iorwf	___llmod@divisor,w
  4393  0FC2  1903               	skipnz
  4394  0FC3  2FF7               	goto	l2994
  4395  0FC4  01C5               	clrf	___llmod@counter
  4396  0FC5  0AC5               	incf	___llmod@counter,f
  4397  0FC6                     l2984:	
  4398  0FC6  1BBF               	btfsc	___llmod@divisor+3,7
  4399  0FC7  2FD4               	goto	l2986
  4400  0FC8  3001               	movlw	1
  4401  0FC9                     u2625:	
  4402  0FC9  35BC               	lslf	___llmod@divisor,f
  4403  0FCA  0DBD               	rlf	___llmod@divisor+1,f
  4404  0FCB  0DBE               	rlf	___llmod@divisor+2,f
  4405  0FCC  0DBF               	rlf	___llmod@divisor+3,f
  4406  0FCD  0B89               	decfsz	9,f
  4407  0FCE  2FC9               	goto	u2625
  4408  0FCF  3001               	movlw	1
  4409  0FD0  00C4               	movwf	??___llmod
  4410  0FD1  0844               	movf	??___llmod,w
  4411  0FD2  07C5               	addwf	___llmod@counter,f
  4412  0FD3  2FC6               	goto	l2984
  4413  0FD4                     l2986:	
  4414  0FD4  083F               	movf	___llmod@divisor+3,w
  4415  0FD5  0243               	subwf	___llmod@dividend+3,w
  4416  0FD6  1D03               	skipz
  4417  0FD7  2FE2               	goto	u2645
  4418  0FD8  083E               	movf	___llmod@divisor+2,w
  4419  0FD9  0242               	subwf	___llmod@dividend+2,w
  4420  0FDA  1D03               	skipz
  4421  0FDB  2FE2               	goto	u2645
  4422  0FDC  083D               	movf	___llmod@divisor+1,w
  4423  0FDD  0241               	subwf	___llmod@dividend+1,w
  4424  0FDE  1D03               	skipz
  4425  0FDF  2FE2               	goto	u2645
  4426  0FE0  083C               	movf	___llmod@divisor,w
  4427  0FE1  0240               	subwf	___llmod@dividend,w
  4428  0FE2                     u2645:	
  4429  0FE2  1C03               	skipc
  4430  0FE3  2FEC               	goto	l2990
  4431  0FE4  083C               	movf	___llmod@divisor,w
  4432  0FE5  02C0               	subwf	___llmod@dividend,f
  4433  0FE6  083D               	movf	___llmod@divisor+1,w
  4434  0FE7  3BC1               	subwfb	___llmod@dividend+1,f
  4435  0FE8  083E               	movf	___llmod@divisor+2,w
  4436  0FE9  3BC2               	subwfb	___llmod@dividend+2,f
  4437  0FEA  083F               	movf	___llmod@divisor+3,w
  4438  0FEB  3BC3               	subwfb	___llmod@dividend+3,f
  4439  0FEC                     l2990:	
  4440  0FEC  3001               	movlw	1
  4441  0FED                     u2655:	
  4442  0FED  36BF               	lsrf	___llmod@divisor+3,f
  4443  0FEE  0CBE               	rrf	___llmod@divisor+2,f
  4444  0FEF  0CBD               	rrf	___llmod@divisor+1,f
  4445  0FF0  0CBC               	rrf	___llmod@divisor,f
  4446  0FF1  0B89               	decfsz	9,f
  4447  0FF2  2FED               	goto	u2655
  4448  0FF3  3001               	movlw	1
  4449  0FF4  02C5               	subwf	___llmod@counter,f
  4450  0FF5  1D03               	btfss	3,2
  4451  0FF6  2FD4               	goto	l2986
  4452  0FF7                     l2994:	
  4453  0FF7  0843               	movf	___llmod@dividend+3,w
  4454  0FF8  00BF               	movwf	?___llmod+3
  4455  0FF9  0842               	movf	___llmod@dividend+2,w
  4456  0FFA  00BE               	movwf	?___llmod+2
  4457  0FFB  0841               	movf	___llmod@dividend+1,w
  4458  0FFC  00BD               	movwf	?___llmod+1
  4459  0FFD  0840               	movf	___llmod@dividend,w
  4460  0FFE  00BC               	movwf	?___llmod
  4461  0FFF  0008               	return
  4462  1000                     __end_of___llmod:	
  4463                           
  4464                           	psect	text6
  4465  06BD                     __ptext6:	
  4466 ;; *************** function ___lldiv *****************
  4467 ;; Defined at:
  4468 ;;		line 6 in file "/opt/microchip/xc8/v1.41/sources/common/lldiv.c"
  4469 ;; Parameters:    Size  Location     Type
  4470 ;;  divisor         4   14[BANK0 ] unsigned long 
  4471 ;;  dividend        4   18[BANK0 ] unsigned long 
  4472 ;; Auto vars:     Size  Location     Type
  4473 ;;  quotient        4   23[BANK0 ] unsigned long 
  4474 ;;  counter         1   27[BANK0 ] unsigned char 
  4475 ;; Return value:  Size  Location     Type
  4476 ;;                  4   14[BANK0 ] unsigned long 
  4477 ;; Registers used:
  4478 ;;		wreg, status,2, status,0
  4479 ;; Tracked objects:
  4480 ;;		On entry : 0/0
  4481 ;;		On exit  : 0/0
  4482 ;;		Unchanged: 0/0
  4483 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  4484 ;;      Params:         0       8       0       0       0       0
  4485 ;;      Locals:         0       5       0       0       0       0
  4486 ;;      Temps:          0       1       0       0       0       0
  4487 ;;      Totals:         0      14       0       0       0       0
  4488 ;;Total ram usage:       14 bytes
  4489 ;; Hardware stack levels used:    1
  4490 ;; Hardware stack levels required when called:    3
  4491 ;; This function calls:
  4492 ;;		Nothing
  4493 ;; This function is called by:
  4494 ;;		_printf
  4495 ;; This function uses a non-reentrant model
  4496 ;;
  4497                           
  4498                           
  4499                           ;psect for function ___lldiv
  4500  06BD                     ___lldiv:	
  4501                           
  4502                           ;incstack = 0
  4503                           ; Regs used in ___lldiv: [wreg+status,2+status,0]
  4504  06BD  3000               	movlw	0
  4505  06BE  0020               	movlb	0	; select bank0
  4506  06BF  00BA               	movwf	___lldiv@quotient+3
  4507  06C0  3000               	movlw	0
  4508  06C1  00B9               	movwf	___lldiv@quotient+2
  4509  06C2  3000               	movlw	0
  4510  06C3  00B8               	movwf	___lldiv@quotient+1
  4511  06C4  3000               	movlw	0
  4512  06C5  00B7               	movwf	___lldiv@quotient
  4513  06C6  0831               	movf	___lldiv@divisor+3,w
  4514  06C7  0430               	iorwf	___lldiv@divisor+2,w
  4515  06C8  042F               	iorwf	___lldiv@divisor+1,w
  4516  06C9  042E               	iorwf	___lldiv@divisor,w
  4517  06CA  1903               	skipnz
  4518  06CB  2F07               	goto	l2974
  4519  06CC  01BB               	clrf	___lldiv@counter
  4520  06CD  0ABB               	incf	___lldiv@counter,f
  4521  06CE                     l2960:	
  4522  06CE  1BB1               	btfsc	___lldiv@divisor+3,7
  4523  06CF  2EDC               	goto	l2962
  4524  06D0  3001               	movlw	1
  4525  06D1                     u2555:	
  4526  06D1  35AE               	lslf	___lldiv@divisor,f
  4527  06D2  0DAF               	rlf	___lldiv@divisor+1,f
  4528  06D3  0DB0               	rlf	___lldiv@divisor+2,f
  4529  06D4  0DB1               	rlf	___lldiv@divisor+3,f
  4530  06D5  0B89               	decfsz	9,f
  4531  06D6  2ED1               	goto	u2555
  4532  06D7  3001               	movlw	1
  4533  06D8  00B6               	movwf	??___lldiv
  4534  06D9  0836               	movf	??___lldiv,w
  4535  06DA  07BB               	addwf	___lldiv@counter,f
  4536  06DB  2ECE               	goto	l2960
  4537  06DC                     l2962:	
  4538  06DC  3001               	movlw	1
  4539  06DD                     u2575:	
  4540  06DD  35B7               	lslf	___lldiv@quotient,f
  4541  06DE  0DB8               	rlf	___lldiv@quotient+1,f
  4542  06DF  0DB9               	rlf	___lldiv@quotient+2,f
  4543  06E0  0DBA               	rlf	___lldiv@quotient+3,f
  4544  06E1  0B89               	decfsz	9,f
  4545  06E2  2EDD               	goto	u2575
  4546  06E3  0831               	movf	___lldiv@divisor+3,w
  4547  06E4  0235               	subwf	___lldiv@dividend+3,w
  4548  06E5  1D03               	skipz
  4549  06E6  2EF1               	goto	u2585
  4550  06E7  0830               	movf	___lldiv@divisor+2,w
  4551  06E8  0234               	subwf	___lldiv@dividend+2,w
  4552  06E9  1D03               	skipz
  4553  06EA  2EF1               	goto	u2585
  4554  06EB  082F               	movf	___lldiv@divisor+1,w
  4555  06EC  0233               	subwf	___lldiv@dividend+1,w
  4556  06ED  1D03               	skipz
  4557  06EE  2EF1               	goto	u2585
  4558  06EF  082E               	movf	___lldiv@divisor,w
  4559  06F0  0232               	subwf	___lldiv@dividend,w
  4560  06F1                     u2585:	
  4561  06F1  1C03               	skipc
  4562  06F2  2EFC               	goto	l2970
  4563  06F3  082E               	movf	___lldiv@divisor,w
  4564  06F4  02B2               	subwf	___lldiv@dividend,f
  4565  06F5  082F               	movf	___lldiv@divisor+1,w
  4566  06F6  3BB3               	subwfb	___lldiv@dividend+1,f
  4567  06F7  0830               	movf	___lldiv@divisor+2,w
  4568  06F8  3BB4               	subwfb	___lldiv@dividend+2,f
  4569  06F9  0831               	movf	___lldiv@divisor+3,w
  4570  06FA  3BB5               	subwfb	___lldiv@dividend+3,f
  4571  06FB  1437               	bsf	___lldiv@quotient,0
  4572  06FC                     l2970:	
  4573  06FC  3001               	movlw	1
  4574  06FD                     u2595:	
  4575  06FD  36B1               	lsrf	___lldiv@divisor+3,f
  4576  06FE  0CB0               	rrf	___lldiv@divisor+2,f
  4577  06FF  0CAF               	rrf	___lldiv@divisor+1,f
  4578  0700  0CAE               	rrf	___lldiv@divisor,f
  4579  0701  0B89               	decfsz	9,f
  4580  0702  2EFD               	goto	u2595
  4581  0703  3001               	movlw	1
  4582  0704  02BB               	subwf	___lldiv@counter,f
  4583  0705  1D03               	btfss	3,2
  4584  0706  2EDC               	goto	l2962
  4585  0707                     l2974:	
  4586  0707  083A               	movf	___lldiv@quotient+3,w
  4587  0708  00B1               	movwf	?___lldiv+3
  4588  0709  0839               	movf	___lldiv@quotient+2,w
  4589  070A  00B0               	movwf	?___lldiv+2
  4590  070B  0838               	movf	___lldiv@quotient+1,w
  4591  070C  00AF               	movwf	?___lldiv+1
  4592  070D  0837               	movf	___lldiv@quotient,w
  4593  070E  00AE               	movwf	?___lldiv
  4594  070F  0008               	return
  4595  0710                     __end_of___lldiv:	
  4596                           
  4597                           	psect	text7
  4598  07EB                     __ptext7:	
  4599 ;; *************** function _mTouch_Init *****************
  4600 ;; Defined at:
  4601 ;;		line 12 in file "mTouch.c"
  4602 ;; Parameters:    Size  Location     Type
  4603 ;;		None
  4604 ;; Auto vars:     Size  Location     Type
  4605 ;;		None
  4606 ;; Return value:  Size  Location     Type
  4607 ;;                  1    wreg      void 
  4608 ;; Registers used:
  4609 ;;		wreg, status,2, status,0, pclath, cstack
  4610 ;; Tracked objects:
  4611 ;;		On entry : 0/0
  4612 ;;		On exit  : 0/0
  4613 ;;		Unchanged: 0/0
  4614 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  4615 ;;      Params:         0       0       0       0       0       0
  4616 ;;      Locals:         0       0       0       0       0       0
  4617 ;;      Temps:          0       1       0       0       0       0
  4618 ;;      Totals:         0       1       0       0       0       0
  4619 ;;Total ram usage:        1 bytes
  4620 ;; Hardware stack levels used:    1
  4621 ;; Hardware stack levels required when called:    4
  4622 ;; This function calls:
  4623 ;;		_mTouch_PortInit
  4624 ;; This function is called by:
  4625 ;;		_main
  4626 ;; This function uses a non-reentrant model
  4627 ;;
  4628                           
  4629                           
  4630                           ;psect for function _mTouch_Init
  4631  07EB                     _mTouch_Init:	
  4632                           
  4633                           ;mTouch.c: 14: mTouch_PortInit();
  4634                           
  4635                           ;incstack = 0
  4636                           ; Regs used in _mTouch_Init: [wreg+status,2+status,0+pclath+cstack]
  4637  07EB  318C  24B2         	fcall	_mTouch_PortInit
  4638                           
  4639                           ;mTouch.c: 17: OPTION_REG |= (0x0<<0);
  4640  07ED  0021               	movlb	1	; select bank1
  4641  07EE  0815               	movf	21,w	;volatile
  4642                           
  4643                           ;mTouch.c: 18: OPTION_REG |= (0x1<<3);
  4644  07EF  1595               	bsf	21,3	;volatile
  4645                           
  4646                           ;mTouch.c: 19: OPTION_REG |= (0x1<<5);
  4647  07F0  1695               	bsf	21,5	;volatile
  4648                           
  4649                           ;mTouch.c: 20: TMR0 = 0x00;
  4650  07F1  0020               	movlb	0	; select bank0
  4651  07F2  0195               	clrf	21	;volatile
  4652                           
  4653                           ;mTouch.c: 23: CPSCON0 |= (0x01<<0);
  4654  07F3  141E               	bsf	30,0	;volatile
  4655                           
  4656                           ;mTouch.c: 24: CPSCON0 |= (0x03<<2);
  4657  07F4  300C               	movlw	12
  4658  07F5  00AF               	movwf	??_mTouch_Init
  4659  07F6  082F               	movf	??_mTouch_Init,w
  4660  07F7  049E               	iorwf	30,f	;volatile
  4661                           
  4662                           ;mTouch.c: 25: CPSCON0 &= ~(0x01<<7);;
  4663  07F8  307F               	movlw	127
  4664  07F9  00AF               	movwf	??_mTouch_Init
  4665  07FA  082F               	movf	??_mTouch_Init,w
  4666  07FB  059E               	andwf	30,f	;volatile
  4667                           
  4668                           ;mTouch.c: 26: CPSCON1 = (uint8_t)0x00;
  4669  07FC  019F               	clrf	31	;volatile
  4670  07FD  0008               	return
  4671  07FE                     __end_of_mTouch_Init:	
  4672                           
  4673                           	psect	text8
  4674  0CB2                     __ptext8:	
  4675 ;; *************** function _mTouch_PortInit *****************
  4676 ;; Defined at:
  4677 ;;		line 6 in file "mTouch.c"
  4678 ;; Parameters:    Size  Location     Type
  4679 ;;		None
  4680 ;; Auto vars:     Size  Location     Type
  4681 ;;		None
  4682 ;; Return value:  Size  Location     Type
  4683 ;;                  1    wreg      void 
  4684 ;; Registers used:
  4685 ;;		wreg, status,2, status,0
  4686 ;; Tracked objects:
  4687 ;;		On entry : 0/0
  4688 ;;		On exit  : 0/0
  4689 ;;		Unchanged: 0/0
  4690 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  4691 ;;      Params:         0       0       0       0       0       0
  4692 ;;      Locals:         0       0       0       0       0       0
  4693 ;;      Temps:          0       1       0       0       0       0
  4694 ;;      Totals:         0       1       0       0       0       0
  4695 ;;Total ram usage:        1 bytes
  4696 ;; Hardware stack levels used:    1
  4697 ;; Hardware stack levels required when called:    3
  4698 ;; This function calls:
  4699 ;;		Nothing
  4700 ;; This function is called by:
  4701 ;;		_mTouch_Init
  4702 ;; This function uses a non-reentrant model
  4703 ;;
  4704                           
  4705                           
  4706                           ;psect for function _mTouch_PortInit
  4707  0CB2                     _mTouch_PortInit:	
  4708                           
  4709                           ;mTouch.c: 8: TRISA |= (0x07);
  4710                           
  4711                           ;incstack = 0
  4712                           ; Regs used in _mTouch_PortInit: [wreg+status,2+status,0]
  4713  0CB2  3007               	movlw	7
  4714  0CB3  0020               	movlb	0	; select bank0
  4715  0CB4  00AE               	movwf	??_mTouch_PortInit
  4716  0CB5  082E               	movf	??_mTouch_PortInit,w
  4717  0CB6  0021               	movlb	1	; select bank1
  4718  0CB7  048C               	iorwf	12,f	;volatile
  4719                           
  4720                           ;mTouch.c: 9: ANSELA |= (0x07);
  4721  0CB8  3007               	movlw	7
  4722  0CB9  0020               	movlb	0	; select bank0
  4723  0CBA  00AE               	movwf	??_mTouch_PortInit
  4724  0CBB  082E               	movf	??_mTouch_PortInit,w
  4725  0CBC  0023               	movlb	3	; select bank3
  4726  0CBD  048C               	iorwf	12,f	;volatile
  4727  0CBE  0008               	return
  4728  0CBF                     __end_of_mTouch_PortInit:	
  4729                           
  4730                           	psect	text9
  4731  0763                     __ptext9:	
  4732 ;; *************** function _mTouch_Check *****************
  4733 ;; Defined at:
  4734 ;;		line 118 in file "main.c"
  4735 ;; Parameters:    Size  Location     Type
  4736 ;;  chan            1    wreg     unsigned char 
  4737 ;; Auto vars:     Size  Location     Type
  4738 ;;  chan            1   21[BANK0 ] unsigned char 
  4739 ;; Return value:  Size  Location     Type
  4740 ;;                  1    wreg      unsigned char 
  4741 ;; Registers used:
  4742 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4743 ;; Tracked objects:
  4744 ;;		On entry : 0/0
  4745 ;;		On exit  : 0/0
  4746 ;;		Unchanged: 0/0
  4747 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  4748 ;;      Params:         0       0       0       0       0       0
  4749 ;;      Locals:         0       1       0       0       0       0
  4750 ;;      Temps:          0       5       0       0       0       0
  4751 ;;      Totals:         0       6       0       0       0       0
  4752 ;;Total ram usage:        6 bytes
  4753 ;; Hardware stack levels used:    1
  4754 ;; Hardware stack levels required when called:    4
  4755 ;; This function calls:
  4756 ;;		_Buzzer_MiliSecond
  4757 ;; This function is called by:
  4758 ;;		_main
  4759 ;; This function uses a non-reentrant model
  4760 ;;
  4761                           
  4762                           
  4763                           ;psect for function _mTouch_Check
  4764  0763                     _mTouch_Check:	
  4765                           
  4766                           ;incstack = 0
  4767                           ; Regs used in _mTouch_Check: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4768                           ;mTouch_Check@chan stored from wreg
  4769  0763  0020               	movlb	0	; select bank0
  4770  0764  00B5               	movwf	mTouch_Check@chan
  4771                           
  4772                           ;main.c: 120: if(chan>2)return 0;
  4773  0765  3003               	movlw	3
  4774  0766  0235               	subwf	mTouch_Check@chan,w
  4775  0767  1C03               	skipc
  4776  0768  2F6B               	goto	l2670
  4777  0769  3000               	movlw	0
  4778  076A  0008               	return
  4779  076B                     l2670:	
  4780                           
  4781                           ;main.c: 122: if(((CPS_PreData[chan]-CPS_Data[chan])>200)&&!mTouch_Interval[chan])
  4782  076B  0835               	movf	mTouch_Check@chan,w
  4783  076C  3EAF               	addlw	(low (_CPS_Data| 0))& (0+255)
  4784  076D  0086               	movwf	6
  4785  076E  0187               	clrf	7
  4786  076F  0801               	movf	1,w
  4787  0770  00B0               	movwf	??_mTouch_Check
  4788  0771  01B1               	clrf	??_mTouch_Check+1
  4789  0772  09B0               	comf	??_mTouch_Check,f
  4790  0773  09B1               	comf	??_mTouch_Check+1,f
  4791  0774  0AB0               	incf	??_mTouch_Check,f
  4792  0775  1903               	skipnz
  4793  0776  0AB1               	incf	??_mTouch_Check+1,f
  4794  0777  0835               	movf	mTouch_Check@chan,w
  4795  0778  3EB2               	addlw	(low (_CPS_PreData| 0))& (0+255)
  4796  0779  0086               	movwf	6
  4797  077A  0187               	clrf	7
  4798  077B  0801               	movf	1,w
  4799  077C  0730               	addwf	??_mTouch_Check,w
  4800  077D  00B2               	movwf	??_mTouch_Check+2
  4801  077E  0831               	movf	??_mTouch_Check+1,w
  4802  077F  1803               	skipnc
  4803  0780  0A31               	incf	??_mTouch_Check+1,w
  4804  0781  00B3               	movwf	??_mTouch_Check+3
  4805  0782  0833               	movf	??_mTouch_Check+3,w
  4806  0783  3A80               	xorlw	128
  4807  0784  00B4               	movwf	??_mTouch_Check+4
  4808  0785  3080               	movlw	128
  4809  0786  0234               	subwf	??_mTouch_Check+4,w
  4810  0787  1D03               	skipz
  4811  0788  2F8B               	goto	u2105
  4812  0789  30C9               	movlw	201
  4813  078A  0232               	subwf	??_mTouch_Check+2,w
  4814  078B                     u2105:	
  4815  078B  1C03               	skipc
  4816  078C  2FA5               	goto	l2682
  4817  078D  0020               	movlb	0	; select bank0
  4818  078E  0835               	movf	mTouch_Check@chan,w
  4819  078F  3EAC               	addlw	(low (_mTouch_Interval| 0))& (0+255)
  4820  0790  0086               	movwf	6
  4821  0791  0187               	clrf	7
  4822  0792  0801               	movf	1,w
  4823  0793  1D03               	btfss	3,2
  4824  0794  2FA5               	goto	l2682
  4825                           
  4826                           ;main.c: 123: {
  4827                           ;main.c: 124: mTouch_Interval[chan] = 100;
  4828  0795  3064               	movlw	100
  4829  0796  00B0               	movwf	??_mTouch_Check
  4830  0797  0835               	movf	mTouch_Check@chan,w
  4831  0798  3EAC               	addlw	(low (_mTouch_Interval| 0))& (0+255)
  4832  0799  0086               	movwf	6
  4833  079A  0187               	clrf	7
  4834  079B  0830               	movf	??_mTouch_Check,w
  4835  079C  0081               	movwf	1
  4836                           
  4837                           ;main.c: 125: Buzzer_MiliSecond(100);
  4838  079D  3064               	movlw	100
  4839  079E  00AE               	movwf	Buzzer_MiliSecond@time
  4840  079F  3000               	movlw	0
  4841  07A0  00AF               	movwf	Buzzer_MiliSecond@time+1
  4842  07A1  318C  2490         	fcall	_Buzzer_MiliSecond
  4843                           
  4844                           ;main.c: 126: return 1;
  4845  07A3  3001               	movlw	1
  4846  07A4  0008               	return
  4847  07A5                     l2682:	
  4848                           
  4849                           ;main.c: 127: }
  4850                           ;main.c: 128: return 0;
  4851  07A5  3000               	movlw	0
  4852  07A6  0008               	return
  4853  07A7                     __end_of_mTouch_Check:	
  4854                           
  4855                           	psect	text10
  4856  0C90                     __ptext10:	
  4857 ;; *************** function _Buzzer_MiliSecond *****************
  4858 ;; Defined at:
  4859 ;;		line 38 in file "Buzzer.c"
  4860 ;; Parameters:    Size  Location     Type
  4861 ;;  time            2   14[BANK0 ] unsigned int 
  4862 ;; Auto vars:     Size  Location     Type
  4863 ;;		None
  4864 ;; Return value:  Size  Location     Type
  4865 ;;                  1    wreg      void 
  4866 ;; Registers used:
  4867 ;;		wreg, status,2, status,0
  4868 ;; Tracked objects:
  4869 ;;		On entry : 0/0
  4870 ;;		On exit  : 0/0
  4871 ;;		Unchanged: 0/0
  4872 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  4873 ;;      Params:         0       2       0       0       0       0
  4874 ;;      Locals:         0       0       0       0       0       0
  4875 ;;      Temps:          0       0       0       0       0       0
  4876 ;;      Totals:         0       2       0       0       0       0
  4877 ;;Total ram usage:        2 bytes
  4878 ;; Hardware stack levels used:    1
  4879 ;; Hardware stack levels required when called:    3
  4880 ;; This function calls:
  4881 ;;		Nothing
  4882 ;; This function is called by:
  4883 ;;		_mTouch_Check
  4884 ;; This function uses a non-reentrant model
  4885 ;;
  4886                           
  4887                           
  4888                           ;psect for function _Buzzer_MiliSecond
  4889  0C90                     _Buzzer_MiliSecond:	
  4890                           
  4891                           ;Buzzer.c: 40: if(count==0)
  4892                           
  4893                           ;incstack = 0
  4894                           ; Regs used in _Buzzer_MiliSecond: [wreg+status,2+status,0]
  4895  0C90  0020               	movlb	0	; select bank0
  4896  0C91  085E               	movf	_count,w
  4897  0C92  045F               	iorwf	_count+1,w
  4898  0C93  1D03               	btfss	3,2
  4899  0C94  0008               	return
  4900                           
  4901                           ;Buzzer.c: 41: count = time;
  4902  0C95  082F               	movf	Buzzer_MiliSecond@time+1,w
  4903  0C96  00DF               	movwf	_count+1
  4904  0C97  082E               	movf	Buzzer_MiliSecond@time,w
  4905  0C98  00DE               	movwf	_count
  4906  0C99  0008               	return
  4907  0C9A                     __end_of_Buzzer_MiliSecond:	
  4908                           
  4909                           	psect	text11
  4910  0D3D                     __ptext11:	
  4911 ;; *************** function _Timer6_Init *****************
  4912 ;; Defined at:
  4913 ;;		line 3 in file "Timer6.c"
  4914 ;; Parameters:    Size  Location     Type
  4915 ;;		None
  4916 ;; Auto vars:     Size  Location     Type
  4917 ;;		None
  4918 ;; Return value:  Size  Location     Type
  4919 ;;                  1    wreg      void 
  4920 ;; Registers used:
  4921 ;;		wreg, status,2, status,0
  4922 ;; Tracked objects:
  4923 ;;		On entry : 0/0
  4924 ;;		On exit  : 0/0
  4925 ;;		Unchanged: 0/0
  4926 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  4927 ;;      Params:         0       0       0       0       0       0
  4928 ;;      Locals:         0       0       0       0       0       0
  4929 ;;      Temps:          0       1       0       0       0       0
  4930 ;;      Totals:         0       1       0       0       0       0
  4931 ;;Total ram usage:        1 bytes
  4932 ;; Hardware stack levels used:    1
  4933 ;; Hardware stack levels required when called:    3
  4934 ;; This function calls:
  4935 ;;		Nothing
  4936 ;; This function is called by:
  4937 ;;		_main
  4938 ;; This function uses a non-reentrant model
  4939 ;;
  4940                           
  4941                           
  4942                           ;psect for function _Timer6_Init
  4943  0D3D                     _Timer6_Init:	
  4944                           
  4945                           ;Timer6.c: 5: PR6 = 0x7D;
  4946                           
  4947                           ;incstack = 0
  4948                           ; Regs used in _Timer6_Init: [wreg+status,2+status,0]
  4949  0D3D  307D               	movlw	125
  4950  0D3E  0028               	movlb	8	; select bank8
  4951  0D3F  009D               	movwf	29	;volatile
  4952                           
  4953                           ;Timer6.c: 6: TMR6 = 0x00;
  4954  0D40  019C               	clrf	28	;volatile
  4955                           
  4956                           ;Timer6.c: 7: T6CON |= (0x03<<0);
  4957  0D41  3003               	movlw	3
  4958  0D42  0020               	movlb	0	; select bank0
  4959  0D43  00AE               	movwf	??_Timer6_Init
  4960  0D44  082E               	movf	??_Timer6_Init,w
  4961  0D45  0028               	movlb	8	; select bank8
  4962  0D46  049E               	iorwf	30,f	;volatile
  4963                           
  4964                           ;Timer6.c: 8: T6CON |= (0x00<<3);
  4965  0D47  081E               	movf	30,w	;volatile
  4966                           
  4967                           ;Timer6.c: 9: T6CON |= (0x01<<2);
  4968  0D48  151E               	bsf	30,2	;volatile
  4969                           
  4970                           ;Timer6.c: 11: TMR6IF = 0;
  4971  0D49  0020               	movlb	0	; select bank0
  4972  0D4A  1193               	bcf	19,3	;volatile
  4973                           
  4974                           ;Timer6.c: 12: TMR6IE = 1;
  4975  0D4B  0021               	movlb	1	; select bank1
  4976  0D4C  1593               	bsf	19,3	;volatile
  4977                           
  4978                           ;Timer6.c: 13: PEIE = 1;
  4979  0D4D  170B               	bsf	11,6	;volatile
  4980                           
  4981                           ;Timer6.c: 14: GIE = 1;
  4982  0D4E  178B               	bsf	11,7	;volatile
  4983  0D4F  0008               	return
  4984  0D50                     __end_of_Timer6_Init:	
  4985                           
  4986                           	psect	text12
  4987  0C6C                     __ptext12:	
  4988 ;; *************** function _Timer1_StartCount *****************
  4989 ;; Defined at:
  4990 ;;		line 31 in file "Timer1.c"
  4991 ;; Parameters:    Size  Location     Type
  4992 ;;		None
  4993 ;; Auto vars:     Size  Location     Type
  4994 ;;		None
  4995 ;; Return value:  Size  Location     Type
  4996 ;;                  1    wreg      void 
  4997 ;; Registers used:
  4998 ;;		wreg, status,2, status,0, pclath, cstack
  4999 ;; Tracked objects:
  5000 ;;		On entry : 0/0
  5001 ;;		On exit  : 0/0
  5002 ;;		Unchanged: 0/0
  5003 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  5004 ;;      Params:         0       0       0       0       0       0
  5005 ;;      Locals:         0       0       0       0       0       0
  5006 ;;      Temps:          0       0       0       0       0       0
  5007 ;;      Totals:         0       0       0       0       0       0
  5008 ;;Total ram usage:        0 bytes
  5009 ;; Hardware stack levels used:    1
  5010 ;; Hardware stack levels required when called:    4
  5011 ;; This function calls:
  5012 ;;		_Timer1_ClearRecord
  5013 ;; This function is called by:
  5014 ;;		_main
  5015 ;; This function uses a non-reentrant model
  5016 ;;
  5017                           
  5018                           
  5019                           ;psect for function _Timer1_StartCount
  5020  0C6C                     _Timer1_StartCount:	
  5021                           
  5022                           ;Timer1.c: 33: Timer1_ClearRecord();
  5023                           
  5024                           ;incstack = 0
  5025                           ; Regs used in _Timer1_StartCount: [wreg+status,2+status,0+pclath+cstack]
  5026  0C6C  318E  26AF         	fcall	_Timer1_ClearRecord
  5027                           
  5028                           ;Timer1.c: 34: TMR1ON = 1;
  5029  0C6E  0020               	movlb	0	; select bank0
  5030  0C6F  1418               	bsf	24,0	;volatile
  5031  0C70  0008               	return
  5032  0C71                     __end_of_Timer1_StartCount:	
  5033                           
  5034                           	psect	text13
  5035  0EAF                     __ptext13:	
  5036 ;; *************** function _Timer1_ClearRecord *****************
  5037 ;; Defined at:
  5038 ;;		line 42 in file "Timer1.c"
  5039 ;; Parameters:    Size  Location     Type
  5040 ;;		None
  5041 ;; Auto vars:     Size  Location     Type
  5042 ;;		None
  5043 ;; Return value:  Size  Location     Type
  5044 ;;                  1    wreg      void 
  5045 ;; Registers used:
  5046 ;;		wreg, status,2
  5047 ;; Tracked objects:
  5048 ;;		On entry : 0/0
  5049 ;;		On exit  : 0/0
  5050 ;;		Unchanged: 0/0
  5051 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  5052 ;;      Params:         0       0       0       0       0       0
  5053 ;;      Locals:         0       0       0       0       0       0
  5054 ;;      Temps:          0       0       0       0       0       0
  5055 ;;      Totals:         0       0       0       0       0       0
  5056 ;;Total ram usage:        0 bytes
  5057 ;; Hardware stack levels used:    1
  5058 ;; Hardware stack levels required when called:    3
  5059 ;; This function calls:
  5060 ;;		Nothing
  5061 ;; This function is called by:
  5062 ;;		_Timer1_StartCount
  5063 ;; This function uses a non-reentrant model
  5064 ;;
  5065                           
  5066                           
  5067                           ;psect for function _Timer1_ClearRecord
  5068  0EAF                     _Timer1_ClearRecord:	
  5069                           
  5070                           ;Timer1.c: 44: {TMR1ON = 0; TMR1 = (uint16_t)0xFFFF - 10UL+1; TMR1ON = 1; };
  5071                           
  5072                           ;incstack = 0
  5073                           ; Regs used in _Timer1_ClearRecord: [wreg+status,2]
  5074  0EAF  0020               	movlb	0	; select bank0
  5075  0EB0  1018               	bcf	24,0	;volatile
  5076  0EB1  30FF               	movlw	255
  5077  0EB2  0097               	movwf	23	;volatile
  5078  0EB3  30F6               	movlw	246
  5079  0EB4  0096               	movwf	22	;volatile
  5080  0EB5  1418               	bsf	24,0	;volatile
  5081                           
  5082                           ;Timer1.c: 45: cnts.SigmaDeltaCount= 0;
  5083  0EB6  3000               	movlw	0
  5084  0EB7  0021               	movlb	1	; select bank1
  5085  0EB8  00A3               	movwf	(_cnts+3)^(0+128)
  5086  0EB9  3000               	movlw	0
  5087  0EBA  00A2               	movwf	(_cnts+2)^(0+128)
  5088  0EBB  3000               	movlw	0
  5089  0EBC  00A1               	movwf	(_cnts+1)^(0+128)
  5090  0EBD  3000               	movlw	0
  5091  0EBE  00A0               	movwf	_cnts^(0+128)
  5092                           
  5093                           ;Timer1.c: 46: cnts.AverageCPS = 0;
  5094  0EBF  3000               	movlw	0
  5095  0EC0  00A7               	movwf	((_cnts+3)^(0+128)+4)
  5096  0EC1  3000               	movlw	0
  5097  0EC2  00A6               	movwf	((_cnts+2)^(0+128)+4)
  5098  0EC3  3000               	movlw	0
  5099  0EC4  00A5               	movwf	((_cnts+1)^(0+128)+4)
  5100  0EC5  3000               	movlw	0
  5101  0EC6  00A4               	movwf	(_cnts^(0+128)+4)
  5102                           
  5103                           ;Timer1.c: 47: cnts.AverageCPM = 0;
  5104  0EC7  3000               	movlw	0
  5105  0EC8  00AB               	movwf	((_cnts+3)^(0+128)+8)
  5106  0EC9  3000               	movlw	0
  5107  0ECA  00AA               	movwf	((_cnts+2)^(0+128)+8)
  5108  0ECB  3000               	movlw	0
  5109  0ECC  00A9               	movwf	((_cnts+1)^(0+128)+8)
  5110  0ECD  3000               	movlw	0
  5111  0ECE  00A8               	movwf	(_cnts^(0+128)+8)
  5112                           
  5113                           ;Timer1.c: 48: tcnt.Delta_t = 0;
  5114  0ECF  3000               	movlw	0
  5115  0ED0  0020               	movlb	0	; select bank0
  5116  0ED1  00D9               	movwf	_tcnt+5
  5117  0ED2  3000               	movlw	0
  5118  0ED3  00D8               	movwf	_tcnt+4
  5119  0ED4  3000               	movlw	0
  5120  0ED5  00D7               	movwf	_tcnt+3
  5121  0ED6  3000               	movlw	0
  5122  0ED7  00D6               	movwf	_tcnt+2
  5123                           
  5124                           ;Timer1.c: 49: tcnt.Second_t = 0;
  5125  0ED8  01D4               	clrf	_tcnt
  5126                           
  5127                           ;Timer1.c: 50: tcnt.Minute_t = 0;
  5128  0ED9  01D5               	clrf	_tcnt+1
  5129  0EDA  0008               	return
  5130  0EDB                     __end_of_Timer1_ClearRecord:	
  5131                           
  5132                           	psect	text14
  5133  0E41                     __ptext14:	
  5134 ;; *************** function _Timer1_Init *****************
  5135 ;; Defined at:
  5136 ;;		line 6 in file "Timer1.c"
  5137 ;; Parameters:    Size  Location     Type
  5138 ;;		None
  5139 ;; Auto vars:     Size  Location     Type
  5140 ;;		None
  5141 ;; Return value:  Size  Location     Type
  5142 ;;                  1    wreg      void 
  5143 ;; Registers used:
  5144 ;;		wreg, status,2, status,0
  5145 ;; Tracked objects:
  5146 ;;		On entry : 0/0
  5147 ;;		On exit  : 0/0
  5148 ;;		Unchanged: 0/0
  5149 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  5150 ;;      Params:         0       0       0       0       0       0
  5151 ;;      Locals:         0       0       0       0       0       0
  5152 ;;      Temps:          0       1       0       0       0       0
  5153 ;;      Totals:         0       1       0       0       0       0
  5154 ;;Total ram usage:        1 bytes
  5155 ;; Hardware stack levels used:    1
  5156 ;; Hardware stack levels required when called:    3
  5157 ;; This function calls:
  5158 ;;		Nothing
  5159 ;; This function is called by:
  5160 ;;		_main
  5161 ;; This function uses a non-reentrant model
  5162 ;;
  5163                           
  5164                           
  5165                           ;psect for function _Timer1_Init
  5166  0E41                     _Timer1_Init:	
  5167                           
  5168                           ;Timer1.c: 8: TRISB |= (1<<6);
  5169                           
  5170                           ;incstack = 0
  5171                           ; Regs used in _Timer1_Init: [wreg+status,2+status,0]
  5172  0E41  0021               	movlb	1	; select bank1
  5173  0E42  170D               	bsf	13,6	;volatile
  5174                           
  5175                           ;Timer1.c: 9: ANSELB &= ~(1<<6);
  5176  0E43  30BF               	movlw	191
  5177  0E44  0020               	movlb	0	; select bank0
  5178  0E45  00AE               	movwf	??_Timer1_Init
  5179  0E46  082E               	movf	??_Timer1_Init,w
  5180  0E47  0023               	movlb	3	; select bank3
  5181  0E48  058D               	andwf	13,f	;volatile
  5182                           
  5183                           ;Timer1.c: 10: WPUB |= (1<<6);
  5184  0E49  0024               	movlb	4	; select bank4
  5185  0E4A  170D               	bsf	13,6	;volatile
  5186                           
  5187                           ;Timer1.c: 12: T1CON |= (0x01<<2);
  5188  0E4B  0020               	movlb	0	; select bank0
  5189  0E4C  1518               	bsf	24,2	;volatile
  5190                           
  5191                           ;Timer1.c: 13: T1CON &= ~(0x01<<3);
  5192  0E4D  30F7               	movlw	247
  5193  0E4E  00AE               	movwf	??_Timer1_Init
  5194  0E4F  082E               	movf	??_Timer1_Init,w
  5195  0E50  0598               	andwf	24,f	;volatile
  5196                           
  5197                           ;Timer1.c: 14: T1CON |= (0x00<<4);
  5198  0E51  0818               	movf	24,w	;volatile
  5199                           
  5200                           ;Timer1.c: 15: T1CON |= (0x02<<6);
  5201  0E52  1798               	bsf	24,7	;volatile
  5202                           
  5203                           ;Timer1.c: 17: T1GCON = 0x00;
  5204  0E53  0199               	clrf	25	;volatile
  5205                           
  5206                           ;Timer1.c: 19: {TMR1ON = 0; TMR1 = (uint16_t)0xFFFF - 10UL+1; TMR1ON = 1; };
  5207  0E54  1018               	bcf	24,0	;volatile
  5208  0E55  30FF               	movlw	255
  5209  0E56  0097               	movwf	23	;volatile
  5210  0E57  30F6               	movlw	246
  5211  0E58  0096               	movwf	22	;volatile
  5212  0E59  1418               	bsf	24,0	;volatile
  5213                           
  5214                           ;Timer1.c: 21: TMR1IF = 0;
  5215  0E5A  1011               	bcf	17,0	;volatile
  5216                           
  5217                           ;Timer1.c: 22: TMR1IE = 1;
  5218  0E5B  0021               	movlb	1	; select bank1
  5219  0E5C  1411               	bsf	17,0	;volatile
  5220                           
  5221                           ;Timer1.c: 23: PEIE = 1;
  5222  0E5D  170B               	bsf	11,6	;volatile
  5223                           
  5224                           ;Timer1.c: 24: GIE = 1;
  5225  0E5E  178B               	bsf	11,7	;volatile
  5226                           
  5227                           ;Timer1.c: 26: TMR1ON = 0;
  5228  0E5F  0020               	movlb	0	; select bank0
  5229  0E60  1018               	bcf	24,0	;volatile
  5230  0E61  0008               	return
  5231  0E62                     __end_of_Timer1_Init:	
  5232                           
  5233                           	psect	text15
  5234  0C69                     __ptext15:	
  5235 ;; *************** function _Timer1_GetSecond *****************
  5236 ;; Defined at:
  5237 ;;		line 68 in file "Timer1.c"
  5238 ;; Parameters:    Size  Location     Type
  5239 ;;		None
  5240 ;; Auto vars:     Size  Location     Type
  5241 ;;		None
  5242 ;; Return value:  Size  Location     Type
  5243 ;;                  1    wreg      unsigned char 
  5244 ;; Registers used:
  5245 ;;		wreg
  5246 ;; Tracked objects:
  5247 ;;		On entry : 0/0
  5248 ;;		On exit  : 0/0
  5249 ;;		Unchanged: 0/0
  5250 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  5251 ;;      Params:         0       0       0       0       0       0
  5252 ;;      Locals:         0       0       0       0       0       0
  5253 ;;      Temps:          0       0       0       0       0       0
  5254 ;;      Totals:         0       0       0       0       0       0
  5255 ;;Total ram usage:        0 bytes
  5256 ;; Hardware stack levels used:    1
  5257 ;; Hardware stack levels required when called:    3
  5258 ;; This function calls:
  5259 ;;		Nothing
  5260 ;; This function is called by:
  5261 ;;		_main
  5262 ;; This function uses a non-reentrant model
  5263 ;;
  5264                           
  5265                           
  5266                           ;psect for function _Timer1_GetSecond
  5267  0C69                     _Timer1_GetSecond:	
  5268                           
  5269                           ;Timer1.c: 70: return tcnt.Second_t;
  5270                           
  5271                           ;incstack = 0
  5272                           ; Regs used in _Timer1_GetSecond: [wreg]
  5273  0C69  0020               	movlb	0	; select bank0
  5274  0C6A  0854               	movf	_tcnt,w
  5275  0C6B  0008               	return
  5276  0C6C                     __end_of_Timer1_GetSecond:	
  5277                           
  5278                           	psect	text16
  5279  0C66                     __ptext16:	
  5280 ;; *************** function _Timer1_GetMinute *****************
  5281 ;; Defined at:
  5282 ;;		line 73 in file "Timer1.c"
  5283 ;; Parameters:    Size  Location     Type
  5284 ;;		None
  5285 ;; Auto vars:     Size  Location     Type
  5286 ;;		None
  5287 ;; Return value:  Size  Location     Type
  5288 ;;                  1    wreg      unsigned char 
  5289 ;; Registers used:
  5290 ;;		wreg
  5291 ;; Tracked objects:
  5292 ;;		On entry : 0/0
  5293 ;;		On exit  : 0/0
  5294 ;;		Unchanged: 0/0
  5295 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  5296 ;;      Params:         0       0       0       0       0       0
  5297 ;;      Locals:         0       0       0       0       0       0
  5298 ;;      Temps:          0       0       0       0       0       0
  5299 ;;      Totals:         0       0       0       0       0       0
  5300 ;;Total ram usage:        0 bytes
  5301 ;; Hardware stack levels used:    1
  5302 ;; Hardware stack levels required when called:    3
  5303 ;; This function calls:
  5304 ;;		Nothing
  5305 ;; This function is called by:
  5306 ;;		_main
  5307 ;; This function uses a non-reentrant model
  5308 ;;
  5309                           
  5310                           
  5311                           ;psect for function _Timer1_GetMinute
  5312  0C66                     _Timer1_GetMinute:	
  5313                           
  5314                           ;Timer1.c: 75: return tcnt.Minute_t;
  5315                           
  5316                           ;incstack = 0
  5317                           ; Regs used in _Timer1_GetMinute: [wreg]
  5318  0C66  0020               	movlb	0	; select bank0
  5319  0C67  0855               	movf	_tcnt+1,w
  5320  0C68  0008               	return
  5321  0C69                     __end_of_Timer1_GetMinute:	
  5322                           
  5323                           	psect	text17
  5324  0D2C                     __ptext17:	
  5325 ;; *************** function _Timer1_GetCountSum *****************
  5326 ;; Defined at:
  5327 ;;		line 53 in file "Timer1.c"
  5328 ;; Parameters:    Size  Location     Type
  5329 ;;		None
  5330 ;; Auto vars:     Size  Location     Type
  5331 ;;		None
  5332 ;; Return value:  Size  Location     Type
  5333 ;;                  4   14[BANK0 ] unsigned long 
  5334 ;; Registers used:
  5335 ;;		wreg
  5336 ;; Tracked objects:
  5337 ;;		On entry : 0/0
  5338 ;;		On exit  : 0/0
  5339 ;;		Unchanged: 0/0
  5340 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  5341 ;;      Params:         0       4       0       0       0       0
  5342 ;;      Locals:         0       0       0       0       0       0
  5343 ;;      Temps:          0       0       0       0       0       0
  5344 ;;      Totals:         0       4       0       0       0       0
  5345 ;;Total ram usage:        4 bytes
  5346 ;; Hardware stack levels used:    1
  5347 ;; Hardware stack levels required when called:    3
  5348 ;; This function calls:
  5349 ;;		Nothing
  5350 ;; This function is called by:
  5351 ;;		_main
  5352 ;; This function uses a non-reentrant model
  5353 ;;
  5354                           
  5355                           
  5356                           ;psect for function _Timer1_GetCountSum
  5357  0D2C                     _Timer1_GetCountSum:	
  5358                           
  5359                           ;Timer1.c: 55: return cnts.SigmaDeltaCount;
  5360                           
  5361                           ;incstack = 0
  5362                           ; Regs used in _Timer1_GetCountSum: [wreg]
  5363  0D2C  0021               	movlb	1	; select bank1
  5364  0D2D  0823               	movf	(_cnts+3)^(0+128),w
  5365  0D2E  0020               	movlb	0	; select bank0
  5366  0D2F  00B1               	movwf	?_Timer1_GetCountSum+3
  5367  0D30  0021               	movlb	1	; select bank1
  5368  0D31  0822               	movf	(_cnts+2)^(0+128),w
  5369  0D32  0020               	movlb	0	; select bank0
  5370  0D33  00B0               	movwf	?_Timer1_GetCountSum+2
  5371  0D34  0021               	movlb	1	; select bank1
  5372  0D35  0821               	movf	(_cnts+1)^(0+128),w
  5373  0D36  0020               	movlb	0	; select bank0
  5374  0D37  00AF               	movwf	?_Timer1_GetCountSum+1
  5375  0D38  0021               	movlb	1	; select bank1
  5376  0D39  0820               	movf	_cnts^(0+128),w
  5377  0D3A  0020               	movlb	0	; select bank0
  5378  0D3B  00AE               	movwf	?_Timer1_GetCountSum
  5379  0D3C  0008               	return
  5380  0D3D                     __end_of_Timer1_GetCountSum:	
  5381                           
  5382                           	psect	text18
  5383  0CCD                     __ptext18:	
  5384 ;; *************** function _Timer1_GetCPS *****************
  5385 ;; Defined at:
  5386 ;;		line 63 in file "Timer1.c"
  5387 ;; Parameters:    Size  Location     Type
  5388 ;;		None
  5389 ;; Auto vars:     Size  Location     Type
  5390 ;;		None
  5391 ;; Return value:  Size  Location     Type
  5392 ;;                  4   14[BANK0 ] unsigned long 
  5393 ;; Registers used:
  5394 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  5395 ;; Tracked objects:
  5396 ;;		On entry : 0/0
  5397 ;;		On exit  : 0/0
  5398 ;;		Unchanged: 0/0
  5399 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  5400 ;;      Params:         0       4       0       0       0       0
  5401 ;;      Locals:         0       0       0       0       0       0
  5402 ;;      Temps:          0       0       0       0       0       0
  5403 ;;      Totals:         0       4       0       0       0       0
  5404 ;;Total ram usage:        4 bytes
  5405 ;; Hardware stack levels used:    1
  5406 ;; Hardware stack levels required when called:    3
  5407 ;; This function calls:
  5408 ;;		Nothing
  5409 ;; This function is called by:
  5410 ;;		_main
  5411 ;; This function uses a non-reentrant model
  5412 ;;
  5413                           
  5414                           
  5415                           ;psect for function _Timer1_GetCPS
  5416  0CCD                     _Timer1_GetCPS:	
  5417                           
  5418                           ;Timer1.c: 65: return cnts.AverageCPS;
  5419                           
  5420                           ;incstack = 0
  5421                           ; Regs used in _Timer1_GetCPS: [wreg+fsr1l+fsr1h+status,2+status,0]
  5422  0CCD  3004               	movlw	4
  5423  0CCE  3EA0               	addlw	(low (_cnts| 0))& (0+255)
  5424  0CCF  0086               	movwf	6
  5425  0CD0  0187               	clrf	7
  5426  0CD1  3F40               	moviw [0]fsr1
  5427  0CD2  0020               	movlb	0	; select bank0
  5428  0CD3  00AE               	movwf	?_Timer1_GetCPS
  5429  0CD4  3F41               	moviw [1]fsr1
  5430  0CD5  00AF               	movwf	?_Timer1_GetCPS+1
  5431  0CD6  3F42               	moviw [2]fsr1
  5432  0CD7  00B0               	movwf	?_Timer1_GetCPS+2
  5433  0CD8  3F43               	moviw [3]fsr1
  5434  0CD9  00B1               	movwf	?_Timer1_GetCPS+3
  5435  0CDA  0008               	return
  5436  0CDB                     __end_of_Timer1_GetCPS:	
  5437                           
  5438                           	psect	text19
  5439  0CBF                     __ptext19:	
  5440 ;; *************** function _Timer1_GetCPM *****************
  5441 ;; Defined at:
  5442 ;;		line 58 in file "Timer1.c"
  5443 ;; Parameters:    Size  Location     Type
  5444 ;;		None
  5445 ;; Auto vars:     Size  Location     Type
  5446 ;;		None
  5447 ;; Return value:  Size  Location     Type
  5448 ;;                  4   14[BANK0 ] unsigned long 
  5449 ;; Registers used:
  5450 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  5451 ;; Tracked objects:
  5452 ;;		On entry : 0/0
  5453 ;;		On exit  : 0/0
  5454 ;;		Unchanged: 0/0
  5455 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  5456 ;;      Params:         0       4       0       0       0       0
  5457 ;;      Locals:         0       0       0       0       0       0
  5458 ;;      Temps:          0       0       0       0       0       0
  5459 ;;      Totals:         0       4       0       0       0       0
  5460 ;;Total ram usage:        4 bytes
  5461 ;; Hardware stack levels used:    1
  5462 ;; Hardware stack levels required when called:    3
  5463 ;; This function calls:
  5464 ;;		Nothing
  5465 ;; This function is called by:
  5466 ;;		_main
  5467 ;; This function uses a non-reentrant model
  5468 ;;
  5469                           
  5470                           
  5471                           ;psect for function _Timer1_GetCPM
  5472  0CBF                     _Timer1_GetCPM:	
  5473                           
  5474                           ;Timer1.c: 60: return cnts.AverageCPM;
  5475                           
  5476                           ;incstack = 0
  5477                           ; Regs used in _Timer1_GetCPM: [wreg+fsr1l+fsr1h+status,2+status,0]
  5478  0CBF  3008               	movlw	8
  5479  0CC0  3EA0               	addlw	(low (_cnts| 0))& (0+255)
  5480  0CC1  0086               	movwf	6
  5481  0CC2  0187               	clrf	7
  5482  0CC3  3F40               	moviw [0]fsr1
  5483  0CC4  0020               	movlb	0	; select bank0
  5484  0CC5  00AE               	movwf	?_Timer1_GetCPM
  5485  0CC6  3F41               	moviw [1]fsr1
  5486  0CC7  00AF               	movwf	?_Timer1_GetCPM+1
  5487  0CC8  3F42               	moviw [2]fsr1
  5488  0CC9  00B0               	movwf	?_Timer1_GetCPM+2
  5489  0CCA  3F43               	moviw [3]fsr1
  5490  0CCB  00B1               	movwf	?_Timer1_GetCPM+3
  5491  0CCC  0008               	return
  5492  0CCD                     __end_of_Timer1_GetCPM:	
  5493                           
  5494                           	psect	text20
  5495  05FA                     __ptext20:	
  5496 ;; *************** function _LCD_Init *****************
  5497 ;; Defined at:
  5498 ;;		line 28 in file "LCD.c"
  5499 ;; Parameters:    Size  Location     Type
  5500 ;;		None
  5501 ;; Auto vars:     Size  Location     Type
  5502 ;;		None
  5503 ;; Return value:  Size  Location     Type
  5504 ;;                  1    wreg      void 
  5505 ;; Registers used:
  5506 ;;		wreg, status,2, status,0, pclath, cstack
  5507 ;; Tracked objects:
  5508 ;;		On entry : 0/0
  5509 ;;		On exit  : 0/0
  5510 ;;		Unchanged: 0/0
  5511 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  5512 ;;      Params:         0       0       0       0       0       0
  5513 ;;      Locals:         0       0       0       0       0       0
  5514 ;;      Temps:          0       2       0       0       0       0
  5515 ;;      Totals:         0       2       0       0       0       0
  5516 ;;Total ram usage:        2 bytes
  5517 ;; Hardware stack levels used:    1
  5518 ;; Hardware stack levels required when called:    5
  5519 ;; This function calls:
  5520 ;;		_LCD_DisplayClear
  5521 ;;		_LCD_WriteData
  5522 ;; This function is called by:
  5523 ;;		_main
  5524 ;; This function uses a non-reentrant model
  5525 ;;
  5526                           
  5527                           
  5528                           ;psect for function _LCD_Init
  5529  05FA                     _LCD_Init:	
  5530                           
  5531                           ;LCD.c: 30: LATA3 = 0;
  5532                           
  5533                           ;incstack = 0
  5534                           ; Regs used in _LCD_Init: [wreg+status,2+status,0+pclath+cstack]
  5535  05FA  0022               	movlb	2	; select bank2
  5536  05FB  118C               	bcf	12,3	;volatile
  5537                           
  5538                           ;LCD.c: 31: LATA4 = 0;
  5539  05FC  120C               	bcf	12,4	;volatile
  5540                           
  5541                           ;LCD.c: 33: _delay((unsigned long)((30)*(32000000/4000.0)));
  5542  05FD  3002               	movlw	2
  5543  05FE  0020               	movlb	0	; select bank0
  5544  05FF  00B3               	movwf	??_LCD_Init+1
  5545  0600  3038               	movlw	56
  5546  0601  00B2               	movwf	??_LCD_Init
  5547  0602  30AD               	movlw	173
  5548  0603                     u2987:	
  5549  0603  0B89               	decfsz	9,f
  5550  0604  2E03               	goto	u2987
  5551  0605  0BB2               	decfsz	??_LCD_Init,f
  5552  0606  2E03               	goto	u2987
  5553  0607  0BB3               	decfsz	??_LCD_Init+1,f
  5554  0608  2E03               	goto	u2987
  5555                           
  5556                           ;LCD.c: 34: PORTB = ( ((0x03&0x0C)<<1)|(0x03&0x03) );
  5557  0609  3003               	movlw	3
  5558  060A  0020               	movlb	0	; select bank0
  5559  060B  008D               	movwf	13	;volatile
  5560                           
  5561                           ;LCD.c: 35: {LATA4 = 1; _delay((unsigned long)((1)*(32000000/4000000.0))); LATA4 = 0; _d
      +                          elay((unsigned long)((1)*(32000000/4000000.0)));};
  5562  060C  0022               	movlb	2	; select bank2
  5563  060D  160C               	bsf	12,4	;volatile
  5564  060E  3200               	nop2	;2 cycle nop
  5565  060F  3200               	nop2	;2 cycle nop
  5566  0610  3200               	nop2	;2 cycle nop
  5567  0611  3200               	nop2	;2 cycle nop
  5568  0612  0022               	movlb	2	; select bank2
  5569  0613  120C               	bcf	12,4	;volatile
  5570  0614  3200               	nop2	;2 cycle nop
  5571  0615  3200               	nop2	;2 cycle nop
  5572  0616  3200               	nop2	;2 cycle nop
  5573  0617  3200               	nop2	;2 cycle nop
  5574                           
  5575                           ;LCD.c: 36: _delay((unsigned long)((5)*(32000000/4000.0)));
  5576  0618  3034               	movlw	52
  5577  0619  0020               	movlb	0	; select bank0
  5578  061A  00B2               	movwf	??_LCD_Init
  5579  061B  30F1               	movlw	241
  5580  061C                     u2997:	
  5581  061C  0B89               	decfsz	9,f
  5582  061D  2E1C               	goto	u2997
  5583  061E  0BB2               	decfsz	??_LCD_Init,f
  5584  061F  2E1C               	goto	u2997
  5585  0620  3200               	nop2
  5586                           
  5587                           ;LCD.c: 37: {LATA4 = 1; _delay((unsigned long)((1)*(32000000/4000000.0))); LATA4 = 0; _d
      +                          elay((unsigned long)((1)*(32000000/4000000.0)));};
  5588  0621  0022               	movlb	2	; select bank2
  5589  0622  160C               	bsf	12,4	;volatile
  5590  0623  3200               	nop2	;2 cycle nop
  5591  0624  3200               	nop2	;2 cycle nop
  5592  0625  3200               	nop2	;2 cycle nop
  5593  0626  3200               	nop2	;2 cycle nop
  5594  0627  0022               	movlb	2	; select bank2
  5595  0628  120C               	bcf	12,4	;volatile
  5596  0629  3200               	nop2	;2 cycle nop
  5597  062A  3200               	nop2	;2 cycle nop
  5598  062B  3200               	nop2	;2 cycle nop
  5599  062C  3200               	nop2	;2 cycle nop
  5600                           
  5601                           ;LCD.c: 38: _delay((unsigned long)((400)*(32000000/4000000.0)));
  5602  062D  3005               	movlw	5
  5603  062E  0020               	movlb	0	; select bank0
  5604  062F  00B2               	movwf	??_LCD_Init
  5605  0630  3026               	movlw	38
  5606  0631                     u3007:	
  5607  0631  0B89               	decfsz	9,f
  5608  0632  2E31               	goto	u3007
  5609  0633  0BB2               	decfsz	??_LCD_Init,f
  5610  0634  2E31               	goto	u3007
  5611  0635  0000               	nop
  5612                           
  5613                           ;LCD.c: 39: {LATA4 = 1; _delay((unsigned long)((1)*(32000000/4000000.0))); LATA4 = 0; _d
      +                          elay((unsigned long)((1)*(32000000/4000000.0)));};
  5614  0636  0022               	movlb	2	; select bank2
  5615  0637  160C               	bsf	12,4	;volatile
  5616  0638  3200               	nop2	;2 cycle nop
  5617  0639  3200               	nop2	;2 cycle nop
  5618  063A  3200               	nop2	;2 cycle nop
  5619  063B  3200               	nop2	;2 cycle nop
  5620  063C  0022               	movlb	2	; select bank2
  5621  063D  120C               	bcf	12,4	;volatile
  5622  063E  3200               	nop2	;2 cycle nop
  5623  063F  3200               	nop2	;2 cycle nop
  5624  0640  3200               	nop2	;2 cycle nop
  5625  0641  3200               	nop2	;2 cycle nop
  5626                           
  5627                           ;LCD.c: 40: _delay((unsigned long)((400)*(32000000/4000000.0)));
  5628  0642  3005               	movlw	5
  5629  0643  0020               	movlb	0	; select bank0
  5630  0644  00B2               	movwf	??_LCD_Init
  5631  0645  3026               	movlw	38
  5632  0646                     u3017:	
  5633  0646  0B89               	decfsz	9,f
  5634  0647  2E46               	goto	u3017
  5635  0648  0BB2               	decfsz	??_LCD_Init,f
  5636  0649  2E46               	goto	u3017
  5637  064A  0000               	nop
  5638                           
  5639                           ;LCD.c: 41: PORTB = ( ((0x02&0x0C)<<1)|(0x02&0x03) );
  5640  064B  3002               	movlw	2
  5641  064C  0020               	movlb	0	; select bank0
  5642  064D  008D               	movwf	13	;volatile
  5643                           
  5644                           ;LCD.c: 42: {LATA4 = 1; _delay((unsigned long)((1)*(32000000/4000000.0))); LATA4 = 0; _d
      +                          elay((unsigned long)((1)*(32000000/4000000.0)));};
  5645  064E  0022               	movlb	2	; select bank2
  5646  064F  160C               	bsf	12,4	;volatile
  5647  0650  3200               	nop2	;2 cycle nop
  5648  0651  3200               	nop2	;2 cycle nop
  5649  0652  3200               	nop2	;2 cycle nop
  5650  0653  3200               	nop2	;2 cycle nop
  5651  0654  0022               	movlb	2	; select bank2
  5652  0655  120C               	bcf	12,4	;volatile
  5653  0656  3200               	nop2	;2 cycle nop
  5654  0657  3200               	nop2	;2 cycle nop
  5655  0658  3200               	nop2	;2 cycle nop
  5656  0659  3200               	nop2	;2 cycle nop
  5657                           
  5658                           ;LCD.c: 44: LCD_WriteData(0x28);
  5659  065A  3028               	movlw	40
  5660  065B  318F  2780  3185   	fcall	_LCD_WriteData
  5661                           
  5662                           ;LCD.c: 45: LCD_WriteData(0x0c);
  5663  065E  300C               	movlw	12
  5664  065F  318F  2780  3185   	fcall	_LCD_WriteData
  5665                           
  5666                           ;LCD.c: 46: LCD_DisplayClear();
  5667  0662  318C  24FA  3185   	fcall	_LCD_DisplayClear
  5668                           
  5669                           ;LCD.c: 47: LCD_WriteData(0x06);
  5670  0665  3006               	movlw	6
  5671  0666  318F  2780         	fcall	_LCD_WriteData
  5672  0668  0008               	return
  5673  0669                     __end_of_LCD_Init:	
  5674                           
  5675                           	psect	text21
  5676  0CFA                     __ptext21:	
  5677 ;; *************** function _LCD_DisplayClear *****************
  5678 ;; Defined at:
  5679 ;;		line 73 in file "LCD.c"
  5680 ;; Parameters:    Size  Location     Type
  5681 ;;		None
  5682 ;; Auto vars:     Size  Location     Type
  5683 ;;		None
  5684 ;; Return value:  Size  Location     Type
  5685 ;;                  1    wreg      void 
  5686 ;; Registers used:
  5687 ;;		wreg, status,2, status,0, pclath, cstack
  5688 ;; Tracked objects:
  5689 ;;		On entry : 0/0
  5690 ;;		On exit  : 0/0
  5691 ;;		Unchanged: 0/0
  5692 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  5693 ;;      Params:         0       0       0       0       0       0
  5694 ;;      Locals:         0       0       0       0       0       0
  5695 ;;      Temps:          0       1       0       0       0       0
  5696 ;;      Totals:         0       1       0       0       0       0
  5697 ;;Total ram usage:        1 bytes
  5698 ;; Hardware stack levels used:    1
  5699 ;; Hardware stack levels required when called:    4
  5700 ;; This function calls:
  5701 ;;		_LCD_WriteData
  5702 ;; This function is called by:
  5703 ;;		_LCD_Init
  5704 ;; This function uses a non-reentrant model
  5705 ;;
  5706                           
  5707                           
  5708                           ;psect for function _LCD_DisplayClear
  5709  0CFA                     _LCD_DisplayClear:	
  5710                           
  5711                           ;LCD.c: 75: LATA3 = 0;
  5712                           
  5713                           ;incstack = 0
  5714                           ; Regs used in _LCD_DisplayClear: [wreg+status,2+status,0+pclath+cstack]
  5715  0CFA  0022               	movlb	2	; select bank2
  5716  0CFB  118C               	bcf	12,3	;volatile
  5717                           
  5718                           ;LCD.c: 76: LCD_WriteData(0x01);
  5719  0CFC  3001               	movlw	1
  5720  0CFD  318F  2780  318C   	fcall	_LCD_WriteData
  5721                           
  5722                           ;LCD.c: 77: _delay((unsigned long)((2)*(32000000/4000.0)));
  5723  0D00  3015               	movlw	21
  5724  0D01  0020               	movlb	0	; select bank0
  5725  0D02  00B1               	movwf	??_LCD_DisplayClear
  5726  0D03  30C6               	movlw	198
  5727  0D04                     u3027:	
  5728  0D04  0B89               	decfsz	9,f
  5729  0D05  2D04               	goto	u3027
  5730  0D06  0BB1               	decfsz	??_LCD_DisplayClear,f
  5731  0D07  2D04               	goto	u3027
  5732  0D08  0000               	nop
  5733  0D09  0008               	return
  5734  0D0A                     __end_of_LCD_DisplayClear:	
  5735                           
  5736                           	psect	text22
  5737  0D66                     __ptext22:	
  5738 ;; *************** function _LCD_CursorPosition *****************
  5739 ;; Defined at:
  5740 ;;		line 95 in file "LCD.c"
  5741 ;; Parameters:    Size  Location     Type
  5742 ;;  tx              1    wreg     unsigned char 
  5743 ;;  ty              1   17[BANK0 ] unsigned char 
  5744 ;; Auto vars:     Size  Location     Type
  5745 ;;  tx              1   19[BANK0 ] unsigned char 
  5746 ;; Return value:  Size  Location     Type
  5747 ;;                  1    wreg      void 
  5748 ;; Registers used:
  5749 ;;		wreg, status,2, status,0, pclath, cstack
  5750 ;; Tracked objects:
  5751 ;;		On entry : 0/0
  5752 ;;		On exit  : 0/0
  5753 ;;		Unchanged: 0/0
  5754 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  5755 ;;      Params:         0       1       0       0       0       0
  5756 ;;      Locals:         0       1       0       0       0       0
  5757 ;;      Temps:          0       1       0       0       0       0
  5758 ;;      Totals:         0       3       0       0       0       0
  5759 ;;Total ram usage:        3 bytes
  5760 ;; Hardware stack levels used:    1
  5761 ;; Hardware stack levels required when called:    4
  5762 ;; This function calls:
  5763 ;;		_LCD_WriteData
  5764 ;; This function is called by:
  5765 ;;		_main
  5766 ;; This function uses a non-reentrant model
  5767 ;;
  5768                           
  5769                           
  5770                           ;psect for function _LCD_CursorPosition
  5771  0D66                     _LCD_CursorPosition:	
  5772                           
  5773                           ;incstack = 0
  5774                           ; Regs used in _LCD_CursorPosition: [wreg+status,2+status,0+pclath+cstack]
  5775                           ;LCD_CursorPosition@tx stored from wreg
  5776  0D66  0020               	movlb	0	; select bank0
  5777  0D67  00B3               	movwf	LCD_CursorPosition@tx
  5778                           
  5779                           ;LCD.c: 97: LATA3 = 0;
  5780  0D68  0022               	movlb	2	; select bank2
  5781  0D69  118C               	bcf	12,3	;volatile
  5782                           
  5783                           ;LCD.c: 98: LCD_WriteData(0x80|tx|(0x40*ty));
  5784  0D6A  0020               	movlb	0	; select bank0
  5785  0D6B  0831               	movf	LCD_CursorPosition@ty,w
  5786  0D6C  00B2               	movwf	??_LCD_CursorPosition
  5787  0D6D  3005               	movlw	5
  5788  0D6E                     u2675:	
  5789  0D6E  35B2               	lslf	??_LCD_CursorPosition,f
  5790  0D6F  3EFF               	addlw	-1
  5791  0D70  1D03               	skipz
  5792  0D71  2D6E               	goto	u2675
  5793  0D72  3532               	lslf	??_LCD_CursorPosition,w
  5794  0D73  0433               	iorwf	LCD_CursorPosition@tx,w
  5795  0D74  3880               	iorlw	-128
  5796  0D75  318F  2780  318D   	fcall	_LCD_WriteData
  5797                           
  5798                           ;LCD.c: 99: _delay((unsigned long)((40)*(32000000/4000000.0)));
  5799  0D78  306A               	movlw	106
  5800  0D79                     u3037:	
  5801  0D79  0B89               	decfsz	9,f
  5802  0D7A  2D79               	goto	u3037
  5803  0D7B  3200               	nop2
  5804  0D7C  0008               	return
  5805  0D7D                     __end_of_LCD_CursorPosition:	
  5806                           
  5807                           	psect	text23
  5808  0CEA                     __ptext23:	
  5809 ;; *************** function _LCD_CursorHome *****************
  5810 ;; Defined at:
  5811 ;;		line 84 in file "LCD.c"
  5812 ;; Parameters:    Size  Location     Type
  5813 ;;		None
  5814 ;; Auto vars:     Size  Location     Type
  5815 ;;		None
  5816 ;; Return value:  Size  Location     Type
  5817 ;;                  1    wreg      void 
  5818 ;; Registers used:
  5819 ;;		wreg, status,2, status,0, pclath, cstack
  5820 ;; Tracked objects:
  5821 ;;		On entry : 0/0
  5822 ;;		On exit  : 0/0
  5823 ;;		Unchanged: 0/0
  5824 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  5825 ;;      Params:         0       0       0       0       0       0
  5826 ;;      Locals:         0       0       0       0       0       0
  5827 ;;      Temps:          0       1       0       0       0       0
  5828 ;;      Totals:         0       1       0       0       0       0
  5829 ;;Total ram usage:        1 bytes
  5830 ;; Hardware stack levels used:    1
  5831 ;; Hardware stack levels required when called:    4
  5832 ;; This function calls:
  5833 ;;		_LCD_WriteData
  5834 ;; This function is called by:
  5835 ;;		_main
  5836 ;; This function uses a non-reentrant model
  5837 ;;
  5838                           
  5839                           
  5840                           ;psect for function _LCD_CursorHome
  5841  0CEA                     _LCD_CursorHome:	
  5842                           
  5843                           ;LCD.c: 86: LATA3 = 0;
  5844                           
  5845                           ;incstack = 0
  5846                           ; Regs used in _LCD_CursorHome: [wreg+status,2+status,0+pclath+cstack]
  5847  0CEA  0022               	movlb	2	; select bank2
  5848  0CEB  118C               	bcf	12,3	;volatile
  5849                           
  5850                           ;LCD.c: 87: LCD_WriteData(0x02);
  5851  0CEC  3002               	movlw	2
  5852  0CED  318F  2780  318C   	fcall	_LCD_WriteData
  5853                           
  5854                           ;LCD.c: 88: _delay((unsigned long)((2)*(32000000/4000.0)));
  5855  0CF0  3015               	movlw	21
  5856  0CF1  0020               	movlb	0	; select bank0
  5857  0CF2  00B1               	movwf	??_LCD_CursorHome
  5858  0CF3  30C6               	movlw	198
  5859  0CF4                     u3047:	
  5860  0CF4  0B89               	decfsz	9,f
  5861  0CF5  2CF4               	goto	u3047
  5862  0CF6  0BB1               	decfsz	??_LCD_CursorHome,f
  5863  0CF7  2CF4               	goto	u3047
  5864  0CF8  0000               	nop
  5865  0CF9  0008               	return
  5866  0CFA                     __end_of_LCD_CursorHome:	
  5867                           
  5868                           	psect	text24
  5869  0F80                     __ptext24:	
  5870 ;; *************** function _LCD_WriteData *****************
  5871 ;; Defined at:
  5872 ;;		line 15 in file "LCD.c"
  5873 ;; Parameters:    Size  Location     Type
  5874 ;;  point           1    wreg     char 
  5875 ;; Auto vars:     Size  Location     Type
  5876 ;;  point           1   16[BANK0 ] char 
  5877 ;; Return value:  Size  Location     Type
  5878 ;;                  1    wreg      void 
  5879 ;; Registers used:
  5880 ;;		wreg, status,2, status,0
  5881 ;; Tracked objects:
  5882 ;;		On entry : 0/0
  5883 ;;		On exit  : 0/0
  5884 ;;		Unchanged: 0/0
  5885 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  5886 ;;      Params:         0       0       0       0       0       0
  5887 ;;      Locals:         0       1       0       0       0       0
  5888 ;;      Temps:          0       2       0       0       0       0
  5889 ;;      Totals:         0       3       0       0       0       0
  5890 ;;Total ram usage:        3 bytes
  5891 ;; Hardware stack levels used:    1
  5892 ;; Hardware stack levels required when called:    3
  5893 ;; This function calls:
  5894 ;;		Nothing
  5895 ;; This function is called by:
  5896 ;;		_LCD_Init
  5897 ;;		_putch
  5898 ;;		_LCD_DisplayClear
  5899 ;;		_LCD_CursorHome
  5900 ;;		_LCD_CursorPosition
  5901 ;;		_LCD_Put
  5902 ;;		_LCD_CursorShift
  5903 ;;		_LCD_DispShift
  5904 ;; This function uses a non-reentrant model
  5905 ;;
  5906                           
  5907                           
  5908                           ;psect for function _LCD_WriteData
  5909  0F80                     _LCD_WriteData:	
  5910                           
  5911                           ;incstack = 0
  5912                           ; Regs used in _LCD_WriteData: [wreg+status,2+status,0]
  5913                           ;LCD_WriteData@point stored from wreg
  5914  0F80  0020               	movlb	0	; select bank0
  5915  0F81  00B0               	movwf	LCD_WriteData@point
  5916                           
  5917                           ;LCD.c: 17: _delay((unsigned long)((80)*(32000000/4000000.0)));
  5918  0F82  30D5               	movlw	213
  5919  0F83                     u3057:	
  5920  0F83  0B89               	decfsz	9,f
  5921  0F84  2F83               	goto	u3057
  5922  0F85  0000               	nop
  5923                           
  5924                           ;LCD.c: 18: PORTB = ( (((point>>4)&0x0F&0x0C)<<1)|((point>>4)&0x0F&0x03) );
  5925  0F86  0020               	movlb	0	; select bank0
  5926  0F87  0830               	movf	LCD_WriteData@point,w
  5927  0F88  00AE               	movwf	??_LCD_WriteData
  5928  0F89  3004               	movlw	4
  5929  0F8A                     u2475:	
  5930  0F8A  1003               	clrc
  5931  0F8B  1BAE               	btfsc	??_LCD_WriteData,7
  5932  0F8C  1403               	setc
  5933  0F8D  0CAE               	rrf	??_LCD_WriteData,f
  5934  0F8E  0B89               	decfsz	9,f
  5935  0F8F  2F8A               	goto	u2475
  5936  0F90  3003               	movlw	3
  5937  0F91  052E               	andwf	??_LCD_WriteData,w
  5938  0F92  00AF               	movwf	??_LCD_WriteData+1
  5939  0F93  0E30               	swapf	LCD_WriteData@point,w
  5940  0F94  390F               	andlw	15
  5941  0F95  1989               	btfsc	9,3
  5942  0F96  38F0               	iorlw	240
  5943  0F97  390C               	andlw	12
  5944  0F98  0709               	addwf	9,w
  5945  0F99  042F               	iorwf	??_LCD_WriteData+1,w
  5946  0F9A  008D               	movwf	13	;volatile
  5947                           
  5948                           ;LCD.c: 19: {LATA4 = 1; _delay((unsigned long)((1)*(32000000/4000000.0))); LATA4 = 0; _d
      +                          elay((unsigned long)((1)*(32000000/4000000.0)));};
  5949  0F9B  0022               	movlb	2	; select bank2
  5950  0F9C  160C               	bsf	12,4	;volatile
  5951  0F9D  3200               	nop2	;2 cycle nop
  5952  0F9E  3200               	nop2	;2 cycle nop
  5953  0F9F  3200               	nop2	;2 cycle nop
  5954  0FA0  3200               	nop2	;2 cycle nop
  5955  0FA1  0022               	movlb	2	; select bank2
  5956  0FA2  120C               	bcf	12,4	;volatile
  5957  0FA3  3200               	nop2	;2 cycle nop
  5958  0FA4  3200               	nop2	;2 cycle nop
  5959  0FA5  3200               	nop2	;2 cycle nop
  5960  0FA6  3200               	nop2	;2 cycle nop
  5961                           
  5962                           ;LCD.c: 20: PORTB = ( ((point&0x0F&0x0C)<<1)|(point&0x0F&0x03) );
  5963  0FA7  3003               	movlw	3
  5964  0FA8  0020               	movlb	0	; select bank0
  5965  0FA9  0530               	andwf	LCD_WriteData@point,w
  5966  0FAA  00AE               	movwf	??_LCD_WriteData
  5967  0FAB  0830               	movf	LCD_WriteData@point,w
  5968  0FAC  390C               	andlw	12
  5969  0FAD  0709               	addwf	9,w
  5970  0FAE  042E               	iorwf	??_LCD_WriteData,w
  5971  0FAF  008D               	movwf	13	;volatile
  5972                           
  5973                           ;LCD.c: 21: {LATA4 = 1; _delay((unsigned long)((1)*(32000000/4000000.0))); LATA4 = 0; _d
      +                          elay((unsigned long)((1)*(32000000/4000000.0)));};
  5974  0FB0  0022               	movlb	2	; select bank2
  5975  0FB1  160C               	bsf	12,4	;volatile
  5976  0FB2  3200               	nop2	;2 cycle nop
  5977  0FB3  3200               	nop2	;2 cycle nop
  5978  0FB4  3200               	nop2	;2 cycle nop
  5979  0FB5  3200               	nop2	;2 cycle nop
  5980  0FB6  0022               	movlb	2	; select bank2
  5981  0FB7  120C               	bcf	12,4	;volatile
  5982  0FB8  3200               	nop2	;2 cycle nop
  5983  0FB9  3200               	nop2	;2 cycle nop
  5984  0FBA  3200               	nop2	;2 cycle nop
  5985  0FBB  3200               	nop2	;2 cycle nop
  5986  0FBC  0008               	return
  5987  0FBD                     __end_of_LCD_WriteData:	
  5988                           
  5989                           	psect	text25
  5990  0F0A                     __ptext25:	
  5991 ;; *************** function _DAC_WriteVoltage *****************
  5992 ;; Defined at:
  5993 ;;		line 27 in file "MCP4726.c"
  5994 ;; Parameters:    Size  Location     Type
  5995 ;;  volue           2   30[BANK0 ] unsigned int 
  5996 ;; Auto vars:     Size  Location     Type
  5997 ;;		None
  5998 ;; Return value:  Size  Location     Type
  5999 ;;                  1    wreg      char 
  6000 ;; Registers used:
  6001 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6002 ;; Tracked objects:
  6003 ;;		On entry : 0/0
  6004 ;;		On exit  : 0/0
  6005 ;;		Unchanged: 0/0
  6006 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  6007 ;;      Params:         0       2       0       0       0       0
  6008 ;;      Locals:         0       0       0       0       0       0
  6009 ;;      Temps:          0       3       0       0       0       0
  6010 ;;      Totals:         0       5       0       0       0       0
  6011 ;;Total ram usage:        5 bytes
  6012 ;; Hardware stack levels used:    1
  6013 ;; Hardware stack levels required when called:    5
  6014 ;; This function calls:
  6015 ;;		_I2C_Transmit
  6016 ;; This function is called by:
  6017 ;;		_main
  6018 ;; This function uses a non-reentrant model
  6019 ;;
  6020                           
  6021                           
  6022                           ;psect for function _DAC_WriteVoltage
  6023  0F0A                     _DAC_WriteVoltage:	
  6024                           
  6025                           ;MCP4726.c: 29: VoltageReg.Command = (uint8_t)(0x0);
  6026                           
  6027                           ;incstack = 0
  6028                           ; Regs used in _DAC_WriteVoltage: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6029  0F0A  303F               	movlw	-193
  6030  0F0B  0021               	movlb	1	; select bank1
  6031  0F0C  05C8               	andwf	_VoltageReg^(0+128),f
  6032                           
  6033                           ;MCP4726.c: 30: VoltageReg.PowerDown = ConfigReg.PowerDown;
  6034  0F0D  0020               	movlb	0	; select bank0
  6035  0F0E  0C61               	rrf	_ConfigReg,w
  6036  0F0F  3903               	andlw	3
  6037  0F10  00C0               	movwf	??_DAC_WriteVoltage
  6038  0F11  0EC0               	swapf	??_DAC_WriteVoltage,f
  6039  0F12  0021               	movlb	1	; select bank1
  6040  0F13  0848               	movf	_VoltageReg^(0+128),w
  6041  0F14  0020               	movlb	0	; select bank0
  6042  0F15  0640               	xorwf	??_DAC_WriteVoltage,w
  6043  0F16  39CF               	andlw	-49
  6044  0F17  0640               	xorwf	??_DAC_WriteVoltage,w
  6045  0F18  0021               	movlb	1	; select bank1
  6046  0F19  00C8               	movwf	_VoltageReg^(0+128)
  6047                           
  6048                           ;MCP4726.c: 31: VoltageReg.Voltage4bits = (uint8_t)((volue&0x0F00)>>8);
  6049  0F1A  0020               	movlb	0	; select bank0
  6050  0F1B  083F               	movf	DAC_WriteVoltage@volue+1,w
  6051  0F1C  00C1               	movwf	??_DAC_WriteVoltage+1
  6052  0F1D  083E               	movf	DAC_WriteVoltage@volue,w
  6053  0F1E  00C0               	movwf	??_DAC_WriteVoltage
  6054  0F1F  0841               	movf	??_DAC_WriteVoltage+1,w
  6055  0F20  00C0               	movwf	??_DAC_WriteVoltage
  6056  0F21  01C1               	clrf	??_DAC_WriteVoltage+1
  6057  0F22  300F               	movlw	15
  6058  0F23  0540               	andwf	??_DAC_WriteVoltage,w
  6059  0F24  00C2               	movwf	??_DAC_WriteVoltage+2
  6060  0F25  0021               	movlb	1	; select bank1
  6061  0F26  0848               	movf	_VoltageReg^(0+128),w
  6062  0F27  0020               	movlb	0	; select bank0
  6063  0F28  0642               	xorwf	??_DAC_WriteVoltage+2,w
  6064  0F29  39F0               	andlw	-16
  6065  0F2A  0642               	xorwf	??_DAC_WriteVoltage+2,w
  6066  0F2B  0021               	movlb	1	; select bank1
  6067  0F2C  00C8               	movwf	_VoltageReg^(0+128)
  6068                           
  6069                           ;MCP4726.c: 32: VoltageReg.Voltage8bits = (uint8_t)(volue&0x00FF);
  6070  0F2D  0020               	movlb	0	; select bank0
  6071  0F2E  083E               	movf	DAC_WriteVoltage@volue,w
  6072  0F2F  00C0               	movwf	??_DAC_WriteVoltage
  6073  0F30  0840               	movf	??_DAC_WriteVoltage,w
  6074  0F31  0021               	movlb	1	; select bank1
  6075  0F32  00C9               	movwf	(_VoltageReg^(0+128)+1)
  6076                           
  6077                           ;MCP4726.c: 34: return I2C_Transmit(I2C2_MODULE,0x60,VoltageReg.Voltage_Data,2);
  6078                           ;	Return value of _DAC_WriteVoltage is never used
  6079  0F33  3060               	movlw	96
  6080  0F34  0020               	movlb	0	; select bank0
  6081  0F35  00C0               	movwf	??_DAC_WriteVoltage
  6082  0F36  0840               	movf	??_DAC_WriteVoltage,w
  6083  0F37  00B6               	movwf	I2C_Transmit@address
  6084  0F38  30C8               	movlw	(low (_VoltageReg| 0))& (0+255)
  6085  0F39  00C1               	movwf	??_DAC_WriteVoltage+1
  6086  0F3A  0841               	movf	??_DAC_WriteVoltage+1,w
  6087  0F3B  00B7               	movwf	I2C_Transmit@pData
  6088  0F3C  3002               	movlw	2
  6089  0F3D  00C2               	movwf	??_DAC_WriteVoltage+2
  6090  0F3E  0842               	movf	??_DAC_WriteVoltage+2,w
  6091  0F3F  00B8               	movwf	I2C_Transmit@size
  6092  0F40  3001               	movlw	1
  6093  0F41  318D  25B0         	fcall	_I2C_Transmit
  6094  0F43  0008               	return
  6095  0F44                     __end_of_DAC_WriteVoltage:	
  6096                           
  6097                           	psect	text26
  6098  0E21                     __ptext26:	
  6099 ;; *************** function _DAC_Initialize *****************
  6100 ;; Defined at:
  6101 ;;		line 14 in file "MCP4726.c"
  6102 ;; Parameters:    Size  Location     Type
  6103 ;;		None
  6104 ;; Auto vars:     Size  Location     Type
  6105 ;;		None
  6106 ;; Return value:  Size  Location     Type
  6107 ;;                  1    wreg      void 
  6108 ;; Registers used:
  6109 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6110 ;; Tracked objects:
  6111 ;;		On entry : 0/0
  6112 ;;		On exit  : 0/0
  6113 ;;		Unchanged: 0/0
  6114 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  6115 ;;      Params:         0       0       0       0       0       0
  6116 ;;      Locals:         0       0       0       0       0       0
  6117 ;;      Temps:          0       2       0       0       0       0
  6118 ;;      Totals:         0       2       0       0       0       0
  6119 ;;Total ram usage:        2 bytes
  6120 ;; Hardware stack levels used:    1
  6121 ;; Hardware stack levels required when called:    6
  6122 ;; This function calls:
  6123 ;;		_I2C_Init
  6124 ;;		_I2C_Transmit
  6125 ;; This function is called by:
  6126 ;;		_main
  6127 ;; This function uses a non-reentrant model
  6128 ;;
  6129                           
  6130                           
  6131                           ;psect for function _DAC_Initialize
  6132  0E21                     _DAC_Initialize:	
  6133                           
  6134                           ;MCP4726.c: 16: I2C_Init(I2C2_MODULE,0x00,I2C_MODE_MASTER,I2C_SPEED_STANDARD);
  6135                           
  6136                           ;incstack = 0
  6137                           ; Regs used in _DAC_Initialize: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6138  0E21  0020               	movlb	0	; select bank0
  6139  0E22  01B3               	clrf	I2C_Init@address
  6140  0E23  01B4               	clrf	I2C_Init@mode
  6141  0E24  01B5               	clrf	I2C_Init@Speed
  6142  0E25  3001               	movlw	1
  6143  0E26  318D  257D  318E   	fcall	_I2C_Init
  6144                           
  6145                           ;MCP4726.c: 18: ConfigReg.Command = (uint8_t)(0x4);
  6146  0E29  0020               	movlb	0	; select bank0
  6147  0E2A  0861               	movf	_ConfigReg,w
  6148  0E2B  391F               	andlw	-225
  6149  0E2C  3880               	iorlw	128
  6150  0E2D  00E1               	movwf	_ConfigReg
  6151                           
  6152                           ;MCP4726.c: 19: ConfigReg.Gain = 0x00;
  6153  0E2E  1061               	bcf	_ConfigReg,0
  6154                           
  6155                           ;MCP4726.c: 20: ConfigReg.PowerDown = 0x00;
  6156  0E2F  30F9               	movlw	-7
  6157  0E30  05E1               	andwf	_ConfigReg,f
  6158                           
  6159                           ;MCP4726.c: 21: ConfigReg.Voltage_Ref = 0x00;
  6160  0E31  30E7               	movlw	-25
  6161  0E32  05E1               	andwf	_ConfigReg,f
  6162                           
  6163                           ;MCP4726.c: 23: I2C_Transmit(I2C2_MODULE,0x60,ConfigReg.Config_Data,1);
  6164  0E33  3060               	movlw	96
  6165  0E34  00BE               	movwf	??_DAC_Initialize
  6166  0E35  083E               	movf	??_DAC_Initialize,w
  6167  0E36  00B6               	movwf	I2C_Transmit@address
  6168  0E37  3061               	movlw	(low (_ConfigReg| 0))& (0+255)
  6169  0E38  00BF               	movwf	??_DAC_Initialize+1
  6170  0E39  083F               	movf	??_DAC_Initialize+1,w
  6171  0E3A  00B7               	movwf	I2C_Transmit@pData
  6172  0E3B  01B8               	clrf	I2C_Transmit@size
  6173  0E3C  0AB8               	incf	I2C_Transmit@size,f
  6174  0E3D  3001               	movlw	1
  6175  0E3E  318D  25B0         	fcall	_I2C_Transmit
  6176  0E40  0008               	return
  6177  0E41                     __end_of_DAC_Initialize:	
  6178                           
  6179                           	psect	text27
  6180  0DB0                     __ptext27:	
  6181 ;; *************** function _I2C_Transmit *****************
  6182 ;; Defined at:
  6183 ;;		line 23 in file "I2C_Common.c"
  6184 ;; Parameters:    Size  Location     Type
  6185 ;;  I2Cx            1    wreg     enum E3269
  6186 ;;  address         1   22[BANK0 ] unsigned char 
  6187 ;;  pData           1   23[BANK0 ] PTR unsigned char 
  6188 ;;		 -> VoltageReg(2), ConfigReg(1), 
  6189 ;;  size            1   24[BANK0 ] unsigned char 
  6190 ;; Auto vars:     Size  Location     Type
  6191 ;;  I2Cx            1   28[BANK0 ] enum E3269
  6192 ;;  result          1   29[BANK0 ] char 
  6193 ;; Return value:  Size  Location     Type
  6194 ;;                  1    wreg      char 
  6195 ;; Registers used:
  6196 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6197 ;; Tracked objects:
  6198 ;;		On entry : 0/0
  6199 ;;		On exit  : 0/0
  6200 ;;		Unchanged: 0/0
  6201 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  6202 ;;      Params:         0       3       0       0       0       0
  6203 ;;      Locals:         0       2       0       0       0       0
  6204 ;;      Temps:          0       3       0       0       0       0
  6205 ;;      Totals:         0       8       0       0       0       0
  6206 ;;Total ram usage:        8 bytes
  6207 ;; Hardware stack levels used:    1
  6208 ;; Hardware stack levels required when called:    4
  6209 ;; This function calls:
  6210 ;;		_I2C2_Transmit
  6211 ;; This function is called by:
  6212 ;;		_DAC_Initialize
  6213 ;;		_DAC_WriteVoltage
  6214 ;; This function uses a non-reentrant model
  6215 ;;
  6216                           
  6217                           
  6218                           ;psect for function _I2C_Transmit
  6219  0DB0                     _I2C_Transmit:	
  6220                           
  6221                           ;incstack = 0
  6222                           ; Regs used in _I2C_Transmit: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6223                           ;I2C_Transmit@I2Cx stored from wreg
  6224  0DB0  0020               	movlb	0	; select bank0
  6225  0DB1  00BC               	movwf	I2C_Transmit@I2Cx
  6226                           
  6227                           ;I2C_Common.c: 25: int8_t result;
  6228                           ;I2C_Common.c: 27: switch(I2Cx)
  6229  0DB2  2DC4               	goto	l2200
  6230  0DB3                     l2196:	
  6231                           ;I2C_Common.c: 28: {
  6232                           ;I2C_Common.c: 33: case I2C2_MODULE:
  6233                           
  6234                           
  6235                           ;I2C_Common.c: 34: result = I2C2_Transmit(address,pData,size);
  6236  0DB3  0837               	movf	I2C_Transmit@pData,w
  6237  0DB4  00B9               	movwf	??_I2C_Transmit
  6238  0DB5  0839               	movf	??_I2C_Transmit,w
  6239  0DB6  00AE               	movwf	I2C2_Transmit@pData
  6240  0DB7  0838               	movf	I2C_Transmit@size,w
  6241  0DB8  00BA               	movwf	??_I2C_Transmit+1
  6242  0DB9  083A               	movf	??_I2C_Transmit+1,w
  6243  0DBA  00AF               	movwf	I2C2_Transmit@size
  6244  0DBB  0836               	movf	I2C_Transmit@address,w
  6245  0DBC  3185  2562  318D   	fcall	_I2C2_Transmit
  6246  0DBF  0020               	movlb	0	; select bank0
  6247  0DC0  00BB               	movwf	??_I2C_Transmit+2
  6248  0DC1  083B               	movf	??_I2C_Transmit+2,w
  6249  0DC2  00BD               	movwf	I2C_Transmit@result
  6250                           
  6251                           ;I2C_Common.c: 36: }
  6252                           
  6253                           ;I2C_Common.c: 35: break;
  6254  0DC3  2DC9               	goto	l2202
  6255  0DC4                     l2200:	
  6256  0DC4  083C               	movf	I2C_Transmit@I2Cx,w
  6257                           
  6258                           ; Switch size 1, requested type "space"
  6259                           ; Number of cases is 1, Range of values is 1 to 1
  6260                           ; switch strategies available:
  6261                           ; Name         Instructions Cycles
  6262                           ; simple_byte            4     3 (average)
  6263                           ; direct_byte           11     9 (fixed)
  6264                           ; jumptable            263     9 (fixed)
  6265                           ;	Chosen strategy is simple_byte
  6266  0DC5  3A01               	xorlw	1	; case 1
  6267  0DC6  1903               	skipnz
  6268  0DC7  2DB3               	goto	l2196
  6269  0DC8  2DC9               	goto	l2202
  6270  0DC9                     l2202:	
  6271                           
  6272                           ;I2C_Common.c: 37: return result;
  6273  0DC9  083D               	movf	I2C_Transmit@result,w
  6274  0DCA  0008               	return
  6275  0DCB                     __end_of_I2C_Transmit:	
  6276                           
  6277                           	psect	text28
  6278  0562                     __ptext28:	
  6279 ;; *************** function _I2C2_Transmit *****************
  6280 ;; Defined at:
  6281 ;;		line 52 in file "I2C2.c"
  6282 ;; Parameters:    Size  Location     Type
  6283 ;;  address         1    wreg     unsigned char 
  6284 ;;  pData           1   14[BANK0 ] PTR unsigned char 
  6285 ;;		 -> VoltageReg(2), ConfigReg(1), 
  6286 ;;  size            1   15[BANK0 ] unsigned char 
  6287 ;; Auto vars:     Size  Location     Type
  6288 ;;  address         1   18[BANK0 ] unsigned char 
  6289 ;;  i               1   20[BANK0 ] unsigned char 
  6290 ;;  i               1   19[BANK0 ] unsigned char 
  6291 ;;  result          1   21[BANK0 ] char 
  6292 ;; Return value:  Size  Location     Type
  6293 ;;                  1    wreg      char 
  6294 ;; Registers used:
  6295 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0
  6296 ;; Tracked objects:
  6297 ;;		On entry : 0/0
  6298 ;;		On exit  : 0/0
  6299 ;;		Unchanged: 0/0
  6300 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  6301 ;;      Params:         0       2       0       0       0       0
  6302 ;;      Locals:         0       4       0       0       0       0
  6303 ;;      Temps:          0       2       0       0       0       0
  6304 ;;      Totals:         0       8       0       0       0       0
  6305 ;;Total ram usage:        8 bytes
  6306 ;; Hardware stack levels used:    1
  6307 ;; Hardware stack levels required when called:    3
  6308 ;; This function calls:
  6309 ;;		Nothing
  6310 ;; This function is called by:
  6311 ;;		_I2C_Transmit
  6312 ;; This function uses a non-reentrant model
  6313 ;;
  6314                           
  6315                           
  6316                           ;psect for function _I2C2_Transmit
  6317  0562                     _I2C2_Transmit:	
  6318                           
  6319                           ;incstack = 0
  6320                           ; Regs used in _I2C2_Transmit: [wreg-fsr1h+status,2+status,0]
  6321                           ;I2C2_Transmit@address stored from wreg
  6322  0562  0020               	movlb	0	; select bank0
  6323  0563  00B2               	movwf	I2C2_Transmit@address
  6324                           
  6325                           ;I2C2.c: 54: int8_t result = 0;
  6326  0564  01B5               	clrf	I2C2_Transmit@result
  6327                           
  6328                           ;I2C2.c: 56: switch(I2C2_Config.Mode)
  6329  0565  2DEE               	goto	l2098
  6330  0566                     l2054:	
  6331                           ;I2C2.c: 59: while((SSP2CON2&0x1F)|(SSP2STAT&0x05));
  6332                           
  6333                           ;I2C2.c: 57: {
  6334                           ;I2C2.c: 58: case I2C_MODE_MASTER:
  6335                           
  6336  0566  3005               	movlw	5
  6337  0567  0024               	movlb	4	; select bank4
  6338  0568  051C               	andwf	28,w	;volatile
  6339  0569  0020               	movlb	0	; select bank0
  6340  056A  00B0               	movwf	??_I2C2_Transmit
  6341  056B  0024               	movlb	4	; select bank4
  6342  056C  081E               	movf	30,w	;volatile
  6343  056D  391F               	andlw	31
  6344  056E  0020               	movlb	0	; select bank0
  6345  056F  0430               	iorwf	??_I2C2_Transmit,w
  6346  0570  1D03               	btfss	3,2
  6347  0571  2D66               	goto	l2054
  6348                           
  6349                           ;I2C2.c: 60: SSP2CON2bits.SEN = 1;
  6350  0572  0024               	movlb	4	; select bank4
  6351  0573  141E               	bsf	30,0	;volatile
  6352  0574                     l2056:	
  6353                           ;I2C2.c: 62: while((SSP2CON2&0x1F)|(SSP2STAT&0x05));
  6354                           
  6355  0574  3005               	movlw	5
  6356  0575  0024               	movlb	4	; select bank4
  6357  0576  051C               	andwf	28,w	;volatile
  6358  0577  0020               	movlb	0	; select bank0
  6359  0578  00B0               	movwf	??_I2C2_Transmit
  6360  0579  0024               	movlb	4	; select bank4
  6361  057A  081E               	movf	30,w	;volatile
  6362  057B  391F               	andlw	31
  6363  057C  0020               	movlb	0	; select bank0
  6364  057D  0430               	iorwf	??_I2C2_Transmit,w
  6365  057E  1D03               	btfss	3,2
  6366  057F  2D74               	goto	l2056
  6367                           
  6368                           ;I2C2.c: 63: SSP2BUF = address << 1;
  6369  0580  3532               	lslf	I2C2_Transmit@address,w
  6370  0581  0024               	movlb	4	; select bank4
  6371  0582  0099               	movwf	25	;volatile
  6372  0583                     l91:	
  6373                           ;I2C2.c: 64: while(SSP2STATbits.R_nW);
  6374                           
  6375  0583  191C               	btfsc	28,2	;volatile
  6376  0584  2D83               	goto	l91
  6377                           
  6378                           ;I2C2.c: 66: result = SSP2CON2bits.ACKSTAT;
  6379  0585  3000               	movlw	0
  6380  0586  1B1E               	btfsc	30,6	;volatile
  6381  0587  3001               	movlw	1
  6382  0588  0020               	movlb	0	; select bank0
  6383  0589  00B5               	movwf	I2C2_Transmit@result
  6384                           
  6385                           ;I2C2.c: 67: if (!result)
  6386  058A  0835               	movf	I2C2_Transmit@result,w
  6387  058B  1D03               	btfss	3,2
  6388  058C  2DBA               	goto	l2080
  6389                           
  6390                           ;I2C2.c: 68: {
  6391                           ;I2C2.c: 69: for(uint8_t i=0;i<size;i++)
  6392  058D  01B3               	clrf	I2C2_Transmit@i
  6393  058E  2D93               	goto	l2078
  6394  058F                     l2076:	
  6395                           ;I2C2.c: 79: break;
  6396                           
  6397  058F  3001               	movlw	1
  6398  0590  00B0               	movwf	??_I2C2_Transmit
  6399  0591  0830               	movf	??_I2C2_Transmit,w
  6400  0592  07B3               	addwf	I2C2_Transmit@i,f
  6401  0593                     l2078:	
  6402  0593  082F               	movf	I2C2_Transmit@size,w
  6403  0594  0233               	subwf	I2C2_Transmit@i,w
  6404  0595  1803               	btfsc	3,0
  6405  0596  2DBA               	goto	l2080
  6406  0597                     l2066:	
  6407                           ;I2C2.c: 70: {
  6408                           ;I2C2.c: 71: while((SSP2CON2&0x1F)|(SSP2STAT&0x05));
  6409                           
  6410  0597  3005               	movlw	5
  6411  0598  0024               	movlb	4	; select bank4
  6412  0599  051C               	andwf	28,w	;volatile
  6413  059A  0020               	movlb	0	; select bank0
  6414  059B  00B0               	movwf	??_I2C2_Transmit
  6415  059C  0024               	movlb	4	; select bank4
  6416  059D  081E               	movf	30,w	;volatile
  6417  059E  391F               	andlw	31
  6418  059F  0020               	movlb	0	; select bank0
  6419  05A0  0430               	iorwf	??_I2C2_Transmit,w
  6420  05A1  1D03               	btfss	3,2
  6421  05A2  2D97               	goto	l2066
  6422                           
  6423                           ;I2C2.c: 72: SSP2BUF = *(pData+i);
  6424  05A3  0833               	movf	I2C2_Transmit@i,w
  6425  05A4  072E               	addwf	I2C2_Transmit@pData,w
  6426  05A5  00B0               	movwf	??_I2C2_Transmit
  6427  05A6  0830               	movf	??_I2C2_Transmit,w
  6428  05A7  0086               	movwf	6
  6429  05A8  0187               	clrf	7
  6430  05A9  0801               	movf	1,w
  6431  05AA  0024               	movlb	4	; select bank4
  6432  05AB  0099               	movwf	25	;volatile
  6433  05AC                     l100:	
  6434                           ;I2C2.c: 73: while(SSP2STATbits.R_nW);
  6435                           
  6436  05AC  191C               	btfsc	28,2	;volatile
  6437  05AD  2DAC               	goto	l100
  6438                           
  6439                           ;I2C2.c: 75: result = SSP2CON2bits.ACKSTAT;
  6440  05AE  3000               	movlw	0
  6441  05AF  1B1E               	btfsc	30,6	;volatile
  6442  05B0  3001               	movlw	1
  6443  05B1  0020               	movlb	0	; select bank0
  6444  05B2  00B5               	movwf	I2C2_Transmit@result
  6445                           
  6446                           ;I2C2.c: 76: if (result)
  6447  05B3  0835               	movf	I2C2_Transmit@result,w
  6448  05B4  1903               	btfsc	3,2
  6449  05B5  2D8F               	goto	l2076
  6450                           
  6451                           ;I2C2.c: 77: {
  6452                           ;I2C2.c: 78: result = 2;
  6453  05B6  3002               	movlw	2
  6454  05B7  00B0               	movwf	??_I2C2_Transmit
  6455  05B8  0830               	movf	??_I2C2_Transmit,w
  6456  05B9  00B5               	movwf	I2C2_Transmit@result
  6457  05BA                     l2080:	
  6458                           ;I2C2.c: 80: }
  6459                           ;I2C2.c: 81: }
  6460                           ;I2C2.c: 82: }
  6461                           ;I2C2.c: 84: while((SSP2CON2&0x1F)|(SSP2STAT&0x05));
  6462                           
  6463  05BA  3005               	movlw	5
  6464  05BB  0024               	movlb	4	; select bank4
  6465  05BC  051C               	andwf	28,w	;volatile
  6466  05BD  0020               	movlb	0	; select bank0
  6467  05BE  00B0               	movwf	??_I2C2_Transmit
  6468  05BF  0024               	movlb	4	; select bank4
  6469  05C0  081E               	movf	30,w	;volatile
  6470  05C1  391F               	andlw	31
  6471  05C2  0020               	movlb	0	; select bank0
  6472  05C3  0430               	iorwf	??_I2C2_Transmit,w
  6473  05C4  1D03               	btfss	3,2
  6474  05C5  2DBA               	goto	l2080
  6475                           
  6476                           ;I2C2.c: 85: SSP2CON2bits.PEN = 1;
  6477  05C6  0024               	movlb	4	; select bank4
  6478  05C7  151E               	bsf	30,2	;volatile
  6479                           
  6480                           ;I2C2.c: 86: break;
  6481  05C8  2DF7               	goto	l2100
  6482  05C9                     l109:	
  6483                           ;I2C2.c: 88: case I2C_MODE_SLAVE:
  6484                           
  6485                           
  6486                           ;I2C2.c: 89: if((SSP2STATbits.S==0)&&(SSP2STATbits.P==1))
  6487  05C9  0024               	movlb	4	; select bank4
  6488  05CA  1D9C               	btfss	28,3	;volatile
  6489  05CB  1E1C               	btfss	28,4	;volatile
  6490  05CC  2DEB               	goto	l2094
  6491                           
  6492                           ;I2C2.c: 90: {
  6493                           ;I2C2.c: 91: for(uint8_t i = 0;i<size;i++)
  6494  05CD  0020               	movlb	0	; select bank0
  6495  05CE  01B4               	clrf	I2C2_Transmit@i_172
  6496  05CF                     l2090:	
  6497  05CF  082F               	movf	I2C2_Transmit@size,w
  6498  05D0  0234               	subwf	I2C2_Transmit@i_172,w
  6499  05D1  1803               	btfsc	3,0
  6500  05D2  2DE6               	goto	l2092
  6501                           
  6502                           ;I2C2.c: 92: I2C2_Config.SlaveTransmitBuff[i] = pData[i];
  6503  05D3  0834               	movf	I2C2_Transmit@i_172,w
  6504  05D4  072E               	addwf	I2C2_Transmit@pData,w
  6505  05D5  00B0               	movwf	??_I2C2_Transmit
  6506  05D6  0830               	movf	??_I2C2_Transmit,w
  6507  05D7  0086               	movwf	6
  6508  05D8  0187               	clrf	7
  6509  05D9  0801               	movf	1,w
  6510  05DA  00B1               	movwf	??_I2C2_Transmit+1
  6511  05DB  0834               	movf	I2C2_Transmit@i_172,w
  6512  05DC  3EB5               	addlw	(low (_I2C2_Config| 0))& (0+255)
  6513  05DD  0086               	movwf	6
  6514  05DE  0187               	clrf	7
  6515  05DF  0831               	movf	??_I2C2_Transmit+1,w
  6516  05E0  0081               	movwf	1
  6517  05E1  3001               	movlw	1
  6518  05E2  00B0               	movwf	??_I2C2_Transmit
  6519  05E3  0830               	movf	??_I2C2_Transmit,w
  6520  05E4  07B4               	addwf	I2C2_Transmit@i_172,f
  6521  05E5  2DCF               	goto	l2090
  6522  05E6                     l2092:	
  6523                           
  6524                           ;I2C2.c: 93: result = size;
  6525  05E6  082F               	movf	I2C2_Transmit@size,w
  6526  05E7  00B0               	movwf	??_I2C2_Transmit
  6527  05E8  0830               	movf	??_I2C2_Transmit,w
  6528  05E9  00B5               	movwf	I2C2_Transmit@result
  6529                           
  6530                           ;I2C2.c: 94: }
  6531  05EA  2DF7               	goto	l2100
  6532  05EB                     l2094:	
  6533                           
  6534                           ;I2C2.c: 95: else
  6535                           ;I2C2.c: 96: result = 0;
  6536  05EB  0020               	movlb	0	; select bank0
  6537  05EC  01B5               	clrf	I2C2_Transmit@result
  6538                           
  6539                           ;I2C2.c: 98: }
  6540                           
  6541                           ;I2C2.c: 97: break;
  6542  05ED  2DF7               	goto	l2100
  6543  05EE                     l2098:	
  6544  05EE  0021               	movlb	1	; select bank1
  6545  05EF  0847               	movf	(_I2C2_Config^(0+128)+18),w
  6546                           
  6547                           ; Switch size 1, requested type "space"
  6548                           ; Number of cases is 2, Range of values is 0 to 1
  6549                           ; switch strategies available:
  6550                           ; Name         Instructions Cycles
  6551                           ; simple_byte            7     4 (average)
  6552                           ; direct_byte           10     6 (fixed)
  6553                           ; jumptable            260     6 (fixed)
  6554                           ;	Chosen strategy is simple_byte
  6555  05F0  3A00               	xorlw	0	; case 0
  6556  05F1  1903               	skipnz
  6557  05F2  2D66               	goto	l2054
  6558  05F3  3A01               	xorlw	1	; case 1
  6559  05F4  1903               	skipnz
  6560  05F5  2DC9               	goto	l109
  6561  05F6  2DF7               	goto	l2100
  6562  05F7                     l2100:	
  6563                           
  6564                           ;I2C2.c: 100: return result;
  6565  05F7  0020               	movlb	0	; select bank0
  6566  05F8  0835               	movf	I2C2_Transmit@result,w
  6567  05F9  0008               	return
  6568  05FA                     __end_of_I2C2_Transmit:	
  6569                           
  6570                           	psect	text29
  6571  0D7D                     __ptext29:	
  6572 ;; *************** function _I2C_Init *****************
  6573 ;; Defined at:
  6574 ;;		line 6 in file "I2C_Common.c"
  6575 ;; Parameters:    Size  Location     Type
  6576 ;;  I2Cx            1    wreg     enum E3269
  6577 ;;  address         1   19[BANK0 ] unsigned char 
  6578 ;;  mode            1   20[BANK0 ] enum E3260
  6579 ;;  Speed           1   21[BANK0 ] enum E3264
  6580 ;; Auto vars:     Size  Location     Type
  6581 ;;  I2Cx            1   24[BANK0 ] enum E3269
  6582 ;; Return value:  Size  Location     Type
  6583 ;;                  1    wreg      void 
  6584 ;; Registers used:
  6585 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  6586 ;; Tracked objects:
  6587 ;;		On entry : 0/0
  6588 ;;		On exit  : 0/0
  6589 ;;		Unchanged: 0/0
  6590 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  6591 ;;      Params:         0       3       0       0       0       0
  6592 ;;      Locals:         0       1       0       0       0       0
  6593 ;;      Temps:          0       2       0       0       0       0
  6594 ;;      Totals:         0       6       0       0       0       0
  6595 ;;Total ram usage:        6 bytes
  6596 ;; Hardware stack levels used:    1
  6597 ;; Hardware stack levels required when called:    5
  6598 ;; This function calls:
  6599 ;;		_I2C2_Setting
  6600 ;; This function is called by:
  6601 ;;		_DAC_Initialize
  6602 ;; This function uses a non-reentrant model
  6603 ;;
  6604                           
  6605                           
  6606                           ;psect for function _I2C_Init
  6607  0D7D                     _I2C_Init:	
  6608                           
  6609                           ;incstack = 0
  6610                           ; Regs used in _I2C_Init: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  6611                           ;I2C_Init@I2Cx stored from wreg
  6612  0D7D  0020               	movlb	0	; select bank0
  6613  0D7E  00B8               	movwf	I2C_Init@I2Cx
  6614                           
  6615                           ;I2C_Common.c: 8: switch(I2Cx)
  6616  0D7F  2D8D               	goto	l2192
  6617  0D80                     l2188:	
  6618                           ;I2C_Common.c: 9: {
  6619                           ;I2C_Common.c: 14: case I2C2_MODULE:
  6620                           
  6621                           
  6622                           ;I2C_Common.c: 15: I2C2_Setting(address,mode,Speed);
  6623  0D80  0834               	movf	I2C_Init@mode,w
  6624  0D81  00B6               	movwf	??_I2C_Init
  6625  0D82  0836               	movf	??_I2C_Init,w
  6626  0D83  00AF               	movwf	I2C2_Setting@mode
  6627  0D84  0835               	movf	I2C_Init@Speed,w
  6628  0D85  00B7               	movwf	??_I2C_Init+1
  6629  0D86  0837               	movf	??_I2C_Init+1,w
  6630  0D87  00B0               	movwf	I2C2_Setting@Speed
  6631  0D88  0833               	movf	I2C_Init@address,w
  6632  0D89  3187  27A7  318D   	fcall	_I2C2_Setting
  6633                           
  6634                           ;I2C_Common.c: 17: }
  6635                           
  6636                           ;I2C_Common.c: 16: break;
  6637  0D8C  2D93               	goto	l191
  6638  0D8D                     l2192:	
  6639  0D8D  0020               	movlb	0	; select bank0
  6640  0D8E  0838               	movf	I2C_Init@I2Cx,w
  6641                           
  6642                           ; Switch size 1, requested type "space"
  6643                           ; Number of cases is 1, Range of values is 1 to 1
  6644                           ; switch strategies available:
  6645                           ; Name         Instructions Cycles
  6646                           ; simple_byte            4     3 (average)
  6647                           ; direct_byte           11     9 (fixed)
  6648                           ; jumptable            263     9 (fixed)
  6649                           ;	Chosen strategy is simple_byte
  6650  0D8F  3A01               	xorlw	1	; case 1
  6651  0D90  1903               	skipnz
  6652  0D91  2D80               	goto	l2188
  6653  0D92  2D93               	goto	l191
  6654  0D93                     l191:	
  6655                           
  6656                           ;I2C_Common.c: 19: PEIE = 1;
  6657  0D93  170B               	bsf	11,6	;volatile
  6658                           
  6659                           ;I2C_Common.c: 20: GIE = 1;
  6660  0D94  178B               	bsf	11,7	;volatile
  6661  0D95  0008               	return
  6662  0D96                     __end_of_I2C_Init:	
  6663                           
  6664                           	psect	text30
  6665  07A7                     __ptext30:	
  6666 ;; *************** function _I2C2_Setting *****************
  6667 ;; Defined at:
  6668 ;;		line 15 in file "I2C2.c"
  6669 ;; Parameters:    Size  Location     Type
  6670 ;;  address         1    wreg     unsigned char 
  6671 ;;  mode            1   15[BANK0 ] enum E3260
  6672 ;;  Speed           1   16[BANK0 ] enum E3264
  6673 ;; Auto vars:     Size  Location     Type
  6674 ;;  address         1   18[BANK0 ] unsigned char 
  6675 ;; Return value:  Size  Location     Type
  6676 ;;                  1    wreg      void 
  6677 ;; Registers used:
  6678 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  6679 ;; Tracked objects:
  6680 ;;		On entry : 0/0
  6681 ;;		On exit  : 0/0
  6682 ;;		Unchanged: 0/0
  6683 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  6684 ;;      Params:         0       2       0       0       0       0
  6685 ;;      Locals:         0       1       0       0       0       0
  6686 ;;      Temps:          0       1       0       0       0       0
  6687 ;;      Totals:         0       4       0       0       0       0
  6688 ;;Total ram usage:        4 bytes
  6689 ;; Hardware stack levels used:    1
  6690 ;; Hardware stack levels required when called:    4
  6691 ;; This function calls:
  6692 ;;		_I2C2_PinInit
  6693 ;; This function is called by:
  6694 ;;		_I2C_Init
  6695 ;; This function uses a non-reentrant model
  6696 ;;
  6697                           
  6698                           
  6699                           ;psect for function _I2C2_Setting
  6700  07A7                     _I2C2_Setting:	
  6701                           
  6702                           ;incstack = 0
  6703                           ; Regs used in _I2C2_Setting: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  6704                           ;I2C2_Setting@address stored from wreg
  6705  07A7  0020               	movlb	0	; select bank0
  6706  07A8  00B2               	movwf	I2C2_Setting@address
  6707                           
  6708                           ;I2C2.c: 17: I2C2_PinInit();
  6709  07A9  318C  24A5  3187   	fcall	_I2C2_PinInit
  6710                           
  6711                           ;I2C2.c: 18: I2C2_Config.Mode = mode;
  6712  07AC  0020               	movlb	0	; select bank0
  6713  07AD  082F               	movf	I2C2_Setting@mode,w
  6714  07AE  00B1               	movwf	??_I2C2_Setting
  6715  07AF  0831               	movf	??_I2C2_Setting,w
  6716  07B0  0021               	movlb	1	; select bank1
  6717  07B1  00C7               	movwf	(_I2C2_Config^(0+128)+18)
  6718                           
  6719                           ;I2C2.c: 20: switch(mode)
  6720  07B2  2FDB               	goto	l2050
  6721  07B3                     l74:	
  6722                           ;I2C2.c: 21: {
  6723                           ;I2C2.c: 22: case I2C_MODE_MASTER:
  6724                           
  6725                           
  6726                           ;I2C2.c: 23: SSP2CON1 |= (0x08<<0);
  6727  07B3  0024               	movlb	4	; select bank4
  6728  07B4  159D               	bsf	29,3	;volatile
  6729                           
  6730                           ;I2C2.c: 24: if(Speed==I2C_SPEED_STANDARD)
  6731  07B5  0020               	movlb	0	; select bank0
  6732  07B6  0830               	movf	I2C2_Setting@Speed,w
  6733  07B7  1D03               	btfss	3,2
  6734  07B8  2FBD               	goto	l2028
  6735                           
  6736                           ;I2C2.c: 25: {
  6737                           ;I2C2.c: 26: SSP2STAT |= (1<<7);
  6738  07B9  0024               	movlb	4	; select bank4
  6739  07BA  179C               	bsf	28,7	;volatile
  6740                           
  6741                           ;I2C2.c: 27: SSP2ADD = 0x4F;
  6742  07BB  304F               	movlw	79
  6743  07BC  2FC7               	goto	L5
  6744  07BD                     l2028:	
  6745                           ;I2C2.c: 28: }
  6746                           
  6747                           
  6748                           ;I2C2.c: 29: else if(Speed==I2C_SPEED_HIGH)
  6749  07BD  0020               	movlb	0	; select bank0
  6750  07BE  0330               	decf	I2C2_Setting@Speed,w
  6751  07BF  1D03               	btfss	3,2
  6752  07C0  2FC8               	goto	l2034
  6753                           
  6754                           ;I2C2.c: 30: {
  6755                           ;I2C2.c: 31: SSP2STAT &= ~(1<<7);
  6756  07C1  307F               	movlw	127
  6757  07C2  00B1               	movwf	??_I2C2_Setting
  6758  07C3  0831               	movf	??_I2C2_Setting,w
  6759  07C4  0024               	movlb	4	; select bank4
  6760  07C5  059C               	andwf	28,f	;volatile
  6761                           
  6762                           ;I2C2.c: 32: SSP2ADD = 0x13;
  6763  07C6  3013               	movlw	19
  6764  07C7                     L5:	
  6765  07C7  009A               	movwf	26	;volatile
  6766  07C8                     l2034:	
  6767                           
  6768                           ;I2C2.c: 33: }
  6769                           ;I2C2.c: 34: SSP2CON1bits.SSPEN = 1;
  6770  07C8  0024               	movlb	4	; select bank4
  6771  07C9  2FD9               	goto	l2046
  6772  07CA                     l2036:	
  6773                           ;I2C2.c: 37: case I2C_MODE_SLAVE:
  6774                           
  6775                           ;I2C2.c: 35: break;
  6776                           
  6777                           
  6778                           ;I2C2.c: 38: SSP2STAT = 0x00;
  6779  07CA  0024               	movlb	4	; select bank4
  6780  07CB  019C               	clrf	28	;volatile
  6781                           
  6782                           ;I2C2.c: 39: SSP2CON1 |= (0x06<<0);
  6783  07CC  3006               	movlw	6
  6784  07CD  0020               	movlb	0	; select bank0
  6785  07CE  00B1               	movwf	??_I2C2_Setting
  6786  07CF  0831               	movf	??_I2C2_Setting,w
  6787  07D0  0024               	movlb	4	; select bank4
  6788  07D1  049D               	iorwf	29,f	;volatile
  6789                           
  6790                           ;I2C2.c: 40: SSP2CON2bits.SEN= 1;
  6791  07D2  141E               	bsf	30,0	;volatile
  6792                           
  6793                           ;I2C2.c: 41: SSP2ADD = address << 1;
  6794  07D3  0020               	movlb	0	; select bank0
  6795  07D4  3532               	lslf	I2C2_Setting@address,w
  6796  07D5  0024               	movlb	4	; select bank4
  6797  07D6  009A               	movwf	26	;volatile
  6798                           
  6799                           ;I2C2.c: 42: SSP2MSK = 0xFE;
  6800  07D7  30FE               	movlw	254
  6801  07D8  009B               	movwf	27	;volatile
  6802  07D9                     l2046:	
  6803                           
  6804                           ;I2C2.c: 43: SSP2CON1bits.SSPEN = 1;
  6805  07D9  169D               	bsf	29,5	;volatile
  6806                           
  6807                           ;I2C2.c: 45: }
  6808                           
  6809                           ;I2C2.c: 44: break;
  6810  07DA  2FE4               	goto	l78
  6811  07DB                     l2050:	
  6812  07DB  0020               	movlb	0	; select bank0
  6813  07DC  082F               	movf	I2C2_Setting@mode,w
  6814                           
  6815                           ; Switch size 1, requested type "space"
  6816                           ; Number of cases is 2, Range of values is 0 to 1
  6817                           ; switch strategies available:
  6818                           ; Name         Instructions Cycles
  6819                           ; simple_byte            7     4 (average)
  6820                           ; direct_byte           10     6 (fixed)
  6821                           ; jumptable            260     6 (fixed)
  6822                           ;	Chosen strategy is simple_byte
  6823  07DD  3A00               	xorlw	0	; case 0
  6824  07DE  1903               	skipnz
  6825  07DF  2FB3               	goto	l74
  6826  07E0  3A01               	xorlw	1	; case 1
  6827  07E1  1903               	skipnz
  6828  07E2  2FCA               	goto	l2036
  6829  07E3  2FE4               	goto	l78
  6830  07E4                     l78:	
  6831                           
  6832                           ;I2C2.c: 46: SSP2IE = 1;
  6833  07E4  0021               	movlb	1	; select bank1
  6834  07E5  1414               	bsf	20,0	;volatile
  6835                           
  6836                           ;I2C2.c: 47: BCL2IE = 1;
  6837  07E6  1494               	bsf	20,1	;volatile
  6838                           
  6839                           ;I2C2.c: 48: SSP2IF = 0;
  6840  07E7  0020               	movlb	0	; select bank0
  6841  07E8  1014               	bcf	20,0	;volatile
  6842                           
  6843                           ;I2C2.c: 49: BCL2IF = 0;
  6844  07E9  1094               	bcf	20,1	;volatile
  6845  07EA  0008               	return
  6846  07EB                     __end_of_I2C2_Setting:	
  6847                           
  6848                           	psect	text31
  6849  0CA5                     __ptext31:	
  6850 ;; *************** function _I2C2_PinInit *****************
  6851 ;; Defined at:
  6852 ;;		line 9 in file "I2C2.c"
  6853 ;; Parameters:    Size  Location     Type
  6854 ;;		None
  6855 ;; Auto vars:     Size  Location     Type
  6856 ;;		None
  6857 ;; Return value:  Size  Location     Type
  6858 ;;                  1    wreg      void 
  6859 ;; Registers used:
  6860 ;;		wreg, status,2, status,0
  6861 ;; Tracked objects:
  6862 ;;		On entry : 0/0
  6863 ;;		On exit  : 0/0
  6864 ;;		Unchanged: 0/0
  6865 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  6866 ;;      Params:         0       0       0       0       0       0
  6867 ;;      Locals:         0       0       0       0       0       0
  6868 ;;      Temps:          0       1       0       0       0       0
  6869 ;;      Totals:         0       1       0       0       0       0
  6870 ;;Total ram usage:        1 bytes
  6871 ;; Hardware stack levels used:    1
  6872 ;; Hardware stack levels required when called:    3
  6873 ;; This function calls:
  6874 ;;		Nothing
  6875 ;; This function is called by:
  6876 ;;		_I2C2_Setting
  6877 ;; This function uses a non-reentrant model
  6878 ;;
  6879                           
  6880                           
  6881                           ;psect for function _I2C2_PinInit
  6882  0CA5                     _I2C2_PinInit:	
  6883                           
  6884                           ;I2C2.c: 11: TRISB |= ((1<<2)|(1<<5));
  6885                           
  6886                           ;incstack = 0
  6887                           ; Regs used in _I2C2_PinInit: [wreg+status,2+status,0]
  6888  0CA5  3024               	movlw	36
  6889  0CA6  0020               	movlb	0	; select bank0
  6890  0CA7  00AE               	movwf	??_I2C2_PinInit
  6891  0CA8  082E               	movf	??_I2C2_PinInit,w
  6892  0CA9  0021               	movlb	1	; select bank1
  6893  0CAA  048D               	iorwf	13,f	;volatile
  6894                           
  6895                           ;I2C2.c: 12: ANSELB &= ~((1<<2)|(1<<5));
  6896  0CAB  30DB               	movlw	219
  6897  0CAC  0020               	movlb	0	; select bank0
  6898  0CAD  00AE               	movwf	??_I2C2_PinInit
  6899  0CAE  082E               	movf	??_I2C2_PinInit,w
  6900  0CAF  0023               	movlb	3	; select bank3
  6901  0CB0  058D               	andwf	13,f	;volatile
  6902  0CB1  0008               	return
  6903  0CB2                     __end_of_I2C2_PinInit:	
  6904                           
  6905                           	psect	text32
  6906  0E87                     __ptext32:	
  6907 ;; *************** function _Buzzer_Init *****************
  6908 ;; Defined at:
  6909 ;;		line 11 in file "Buzzer.c"
  6910 ;; Parameters:    Size  Location     Type
  6911 ;;		None
  6912 ;; Auto vars:     Size  Location     Type
  6913 ;;		None
  6914 ;; Return value:  Size  Location     Type
  6915 ;;                  1    wreg      void 
  6916 ;; Registers used:
  6917 ;;		wreg, status,2, status,0
  6918 ;; Tracked objects:
  6919 ;;		On entry : 0/0
  6920 ;;		On exit  : 0/0
  6921 ;;		Unchanged: 0/0
  6922 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  6923 ;;      Params:         0       0       0       0       0       0
  6924 ;;      Locals:         0       0       0       0       0       0
  6925 ;;      Temps:          0       1       0       0       0       0
  6926 ;;      Totals:         0       1       0       0       0       0
  6927 ;;Total ram usage:        1 bytes
  6928 ;; Hardware stack levels used:    1
  6929 ;; Hardware stack levels required when called:    3
  6930 ;; This function calls:
  6931 ;;		Nothing
  6932 ;; This function is called by:
  6933 ;;		_main
  6934 ;; This function uses a non-reentrant model
  6935 ;;
  6936                           
  6937                           
  6938                           ;psect for function _Buzzer_Init
  6939  0E87                     _Buzzer_Init:	
  6940                           
  6941                           ;Buzzer.c: 13: TRISA &= ~(0x01<<7);
  6942                           
  6943                           ;incstack = 0
  6944                           ; Regs used in _Buzzer_Init: [wreg+status,2+status,0]
  6945  0E87  307F               	movlw	127
  6946  0E88  0020               	movlb	0	; select bank0
  6947  0E89  00AE               	movwf	??_Buzzer_Init
  6948  0E8A  082E               	movf	??_Buzzer_Init,w
  6949  0E8B  0021               	movlb	1	; select bank1
  6950  0E8C  058C               	andwf	12,f	;volatile
  6951                           
  6952                           ;Buzzer.c: 14: ANSELA &= ~(0x01<<7);
  6953  0E8D  307F               	movlw	127
  6954  0E8E  0020               	movlb	0	; select bank0
  6955  0E8F  00AE               	movwf	??_Buzzer_Init
  6956  0E90  082E               	movf	??_Buzzer_Init,w
  6957  0E91  0023               	movlb	3	; select bank3
  6958  0E92  058C               	andwf	12,f	;volatile
  6959                           
  6960                           ;Buzzer.c: 15: APFCON0 |= (0x01<<3);
  6961  0E93  0022               	movlb	2	; select bank2
  6962  0E94  159D               	bsf	29,3	;volatile
  6963                           
  6964                           ;Buzzer.c: 17: T2CON |= (0x00<<3);
  6965  0E95  0020               	movlb	0	; select bank0
  6966  0E96  081C               	movf	28,w	;volatile
  6967                           
  6968                           ;Buzzer.c: 18: T2CON |= (0x02<<0);
  6969  0E97  149C               	bsf	28,1	;volatile
  6970                           
  6971                           ;Buzzer.c: 19: T2CON |= (0x01<<2);
  6972  0E98  151C               	bsf	28,2	;volatile
  6973                           
  6974                           ;Buzzer.c: 21: TMR2 = 0x00;
  6975  0E99  019A               	clrf	26	;volatile
  6976                           
  6977                           ;Buzzer.c: 22: PR2 = 0xFF;
  6978  0E9A  30FF               	movlw	255
  6979  0E9B  009B               	movwf	27	;volatile
  6980                           
  6981                           ;Buzzer.c: 24: CCP2CON &= ~(0x03<<6);
  6982  0E9C  303F               	movlw	63
  6983  0E9D  00AE               	movwf	??_Buzzer_Init
  6984  0E9E  082E               	movf	??_Buzzer_Init,w
  6985  0E9F  0025               	movlb	5	; select bank5
  6986  0EA0  059A               	andwf	26,f	;volatile
  6987                           
  6988                           ;Buzzer.c: 25: CCP2CON |= (0x0C<<0);
  6989  0EA1  300C               	movlw	12
  6990  0EA2  0020               	movlb	0	; select bank0
  6991  0EA3  00AE               	movwf	??_Buzzer_Init
  6992  0EA4  082E               	movf	??_Buzzer_Init,w
  6993  0EA5  0025               	movlb	5	; select bank5
  6994  0EA6  049A               	iorwf	26,f	;volatile
  6995                           
  6996                           ;Buzzer.c: 26: CCPTMRS &= ~(0x03<<2);
  6997  0EA7  30F3               	movlw	243
  6998  0EA8  0020               	movlb	0	; select bank0
  6999  0EA9  00AE               	movwf	??_Buzzer_Init
  7000  0EAA  082E               	movf	??_Buzzer_Init,w
  7001  0EAB  0025               	movlb	5	; select bank5
  7002  0EAC  059E               	andwf	30,f	;volatile
  7003                           
  7004                           ;Buzzer.c: 28: CCPR2L = 0x00;
  7005  0EAD  0198               	clrf	24	;volatile
  7006  0EAE  0008               	return
  7007  0EAF                     __end_of_Buzzer_Init:	
  7008                           
  7009                           	psect	text33
  7010  0D1B                     __ptext33:	
  7011 ;; *************** function _Basic_Init *****************
  7012 ;; Defined at:
  7013 ;;		line 71 in file "main.c"
  7014 ;; Parameters:    Size  Location     Type
  7015 ;;		None
  7016 ;; Auto vars:     Size  Location     Type
  7017 ;;		None
  7018 ;; Return value:  Size  Location     Type
  7019 ;;                  1    wreg      char 
  7020 ;; Registers used:
  7021 ;;		wreg, status,2
  7022 ;; Tracked objects:
  7023 ;;		On entry : 0/0
  7024 ;;		On exit  : 0/0
  7025 ;;		Unchanged: 0/0
  7026 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  7027 ;;      Params:         0       0       0       0       0       0
  7028 ;;      Locals:         0       0       0       0       0       0
  7029 ;;      Temps:          0       0       0       0       0       0
  7030 ;;      Totals:         0       0       0       0       0       0
  7031 ;;Total ram usage:        0 bytes
  7032 ;; Hardware stack levels used:    1
  7033 ;; Hardware stack levels required when called:    3
  7034 ;; This function calls:
  7035 ;;		Nothing
  7036 ;; This function is called by:
  7037 ;;		_main
  7038 ;; This function uses a non-reentrant model
  7039 ;;
  7040                           
  7041                           
  7042                           ;psect for function _Basic_Init
  7043  0D1B                     _Basic_Init:	
  7044                           
  7045                           ;main.c: 73: OSCCON = 0xF0;
  7046                           
  7047                           ;incstack = 0
  7048                           ; Regs used in _Basic_Init: [wreg+status,2]
  7049  0D1B  30F0               	movlw	240
  7050  0D1C  0021               	movlb	1	; select bank1
  7051  0D1D  0099               	movwf	25	;volatile
  7052                           
  7053                           ;main.c: 77: TRISA = 0x00;
  7054  0D1E  018C               	clrf	12	;volatile
  7055                           
  7056                           ;main.c: 78: ANSELA = 0x00;
  7057  0D1F  0023               	movlb	3	; select bank3
  7058  0D20  018C               	clrf	12	;volatile
  7059                           
  7060                           ;main.c: 80: TRISB = 0x00;
  7061  0D21  0021               	movlb	1	; select bank1
  7062  0D22  018D               	clrf	13	;volatile
  7063                           
  7064                           ;main.c: 81: ANSELB = 0x00;
  7065  0D23  0023               	movlb	3	; select bank3
  7066  0D24  018D               	clrf	13	;volatile
  7067                           
  7068                           ;main.c: 83: APFCON0 = 0x00;
  7069  0D25  0022               	movlb	2	; select bank2
  7070  0D26  019D               	clrf	29	;volatile
  7071                           
  7072                           ;main.c: 84: APFCON1 = 0x00;
  7073  0D27  019E               	clrf	30	;volatile
  7074                           
  7075                           ;main.c: 86: PORTA = 0x00;
  7076  0D28  0020               	movlb	0	; select bank0
  7077  0D29  018C               	clrf	12	;volatile
  7078                           
  7079                           ;main.c: 87: PORTB = 0x00;
  7080  0D2A  018D               	clrf	13	;volatile
  7081  0D2B  0008               	return
  7082  0D2C                     __end_of_Basic_Init:	
  7083                           ;main.c: 89: return 0;
  7084                           ;	Return value of _Basic_Init is never used
  7085                           
  7086                           
  7087                           	psect	intentry
  7088  0004                     __pintentry:	
  7089 ;; *************** function _Handler *****************
  7090 ;; Defined at:
  7091 ;;		line 92 in file "main.c"
  7092 ;; Parameters:    Size  Location     Type
  7093 ;;		None
  7094 ;; Auto vars:     Size  Location     Type
  7095 ;;		None
  7096 ;; Return value:  Size  Location     Type
  7097 ;;                  1    wreg      void 
  7098 ;; Registers used:
  7099 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7100 ;; Tracked objects:
  7101 ;;		On entry : 0/0
  7102 ;;		On exit  : 0/0
  7103 ;;		Unchanged: 0/0
  7104 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  7105 ;;      Params:         0       0       0       0       0       0
  7106 ;;      Locals:         0       0       0       0       0       0
  7107 ;;      Temps:          0       1       0       0       0       0
  7108 ;;      Totals:         0       1       0       0       0       0
  7109 ;;Total ram usage:        1 bytes
  7110 ;; Hardware stack levels used:    1
  7111 ;; Hardware stack levels required when called:    2
  7112 ;; This function calls:
  7113 ;;		_Buzzer_Count1ms
  7114 ;;		_I2C_CommonInterrupt
  7115 ;;		_Timer1_Count1ms
  7116 ;;		_Timer1_DetectAssignCount
  7117 ;;		_Timer6_CheckFlag
  7118 ;;		_mTouch_IntervalDecrement
  7119 ;;		_mTouch_Read
  7120 ;; This function is called by:
  7121 ;;		Interrupt level 1
  7122 ;; This function uses a non-reentrant model
  7123 ;;
  7124                           
  7125  0004                     _Handler:	
  7126                           
  7127                           ;incstack = 0
  7128  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
  7129                           
  7130                           ; Regs used in _Handler: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7131  0005  3180               	pagesel	$
  7132  0006  0020               	movlb	0	; select bank0
  7133  0007  087F               	movf	127,w
  7134  0008  00AD               	movwf	??_Handler
  7135                           
  7136                           ;main.c: 94: if(Timer1_DetectAssignCount())
  7137  0009  318D  2596  3180   	fcall	_Timer1_DetectAssignCount
  7138  000C  3A00               	xorlw	0
  7139  000D  1903               	skipnz
  7140  000E  2812               	goto	i1l2886
  7141                           
  7142                           ;main.c: 95: LATA6 = !LATA6;
  7143  000F  3040               	movlw	64
  7144  0010  0022               	movlb	2	; select bank2
  7145  0011  068C               	xorwf	12,f
  7146  0012                     i1l2886:	
  7147                           
  7148                           ;main.c: 97: if(Timer6_CheckFlag())
  7149  0012  318C  249A  3180   	fcall	_Timer6_CheckFlag
  7150  0015  3A00               	xorlw	0
  7151  0016  1903               	skipnz
  7152  0017  2824               	goto	i1l2894
  7153                           
  7154                           ;main.c: 98: {
  7155                           ;main.c: 99: mTouch_IntervalDecrement();
  7156  0018  318D  250A  3180   	fcall	_mTouch_IntervalDecrement
  7157                           
  7158                           ;main.c: 100: Timer1_Count1ms();
  7159  001B  3184  24C8  3180   	fcall	_Timer1_Count1ms
  7160                           
  7161                           ;main.c: 102: mTouch_Read();
  7162  001E  318E  2662  3180   	fcall	_mTouch_Read
  7163                           
  7164                           ;main.c: 103: Buzzer_Count1ms();
  7165  0021  318D  2550  3180   	fcall	_Buzzer_Count1ms
  7166  0024                     i1l2894:	
  7167                           
  7168                           ;main.c: 104: }
  7169                           ;main.c: 105: I2C_CommonInterrupt();
  7170  0024  318C  2463         	fcall	_I2C_CommonInterrupt
  7171  0026  0020               	movlb	0	; select bank0
  7172  0027  082D               	movf	??_Handler,w
  7173  0028  00FF               	movwf	127
  7174  0029  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
  7175  002A  0009               	retfie
  7176  002B                     __end_of_Handler:	
  7177                           
  7178                           	psect	text35
  7179  0E62                     __ptext35:	
  7180 ;; *************** function _mTouch_Read *****************
  7181 ;; Defined at:
  7182 ;;		line 29 in file "mTouch.c"
  7183 ;; Parameters:    Size  Location     Type
  7184 ;;		None
  7185 ;; Auto vars:     Size  Location     Type
  7186 ;;		None
  7187 ;; Return value:  Size  Location     Type
  7188 ;;                  1    wreg      void 
  7189 ;; Registers used:
  7190 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  7191 ;; Tracked objects:
  7192 ;;		On entry : 0/0
  7193 ;;		On exit  : 0/0
  7194 ;;		Unchanged: 0/0
  7195 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  7196 ;;      Params:         0       0       0       0       0       0
  7197 ;;      Locals:         0       0       0       0       0       0
  7198 ;;      Temps:          1       0       0       0       0       0
  7199 ;;      Totals:         1       0       0       0       0       0
  7200 ;;Total ram usage:        1 bytes
  7201 ;; Hardware stack levels used:    1
  7202 ;; This function calls:
  7203 ;;		Nothing
  7204 ;; This function is called by:
  7205 ;;		_Handler
  7206 ;; This function uses a non-reentrant model
  7207 ;;
  7208                           
  7209                           
  7210                           ;psect for function _mTouch_Read
  7211  0E62                     _mTouch_Read:	
  7212                           
  7213                           ;mTouch.c: 31: static uint8_t channel=0;
  7214                           ;mTouch.c: 33: CPS_PreData[channel] = CPS_Data[channel];
  7215                           
  7216                           ;incstack = 0
  7217                           ; Regs used in _mTouch_Read: [wreg+fsr1l+fsr1h+status,2+status,0]
  7218  0E62  0020               	movlb	0	; select bank0
  7219  0E63  0860               	movf	mTouch_Read@channel,w
  7220  0E64  3EAF               	addlw	(low (_CPS_Data| 0))& (0+255)
  7221  0E65  0086               	movwf	6
  7222  0E66  0187               	clrf	7
  7223  0E67  0801               	movf	1,w
  7224  0E68  00F0               	movwf	??_mTouch_Read
  7225  0E69  0860               	movf	mTouch_Read@channel,w
  7226  0E6A  3EB2               	addlw	(low (_CPS_PreData| 0))& (0+255)
  7227  0E6B  0086               	movwf	6
  7228  0E6C  0187               	clrf	7
  7229  0E6D  0870               	movf	??_mTouch_Read,w
  7230  0E6E  0081               	movwf	1
  7231                           
  7232                           ;mTouch.c: 35: CPSCON0 &= ~(0x01<<7);;
  7233  0E6F  307F               	movlw	127
  7234  0E70  00F0               	movwf	??_mTouch_Read
  7235  0E71  0870               	movf	??_mTouch_Read,w
  7236  0E72  059E               	andwf	30,f	;volatile
  7237                           
  7238                           ;mTouch.c: 36: CPS_Data[channel] = TMR0;
  7239  0E73  0815               	movf	21,w	;volatile
  7240  0E74  00F0               	movwf	??_mTouch_Read
  7241  0E75  0860               	movf	mTouch_Read@channel,w
  7242  0E76  3EAF               	addlw	(low (_CPS_Data| 0))& (0+255)
  7243  0E77  0086               	movwf	6
  7244  0E78  0187               	clrf	7
  7245  0E79  0870               	movf	??_mTouch_Read,w
  7246  0E7A  0081               	movwf	1
  7247                           
  7248                           ;mTouch.c: 37: TMR0 = 0x00;
  7249  0E7B  0195               	clrf	21	;volatile
  7250                           
  7251                           ;mTouch.c: 38: CPSCON0 |= (0x01<<7);;
  7252  0E7C  179E               	bsf	30,7	;volatile
  7253                           
  7254                           ;mTouch.c: 40: if(channel++>2)channel = 0;
  7255  0E7D  0860               	movf	mTouch_Read@channel,w
  7256  0E7E  0AE0               	incf	mTouch_Read@channel,f
  7257  0E7F  00F0               	movwf	??_mTouch_Read
  7258  0E80  3003               	movlw	3
  7259  0E81  0270               	subwf	??_mTouch_Read,w
  7260  0E82  1803               	btfsc	3,0
  7261  0E83  01E0               	clrf	mTouch_Read@channel
  7262                           
  7263                           ;mTouch.c: 41: CPSCON1 = (uint8_t)channel;
  7264  0E84  0860               	movf	mTouch_Read@channel,w
  7265  0E85  009F               	movwf	31	;volatile
  7266  0E86  0008               	return
  7267  0E87                     __end_of_mTouch_Read:	
  7268                           
  7269                           	psect	text36
  7270  0D0A                     __ptext36:	
  7271 ;; *************** function _mTouch_IntervalDecrement *****************
  7272 ;; Defined at:
  7273 ;;		line 108 in file "main.c"
  7274 ;; Parameters:    Size  Location     Type
  7275 ;;		None
  7276 ;; Auto vars:     Size  Location     Type
  7277 ;;		None
  7278 ;; Return value:  Size  Location     Type
  7279 ;;                  1    wreg      void 
  7280 ;; Registers used:
  7281 ;;		wreg, status,2, status,0
  7282 ;; Tracked objects:
  7283 ;;		On entry : 0/0
  7284 ;;		On exit  : 0/0
  7285 ;;		Unchanged: 0/0
  7286 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  7287 ;;      Params:         0       0       0       0       0       0
  7288 ;;      Locals:         0       0       0       0       0       0
  7289 ;;      Temps:          0       0       0       0       0       0
  7290 ;;      Totals:         0       0       0       0       0       0
  7291 ;;Total ram usage:        0 bytes
  7292 ;; Hardware stack levels used:    1
  7293 ;; This function calls:
  7294 ;;		Nothing
  7295 ;; This function is called by:
  7296 ;;		_Handler
  7297 ;; This function uses a non-reentrant model
  7298 ;;
  7299                           
  7300                           
  7301                           ;psect for function _mTouch_IntervalDecrement
  7302  0D0A                     _mTouch_IntervalDecrement:	
  7303                           
  7304                           ;main.c: 110: if(mTouch_Interval[0]>0)
  7305                           
  7306                           ;incstack = 0
  7307                           ; Regs used in _mTouch_IntervalDecrement: [wreg+status,2+status,0]
  7308  0D0A  0021               	movlb	1	; select bank1
  7309  0D0B  082C               	movf	_mTouch_Interval^(0+128),w
  7310  0D0C  1903               	btfsc	3,2
  7311  0D0D  2D10               	goto	i1l508
  7312                           
  7313                           ;main.c: 111: mTouch_Interval[0]--;
  7314  0D0E  3001               	movlw	1
  7315  0D0F  02AC               	subwf	_mTouch_Interval^(0+128),f
  7316  0D10                     i1l508:	
  7317                           
  7318                           ;main.c: 112: if(mTouch_Interval[1]>0)
  7319  0D10  082D               	movf	(_mTouch_Interval^(0+128)+1),w
  7320  0D11  1903               	btfsc	3,2
  7321  0D12  2D15               	goto	i1l509
  7322                           
  7323                           ;main.c: 113: mTouch_Interval[1]--;
  7324  0D13  3001               	movlw	1
  7325  0D14  02AD               	subwf	(_mTouch_Interval^(0+128)+1),f
  7326  0D15                     i1l509:	
  7327                           
  7328                           ;main.c: 114: if(mTouch_Interval[2]>0)
  7329  0D15  082E               	movf	(_mTouch_Interval^(0+128)+2),w
  7330  0D16  1903               	btfsc	3,2
  7331  0D17  0008               	return
  7332                           
  7333                           ;main.c: 115: mTouch_Interval[2]--;
  7334  0D18  3001               	movlw	1
  7335  0D19  02AE               	subwf	(_mTouch_Interval^(0+128)+2),f
  7336  0D1A  0008               	return
  7337  0D1B                     __end_of_mTouch_IntervalDecrement:	
  7338                           
  7339                           	psect	text37
  7340  0C9A                     __ptext37:	
  7341 ;; *************** function _Timer6_CheckFlag *****************
  7342 ;; Defined at:
  7343 ;;		line 17 in file "Timer6.c"
  7344 ;; Parameters:    Size  Location     Type
  7345 ;;		None
  7346 ;; Auto vars:     Size  Location     Type
  7347 ;;		None
  7348 ;; Return value:  Size  Location     Type
  7349 ;;                  1    wreg      unsigned char 
  7350 ;; Registers used:
  7351 ;;		wreg
  7352 ;; Tracked objects:
  7353 ;;		On entry : 0/0
  7354 ;;		On exit  : 0/0
  7355 ;;		Unchanged: 0/0
  7356 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  7357 ;;      Params:         0       0       0       0       0       0
  7358 ;;      Locals:         0       0       0       0       0       0
  7359 ;;      Temps:          0       0       0       0       0       0
  7360 ;;      Totals:         0       0       0       0       0       0
  7361 ;;Total ram usage:        0 bytes
  7362 ;; Hardware stack levels used:    1
  7363 ;; This function calls:
  7364 ;;		Nothing
  7365 ;; This function is called by:
  7366 ;;		_Handler
  7367 ;; This function uses a non-reentrant model
  7368 ;;
  7369                           
  7370                           
  7371                           ;psect for function _Timer6_CheckFlag
  7372  0C9A                     _Timer6_CheckFlag:	
  7373                           
  7374                           ;Timer6.c: 19: if(TMR6IE&&TMR6IF)
  7375                           
  7376                           ;incstack = 0
  7377                           ; Regs used in _Timer6_CheckFlag: [wreg]
  7378  0C9A  0021               	movlb	1	; select bank1
  7379  0C9B  1D93               	btfss	19,3	;volatile
  7380  0C9C  2CA3               	goto	i1l1700
  7381  0C9D  0020               	movlb	0	; select bank0
  7382  0C9E  1D93               	btfss	19,3	;volatile
  7383  0C9F  2CA3               	goto	i1l1700
  7384                           
  7385                           ;Timer6.c: 20: {
  7386                           ;Timer6.c: 21: TMR6IF = 0;
  7387  0CA0  1193               	bcf	19,3	;volatile
  7388                           
  7389                           ;Timer6.c: 22: return 1;
  7390  0CA1  3001               	movlw	1
  7391  0CA2  0008               	return
  7392  0CA3                     i1l1700:	
  7393                           
  7394                           ;Timer6.c: 23: }
  7395                           ;Timer6.c: 24: return 0;
  7396  0CA3  3000               	movlw	0
  7397  0CA4  0008               	return
  7398  0CA5                     __end_of_Timer6_CheckFlag:	
  7399                           
  7400                           	psect	text38
  7401  0D96                     __ptext38:	
  7402 ;; *************** function _Timer1_DetectAssignCount *****************
  7403 ;; Defined at:
  7404 ;;		line 105 in file "Timer1.c"
  7405 ;; Parameters:    Size  Location     Type
  7406 ;;		None
  7407 ;; Auto vars:     Size  Location     Type
  7408 ;;		None
  7409 ;; Return value:  Size  Location     Type
  7410 ;;                  1    wreg      unsigned char 
  7411 ;; Registers used:
  7412 ;;		wreg
  7413 ;; Tracked objects:
  7414 ;;		On entry : 0/0
  7415 ;;		On exit  : 0/0
  7416 ;;		Unchanged: 0/0
  7417 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  7418 ;;      Params:         0       0       0       0       0       0
  7419 ;;      Locals:         0       0       0       0       0       0
  7420 ;;      Temps:          0       0       0       0       0       0
  7421 ;;      Totals:         0       0       0       0       0       0
  7422 ;;Total ram usage:        0 bytes
  7423 ;; Hardware stack levels used:    1
  7424 ;; This function calls:
  7425 ;;		Nothing
  7426 ;; This function is called by:
  7427 ;;		_Handler
  7428 ;; This function uses a non-reentrant model
  7429 ;;
  7430                           
  7431                           
  7432                           ;psect for function _Timer1_DetectAssignCount
  7433  0D96                     _Timer1_DetectAssignCount:	
  7434                           
  7435                           ;Timer1.c: 107: if(TMR1IF&&TMR1IE)
  7436                           
  7437                           ;incstack = 0
  7438                           ; Regs used in _Timer1_DetectAssignCount: [wreg]
  7439  0D96  0020               	movlb	0	; select bank0
  7440  0D97  1C11               	btfss	17,0	;volatile
  7441  0D98  2DAE               	goto	i1l2588
  7442  0D99  0021               	movlb	1	; select bank1
  7443  0D9A  1C11               	btfss	17,0	;volatile
  7444  0D9B  2DAE               	goto	i1l2588
  7445                           
  7446                           ;Timer1.c: 108: {
  7447                           ;Timer1.c: 109: cnts.SigmaDeltaCount+= 10UL;
  7448  0D9C  300A               	movlw	10
  7449  0D9D  07A0               	addwf	_cnts^(0+128),f
  7450  0D9E  3000               	movlw	0
  7451  0D9F  3DA1               	addwfc	(_cnts+1)^(0+128),f
  7452  0DA0  3000               	movlw	0
  7453  0DA1  3DA2               	addwfc	(_cnts+2)^(0+128),f
  7454  0DA2  3000               	movlw	0
  7455  0DA3  3DA3               	addwfc	(_cnts+3)^(0+128),f
  7456                           
  7457                           ;Timer1.c: 111: {TMR1ON = 0; TMR1 = (uint16_t)0xFFFF-10UL+1; TMR1ON = 1; };
  7458  0DA4  0020               	movlb	0	; select bank0
  7459  0DA5  1018               	bcf	24,0	;volatile
  7460  0DA6  30FF               	movlw	255
  7461  0DA7  0097               	movwf	23	;volatile
  7462  0DA8  30F6               	movlw	246
  7463  0DA9  0096               	movwf	22	;volatile
  7464  0DAA  1418               	bsf	24,0	;volatile
  7465                           
  7466                           ;Timer1.c: 112: TMR1IF = 0;
  7467  0DAB  1011               	bcf	17,0	;volatile
  7468                           
  7469                           ;Timer1.c: 113: return 1;
  7470  0DAC  3001               	movlw	1
  7471  0DAD  0008               	return
  7472  0DAE                     i1l2588:	
  7473                           
  7474                           ;Timer1.c: 114: }
  7475                           ;Timer1.c: 115: return 0;
  7476  0DAE  3000               	movlw	0
  7477  0DAF  0008               	return
  7478  0DB0                     __end_of_Timer1_DetectAssignCount:	
  7479                           
  7480                           	psect	text39
  7481  04C8                     __ptext39:	
  7482 ;; *************** function _Timer1_Count1ms *****************
  7483 ;; Defined at:
  7484 ;;		line 79 in file "Timer1.c"
  7485 ;; Parameters:    Size  Location     Type
  7486 ;;		None
  7487 ;; Auto vars:     Size  Location     Type
  7488 ;;		None
  7489 ;; Return value:  Size  Location     Type
  7490 ;;                  1    wreg      void 
  7491 ;; Registers used:
  7492 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7493 ;; Tracked objects:
  7494 ;;		On entry : 0/0
  7495 ;;		On exit  : 0/0
  7496 ;;		Unchanged: 0/0
  7497 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  7498 ;;      Params:         0       0       0       0       0       0
  7499 ;;      Locals:         0       0       0       0       0       0
  7500 ;;      Temps:          1       0       0       0       0       0
  7501 ;;      Totals:         1       0       0       0       0       0
  7502 ;;Total ram usage:        1 bytes
  7503 ;; Hardware stack levels used:    1
  7504 ;; Hardware stack levels required when called:    1
  7505 ;; This function calls:
  7506 ;;		___lmul
  7507 ;;		i1_Buzzer_MiliSecond
  7508 ;;		i1___lldiv
  7509 ;; This function is called by:
  7510 ;;		_Handler
  7511 ;; This function uses a non-reentrant model
  7512 ;;
  7513                           
  7514                           
  7515                           ;psect for function _Timer1_Count1ms
  7516  04C8                     _Timer1_Count1ms:	
  7517                           
  7518                           ;Timer1.c: 81: tcnt.Delta_t++;
  7519                           
  7520                           ;incstack = 0
  7521                           ; Regs used in _Timer1_Count1ms: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7522  04C8  3001               	movlw	1
  7523  04C9  0020               	movlb	0	; select bank0
  7524  04CA  07D6               	addwf	_tcnt+2,f
  7525  04CB  3000               	movlw	0
  7526  04CC  3DD7               	addwfc	_tcnt+3,f
  7527  04CD  3000               	movlw	0
  7528  04CE  3DD8               	addwfc	_tcnt+4,f
  7529  04CF  3000               	movlw	0
  7530  04D0  3DD9               	addwfc	_tcnt+5,f
  7531                           
  7532                           ;Timer1.c: 82: tcnt.RenewalRersult++;
  7533  04D1  3001               	movlw	1
  7534  04D2  07DA               	addwf	_tcnt+6,f
  7535  04D3  3000               	movlw	0
  7536  04D4  3DDB               	addwfc	_tcnt+7,f
  7537                           
  7538                           ;Timer1.c: 83: if((tcnt.RenewalRersult>1000))
  7539  04D5  3003               	movlw	3
  7540  04D6  025B               	subwf	_tcnt+7,w
  7541  04D7  30E9               	movlw	233
  7542  04D8  1903               	skipnz
  7543  04D9  025A               	subwf	_tcnt+6,w
  7544  04DA  1C03               	skipc
  7545  04DB  0008               	return
  7546                           
  7547                           ;Timer1.c: 84: {
  7548                           ;Timer1.c: 85: tcnt.RenewalRersult = 0;
  7549  04DC  01DA               	clrf	_tcnt+6
  7550  04DD  01DB               	clrf	_tcnt+7
  7551                           
  7552                           ;Timer1.c: 86: cnts.AverageCPS = (uint32_t)((cnts.SigmaDeltaCount * 1000UL)/tcnt.Delta_t
      +                          );
  7553  04DE  3002               	movlw	2
  7554  04DF  3E54               	addlw	(low (_tcnt| 0))& (0+255)
  7555  04E0  0086               	movwf	6
  7556  04E1  0187               	clrf	7
  7557  04E2  3F40               	moviw [0]fsr1
  7558  04E3  00A0               	movwf	i1___lldiv@divisor
  7559  04E4  3F41               	moviw [1]fsr1
  7560  04E5  00A1               	movwf	i1___lldiv@divisor+1
  7561  04E6  3F42               	moviw [2]fsr1
  7562  04E7  00A2               	movwf	i1___lldiv@divisor+2
  7563  04E8  3F43               	moviw [3]fsr1
  7564  04E9  00A3               	movwf	i1___lldiv@divisor+3
  7565  04EA  0021               	movlb	1	; select bank1
  7566  04EB  0823               	movf	(_cnts+3)^(0+128),w
  7567  04EC  00F3               	movwf	___lmul@multiplier+3
  7568  04ED  0822               	movf	(_cnts+2)^(0+128),w
  7569  04EE  00F2               	movwf	___lmul@multiplier+2
  7570  04EF  0821               	movf	(_cnts+1)^(0+128),w
  7571  04F0  00F1               	movwf	___lmul@multiplier+1
  7572  04F1  0820               	movf	_cnts^(0+128),w
  7573  04F2  00F0               	movwf	___lmul@multiplier
  7574  04F3  3000               	movlw	0
  7575  04F4  00F7               	movwf	___lmul@multiplicand+3
  7576  04F5  3000               	movlw	0
  7577  04F6  00F6               	movwf	___lmul@multiplicand+2
  7578  04F7  3003               	movlw	3
  7579  04F8  00F5               	movwf	___lmul@multiplicand+1
  7580  04F9  30E8               	movlw	232
  7581  04FA  00F4               	movwf	___lmul@multiplicand
  7582  04FB  318E  26DB  3184   	fcall	___lmul
  7583  04FE  0873               	movf	?___lmul+3,w
  7584  04FF  0020               	movlb	0	; select bank0
  7585  0500  00A7               	movwf	i1___lldiv@dividend+3
  7586  0501  0872               	movf	?___lmul+2,w
  7587  0502  00A6               	movwf	i1___lldiv@dividend+2
  7588  0503  0871               	movf	?___lmul+1,w
  7589  0504  00A5               	movwf	i1___lldiv@dividend+1
  7590  0505  0870               	movf	?___lmul,w
  7591  0506  00A4               	movwf	i1___lldiv@dividend
  7592  0507  3187  2710  3184   	fcall	i1___lldiv
  7593  050A  0020               	movlb	0	; select bank0
  7594  050B  0823               	movf	?i1___lldiv+3,w
  7595  050C  0021               	movlb	1	; select bank1
  7596  050D  00A7               	movwf	((_cnts+3)^(0+128)+4)
  7597  050E  0020               	movlb	0	; select bank0
  7598  050F  0822               	movf	?i1___lldiv+2,w
  7599  0510  0021               	movlb	1	; select bank1
  7600  0511  00A6               	movwf	((_cnts+2)^(0+128)+4)
  7601  0512  0020               	movlb	0	; select bank0
  7602  0513  0821               	movf	?i1___lldiv+1,w
  7603  0514  0021               	movlb	1	; select bank1
  7604  0515  00A5               	movwf	((_cnts+1)^(0+128)+4)
  7605  0516  0020               	movlb	0	; select bank0
  7606  0517  0820               	movf	?i1___lldiv,w
  7607  0518  0021               	movlb	1	; select bank1
  7608  0519  00A4               	movwf	(_cnts^(0+128)+4)
  7609                           
  7610                           ;Timer1.c: 87: cnts.AverageCPM = (uint32_t)(cnts.AverageCPS*60);
  7611  051A  3004               	movlw	4
  7612  051B  3EA0               	addlw	(low (_cnts| 0))& (0+255)
  7613  051C  0086               	movwf	6
  7614  051D  0187               	clrf	7
  7615  051E  3F40               	moviw [0]fsr1
  7616  051F  00F0               	movwf	___lmul@multiplier
  7617  0520  3F41               	moviw [1]fsr1
  7618  0521  00F1               	movwf	___lmul@multiplier+1
  7619  0522  3F42               	moviw [2]fsr1
  7620  0523  00F2               	movwf	___lmul@multiplier+2
  7621  0524  3F43               	moviw [3]fsr1
  7622  0525  00F3               	movwf	___lmul@multiplier+3
  7623  0526  3000               	movlw	0
  7624  0527  00F7               	movwf	___lmul@multiplicand+3
  7625  0528  3000               	movlw	0
  7626  0529  00F6               	movwf	___lmul@multiplicand+2
  7627  052A  3000               	movlw	0
  7628  052B  00F5               	movwf	___lmul@multiplicand+1
  7629  052C  303C               	movlw	60
  7630  052D  00F4               	movwf	___lmul@multiplicand
  7631  052E  318E  26DB  3184   	fcall	___lmul
  7632  0531  0873               	movf	?___lmul+3,w
  7633  0532  0021               	movlb	1	; select bank1
  7634  0533  00AB               	movwf	((_cnts+3)^(0+128)+8)
  7635  0534  0872               	movf	?___lmul+2,w
  7636  0535  00AA               	movwf	((_cnts+2)^(0+128)+8)
  7637  0536  0871               	movf	?___lmul+1,w
  7638  0537  00A9               	movwf	((_cnts+1)^(0+128)+8)
  7639  0538  0870               	movf	?___lmul,w
  7640  0539  00A8               	movwf	(_cnts^(0+128)+8)
  7641                           
  7642                           ;Timer1.c: 89: tcnt.Second_t++;
  7643  053A  3001               	movlw	1
  7644  053B  00FD               	movwf	??_Timer1_Count1ms
  7645  053C  087D               	movf	??_Timer1_Count1ms,w
  7646  053D  0020               	movlb	0	; select bank0
  7647  053E  07D4               	addwf	_tcnt,f
  7648                           
  7649                           ;Timer1.c: 91: if((56<tcnt.Second_t)&&(tcnt.Second_t!=60))
  7650  053F  3039               	movlw	57
  7651  0540  0254               	subwf	_tcnt,w
  7652  0541  1C03               	skipc
  7653  0542  2D4B               	goto	i1l2562
  7654  0543  303C               	movlw	60
  7655  0544  0654               	xorwf	_tcnt,w
  7656  0545  1903               	btfsc	3,2
  7657  0546  2D4B               	goto	i1l2562
  7658                           
  7659                           ;Timer1.c: 92: Buzzer_MiliSecond(300);
  7660  0547  302C               	movlw	44
  7661  0548  00F0               	movwf	i1Buzzer_MiliSecond@time
  7662  0549  3001               	movlw	1
  7663  054A  2D53               	goto	L6
  7664  054B                     i1l2562:	
  7665                           
  7666                           ;Timer1.c: 93: else if(tcnt.Second_t==60)
  7667  054B  303C               	movlw	60
  7668  054C  0020               	movlb	0	; select bank0
  7669  054D  0654               	xorwf	_tcnt,w
  7670  054E  1D03               	btfss	3,2
  7671  054F  2D57               	goto	i1l2566
  7672                           
  7673                           ;Timer1.c: 94: Buzzer_MiliSecond(600);
  7674  0550  3058               	movlw	88
  7675  0551  00F0               	movwf	i1Buzzer_MiliSecond@time
  7676  0552  3002               	movlw	2
  7677  0553                     L6:	
  7678  0553  00F1               	movwf	i1Buzzer_MiliSecond@time+1
  7679  0554  318C  2486  3184   	fcall	i1_Buzzer_MiliSecond
  7680  0557                     i1l2566:	
  7681                           
  7682                           ;Timer1.c: 96: if(tcnt.Second_t>59)
  7683  0557  303C               	movlw	60
  7684  0558  0020               	movlb	0	; select bank0
  7685  0559  0254               	subwf	_tcnt,w
  7686  055A  1C03               	skipc
  7687  055B  0008               	return
  7688                           
  7689                           ;Timer1.c: 97: {
  7690                           ;Timer1.c: 98: tcnt.Second_t = 0;
  7691  055C  01D4               	clrf	_tcnt
  7692                           
  7693                           ;Timer1.c: 99: tcnt.Minute_t++;
  7694  055D  3001               	movlw	1
  7695  055E  00FD               	movwf	??_Timer1_Count1ms
  7696  055F  087D               	movf	??_Timer1_Count1ms,w
  7697  0560  07D5               	addwf	_tcnt+1,f
  7698  0561  0008               	return
  7699  0562                     __end_of_Timer1_Count1ms:	
  7700                           
  7701                           	psect	text40
  7702  0710                     __ptext40:	
  7703 ;; *************** function i1___lldiv *****************
  7704 ;; Defined at:
  7705 ;;		line 6 in file "/opt/microchip/xc8/v1.41/sources/common/lldiv.c"
  7706 ;; Parameters:    Size  Location     Type
  7707 ;;  divisor         4    0[BANK0 ] unsigned long 
  7708 ;;  dividend        4    4[BANK0 ] unsigned long 
  7709 ;; Auto vars:     Size  Location     Type
  7710 ;;  __lldiv         4    8[BANK0 ] unsigned long 
  7711 ;;  __lldiv         1   12[BANK0 ] unsigned char 
  7712 ;; Return value:  Size  Location     Type
  7713 ;;                  4    0[BANK0 ] unsigned long 
  7714 ;; Registers used:
  7715 ;;		wreg, status,2, status,0
  7716 ;; Tracked objects:
  7717 ;;		On entry : 0/0
  7718 ;;		On exit  : 0/0
  7719 ;;		Unchanged: 0/0
  7720 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  7721 ;;      Params:         0       8       0       0       0       0
  7722 ;;      Locals:         0       5       0       0       0       0
  7723 ;;      Temps:          1       0       0       0       0       0
  7724 ;;      Totals:         1      13       0       0       0       0
  7725 ;;Total ram usage:       14 bytes
  7726 ;; Hardware stack levels used:    1
  7727 ;; This function calls:
  7728 ;;		Nothing
  7729 ;; This function is called by:
  7730 ;;		_Timer1_Count1ms
  7731 ;; This function uses a non-reentrant model
  7732 ;;
  7733                           
  7734                           
  7735                           ;psect for function i1___lldiv
  7736  0710                     i1___lldiv:	
  7737                           
  7738                           ;incstack = 0
  7739                           ; Regs used in i1___lldiv: [wreg+status,2+status,0]
  7740  0710  3000               	movlw	0
  7741  0711  0020               	movlb	0	; select bank0
  7742  0712  00AB               	movwf	i1___lldiv@quotient+3
  7743  0713  3000               	movlw	0
  7744  0714  00AA               	movwf	i1___lldiv@quotient+2
  7745  0715  3000               	movlw	0
  7746  0716  00A9               	movwf	i1___lldiv@quotient+1
  7747  0717  3000               	movlw	0
  7748  0718  00A8               	movwf	i1___lldiv@quotient
  7749  0719  0823               	movf	i1___lldiv@divisor+3,w
  7750  071A  0422               	iorwf	i1___lldiv@divisor+2,w
  7751  071B  0421               	iorwf	i1___lldiv@divisor+1,w
  7752  071C  0420               	iorwf	i1___lldiv@divisor,w
  7753  071D  1903               	skipnz
  7754  071E  2F5A               	goto	i1l2334
  7755  071F  01AC               	clrf	i1___lldiv@counter
  7756  0720  0AAC               	incf	i1___lldiv@counter,f
  7757  0721                     i1l2320:	
  7758  0721  1BA3               	btfsc	i1___lldiv@divisor+3,7
  7759  0722  2F2F               	goto	i1l2322
  7760  0723  3001               	movlw	1
  7761  0724                     u180_25:	
  7762  0724  35A0               	lslf	i1___lldiv@divisor,f
  7763  0725  0DA1               	rlf	i1___lldiv@divisor+1,f
  7764  0726  0DA2               	rlf	i1___lldiv@divisor+2,f
  7765  0727  0DA3               	rlf	i1___lldiv@divisor+3,f
  7766  0728  0B89               	decfsz	9,f
  7767  0729  2F24               	goto	u180_25
  7768  072A  3001               	movlw	1
  7769  072B  00FC               	movwf	??i1___lldiv
  7770  072C  087C               	movf	??i1___lldiv,w
  7771  072D  07AC               	addwf	i1___lldiv@counter,f
  7772  072E  2F21               	goto	i1l2320
  7773  072F                     i1l2322:	
  7774  072F  3001               	movlw	1
  7775  0730                     u182_25:	
  7776  0730  35A8               	lslf	i1___lldiv@quotient,f
  7777  0731  0DA9               	rlf	i1___lldiv@quotient+1,f
  7778  0732  0DAA               	rlf	i1___lldiv@quotient+2,f
  7779  0733  0DAB               	rlf	i1___lldiv@quotient+3,f
  7780  0734  0B89               	decfsz	9,f
  7781  0735  2F30               	goto	u182_25
  7782  0736  0823               	movf	i1___lldiv@divisor+3,w
  7783  0737  0227               	subwf	i1___lldiv@dividend+3,w
  7784  0738  1D03               	skipz
  7785  0739  2F44               	goto	u183_25
  7786  073A  0822               	movf	i1___lldiv@divisor+2,w
  7787  073B  0226               	subwf	i1___lldiv@dividend+2,w
  7788  073C  1D03               	skipz
  7789  073D  2F44               	goto	u183_25
  7790  073E  0821               	movf	i1___lldiv@divisor+1,w
  7791  073F  0225               	subwf	i1___lldiv@dividend+1,w
  7792  0740  1D03               	skipz
  7793  0741  2F44               	goto	u183_25
  7794  0742  0820               	movf	i1___lldiv@divisor,w
  7795  0743  0224               	subwf	i1___lldiv@dividend,w
  7796  0744                     u183_25:	
  7797  0744  1C03               	skipc
  7798  0745  2F4F               	goto	i1l2330
  7799  0746  0820               	movf	i1___lldiv@divisor,w
  7800  0747  02A4               	subwf	i1___lldiv@dividend,f
  7801  0748  0821               	movf	i1___lldiv@divisor+1,w
  7802  0749  3BA5               	subwfb	i1___lldiv@dividend+1,f
  7803  074A  0822               	movf	i1___lldiv@divisor+2,w
  7804  074B  3BA6               	subwfb	i1___lldiv@dividend+2,f
  7805  074C  0823               	movf	i1___lldiv@divisor+3,w
  7806  074D  3BA7               	subwfb	i1___lldiv@dividend+3,f
  7807  074E  1428               	bsf	i1___lldiv@quotient,0
  7808  074F                     i1l2330:	
  7809  074F  3001               	movlw	1
  7810  0750                     u184_25:	
  7811  0750  36A3               	lsrf	i1___lldiv@divisor+3,f
  7812  0751  0CA2               	rrf	i1___lldiv@divisor+2,f
  7813  0752  0CA1               	rrf	i1___lldiv@divisor+1,f
  7814  0753  0CA0               	rrf	i1___lldiv@divisor,f
  7815  0754  0B89               	decfsz	9,f
  7816  0755  2F50               	goto	u184_25
  7817  0756  3001               	movlw	1
  7818  0757  02AC               	subwf	i1___lldiv@counter,f
  7819  0758  1D03               	btfss	3,2
  7820  0759  2F2F               	goto	i1l2322
  7821  075A                     i1l2334:	
  7822  075A  082B               	movf	i1___lldiv@quotient+3,w
  7823  075B  00A3               	movwf	?i1___lldiv+3
  7824  075C  082A               	movf	i1___lldiv@quotient+2,w
  7825  075D  00A2               	movwf	?i1___lldiv+2
  7826  075E  0829               	movf	i1___lldiv@quotient+1,w
  7827  075F  00A1               	movwf	?i1___lldiv+1
  7828  0760  0828               	movf	i1___lldiv@quotient,w
  7829  0761  00A0               	movwf	?i1___lldiv
  7830  0762  0008               	return
  7831  0763                     __end_ofi1___lldiv:	
  7832                           
  7833                           	psect	text41
  7834  0C86                     __ptext41:	
  7835 ;; *************** function i1_Buzzer_MiliSecond *****************
  7836 ;; Defined at:
  7837 ;;		line 38 in file "Buzzer.c"
  7838 ;; Parameters:    Size  Location     Type
  7839 ;;  time            2    0[COMMON] unsigned int 
  7840 ;; Auto vars:     Size  Location     Type
  7841 ;;		None
  7842 ;; Return value:  Size  Location     Type
  7843 ;;                  1    wreg      void 
  7844 ;; Registers used:
  7845 ;;		wreg, status,2, status,0
  7846 ;; Tracked objects:
  7847 ;;		On entry : 0/0
  7848 ;;		On exit  : 0/0
  7849 ;;		Unchanged: 0/0
  7850 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  7851 ;;      Params:         2       0       0       0       0       0
  7852 ;;      Locals:         0       0       0       0       0       0
  7853 ;;      Temps:          0       0       0       0       0       0
  7854 ;;      Totals:         2       0       0       0       0       0
  7855 ;;Total ram usage:        2 bytes
  7856 ;; Hardware stack levels used:    1
  7857 ;; This function calls:
  7858 ;;		Nothing
  7859 ;; This function is called by:
  7860 ;;		_Timer1_Count1ms
  7861 ;; This function uses a non-reentrant model
  7862 ;;
  7863                           
  7864                           
  7865                           ;psect for function i1_Buzzer_MiliSecond
  7866  0C86                     i1_Buzzer_MiliSecond:	
  7867                           
  7868                           ;Buzzer.c: 40: if(count==0)
  7869                           
  7870                           ;incstack = 0
  7871                           ; Regs used in i1_Buzzer_MiliSecond: [wreg+status,2+status,0]
  7872  0C86  0020               	movlb	0	; select bank0
  7873  0C87  085E               	movf	_count,w
  7874  0C88  045F               	iorwf	_count+1,w
  7875  0C89  1D03               	btfss	3,2
  7876  0C8A  0008               	return
  7877                           
  7878                           ;Buzzer.c: 41: count = time;
  7879  0C8B  0871               	movf	i1Buzzer_MiliSecond@time+1,w
  7880  0C8C  00DF               	movwf	_count+1
  7881  0C8D  0870               	movf	i1Buzzer_MiliSecond@time,w
  7882  0C8E  00DE               	movwf	_count
  7883  0C8F  0008               	return
  7884  0C90                     __end_ofi1_Buzzer_MiliSecond:	
  7885                           
  7886                           	psect	text42
  7887  0EDB                     __ptext42:	
  7888 ;; *************** function ___lmul *****************
  7889 ;; Defined at:
  7890 ;;		line 15 in file "/opt/microchip/xc8/v1.41/sources/common/Umul32.c"
  7891 ;; Parameters:    Size  Location     Type
  7892 ;;  multiplier      4    0[COMMON] unsigned long 
  7893 ;;  multiplicand    4    4[COMMON] unsigned long 
  7894 ;; Auto vars:     Size  Location     Type
  7895 ;;  product         4    8[COMMON] unsigned long 
  7896 ;; Return value:  Size  Location     Type
  7897 ;;                  4    0[COMMON] unsigned long 
  7898 ;; Registers used:
  7899 ;;		wreg, status,2, status,0
  7900 ;; Tracked objects:
  7901 ;;		On entry : 0/0
  7902 ;;		On exit  : 0/0
  7903 ;;		Unchanged: 0/0
  7904 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  7905 ;;      Params:         8       0       0       0       0       0
  7906 ;;      Locals:         4       0       0       0       0       0
  7907 ;;      Temps:          0       0       0       0       0       0
  7908 ;;      Totals:        12       0       0       0       0       0
  7909 ;;Total ram usage:       12 bytes
  7910 ;; Hardware stack levels used:    1
  7911 ;; This function calls:
  7912 ;;		Nothing
  7913 ;; This function is called by:
  7914 ;;		_Timer1_Count1ms
  7915 ;; This function uses a non-reentrant model
  7916 ;;
  7917                           
  7918                           
  7919                           ;psect for function ___lmul
  7920  0EDB                     ___lmul:	
  7921                           
  7922                           ;incstack = 0
  7923                           ; Regs used in ___lmul: [wreg+status,2+status,0]
  7924  0EDB  3000               	movlw	0
  7925  0EDC  00FB               	movwf	___lmul@product+3
  7926  0EDD  3000               	movlw	0
  7927  0EDE  00FA               	movwf	___lmul@product+2
  7928  0EDF  3000               	movlw	0
  7929  0EE0  00F9               	movwf	___lmul@product+1
  7930  0EE1  3000               	movlw	0
  7931  0EE2  00F8               	movwf	___lmul@product
  7932  0EE3                     i1l2254:	
  7933  0EE3  1C70               	btfss	___lmul@multiplier,0
  7934  0EE4  2EED               	goto	i1l2258
  7935  0EE5  0874               	movf	___lmul@multiplicand,w
  7936  0EE6  07F8               	addwf	___lmul@product,f
  7937  0EE7  0875               	movf	___lmul@multiplicand+1,w
  7938  0EE8  3DF9               	addwfc	___lmul@product+1,f
  7939  0EE9  0876               	movf	___lmul@multiplicand+2,w
  7940  0EEA  3DFA               	addwfc	___lmul@product+2,f
  7941  0EEB  0877               	movf	___lmul@multiplicand+3,w
  7942  0EEC  3DFB               	addwfc	___lmul@product+3,f
  7943  0EED                     i1l2258:	
  7944  0EED  3001               	movlw	1
  7945  0EEE                     u162_25:	
  7946  0EEE  35F4               	lslf	___lmul@multiplicand,f
  7947  0EEF  0DF5               	rlf	___lmul@multiplicand+1,f
  7948  0EF0  0DF6               	rlf	___lmul@multiplicand+2,f
  7949  0EF1  0DF7               	rlf	___lmul@multiplicand+3,f
  7950  0EF2  0B89               	decfsz	9,f
  7951  0EF3  2EEE               	goto	u162_25
  7952  0EF4  3001               	movlw	1
  7953  0EF5                     u163_25:	
  7954  0EF5  36F3               	lsrf	___lmul@multiplier+3,f
  7955  0EF6  0CF2               	rrf	___lmul@multiplier+2,f
  7956  0EF7  0CF1               	rrf	___lmul@multiplier+1,f
  7957  0EF8  0CF0               	rrf	___lmul@multiplier,f
  7958  0EF9  0B89               	decfsz	9,f
  7959  0EFA  2EF5               	goto	u163_25
  7960  0EFB  0873               	movf	___lmul@multiplier+3,w
  7961  0EFC  0472               	iorwf	___lmul@multiplier+2,w
  7962  0EFD  0471               	iorwf	___lmul@multiplier+1,w
  7963  0EFE  0470               	iorwf	___lmul@multiplier,w
  7964  0EFF  1D03               	skipz
  7965  0F00  2EE3               	goto	i1l2254
  7966  0F01  087B               	movf	___lmul@product+3,w
  7967  0F02  00F3               	movwf	?___lmul+3
  7968  0F03  087A               	movf	___lmul@product+2,w
  7969  0F04  00F2               	movwf	?___lmul+2
  7970  0F05  0879               	movf	___lmul@product+1,w
  7971  0F06  00F1               	movwf	?___lmul+1
  7972  0F07  0878               	movf	___lmul@product,w
  7973  0F08  00F0               	movwf	?___lmul
  7974  0F09  0008               	return
  7975  0F0A                     __end_of___lmul:	
  7976                           
  7977                           	psect	text43
  7978  0C63                     __ptext43:	
  7979 ;; *************** function _I2C_CommonInterrupt *****************
  7980 ;; Defined at:
  7981 ;;		line 58 in file "I2C_Common.c"
  7982 ;; Parameters:    Size  Location     Type
  7983 ;;		None
  7984 ;; Auto vars:     Size  Location     Type
  7985 ;;		None
  7986 ;; Return value:  Size  Location     Type
  7987 ;;                  1    wreg      void 
  7988 ;; Registers used:
  7989 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7990 ;; Tracked objects:
  7991 ;;		On entry : 0/0
  7992 ;;		On exit  : 0/0
  7993 ;;		Unchanged: 0/0
  7994 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  7995 ;;      Params:         0       0       0       0       0       0
  7996 ;;      Locals:         0       0       0       0       0       0
  7997 ;;      Temps:          0       0       0       0       0       0
  7998 ;;      Totals:         0       0       0       0       0       0
  7999 ;;Total ram usage:        0 bytes
  8000 ;; Hardware stack levels used:    1
  8001 ;; Hardware stack levels required when called:    1
  8002 ;; This function calls:
  8003 ;;		_I2C2_Interrupt
  8004 ;; This function is called by:
  8005 ;;		_Handler
  8006 ;; This function uses a non-reentrant model
  8007 ;;
  8008                           
  8009                           
  8010                           ;psect for function _I2C_CommonInterrupt
  8011  0C63                     _I2C_CommonInterrupt:	
  8012                           
  8013                           ;I2C_Common.c: 61: I2C2_Interrupt();
  8014                           
  8015                           ;incstack = 0
  8016                           ; Regs used in _I2C_CommonInterrupt: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8017  0C63  3186  2669         	fcall	_I2C2_Interrupt
  8018  0C65  0008               	return
  8019  0C66                     __end_of_I2C_CommonInterrupt:	
  8020                           
  8021                           	psect	text44
  8022  0669                     __ptext44:	
  8023 ;; *************** function _I2C2_Interrupt *****************
  8024 ;; Defined at:
  8025 ;;		line 152 in file "I2C2.c"
  8026 ;; Parameters:    Size  Location     Type
  8027 ;;		None
  8028 ;; Auto vars:     Size  Location     Type
  8029 ;;		None
  8030 ;; Return value:  Size  Location     Type
  8031 ;;                  1    wreg      void 
  8032 ;; Registers used:
  8033 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  8034 ;; Tracked objects:
  8035 ;;		On entry : 0/0
  8036 ;;		On exit  : 0/0
  8037 ;;		Unchanged: 0/0
  8038 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  8039 ;;      Params:         0       0       0       0       0       0
  8040 ;;      Locals:         0       0       0       0       0       0
  8041 ;;      Temps:          1       0       0       0       0       0
  8042 ;;      Totals:         1       0       0       0       0       0
  8043 ;;Total ram usage:        1 bytes
  8044 ;; Hardware stack levels used:    1
  8045 ;; This function calls:
  8046 ;;		Nothing
  8047 ;; This function is called by:
  8048 ;;		_I2C_CommonInterrupt
  8049 ;; This function uses a non-reentrant model
  8050 ;;
  8051                           
  8052                           
  8053                           ;psect for function _I2C2_Interrupt
  8054  0669                     _I2C2_Interrupt:	
  8055                           
  8056                           ;I2C2.c: 154: if(SSP2IF&&SSP2IE)
  8057                           
  8058                           ;incstack = 0
  8059                           ; Regs used in _I2C2_Interrupt: [wreg+fsr1l+fsr1h+status,2+status,0]
  8060  0669  0020               	movlb	0	; select bank0
  8061  066A  1C14               	btfss	20,0	;volatile
  8062  066B  2EB5               	goto	i1l2180
  8063  066C  0021               	movlb	1	; select bank1
  8064  066D  1C14               	btfss	20,0	;volatile
  8065  066E  2EB5               	goto	i1l2180
  8066                           
  8067                           ;I2C2.c: 155: {
  8068                           ;I2C2.c: 156: if(SSP2STATbits.D_nA)
  8069  066F  0024               	movlb	4	; select bank4
  8070  0670  1E9C               	btfss	28,5	;volatile
  8071  0671  2E8C               	goto	i1l157
  8072                           
  8073                           ;I2C2.c: 157: {
  8074                           ;I2C2.c: 158: if(SSP2STATbits.R_nW)
  8075  0672  1D1C               	btfss	28,2	;volatile
  8076  0673  2E7F               	goto	i1l2156
  8077                           
  8078                           ;I2C2.c: 159: {
  8079                           ;I2C2.c: 160: if(!SSP2CON2bits.ACKSTAT)
  8080  0674  1B1E               	btfsc	30,6	;volatile
  8081  0675  2EB3               	goto	i1l2178
  8082  0676                     i1l2148:	
  8083                           ;I2C2.c: 161: {
  8084                           ;I2C2.c: 162: while((SSP2CON1bits.CKP)|(SSP2STATbits.BF));
  8085                           
  8086  0676  081C               	movf	28,w	;volatile
  8087  0677  3901               	andlw	1
  8088  0678  00F0               	movwf	??_I2C2_Interrupt
  8089  0679  0E1D               	swapf	29,w	;volatile
  8090  067A  3901               	andlw	1
  8091  067B  0470               	iorwf	??_I2C2_Interrupt,w
  8092  067C  1D03               	btfss	3,2
  8093  067D  2E76               	goto	i1l2148
  8094  067E  2E9F               	goto	L7
  8095  067F                     i1l2156:	
  8096                           ;I2C2.c: 166: }
  8097                           ;I2C2.c: 167: }
  8098                           
  8099                           ;I2C2.c: 165: SSP2CON1bits.CKP = 1;
  8100                           
  8101                           ;I2C2.c: 164: I2C2_Config.TransmitPoint++;
  8102                           
  8103                           ;I2C2.c: 163: SSP2BUF = *I2C2_Config.TransmitPoint;
  8104                           
  8105                           
  8106                           ;I2C2.c: 168: else
  8107                           ;I2C2.c: 169: {
  8108                           ;I2C2.c: 170: *I2C2_Config.ReceivePoint = SSP2BUF;
  8109  067F  0819               	movf	25,w	;volatile
  8110  0680  00F0               	movwf	??_I2C2_Interrupt
  8111  0681  0021               	movlb	1	; select bank1
  8112  0682  0846               	movf	(low ((_I2C2_Config| 0+17)))^(0+128),w
  8113  0683  0086               	movwf	6
  8114  0684  0187               	clrf	7
  8115  0685  0870               	movf	??_I2C2_Interrupt,w
  8116  0686  0081               	movwf	1
  8117                           
  8118                           ;I2C2.c: 171: I2C2_Config.ReceivePoint++;
  8119  0687  3001               	movlw	1
  8120  0688  00F0               	movwf	??_I2C2_Interrupt
  8121  0689  0870               	movf	??_I2C2_Interrupt,w
  8122  068A  07C6               	addwf	(low ((_I2C2_Config| 0+17)))^(0+128),f
  8123  068B  2EB1               	goto	i1l2176
  8124  068C                     i1l157:	
  8125                           ;I2C2.c: 173: }
  8126                           ;I2C2.c: 174: }
  8127                           
  8128                           ;I2C2.c: 172: SSP2CON1bits.CKP = 1;
  8129                           
  8130                           
  8131                           ;I2C2.c: 175: else if(!SSP2STATbits.D_nA)
  8132  068C  1A9C               	btfsc	28,5	;volatile
  8133  068D  2EB3               	goto	i1l2178
  8134                           
  8135                           ;I2C2.c: 176: {
  8136                           ;I2C2.c: 177: SSP2BUF;
  8137  068E  0819               	movf	25,w	;volatile
  8138                           
  8139                           ;I2C2.c: 179: if(SSP2STATbits.R_nW)
  8140  068F  1D1C               	btfss	28,2	;volatile
  8141  0690  2EAC               	goto	i1l2174
  8142                           
  8143                           ;I2C2.c: 180: {
  8144                           ;I2C2.c: 181: I2C2_Config.TransmitPoint = I2C2_Config.SlaveTransmitBuff;
  8145  0691  30B5               	movlw	(low (_I2C2_Config| 0))& (0+255)
  8146  0692  00F0               	movwf	??_I2C2_Interrupt
  8147  0693  0870               	movf	??_I2C2_Interrupt,w
  8148  0694  0021               	movlb	1	; select bank1
  8149  0695  00C5               	movwf	(low ((_I2C2_Config| 0+16)))^(0+128)
  8150  0696                     i1l2168:	
  8151                           ;I2C2.c: 183: while((SSP2CON1bits.CKP)|(SSP2STATbits.BF));
  8152                           
  8153  0696  0024               	movlb	4	; select bank4
  8154  0697  081C               	movf	28,w	;volatile
  8155  0698  3901               	andlw	1
  8156  0699  00F0               	movwf	??_I2C2_Interrupt
  8157  069A  0E1D               	swapf	29,w	;volatile
  8158  069B  3901               	andlw	1
  8159  069C  0470               	iorwf	??_I2C2_Interrupt,w
  8160  069D  1D03               	btfss	3,2
  8161  069E  2E96               	goto	i1l2168
  8162  069F                     L7:	
  8163                           
  8164                           ;I2C2.c: 184: SSP2BUF = *I2C2_Config.TransmitPoint;
  8165  069F  0021               	movlb	1	; select bank1
  8166  06A0  0845               	movf	(low ((_I2C2_Config| 0+16)))^(0+128),w
  8167  06A1  0086               	movwf	6
  8168  06A2  0187               	clrf	7
  8169  06A3  0801               	movf	1,w
  8170  06A4  0024               	movlb	4	; select bank4
  8171  06A5  0099               	movwf	25	;volatile
  8172                           
  8173                           ;I2C2.c: 185: I2C2_Config.TransmitPoint++;
  8174  06A6  3001               	movlw	1
  8175  06A7  00F0               	movwf	??_I2C2_Interrupt
  8176  06A8  0870               	movf	??_I2C2_Interrupt,w
  8177  06A9  0021               	movlb	1	; select bank1
  8178  06AA  07C5               	addwf	(low ((_I2C2_Config| 0+16)))^(0+128),f
  8179                           
  8180                           ;I2C2.c: 186: }
  8181  06AB  2EB1               	goto	i1l2176
  8182  06AC                     i1l2174:	
  8183                           
  8184                           ;I2C2.c: 187: else
  8185                           ;I2C2.c: 188: {
  8186                           ;I2C2.c: 189: I2C2_Config.ReceivePoint = I2C2_Config.SlaveReceiveBuff;
  8187  06AC  30BD               	movlw	(low ((_I2C2_Config| 0+8)))& (0+255)
  8188  06AD  00F0               	movwf	??_I2C2_Interrupt
  8189  06AE  0870               	movf	??_I2C2_Interrupt,w
  8190  06AF  0021               	movlb	1	; select bank1
  8191  06B0  00C6               	movwf	(low ((_I2C2_Config| 0+17)))^(0+128)
  8192  06B1                     i1l2176:	
  8193                           
  8194                           ;I2C2.c: 190: }
  8195                           ;I2C2.c: 191: SSP2CON1bits.CKP = 1;
  8196  06B1  0024               	movlb	4	; select bank4
  8197  06B2  161D               	bsf	29,4	;volatile
  8198  06B3                     i1l2178:	
  8199                           
  8200                           ;I2C2.c: 192: }
  8201                           ;I2C2.c: 193: SSP2IF = 0;
  8202  06B3  0020               	movlb	0	; select bank0
  8203  06B4  1014               	bcf	20,0	;volatile
  8204  06B5                     i1l2180:	
  8205                           
  8206                           ;I2C2.c: 194: }
  8207                           ;I2C2.c: 196: if(BCL2IE&&BCL2IF)
  8208  06B5  0021               	movlb	1	; select bank1
  8209  06B6  1C94               	btfss	20,1	;volatile
  8210  06B7  0008               	return
  8211  06B8  0020               	movlb	0	; select bank0
  8212  06B9  1C94               	btfss	20,1	;volatile
  8213  06BA  0008               	return
  8214                           
  8215                           ;I2C2.c: 197: BCL2IF = 0;
  8216  06BB  1094               	bcf	20,1	;volatile
  8217  06BC  0008               	return
  8218  06BD                     __end_of_I2C2_Interrupt:	
  8219                           
  8220                           	psect	text45
  8221  0D50                     __ptext45:	
  8222 ;; *************** function _Buzzer_Count1ms *****************
  8223 ;; Defined at:
  8224 ;;		line 44 in file "Buzzer.c"
  8225 ;; Parameters:    Size  Location     Type
  8226 ;;		None
  8227 ;; Auto vars:     Size  Location     Type
  8228 ;;		None
  8229 ;; Return value:  Size  Location     Type
  8230 ;;                  1    wreg      void 
  8231 ;; Registers used:
  8232 ;;		wreg, status,2, status,0, pclath, cstack
  8233 ;; Tracked objects:
  8234 ;;		On entry : 0/0
  8235 ;;		On exit  : 0/0
  8236 ;;		Unchanged: 0/0
  8237 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  8238 ;;      Params:         0       0       0       0       0       0
  8239 ;;      Locals:         0       0       0       0       0       0
  8240 ;;      Temps:          0       0       0       0       0       0
  8241 ;;      Totals:         0       0       0       0       0       0
  8242 ;;Total ram usage:        0 bytes
  8243 ;; Hardware stack levels used:    1
  8244 ;; Hardware stack levels required when called:    1
  8245 ;; This function calls:
  8246 ;;		_Buzzer_SetDuty
  8247 ;; This function is called by:
  8248 ;;		_Handler
  8249 ;; This function uses a non-reentrant model
  8250 ;;
  8251                           
  8252                           
  8253                           ;psect for function _Buzzer_Count1ms
  8254  0D50                     _Buzzer_Count1ms:	
  8255                           
  8256                           ;Buzzer.c: 46: if(count>0)
  8257                           
  8258                           ;incstack = 0
  8259                           ; Regs used in _Buzzer_Count1ms: [wreg+status,2+status,0+pclath+cstack]
  8260  0D50  0020               	movlb	0	; select bank0
  8261  0D51  085E               	movf	_count,w
  8262  0D52  045F               	iorwf	_count+1,w
  8263  0D53  1903               	btfsc	3,2
  8264  0D54  2D60               	goto	i1l2364
  8265                           
  8266                           ;Buzzer.c: 47: {
  8267                           ;Buzzer.c: 48: count--;
  8268  0D55  3001               	movlw	1
  8269  0D56  02DE               	subwf	_count,f
  8270  0D57  3000               	movlw	0
  8271  0D58  3BDF               	subwfb	_count+1,f
  8272                           
  8273                           ;Buzzer.c: 49: Buzzer_SetDuty(0x01FF);
  8274  0D59  30FF               	movlw	255
  8275  0D5A  00F0               	movwf	Buzzer_SetDuty@duty
  8276  0D5B  3001               	movlw	1
  8277  0D5C  00F1               	movwf	Buzzer_SetDuty@duty+1
  8278  0D5D  318D  25CB         	fcall	_Buzzer_SetDuty
  8279                           
  8280                           ;Buzzer.c: 50: }
  8281  0D5F  0008               	return
  8282  0D60                     i1l2364:	
  8283                           
  8284                           ;Buzzer.c: 51: else
  8285                           ;Buzzer.c: 52: {
  8286                           ;Buzzer.c: 53: Buzzer_SetDuty(0x0000);
  8287  0D60  3000               	movlw	0
  8288  0D61  00F0               	movwf	Buzzer_SetDuty@duty
  8289  0D62  00F1               	movwf	Buzzer_SetDuty@duty+1
  8290  0D63  318D  25CB         	fcall	_Buzzer_SetDuty
  8291  0D65  0008               	return
  8292  0D66                     __end_of_Buzzer_Count1ms:	
  8293                           
  8294                           	psect	text46
  8295  0DCB                     __ptext46:	
  8296 ;; *************** function _Buzzer_SetDuty *****************
  8297 ;; Defined at:
  8298 ;;		line 31 in file "Buzzer.c"
  8299 ;; Parameters:    Size  Location     Type
  8300 ;;  duty            2    0[COMMON] unsigned int 
  8301 ;; Auto vars:     Size  Location     Type
  8302 ;;  CCP2CON_Pre     1    4[COMMON] unsigned char 
  8303 ;; Return value:  Size  Location     Type
  8304 ;;                  1    wreg      void 
  8305 ;; Registers used:
  8306 ;;		wreg, status,2, status,0
  8307 ;; Tracked objects:
  8308 ;;		On entry : 0/0
  8309 ;;		On exit  : 0/0
  8310 ;;		Unchanged: 0/0
  8311 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  8312 ;;      Params:         2       0       0       0       0       0
  8313 ;;      Locals:         1       0       0       0       0       0
  8314 ;;      Temps:          2       0       0       0       0       0
  8315 ;;      Totals:         5       0       0       0       0       0
  8316 ;;Total ram usage:        5 bytes
  8317 ;; Hardware stack levels used:    1
  8318 ;; This function calls:
  8319 ;;		Nothing
  8320 ;; This function is called by:
  8321 ;;		_Buzzer_Count1ms
  8322 ;; This function uses a non-reentrant model
  8323 ;;
  8324                           
  8325                           
  8326                           ;psect for function _Buzzer_SetDuty
  8327  0DCB                     _Buzzer_SetDuty:	
  8328                           
  8329                           ;Buzzer.c: 33: uint8_t CCP2CON_Pre = CCP2CON & ~(0x03<<4);
  8330                           
  8331                           ;incstack = 0
  8332                           ; Regs used in _Buzzer_SetDuty: [wreg+status,2+status,0]
  8333  0DCB  0025               	movlb	5	; select bank5
  8334  0DCC  081A               	movf	26,w	;volatile
  8335  0DCD  39CF               	andlw	207
  8336  0DCE  00F2               	movwf	??_Buzzer_SetDuty
  8337  0DCF  0872               	movf	??_Buzzer_SetDuty,w
  8338  0DD0  00F4               	movwf	Buzzer_SetDuty@CCP2CON_Pre
  8339                           
  8340                           ;Buzzer.c: 34: CCPR2L = (duty>>2);
  8341  0DD1  0871               	movf	Buzzer_SetDuty@duty+1,w
  8342  0DD2  00F3               	movwf	??_Buzzer_SetDuty+1
  8343  0DD3  0870               	movf	Buzzer_SetDuty@duty,w
  8344  0DD4  00F2               	movwf	??_Buzzer_SetDuty
  8345  0DD5  36F3               	lsrf	??_Buzzer_SetDuty+1,f
  8346  0DD6  0CF2               	rrf	??_Buzzer_SetDuty,f
  8347  0DD7  36F3               	lsrf	??_Buzzer_SetDuty+1,f
  8348  0DD8  0CF2               	rrf	??_Buzzer_SetDuty,f
  8349  0DD9  0872               	movf	??_Buzzer_SetDuty,w
  8350  0DDA  0098               	movwf	24	;volatile
  8351                           
  8352                           ;Buzzer.c: 35: CCP2CON = CCP2CON_Pre | ((duty&0x03)<<4);
  8353  0DDB  0870               	movf	Buzzer_SetDuty@duty,w
  8354  0DDC  3903               	andlw	3
  8355  0DDD  00F2               	movwf	??_Buzzer_SetDuty
  8356  0DDE  3003               	movlw	3
  8357  0DDF                     u142_25:	
  8358  0DDF  35F2               	lslf	??_Buzzer_SetDuty,f
  8359  0DE0  3EFF               	addlw	-1
  8360  0DE1  1D03               	skipz
  8361  0DE2  2DDF               	goto	u142_25
  8362  0DE3  3572               	lslf	??_Buzzer_SetDuty,w
  8363  0DE4  0474               	iorwf	Buzzer_SetDuty@CCP2CON_Pre,w
  8364  0DE5  009A               	movwf	26	;volatile
  8365  0DE6  0008               	return
  8366  0DE7                     __end_of_Buzzer_SetDuty:	
  8367  007E                     btemp	set	126	;btemp
  8368  007E                     int$flags	set	126
  8369  007E                     wtemp0	set	126


Data Sizes:
    Strings     331
    Constant    70
    Data        90
    BSS         56
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     52      66
    BANK1            80      6      78
    BANK2            80     11      71
    BANK3            80      0       0
    BANK4            48      0       0

Pointer List with Targets:

    printf@f	PTR const unsigned char  size(2) Largest target is 14
		 -> STR_6(CODE[10]), STR_5(CODE[8]), STR_4(CODE[11]), STR_3(CODE[14]), 
		 -> STR_2(CODE[5]), STR_1(CODE[10]), 

    printf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_printf(BANK0[2]), 

    H7826_01_Gain	PTR const unsigned char [15] size(2) Largest target is 7
		 -> STR_51(CODE[7]), STR_50(CODE[7]), STR_49(CODE[7]), STR_48(CODE[7]), 
		 -> STR_47(CODE[7]), STR_46(CODE[7]), STR_45(CODE[7]), STR_44(CODE[6]), 
		 -> STR_43(CODE[6]), STR_42(CODE[6]), STR_41(CODE[6]), STR_40(CODE[5]), 
		 -> STR_39(CODE[5]), STR_38(CODE[5]), STR_37(CODE[5]), 

    H7826_Gain	PTR const unsigned char [15] size(2) Largest target is 8
		 -> STR_36(CODE[8]), STR_35(CODE[8]), STR_34(CODE[8]), STR_33(CODE[7]), 
		 -> STR_32(CODE[7]), STR_31(CODE[7]), STR_30(CODE[7]), STR_29(CODE[7]), 
		 -> STR_28(CODE[6]), STR_27(CODE[6]), STR_26(CODE[6]), STR_25(CODE[6]), 
		 -> STR_24(CODE[5]), STR_23(CODE[5]), STR_22(CODE[5]), 

    DAC_VoltageTable	PTR const unsigned char [15] size(2) Largest target is 6
		 -> STR_21(CODE[5]), STR_20(CODE[6]), STR_19(CODE[5]), STR_18(CODE[6]), 
		 -> STR_17(CODE[5]), STR_16(CODE[6]), STR_15(CODE[5]), STR_14(CODE[6]), 
		 -> STR_13(CODE[5]), STR_12(CODE[6]), STR_11(CODE[5]), STR_10(CODE[6]), 
		 -> STR_9(CODE[5]), STR_8(CODE[6]), STR_7(CODE[5]), 

    I2C_Transmit@pData	PTR unsigned char  size(1) Largest target is 2
		 -> VoltageReg(BANK1[2]), ConfigReg(BANK0[1]), 

    I2C2_Transmit@pData	PTR unsigned char  size(1) Largest target is 2
		 -> VoltageReg(BANK1[2]), ConfigReg(BANK0[1]), 

    S46$ReceivePoint	PTR unsigned char  size(1) Largest target is 21
		 -> I2C2_Config(BANK1[19]), 

    I2C2_Config.ReceivePoint	PTR unsigned char  size(1) Largest target is 21
		 -> I2C2_Config.SlaveReceiveBuff(BANK1[8]), I2C2_Config(BANK1[19]), 

    S46$TransmitPoint	PTR unsigned char  size(1) Largest target is 21
		 -> I2C2_Config(BANK1[19]), 

    I2C2_Config.TransmitPoint	PTR unsigned char  size(1) Largest target is 21
		 -> I2C2_Config.SlaveTransmitBuff(BANK1[8]), I2C2_Config(BANK1[19]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _Handler in COMMON

    _Handler->_Timer1_Count1ms
    _Timer1_Count1ms->i1___lldiv
    i1___lldiv->___lmul
    _I2C_CommonInterrupt->_I2C2_Interrupt
    _Buzzer_Count1ms->_Buzzer_SetDuty

Critical Paths under _main in BANK0

    _main->_printf
    _printf->___llmod
    _putch->_LCD_WriteData
    ___llmod->___lldiv
    _mTouch_Init->_mTouch_PortInit
    _mTouch_Check->_Buzzer_MiliSecond
    _LCD_Init->_LCD_DisplayClear
    _LCD_DisplayClear->_LCD_WriteData
    _LCD_CursorPosition->_LCD_WriteData
    _LCD_CursorHome->_LCD_WriteData
    _DAC_WriteVoltage->_I2C_Transmit
    _DAC_Initialize->_I2C_Transmit
    _I2C_Transmit->_I2C2_Transmit
    _I2C_Init->_I2C2_Setting
    _I2C2_Setting->_I2C2_PinInit

Critical Paths under _Handler in BANK0

    _Timer1_Count1ms->i1___lldiv

Critical Paths under _main in BANK1

    _main->_printf

Critical Paths under _Handler in BANK1

    None.

Critical Paths under _main in BANK2

    _main->_printf

Critical Paths under _Handler in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _Handler in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _Handler in BANK4

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     4      0    6585
                                             48 BANK0      4     4      0
                         _Basic_Init
                        _Buzzer_Init
                     _DAC_Initialize
                   _DAC_WriteVoltage
                     _LCD_CursorHome
                 _LCD_CursorPosition
                           _LCD_Init
                      _Timer1_GetCPM
                      _Timer1_GetCPS
                 _Timer1_GetCountSum
                   _Timer1_GetMinute
                   _Timer1_GetSecond
                        _Timer1_Init
                  _Timer1_StartCount
                        _Timer6_Init
                       _mTouch_Check
                        _mTouch_Init
                             _printf
 ---------------------------------------------------------------------------------
 (1) _printf                                              35    25     10    3170
                                             38 BANK0     10     0     10
                                              0 BANK1      6     6      0
                                              0 BANK2     11    11      0
                      _Timer1_GetCPM (ARG)
                      _Timer1_GetCPS (ARG)
                 _Timer1_GetCountSum (ARG)
                   _Timer1_GetMinute (ARG)
                   _Timer1_GetSecond (ARG)
                            ___lldiv
                            ___llmod
                             ___wmul
                            _isdigit
                              _putch
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0     155
                                             17 BANK0      1     1      0
                      _LCD_WriteData
 ---------------------------------------------------------------------------------
 (2) _isdigit                                              2     2      0      99
                                             14 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     290
                                             14 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (2) ___llmod                                             10     2      8     386
                                             28 BANK0     10     2      8
                            ___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             14     6      8     479
                                             14 BANK0     14     6      8
 ---------------------------------------------------------------------------------
 (1) _mTouch_Init                                          1     1      0       0
                                             15 BANK0      1     1      0
                    _mTouch_PortInit
 ---------------------------------------------------------------------------------
 (2) _mTouch_PortInit                                      1     1      0       0
                                             14 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _mTouch_Check                                         6     6      0     272
                                             16 BANK0      6     6      0
                  _Buzzer_MiliSecond
 ---------------------------------------------------------------------------------
 (2) _Buzzer_MiliSecond                                    2     0      2     162
                                             14 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (1) _Timer6_Init                                          1     1      0       0
                                             14 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Timer1_StartCount                                    0     0      0       0
                 _Timer1_ClearRecord
 ---------------------------------------------------------------------------------
 (2) _Timer1_ClearRecord                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Timer1_Init                                          1     1      0       0
                                             14 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Timer1_GetSecond                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Timer1_GetMinute                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Timer1_GetCountSum                                   4     0      4       0
                                             14 BANK0      4     0      4
 ---------------------------------------------------------------------------------
 (1) _Timer1_GetCPS                                        4     0      4       0
                                             14 BANK0      4     0      4
 ---------------------------------------------------------------------------------
 (1) _Timer1_GetCPM                                        4     0      4       0
                                             14 BANK0      4     0      4
 ---------------------------------------------------------------------------------
 (1) _LCD_Init                                             2     2      0     248
                                             18 BANK0      2     2      0
                   _LCD_DisplayClear
                      _LCD_WriteData
 ---------------------------------------------------------------------------------
 (2) _LCD_DisplayClear                                     1     1      0     124
                                             17 BANK0      1     1      0
                      _LCD_WriteData
 ---------------------------------------------------------------------------------
 (1) _LCD_CursorPosition                                   3     2      1     263
                                             17 BANK0      3     2      1
                      _LCD_WriteData
 ---------------------------------------------------------------------------------
 (1) _LCD_CursorHome                                       1     1      0     124
                                             17 BANK0      1     1      0
                      _LCD_WriteData
 ---------------------------------------------------------------------------------
 (3) _LCD_WriteData                                        3     3      0     124
                                             14 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (1) _DAC_WriteVoltage                                     5     3      2    1049
                                             30 BANK0      5     3      2
                       _I2C_Transmit
 ---------------------------------------------------------------------------------
 (1) _DAC_Initialize                                       2     2      0    1459
                                             30 BANK0      2     2      0
                           _I2C_Init
                       _I2C_Transmit
 ---------------------------------------------------------------------------------
 (2) _I2C_Transmit                                         8     5      3     941
                                             22 BANK0      8     5      3
                      _I2C2_Transmit
 ---------------------------------------------------------------------------------
 (3) _I2C2_Transmit                                        8     6      2     446
                                             14 BANK0      8     6      2
 ---------------------------------------------------------------------------------
 (2) _I2C_Init                                             6     3      3     518
                                             19 BANK0      6     3      3
                       _I2C2_Setting
 ---------------------------------------------------------------------------------
 (3) _I2C2_Setting                                         4     2      2     238
                                             15 BANK0      4     2      2
                       _I2C2_PinInit
 ---------------------------------------------------------------------------------
 (4) _I2C2_PinInit                                         1     1      0       0
                                             14 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Buzzer_Init                                          1     1      0       0
                                             14 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Basic_Init                                           0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _Handler                                              1     1      0     831
                                             13 BANK0      1     1      0
                    _Buzzer_Count1ms
                _I2C_CommonInterrupt
                    _Timer1_Count1ms
           _Timer1_DetectAssignCount
                   _Timer6_CheckFlag
           _mTouch_IntervalDecrement
                        _mTouch_Read
 ---------------------------------------------------------------------------------
 (6) _mTouch_Read                                          1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (6) _mTouch_IntervalDecrement                             0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _Timer6_CheckFlag                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _Timer1_DetectAssignCount                             0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _Timer1_Count1ms                                      1     1      0     636
                                             13 COMMON     1     1      0
                             ___lmul
                i1_Buzzer_MiliSecond
                          i1___lldiv
 ---------------------------------------------------------------------------------
 (7) i1___lldiv                                           14     6      8     214
                                             12 COMMON     1     1      0
                                              0 BANK0     13     5      8
                             ___lmul (ARG)
 ---------------------------------------------------------------------------------
 (7) i1_Buzzer_MiliSecond                                  2     0      2      74
                                              0 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (7) ___lmul                                              12     4      8     348
                                              0 COMMON    12     4      8
 ---------------------------------------------------------------------------------
 (6) _I2C_CommonInterrupt                                  0     0      0       0
                     _I2C2_Interrupt
 ---------------------------------------------------------------------------------
 (7) _I2C2_Interrupt                                       1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (6) _Buzzer_Count1ms                                      0     0      0     195
                     _Buzzer_SetDuty
 ---------------------------------------------------------------------------------
 (7) _Buzzer_SetDuty                                       5     3      2     195
                                              0 COMMON     5     3      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Basic_Init
   _Buzzer_Init
   _DAC_Initialize
     _I2C_Init
       _I2C2_Setting
         _I2C2_PinInit
     _I2C_Transmit
       _I2C2_Transmit
   _DAC_WriteVoltage
     _I2C_Transmit
       _I2C2_Transmit
   _LCD_CursorHome
     _LCD_WriteData
   _LCD_CursorPosition
     _LCD_WriteData
   _LCD_Init
     _LCD_DisplayClear
       _LCD_WriteData
     _LCD_WriteData
   _Timer1_GetCPM
   _Timer1_GetCPS
   _Timer1_GetCountSum
   _Timer1_GetMinute
   _Timer1_GetSecond
   _Timer1_Init
   _Timer1_StartCount
     _Timer1_ClearRecord
   _Timer6_Init
   _mTouch_Check
     _Buzzer_MiliSecond
   _mTouch_Init
     _mTouch_PortInit
   _printf
     _Timer1_GetCPM (ARG)
     _Timer1_GetCPS (ARG)
     _Timer1_GetCountSum (ARG)
     _Timer1_GetMinute (ARG)
     _Timer1_GetSecond (ARG)
     ___lldiv (ARG)
     ___llmod (ARG)
       ___lldiv (ARG)
     ___wmul (ARG)
     _isdigit (ARG)
     _putch (ARG)
       _LCD_WriteData

 _Handler (ROOT)
   _Buzzer_Count1ms
     _Buzzer_SetDuty
   _I2C_CommonInterrupt
     _I2C2_Interrupt
   _Timer1_Count1ms
     ___lmul
     i1_Buzzer_MiliSecond
     i1___lldiv
       ___lmul (ARG)
   _Timer1_DetectAssignCount
   _Timer6_CheckFlag
   _mTouch_IntervalDecrement
   _mTouch_Read

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             170      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      E       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0      E5       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BANK0               50     34      42       6       82.5%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BITBANK1            50      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BANK1               50      6      4E       8       97.5%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BITBANK2            50      0       0       9        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BANK2               50      B      47      10       88.8%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BITBANK3            50      0       0      11        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BANK3               50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BITBANK4            30      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BANK4               30      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
DATA                 0      0      E5      15        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.41 build -162212810 
Symbol Table                                                                                   Tue Jun 27 19:52:16 2017

                   _LCD_CursorHome 0CEA                        __CFG_CP$OFF 0000  
                               l74 07B3                                 l91 0583  
                               l78 07E4                     I2C2_Transmit@i 0033  
            ??_I2C_CommonInterrupt 0071                ___wmul@multiplicand 0030  
                              l100 05AC                                l109 05C9  
                              l191 0D93                                l542 0085  
                              l711 0DF0                                l553 00DF  
                              l556 0107                                l558 00E1  
                              l559 0146                                l569 01B5  
                              l586 026A                                _GIE 005F  
                              _PR2 001B                    _Buzzer_Count1ms 0D50  
                     __CFG_CPD$OFF 0000                                _PR6 041D  
                     __CFG_BORV$LO 0000                                wreg 0009  
                       _Basic_Init 0D1B                       __CFG_LVP$OFF 0000  
       ??_Timer1_DetectAssignCount 0070                               l2100 05F7  
                             l2200 0DC4                               l2034 07C8  
                             l2050 07DB                               l2202 0DC9  
                             l2036 07CA                               l2028 07BD  
                             l2046 07D9                               l2054 0566  
                             l2080 05BA                               l2056 0574  
                             l3120 01A9                               l3104 0155  
                             l2090 05CF                               l2066 0597  
                             l3130 01DD                               l3114 0172  
                             l3202 0423                               l2092 05E6  
                             l2076 058F                               l3108 016C  
                             l3060 0080                               l2094 05EB  
                             l2078 0593                               l3142 01F6  
                             l3214 0441                               l2192 0D8D  
                             l3144 01FA                               l3152 020F  
                             l3136 01E7                               l3128 01DA  
                             l3072 00A3                               l3160 005E  
                             l3224 049D                               l3216 0445  
                             l3232 04B8                               l3208 0434  
                             l2098 05EE                               l3090 0118  
                             l3082 00E3                               l3066 008C  
                             l3226 04A6                               l2188 0D80  
                             l2196 0DB3                               l3148 0207  
                             l3068 0096                               l3228 04AF  
                             l3158 0215                               l2670 076B  
                             l2682 07A5                               l2942 0DEA  
                             l2960 06CE                               l2936 0CE8  
                             l2970 06FC                               l2962 06DC  
                             l2974 0707                               l2990 0FEC  
                             l2984 0FC6                               l2986 0FD4  
                             l2994 0FF7                  ?_DAC_WriteVoltage 003E  
                             STR_1 02D4                               STR_2 03F7  
                             STR_3 02B1                               STR_4 02BF  
                             STR_5 02F6                               STR_6 02CA  
                             STR_7 03DE                               STR_8 038E  
                             STR_9 03E3                               u2105 078B  
                             u3007 0631                               u3017 0646  
                             u3027 0D04                               u3037 0D79  
                             u3047 0CF4                               u3057 0F83  
                             u2515 0DF1                               u2525 0DF6  
                             u2625 0FC9                               u2475 0F8A  
                             u2555 06D1                               u2645 0FE2  
                             u2805 01C9                               u2575 06DD  
                             u2655 0FED                               u2585 06F1  
                             u2675 0D6E                               u2595 06FD  
                             _PEIE 005E                               u2765 019D  
                             u2987 0603                               u2997 061C  
            Buzzer_MiliSecond@time 002E                               _TMR0 0015  
                             _TMR1 0016                               _TMR2 001A  
                             _TMR6 041C                               _WPUB 020D  
                     __CFG_WRT$OFF 0000                 ??_DAC_WriteVoltage 0040  
                i1___lldiv@divisor 0020                               _cnts 00A0  
                             _main 03FC                               _mode 005C  
                 __end_of_I2C_Init 0D96                               _tcnt 0054  
                             fsr0h 0005                               fsr1h 0007  
                             indf0 0000                               fsr0l 0004  
                             indf1 0001                               fsr1l 0006  
                             btemp 007E                  i1___lldiv@counter 002C  
                    __CFG_BOREN$ON 0000                    ??_I2C2_Transmit 0030  
                             start 002B                      __CFG_IESO$OFF 0000  
                  __end_of_Handler 002B             __end_of_LCD_CursorHome 0CFA  
                    _LCD_WriteData 0F80                      __CFG_MCLRE$ON 0000  
                 ??_I2C2_Interrupt 0070           __end_of_LCD_DisplayClear 0D0A  
            __size_of_I2C_Transmit 001B                   __end_of_LCD_Init 0669  
                    __CFG_PLLEN$ON 0000                              ?_main 0070  
                            STR_10 0394                              STR_11 03E8  
                            STR_20 0388                              STR_12 039A  
                            STR_21 03D9                              STR_13 03ED  
                            STR_30 0328                              STR_22 03C0  
                            STR_14 03A0                              STR_31 0336  
                            STR_23 03BB                              STR_15 03F2  
                            STR_32 02FE                              STR_24 03CA  
                            STR_40 03B6                              STR_16 03A6  
                            STR_33 0344                              STR_25 037C  
                            STR_41 0364                              STR_17 03CF  
                    __CFG_WDTE$OFF 0000                              STR_34 02EE  
                            STR_26 0352                              STR_50 0305  
                            STR_42 036A                              STR_18 0382  
                            STR_35 02E6                              STR_27 035E  
                            STR_51 030C                              STR_43 0370  
                            STR_19 03D4                              STR_36 02DE  
                            STR_28 0376                              STR_44 0358  
                            STR_29 032F                              STR_45 0313  
                            STR_37 03AC                              STR_46 033D  
                            STR_38 03B1                              STR_47 031A  
                            STR_39 03C5                              STR_48 0321  
                            STR_49 034B                    __end_of___lldiv 0710  
                            _T1CON 0018                    __end_of___llmod 1000  
                            _T2CON 001C                              _LATA3 0863  
                            _LATA4 0864                              _LATA6 0866  
                            _T6CON 041E        __size_of_Timer1_ClearRecord 002C  
                            i1l157 068C                              i1l508 0D10  
                            i1l509 0D15                              _PORTA 000C  
                            _PORTB 000D                              _TRISA 008C  
                            _TRISB 008D                  I2C2_Transmit@size 002F  
              ___lmul@multiplicand 0074                      __CFG_PWRTE$ON 0000  
                   __CFG_FCMEN$OFF 0000                 i1___lldiv@dividend 0024  
                  __end_of_dpowers 0293                              _count 005E  
                  __end_of_isdigit 0CEA                  ??_Timer1_Count1ms 007D  
                            _putch 0C7D                      ??_Buzzer_Init 002E  
            __end_of_Timer1_GetCPM 0CCD              __end_of_Timer1_GetCPS 0CDB  
      __size_of_Timer1_GetCountSum 0011                              status 0003  
                            wtemp0 007E                  _Buzzer_MiliSecond 0C90  
               __size_ofi1___lldiv 0053                       _I2C_Transmit 0DB0  
               _LCD_CursorPosition 0D66                     ?_LCD_WriteData 0070  
               ?_Buzzer_MiliSecond 002E                   ??_DAC_Initialize 003E  
                  ?_LCD_CursorHome 0070                    __initialization 002D  
                     __end_of_main 04C8            __end_of_Buzzer_Count1ms 0D66  
               i1___lldiv@quotient 0028                ?_LCD_CursorPosition 0031  
              ??_Buzzer_MiliSecond 0030                             ??_main 0050  
             __end_of_mTouch_Check 07A7                        ?_Basic_Init 0070  
                           _BCL2IE 04A1                             _BCL2IF 00A1  
                 ___llmod@dividend 0040               __size_of_mTouch_Init 0013  
             __size_of_mTouch_Read 0025                             _CCPR2L 0298  
             ??_LCD_CursorPosition 0032                             _ANSELA 018C  
                           ?_putch 0070                             _ANSELB 018D  
                           _T1GCON 0019                             i1l2320 0721  
                           i1l2330 074F                             i1l2322 072F  
                           i1l2148 0676                             i1l2156 067F  
                           i1l2180 06B5                             i1l1700 0CA3  
                           i1l2174 06AC                             i1l2254 0EE3  
                           i1l2334 075A                             i1l2176 06B1  
                           i1l2168 0696                             i1l2178 06B3  
                           i1l2258 0EED                             i1l2364 0D60  
                           i1l2562 054B                             i1l2566 0557  
                           i1l2588 0DAE                 I2C2_Transmit@i_172 0034  
                           i1l2894 0024                             i1l2886 0012  
                  _mTouch_Interval 00AC                             u142_25 0DDF  
        __end_of_Buzzer_MiliSecond 0C9A                             u162_25 0EEE  
                           u163_25 0EF5                             u180_25 0724  
                           u182_25 0730                             u183_25 0744  
                           u184_25 0750                             _OSCCON 0099  
               I2C2_Transmit@pData 002E                             _TMR1IE 0488  
                           _TMR1IF 0088                          ??_Handler 002D  
                           _TMR6IE 049B                             _TMR1ON 00C0  
                           _TMR6IF 009B                             _SSP2IE 04A0  
                           _SSP2IF 00A0           _mTouch_IntervalDecrement 0D0A  
                ?_Timer1_GetMinute 0070                  ?_Timer1_GetSecond 0070  
                  _mTouch_PortInit 0CB2                      ??_Timer1_Init 002E  
              __end_of_Buzzer_Init 0EAF                      ??_Timer6_Init 002E  
               ??_Timer1_GetMinute 002E                 ??_Timer1_GetSecond 002E  
                           ___lmul 0EDB                             ___wmul 0DE7  
                        ??___lldiv 0036                          ??___llmod 0044  
                           _printf 0058                  __end_ofi1___lldiv 0763  
                 I2C_Transmit@I2Cx 003C                          ??_isdigit 002E  
                        ?_I2C_Init 0033                             putch@c 0031  
                 I2C_Transmit@size 0038            __end_of__initialization 0054  
                        ?_LCD_Init 0070                    ??_LCD_WriteData 002E  
                ?_Timer6_CheckFlag 0070       __size_ofi1_Buzzer_MiliSecond 000A  
                       _VoltageReg 00C8                 ??_Timer6_CheckFlag 0070  
               Buzzer_SetDuty@duty 0070                     __pcstackCOMMON 0070  
              __size_of_Basic_Init 0011                       __pidataBANK1 0E03  
                     __pidataBANK2 0F44                   ?_Buzzer_Count1ms 0070  
                    __end_of_putch 0C86                __end_of_Timer1_Init 0E62  
              __end_of_Timer6_Init 0D50          Buzzer_SetDuty@CCP2CON_Pre 0074  
                       ??_I2C_Init 0036                            ??_putch 0031  
          __end_of_mTouch_PortInit 0CBF                         __pbssBANK0 0054  
                       __pbssBANK1 00A0         __size_of_Buzzer_MiliSecond 000A  
                      _Buzzer_Init 0E87                         ??_LCD_Init 0032  
          __size_of_Buzzer_SetDuty 001C                      _DAC_DataTable 0293  
                     I2C_Init@I2Cx 0038        __end_of_I2C_CommonInterrupt 0C66  
                     I2C_Init@mode 0034                         __pmaintext 03FC  
                          ?___lmul 0070                            ?___wmul 002E  
        __size_of_DAC_WriteVoltage 003A                         __pintentry 0004  
            __size_of_mTouch_Check 0044                            _CCP2CON 029A  
                ?_LCD_DisplayClear 0070                     ___lmul@product 0078  
                          _APFCON0 011D                            _APFCON1 011E  
                          _CCPTMRS 029E                            ?_printf 0046  
                  _Timer1_Count1ms 04C8                 ??_LCD_DisplayClear 0031  
                          _CPSCON0 001E                            _CPSCON1 001F  
                          _SSP2ADD 021A                            _SSP2BUF 0219  
                          _SSP2MSK 021B                I2C2_Transmit@result 0035  
                 ??_LCD_CursorHome 0031                            _Handler 0004  
               mTouch_Read@channel 0060                       _mTouch_Check 0763  
            __end_of_I2C2_Transmit 05FA                        _Timer1_Init 0E41  
                      _Timer6_Init 0D3D  __size_of_Timer1_DetectAssignCount 001A  
                  __size_of___lmul 002F          ?_Timer1_DetectAssignCount 0070  
                          ___lldiv 06BD                    __size_of___wmul 001C  
                          ___llmod 0FBD                    __CFG_STVREN$OFF 0000  
       __end_of_Timer1_ClearRecord 0EDB                            __ptext1 0058  
                          __ptext2 0C7D                            __ptext3 0CDB  
                          __ptext4 0DE7                            __ptext5 0FBD  
                          __ptext6 06BD                            __ptext7 07EB  
                          __ptext8 0CB2                            __ptext9 0763  
                  __size_of_printf 0213                            _dpowers 026B  
                          _isdigit 0CDB                       ??_Basic_Init 002E  
       ??_mTouch_IntervalDecrement 0070                            clrloop0 0C72  
       __end_of_Timer1_GetCountSum 0D3D               end_of_initialization 0054  
                 ?_mTouch_PortInit 0070                            init_ram 0C77  
                          initloop 0C78                      ?_I2C2_PinInit 0070  
                      _I2C2_Config 00B5                    ___lldiv@divisor 002E  
                    ?_I2C2_Setting 002F                    ___lldiv@counter 003B  
                I2C_Transmit@pData 0037            __end_of_Timer1_Count1ms 0562  
                          printf@c 0166                            printf@f 0046  
               __end_of_Basic_Init 0D2C                   _DAC_VoltageTable 00CA  
                     __pstringtext 026B             __size_of_Timer1_GetCPM 000E  
           __size_of_Timer1_GetCPS 000E          __size_of_Timer1_GetMinute 0003  
        __size_of_Timer1_GetSecond 0003                i1_Buzzer_MiliSecond 0C86  
                 __CFG_FOSC$INTOSC 0000                      ??_mTouch_Init 002F  
                    ??_mTouch_Read 0070            __size_of_I2C2_Interrupt 0054  
                __size_of_I2C_Init 0019                          i1___lldiv 0710  
      __size_of_LCD_CursorPosition 0017                     ??_I2C2_PinInit 002E  
                   _Buzzer_SetDuty 0DCB               ?i1_Buzzer_MiliSecond 0070  
                      printf@width 0164                     ??_I2C2_Setting 0031  
                    _H7826_01_Gain 0120                  __size_of_LCD_Init 006F  
                _Timer1_StartCount 0C6C                   _DAC_WriteVoltage 0F0A  
               ?_Timer1_StartCount 0070                     __end_of___lmul 0F0A  
                   __end_of___wmul 0E03                          _ConfigReg 0061  
        __size_of_Timer6_CheckFlag 000B                ??_Timer1_StartCount 002E  
          __size_of_DAC_Initialize 0020                     __end_of_printf 026B  
              start_initialization 002D                         ?i1___lldiv 0020  
           __end_of_Buzzer_SetDuty 0DE7                       ?_Buzzer_Init 0070  
              __end_of_mTouch_Init 07FE                __end_of_mTouch_Read 0E87  
                    _Timer1_GetCPM 0CBF                      _Timer1_GetCPS 0CCD  
            ??i1_Buzzer_MiliSecond 0072                I2C2_Setting@address 0032  
                  ___llmod@divisor 003C          __end_of_Timer1_StartCount 0C71  
                  ___llmod@counter 0045               LCD_CursorPosition@tx 0033  
             LCD_CursorPosition@ty 0031              __end_of_LCD_WriteData 0FBD  
                 ?_Timer1_Count1ms 0070                           ??___lmul 0078  
                         ??___wmul 0032                        __pdataBANK1 00CA  
                      __pdataBANK2 0120                           ??_printf 00E8  
         __size_of_Buzzer_Count1ms 0016                          ___latbits 0001  
                    __pcstackBANK0 0020                      __pcstackBANK1 00E8  
                    __pcstackBANK2 015C   __end_of_mTouch_IntervalDecrement 0D1B  
        __size_of_LCD_DisplayClear 0010                    ?_Buzzer_SetDuty 0070  
                   ?_Timer1_GetCPM 002E                     ?_Timer1_GetCPS 002E  
 __end_of_Timer1_DetectAssignCount 0DB0                    I2C_Init@address 0033  
                         ?_Handler 0070                      ?_I2C_Transmit 0036  
                    I2C_Init@Speed 0035                       ?_Timer1_Init 0070  
            DAC_WriteVoltage@volue 003E                       ?_Timer6_Init 0070  
                         ?___lldiv 002E                           ?___llmod 003C  
     __size_of_I2C_CommonInterrupt 0003                   _Timer1_GetMinute 0C66  
                 _Timer1_GetSecond 0C69               __end_of_I2C2_PinInit 0CB2  
                         ?_isdigit 0070                           _I2C_Init 0D7D  
             __end_of_I2C2_Setting 07EB                     _I2C2_Interrupt 0669  
                       _H7826_Gain 013E                        _mTouch_Init 07EB  
                      _mTouch_Read 0E62                        ??i1___lldiv 007C  
               _Timer1_ClearRecord 0EAF                     __size_of_putch 0009  
                         _LCD_Init 05FA                     ___wmul@product 0032  
                         _CPS_Data 00AF                     ??_I2C_Transmit 0039  
              ?_Timer1_ClearRecord 0070         __size_of_Timer1_StartCount 0005  
                        clear_ram0 0C71                 _Timer1_GetCountSum 0D2C  
             I2C2_Transmit@address 0032                           _SSP2CON1 021D  
                         _SSP2CON2 021E                           _SSP2STAT 021C  
              ?_Timer1_GetCountSum 002E                   _Timer6_CheckFlag 0C9A  
                ___wmul@multiplier 002E                   mTouch_Check@chan 0035  
                   _DAC_Initialize 0E21               ??_Timer1_ClearRecord 002E  
           __end_of_I2C2_Interrupt 06BD                         printf@flag 0163  
                       printf@prec 015C             __size_of_I2C2_Transmit 0098  
                  ??_Timer1_GetCPM 0032                    ??_Timer1_GetCPS 0032  
         __end_of_DAC_WriteVoltage 0F44                        _CPS_PreData 00B2  
                ___lmul@multiplier 0070                  ??_Buzzer_Count1ms 0075  
             ??_Timer1_GetCountSum 0032                   __size_of_Handler 0027  
             __size_of_Buzzer_Init 0028           _Timer1_DetectAssignCount 0D96  
         __size_of_mTouch_PortInit 000D  __size_of_mTouch_IntervalDecrement 0011  
        ?_mTouch_IntervalDecrement 0070            __size_of_LCD_CursorHome 0010  
           __end_of_DAC_Initialize 0E41                   __size_of___lldiv 0053  
                 __size_of___llmod 0043                 LCD_WriteData@point 0030  
                      _isdigit$788 002E                    ?_I2C2_Interrupt 0070  
                 __size_of_isdigit 000F         __end_of_LCD_CursorPosition 0D7D  
                         __ptext10 0C90                           __ptext11 0D3D  
                         __ptext20 05FA                           __ptext12 0C6C  
                         __ptext21 0CFA                           __ptext13 0EAF  
                         __ptext30 07A7                           __ptext22 0D66  
                         __ptext14 0E41                           __ptext31 0CA5  
                         __ptext23 0CEA                           __ptext15 0C69  
                         __ptext40 0710                           __ptext32 0E87  
                         __ptext24 0F80                           __ptext16 0C66  
                         __ptext41 0C86                           __ptext33 0D1B  
                         __ptext25 0F0A                           __ptext17 0D2C  
                         __ptext42 0EDB                           __ptext26 0E21  
                         __ptext18 0CCD                           __ptext43 0C63  
                         __ptext35 0E62                           __ptext27 0DB0  
                         __ptext19 0CBF                           __ptext44 0669  
                         __ptext36 0D0A                           __ptext28 0562  
                         __ptext45 0D50                           __ptext37 0C9A  
                         __ptext29 0D7D                           __ptext46 0DCB  
                         __ptext38 0D96                           __ptext39 04C8  
                 _LCD_DisplayClear 0CFA                       _SSP2CON1bits 021D  
                     _SSP2CON2bits 021E              __end_of_DAC_DataTable 02B1  
                    __size_of_main 00CC                      _I2C2_Transmit 0562  
             __size_of_Timer1_Init 0021                           int$flags 007E  
            __size_of_I2C2_PinInit 000D                I2C_Transmit@address 0036  
             __size_of_Timer6_Init 0013                    ?_DAC_Initialize 0070  
                        printf@val 015E              __size_of_I2C2_Setting 0044  
                     _SSP2STATbits 021C               __end_of_I2C_Transmit 0DCB  
                I2C2_Setting@Speed 0030                   ??_Buzzer_SetDuty 0072  
      __end_ofi1_Buzzer_MiliSecond 0C90                           isdigit@c 002F  
          i1Buzzer_MiliSecond@time 0070                           intlevel1 0000  
              _I2C_CommonInterrupt 0C63                   ___lldiv@dividend 0032  
         __end_of_Timer1_GetMinute 0C69           __end_of_Timer1_GetSecond 0C6C  
                __CFG_CLKOUTEN$OFF 0000                       _I2C2_PinInit 0CA5  
                    ?_mTouch_Check 0070                     ?_I2C2_Transmit 002E  
                     _I2C2_Setting 07A7                           printf@ap 0162  
               I2C_Transmit@result 003D                  ??_mTouch_PortInit 002E  
                 I2C2_Setting@mode 002F               ?_I2C_CommonInterrupt 0070  
                       _OPTION_REG 0095           __size_of_Timer1_Count1ms 009A  
                 ___lldiv@quotient 0037                       ?_mTouch_Init 0070  
                     ?_mTouch_Read 0070             __size_of_LCD_WriteData 003D  
         __end_of_Timer6_CheckFlag 0CA5                     ??_mTouch_Check 0030  
