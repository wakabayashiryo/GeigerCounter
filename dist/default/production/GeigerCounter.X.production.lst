

Microchip Technology PIC LITE Macro Assembler V1.41 build -162212810 
                                                                                               Sun Feb 26 05:10:11 2017

Microchip Technology Omniscient Code Generator v1.41 (Free mode) build 201701250102
     1                           	processor	16F1827
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	stringtext,global,class=STRCODE,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     7                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
     8                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    10                           	psect	text1,local,class=CODE,merge=1,delta=2
    11                           	psect	text2,local,class=CODE,merge=1,delta=2
    12                           	psect	text3,local,class=CODE,merge=1,delta=2
    13                           	psect	text4,local,class=CODE,merge=1,delta=2
    14                           	psect	text5,local,class=CODE,merge=1,delta=2
    15                           	psect	text6,local,class=CODE,merge=1,delta=2,group=2
    16                           	psect	text7,local,class=CODE,merge=1,delta=2,group=2
    17                           	psect	text8,local,class=CODE,merge=1,delta=2,group=2
    18                           	psect	text9,local,class=CODE,merge=1,delta=2
    19                           	psect	text10,local,class=CODE,merge=1,delta=2
    20                           	psect	text11,local,class=CODE,merge=1,delta=2
    21                           	psect	text12,local,class=CODE,merge=1,delta=2
    22                           	psect	text13,local,class=CODE,merge=1,delta=2
    23                           	dabs	1,0x7E,2
    24  0000                     
    25                           ; Version 1.41
    26                           ; Generated 25/01/2017 GMT
    27                           ; 
    28                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    29                           ; All rights reserved.
    30                           ; 
    31                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    32                           ; 
    33                           ; Redistribution and use in source and binary forms, with or without modification, are
    34                           ; permitted provided that the following conditions are met:
    35                           ; 
    36                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    37                           ;        conditions and the following disclaimer.
    38                           ; 
    39                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    40                           ;        of conditions and the following disclaimer in the documentation and/or other
    41                           ;        materials provided with the distribution.
    42                           ; 
    43                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    44                           ;        software without specific prior written permission.
    45                           ; 
    46                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    47                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    48                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    49                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    50                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    51                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    52                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    53                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    54                           ; 
    55                           ; 
    56                           ; Code-generator required, PIC16F1827 Definitions
    57                           ; 
    58                           ; SFR Addresses
    59  0000                     	;# 
    60  0001                     	;# 
    61  0002                     	;# 
    62  0003                     	;# 
    63  0004                     	;# 
    64  0005                     	;# 
    65  0006                     	;# 
    66  0007                     	;# 
    67  0008                     	;# 
    68  0009                     	;# 
    69  000A                     	;# 
    70  000B                     	;# 
    71  000C                     	;# 
    72  000D                     	;# 
    73  0011                     	;# 
    74  0012                     	;# 
    75  0013                     	;# 
    76  0014                     	;# 
    77  0015                     	;# 
    78  0016                     	;# 
    79  0016                     	;# 
    80  0017                     	;# 
    81  0018                     	;# 
    82  0019                     	;# 
    83  001A                     	;# 
    84  001B                     	;# 
    85  001C                     	;# 
    86  001E                     	;# 
    87  001F                     	;# 
    88  008C                     	;# 
    89  008D                     	;# 
    90  0091                     	;# 
    91  0092                     	;# 
    92  0093                     	;# 
    93  0094                     	;# 
    94  0095                     	;# 
    95  0096                     	;# 
    96  0097                     	;# 
    97  0098                     	;# 
    98  0099                     	;# 
    99  009A                     	;# 
   100  009B                     	;# 
   101  009B                     	;# 
   102  009C                     	;# 
   103  009D                     	;# 
   104  009E                     	;# 
   105  010C                     	;# 
   106  010D                     	;# 
   107  0111                     	;# 
   108  0112                     	;# 
   109  0113                     	;# 
   110  0114                     	;# 
   111  0115                     	;# 
   112  0116                     	;# 
   113  0117                     	;# 
   114  0118                     	;# 
   115  0119                     	;# 
   116  011A                     	;# 
   117  011B                     	;# 
   118  011D                     	;# 
   119  011E                     	;# 
   120  018C                     	;# 
   121  018D                     	;# 
   122  0191                     	;# 
   123  0191                     	;# 
   124  0192                     	;# 
   125  0193                     	;# 
   126  0193                     	;# 
   127  0193                     	;# 
   128  0194                     	;# 
   129  0195                     	;# 
   130  0196                     	;# 
   131  0199                     	;# 
   132  019A                     	;# 
   133  019B                     	;# 
   134  019B                     	;# 
   135  019B                     	;# 
   136  019B                     	;# 
   137  019C                     	;# 
   138  019C                     	;# 
   139  019D                     	;# 
   140  019E                     	;# 
   141  019F                     	;# 
   142  020C                     	;# 
   143  020D                     	;# 
   144  0211                     	;# 
   145  0211                     	;# 
   146  0212                     	;# 
   147  0212                     	;# 
   148  0213                     	;# 
   149  0213                     	;# 
   150  0214                     	;# 
   151  0214                     	;# 
   152  0215                     	;# 
   153  0215                     	;# 
   154  0215                     	;# 
   155  0216                     	;# 
   156  0216                     	;# 
   157  0217                     	;# 
   158  0217                     	;# 
   159  0219                     	;# 
   160  021A                     	;# 
   161  021B                     	;# 
   162  021C                     	;# 
   163  021D                     	;# 
   164  021E                     	;# 
   165  021F                     	;# 
   166  0291                     	;# 
   167  0291                     	;# 
   168  0292                     	;# 
   169  0293                     	;# 
   170  0294                     	;# 
   171  0295                     	;# 
   172  0295                     	;# 
   173  0296                     	;# 
   174  0298                     	;# 
   175  0298                     	;# 
   176  0299                     	;# 
   177  029A                     	;# 
   178  029B                     	;# 
   179  029C                     	;# 
   180  029C                     	;# 
   181  029D                     	;# 
   182  029E                     	;# 
   183  029E                     	;# 
   184  0311                     	;# 
   185  0311                     	;# 
   186  0312                     	;# 
   187  0313                     	;# 
   188  0318                     	;# 
   189  0318                     	;# 
   190  0319                     	;# 
   191  031A                     	;# 
   192  0394                     	;# 
   193  0395                     	;# 
   194  0396                     	;# 
   195  039A                     	;# 
   196  039C                     	;# 
   197  039D                     	;# 
   198  039E                     	;# 
   199  039F                     	;# 
   200  0415                     	;# 
   201  0416                     	;# 
   202  0417                     	;# 
   203  041C                     	;# 
   204  041D                     	;# 
   205  041E                     	;# 
   206  0FE4                     	;# 
   207  0FE5                     	;# 
   208  0FE6                     	;# 
   209  0FE7                     	;# 
   210  0FE8                     	;# 
   211  0FE9                     	;# 
   212  0FEA                     	;# 
   213  0FEB                     	;# 
   214  0FED                     	;# 
   215  0FEE                     	;# 
   216  0FEF                     	;# 
   217  0000                     	;# 
   218  0001                     	;# 
   219  0002                     	;# 
   220  0003                     	;# 
   221  0004                     	;# 
   222  0005                     	;# 
   223  0006                     	;# 
   224  0007                     	;# 
   225  0008                     	;# 
   226  0009                     	;# 
   227  000A                     	;# 
   228  000B                     	;# 
   229  000C                     	;# 
   230  000D                     	;# 
   231  0011                     	;# 
   232  0012                     	;# 
   233  0013                     	;# 
   234  0014                     	;# 
   235  0015                     	;# 
   236  0016                     	;# 
   237  0016                     	;# 
   238  0017                     	;# 
   239  0018                     	;# 
   240  0019                     	;# 
   241  001A                     	;# 
   242  001B                     	;# 
   243  001C                     	;# 
   244  001E                     	;# 
   245  001F                     	;# 
   246  008C                     	;# 
   247  008D                     	;# 
   248  0091                     	;# 
   249  0092                     	;# 
   250  0093                     	;# 
   251  0094                     	;# 
   252  0095                     	;# 
   253  0096                     	;# 
   254  0097                     	;# 
   255  0098                     	;# 
   256  0099                     	;# 
   257  009A                     	;# 
   258  009B                     	;# 
   259  009B                     	;# 
   260  009C                     	;# 
   261  009D                     	;# 
   262  009E                     	;# 
   263  010C                     	;# 
   264  010D                     	;# 
   265  0111                     	;# 
   266  0112                     	;# 
   267  0113                     	;# 
   268  0114                     	;# 
   269  0115                     	;# 
   270  0116                     	;# 
   271  0117                     	;# 
   272  0118                     	;# 
   273  0119                     	;# 
   274  011A                     	;# 
   275  011B                     	;# 
   276  011D                     	;# 
   277  011E                     	;# 
   278  018C                     	;# 
   279  018D                     	;# 
   280  0191                     	;# 
   281  0191                     	;# 
   282  0192                     	;# 
   283  0193                     	;# 
   284  0193                     	;# 
   285  0193                     	;# 
   286  0194                     	;# 
   287  0195                     	;# 
   288  0196                     	;# 
   289  0199                     	;# 
   290  019A                     	;# 
   291  019B                     	;# 
   292  019B                     	;# 
   293  019B                     	;# 
   294  019B                     	;# 
   295  019C                     	;# 
   296  019C                     	;# 
   297  019D                     	;# 
   298  019E                     	;# 
   299  019F                     	;# 
   300  020C                     	;# 
   301  020D                     	;# 
   302  0211                     	;# 
   303  0211                     	;# 
   304  0212                     	;# 
   305  0212                     	;# 
   306  0213                     	;# 
   307  0213                     	;# 
   308  0214                     	;# 
   309  0214                     	;# 
   310  0215                     	;# 
   311  0215                     	;# 
   312  0215                     	;# 
   313  0216                     	;# 
   314  0216                     	;# 
   315  0217                     	;# 
   316  0217                     	;# 
   317  0219                     	;# 
   318  021A                     	;# 
   319  021B                     	;# 
   320  021C                     	;# 
   321  021D                     	;# 
   322  021E                     	;# 
   323  021F                     	;# 
   324  0291                     	;# 
   325  0291                     	;# 
   326  0292                     	;# 
   327  0293                     	;# 
   328  0294                     	;# 
   329  0295                     	;# 
   330  0295                     	;# 
   331  0296                     	;# 
   332  0298                     	;# 
   333  0298                     	;# 
   334  0299                     	;# 
   335  029A                     	;# 
   336  029B                     	;# 
   337  029C                     	;# 
   338  029C                     	;# 
   339  029D                     	;# 
   340  029E                     	;# 
   341  029E                     	;# 
   342  0311                     	;# 
   343  0311                     	;# 
   344  0312                     	;# 
   345  0313                     	;# 
   346  0318                     	;# 
   347  0318                     	;# 
   348  0319                     	;# 
   349  031A                     	;# 
   350  0394                     	;# 
   351  0395                     	;# 
   352  0396                     	;# 
   353  039A                     	;# 
   354  039C                     	;# 
   355  039D                     	;# 
   356  039E                     	;# 
   357  039F                     	;# 
   358  0415                     	;# 
   359  0416                     	;# 
   360  0417                     	;# 
   361  041C                     	;# 
   362  041D                     	;# 
   363  041E                     	;# 
   364  0FE4                     	;# 
   365  0FE5                     	;# 
   366  0FE6                     	;# 
   367  0FE7                     	;# 
   368  0FE8                     	;# 
   369  0FE9                     	;# 
   370  0FEA                     	;# 
   371  0FEB                     	;# 
   372  0FED                     	;# 
   373  0FEE                     	;# 
   374  0FEF                     	;# 
   375  000D                     _PORTB	set	13
   376  000C                     _PORTA	set	12
   377  0064                     _RA4	set	100
   378  0063                     _RA3	set	99
   379  008D                     _TRISB	set	141
   380  008C                     _TRISA	set	140
   381  0099                     _OSCCON	set	153
   382  011E                     _APFCON1	set	286
   383  011D                     _APFCON0	set	285
   384  018D                     _ANSELB	set	397
   385  018C                     _ANSELA	set	396
   386                           
   387                           	psect	stringtext
   388  0800                     __pstringtext:	
   389  0800                     STR_1:	
   390  0800  3448               	retlw	72	;'H'
   391  0801  3465               	retlw	101	;'e'
   392  0802  346C               	retlw	108	;'l'
   393  0803  346C               	retlw	108	;'l'
   394  0804  346F               	retlw	111	;'o'
   395  0805  3477               	retlw	119	;'w'
   396  0806  3420               	retlw	32	;' '
   397  0807  3457               	retlw	87	;'W'
   398  0808  346F               	retlw	111	;'o'
   399  0809  3472               	retlw	114	;'r'
   400  080A  346C               	retlw	108	;'l'
   401  080B  3464               	retlw	100	;'d'
   402  080C  3400               	retlw	0
   403  080D                     STR_3:	
   404  080D  3425               	retlw	37	;'%'
   405  080E  3430               	retlw	48	;'0'
   406  080F  3438               	retlw	56	;'8'
   407  0810  346C               	retlw	108	;'l'
   408  0811  3458               	retlw	88	;'X'
   409  0812  3420               	retlw	32	;' '
   410  0813  3400               	retlw	0
   411  0814                     STR_6:	
   412  0814  3420               	retlw	32	;' '
   413  0815  3425               	retlw	37	;'%'
   414  0816  3430               	retlw	48	;'0'
   415  0817  3438               	retlw	56	;'8'
   416  0818  344C               	retlw	76	;'L'
   417  0819  3458               	retlw	88	;'X'
   418  081A  3400               	retlw	0
   419  081B                     STR_4:	
   420  081B  3420               	retlw	32	;' '
   421  081C  3425               	retlw	37	;'%'
   422  081D  3430               	retlw	48	;'0'
   423  081E  3432               	retlw	50	;'2'
   424  081F  3458               	retlw	88	;'X'
   425  0820  3400               	retlw	0
   426  0821                     STR_5:	
   427  0821  3420               	retlw	32	;' '
   428  0822  3425               	retlw	37	;'%'
   429  0823  3430               	retlw	48	;'0'
   430  0824  3434               	retlw	52	;'4'
   431  0825  3458               	retlw	88	;'X'
   432  0826  3400               	retlw	0
   433  0827                     STR_2:	
   434  0827  340D               	retlw	13
   435  0828  3400               	retlw	0
   436                           
   437                           ; #config settings
   438  0000                     
   439                           	psect	cinit
   440  07F8                     start_initialization:	
   441  07F8                     __initialization:	
   442                           
   443                           ; Clear objects allocated to BANK0
   444  07F8  01D8               	clrf	__pbssBANK0& (0+127)
   445  07F9  01D9               	clrf	(__pbssBANK0+1)& (0+127)
   446  07FA  01DA               	clrf	(__pbssBANK0+2)& (0+127)
   447  07FB  01DB               	clrf	(__pbssBANK0+3)& (0+127)
   448  07FC  01DC               	clrf	(__pbssBANK0+4)& (0+127)
   449  07FD                     end_of_initialization:	
   450                           ;End of C runtime variable initialization code
   451                           
   452  07FD                     __end_of__initialization:	
   453  07FD  0020               	movlb	0
   454  07FE  3184  2C36         	ljmp	_main	;jump to C main() function
   455                           
   456                           	psect	bssBANK0
   457  0058                     __pbssBANK0:	
   458  0058                     _xfunc_in:	
   459  0058                     	ds	2
   460  005A                     _xfunc_out:	
   461  005A                     	ds	2
   462  005C                     _outptr:	
   463  005C                     	ds	1
   464                           
   465                           	psect	cstackCOMMON
   466  0070                     __pcstackCOMMON:	
   467  0070                     ?_Basic_Init:	
   468  0070                     ??_Basic_Init:	
   469                           ; 1 bytes @ 0x0
   470                           
   471  0070                     ?_LCD_Init:	
   472                           ; 1 bytes @ 0x0
   473                           
   474  0070                     ?_LCD_DisplayClear:	
   475                           ; 1 bytes @ 0x0
   476                           
   477  0070                     ?_main:	
   478                           ; 1 bytes @ 0x0
   479                           
   480  0070                     ?_LCD_WriteData:	
   481                           ; 1 bytes @ 0x0
   482                           
   483  0070                     ??_LCD_WriteData:	
   484                           ; 1 bytes @ 0x0
   485                           
   486  0070                     ?_xputc:	
   487                           ; 1 bytes @ 0x0
   488                           
   489  0070                     ?_xputs:	
   490                           ; 1 bytes @ 0x0
   491                           
   492  0070                     ?___wmul:	
   493                           ; 1 bytes @ 0x0
   494                           
   495  0070                     ?___lldiv:	
   496                           ; 2 bytes @ 0x0
   497                           
   498  0070                     ?___llmod:	
   499                           ; 4 bytes @ 0x0
   500                           
   501  0070                     ___wmul@multiplier:	
   502                           ; 4 bytes @ 0x0
   503                           
   504  0070                     ___lldiv@divisor:	
   505                           ; 2 bytes @ 0x0
   506                           
   507  0070                     ___llmod@divisor:	
   508                           ; 4 bytes @ 0x0
   509                           
   510                           
   511                           ; 4 bytes @ 0x0
   512  0070                     	ds	2
   513  0072                     LCD_WriteData@point:	
   514  0072                     ___wmul@multiplicand:	
   515                           ; 1 bytes @ 0x2
   516                           
   517                           
   518                           ; 2 bytes @ 0x2
   519  0072                     	ds	1
   520  0073                     ?_LCD_Put:	
   521  0073                     ?_LCD_CursorPosition:	
   522                           ; 1 bytes @ 0x3
   523                           
   524  0073                     ??_LCD_DisplayClear:	
   525                           ; 1 bytes @ 0x3
   526                           
   527  0073                     LCD_Put@word:	
   528                           ; 1 bytes @ 0x3
   529                           
   530  0073                     LCD_CursorPosition@ty:	
   531                           ; 1 bytes @ 0x3
   532                           
   533                           
   534                           ; 1 bytes @ 0x3
   535  0073                     	ds	1
   536  0074                     ??_LCD_Init:	
   537  0074                     ??_LCD_Put:	
   538                           ; 1 bytes @ 0x4
   539                           
   540  0074                     ??_LCD_CursorPosition:	
   541                           ; 1 bytes @ 0x4
   542                           
   543  0074                     ??_xputc:	
   544                           ; 1 bytes @ 0x4
   545                           
   546  0074                     ??___wmul:	
   547                           ; 1 bytes @ 0x4
   548                           
   549  0074                     ___wmul@product:	
   550                           ; 1 bytes @ 0x4
   551                           
   552  0074                     ___lldiv@dividend:	
   553                           ; 2 bytes @ 0x4
   554                           
   555  0074                     ___llmod@dividend:	
   556                           ; 4 bytes @ 0x4
   557                           
   558                           
   559                           ; 4 bytes @ 0x4
   560  0074                     	ds	1
   561  0075                     LCD_CursorPosition@tx:	
   562  0075                     xputc@c:	
   563                           ; 1 bytes @ 0x5
   564                           
   565                           
   566                           ; 1 bytes @ 0x5
   567  0075                     	ds	1
   568  0076                     ??_xputs:	
   569                           
   570                           ; 1 bytes @ 0x6
   571  0076                     	ds	1
   572  0077                     xputs@str:	
   573                           
   574                           ; 1 bytes @ 0x7
   575  0077                     	ds	1
   576  0078                     ??___lldiv:	
   577  0078                     ??___llmod:	
   578                           ; 1 bytes @ 0x8
   579                           
   580                           
   581                           ; 1 bytes @ 0x8
   582  0078                     	ds	1
   583  0079                     ___llmod@counter:	
   584  0079                     ___lldiv@quotient:	
   585                           ; 1 bytes @ 0x9
   586                           
   587                           
   588                           ; 4 bytes @ 0x9
   589  0079                     	ds	4
   590  007D                     ___lldiv@counter:	
   591                           
   592                           ; 1 bytes @ 0xD
   593  007D                     	ds	1
   594  007E                     ??_main:	
   595                           
   596                           	psect	cstackBANK0
   597  0020                     __pcstackBANK0:	
   598                           ; 1 bytes @ 0xE
   599                           
   600  0020                     ?_xvprintf:	
   601  0020                     xvprintf@fmt:	
   602                           ; 1 bytes @ 0x0
   603                           
   604                           
   605                           ; 2 bytes @ 0x0
   606  0020                     	ds	2
   607  0022                     xvprintf@arp:	
   608                           
   609                           ; 1 bytes @ 0x2
   610  0022                     	ds	1
   611  0023                     ??_xvprintf:	
   612                           
   613                           ; 1 bytes @ 0x3
   614  0023                     	ds	4
   615  0027                     xvprintf@s:	
   616                           
   617                           ; 16 bytes @ 0x7
   618  0027                     	ds	16
   619  0037                     _xvprintf$154:	
   620                           
   621                           ; 4 bytes @ 0x17
   622  0037                     	ds	4
   623  003B                     _xvprintf$155:	
   624                           
   625                           ; 2 bytes @ 0x1B
   626  003B                     	ds	2
   627  003D                     _xvprintf$156:	
   628                           
   629                           ; 2 bytes @ 0x1D
   630  003D                     	ds	2
   631  003F                     xvprintf@p:	
   632                           
   633                           ; 1 bytes @ 0x1F
   634  003F                     	ds	1
   635  0040                     xvprintf@r:	
   636                           
   637                           ; 2 bytes @ 0x20
   638  0040                     	ds	2
   639  0042                     xvprintf@w:	
   640                           
   641                           ; 2 bytes @ 0x22
   642  0042                     	ds	2
   643  0044                     xvprintf@j:	
   644                           
   645                           ; 2 bytes @ 0x24
   646  0044                     	ds	2
   647  0046                     xvprintf@v:	
   648                           
   649                           ; 4 bytes @ 0x26
   650  0046                     	ds	4
   651  004A                     xvprintf@f:	
   652                           
   653                           ; 2 bytes @ 0x2A
   654  004A                     	ds	2
   655  004C                     xvprintf@i:	
   656                           
   657                           ; 2 bytes @ 0x2C
   658  004C                     	ds	2
   659  004E                     xvprintf@d:	
   660                           
   661                           ; 1 bytes @ 0x2E
   662  004E                     	ds	1
   663  004F                     xvprintf@c:	
   664                           
   665                           ; 1 bytes @ 0x2F
   666  004F                     	ds	1
   667  0050                     ?_xprintf:	
   668  0050                     xprintf@fmt:	
   669                           ; 1 bytes @ 0x30
   670                           
   671                           
   672                           ; 2 bytes @ 0x30
   673  0050                     	ds	6
   674  0056                     ??_xprintf:	
   675                           
   676                           ; 1 bytes @ 0x36
   677  0056                     	ds	1
   678  0057                     xprintf@arp:	
   679                           
   680                           ; 1 bytes @ 0x37
   681  0057                     	ds	1
   682                           
   683                           	psect	maintext
   684  0436                     __pmaintext:	
   685 ;;
   686 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   687 ;;
   688 ;; *************** function _main *****************
   689 ;; Defined at:
   690 ;;		line 12 in file "main.c"
   691 ;; Parameters:    Size  Location     Type
   692 ;;		None
   693 ;; Auto vars:     Size  Location     Type
   694 ;;		None
   695 ;; Return value:  Size  Location     Type
   696 ;;                  1    wreg      char 
   697 ;; Registers used:
   698 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
   699 ;; Tracked objects:
   700 ;;		On entry : B1F/0
   701 ;;		On exit  : 0/0
   702 ;;		Unchanged: 0/0
   703 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
   704 ;;      Params:         0       0       0       0       0       0
   705 ;;      Locals:         0       0       0       0       0       0
   706 ;;      Temps:          0       0       0       0       0       0
   707 ;;      Totals:         0       0       0       0       0       0
   708 ;;Total ram usage:        0 bytes
   709 ;; Hardware stack levels required when called:    6
   710 ;; This function calls:
   711 ;;		_Basic_Init
   712 ;;		_LCD_CursorPosition
   713 ;;		_LCD_Init
   714 ;;		_xprintf
   715 ;; This function is called by:
   716 ;;		Startup code after reset
   717 ;; This function uses a non-reentrant model
   718 ;;
   719                           
   720                           
   721                           ;psect for function _main
   722  0436                     _main:	
   723                           
   724                           ;main.c: 14: Basic_Init();
   725                           
   726                           ;incstack = 0
   727                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
   728  0436  3184  240C  3184   	fcall	_Basic_Init
   729                           
   730                           ;main.c: 15: LCD_Init();
   731  0439  3185  2565  3184   	fcall	_LCD_Init
   732                           
   733                           ;main.c: 16: xfunc_out = (void(*)(unsigned char))(LCD_Put);
   734  043C  30D4               	movlw	low _LCD_Put
   735  043D  0020               	movlb	0	; select bank0
   736  043E  00DA               	movwf	_xfunc_out
   737  043F  3003               	movlw	high _LCD_Put
   738  0440  00DB               	movwf	_xfunc_out+1
   739                           
   740                           ;main.c: 18: LCD_CursorPosition(0,0);
   741  0441  01F3               	clrf	LCD_CursorPosition@ty
   742  0442  3000               	movlw	0
   743  0443  3184  2421  3184   	fcall	_LCD_CursorPosition
   744                           
   745                           ;main.c: 19: xprintf("Hellow World");
   746  0446  3000               	movlw	low (STR_1| (0+32768))
   747  0447  0020               	movlb	0	; select bank0
   748  0448  00D0               	movwf	xprintf@fmt
   749  0449  3088               	movlw	high (STR_1| (0+32768))
   750  044A  00D1               	movwf	xprintf@fmt+1
   751  044B  3183  23E9         	fcall	_xprintf
   752                           
   753                           ;main.c: 21: return 0;
   754                           ;	Return value of _main is never used
   755  044D  3180  2802         	ljmp	start
   756  044F                     __end_of_main:	
   757                           
   758                           	psect	text1
   759  03E9                     __ptext1:	
   760 ;; *************** function _xprintf *****************
   761 ;; Defined at:
   762 ;;		line 165 in file "xprintf.c"
   763 ;; Parameters:    Size  Location     Type
   764 ;;  fmt             2   48[BANK0 ] PTR const unsigned char 
   765 ;;		 -> STR_6(7), STR_5(6), STR_4(6), STR_3(7), 
   766 ;;		 -> STR_1(13), 
   767 ;; Auto vars:     Size  Location     Type
   768 ;;  arp             1   55[BANK0 ] PTR void [1]
   769 ;;		 -> ?_xfprintf(1), ?_xsprintf(1), ?_xprintf(1), 
   770 ;; Return value:  Size  Location     Type
   771 ;;                  1    wreg      void 
   772 ;; Registers used:
   773 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
   774 ;; Tracked objects:
   775 ;;		On entry : 0/0
   776 ;;		On exit  : 0/0
   777 ;;		Unchanged: 0/0
   778 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
   779 ;;      Params:         0       6       0       0       0       0
   780 ;;      Locals:         0       1       0       0       0       0
   781 ;;      Temps:          0       1       0       0       0       0
   782 ;;      Totals:         0       8       0       0       0       0
   783 ;;Total ram usage:        8 bytes
   784 ;; Hardware stack levels used:    1
   785 ;; Hardware stack levels required when called:    5
   786 ;; This function calls:
   787 ;;		_xvprintf
   788 ;; This function is called by:
   789 ;;		_main
   790 ;;		_put_dump
   791 ;; This function uses a non-reentrant model
   792 ;;
   793                           
   794                           
   795                           ;psect for function _xprintf
   796  03E9                     _xprintf:	
   797                           
   798                           ;xprintf.c: 170: va_list arp;
   799                           ;xprintf.c: 173: *arp = __va_start();
   800                           
   801                           ;incstack = 0
   802                           ; Regs used in _xprintf: [wreg-fsr1h+status,2+status,0+pclath+cstack]
   803  03E9  3052               	movlw	(low ((?_xprintf| 0+2)))& (0+255)
   804  03EA  0020               	movlb	0	; select bank0
   805  03EB  00D6               	movwf	??_xprintf
   806  03EC  0856               	movf	??_xprintf,w
   807  03ED  00D7               	movwf	xprintf@arp
   808                           
   809                           ;xprintf.c: 174: xvprintf(fmt, arp);
   810  03EE  0851               	movf	xprintf@fmt+1,w
   811  03EF  00A1               	movwf	xvprintf@fmt+1
   812  03F0  0850               	movf	xprintf@fmt,w
   813  03F1  00A0               	movwf	xvprintf@fmt
   814  03F2  3057               	movlw	(low (xprintf@arp| 0))& (0+255)
   815  03F3  00D6               	movwf	??_xprintf
   816  03F4  0856               	movf	??_xprintf,w
   817  03F5  00A2               	movwf	xvprintf@arp
   818  03F6  3185  25CE         	fcall	_xvprintf
   819  03F8  0008               	return
   820  03F9                     __end_of_xprintf:	
   821                           
   822                           	psect	text2
   823  05CE                     __ptext2:	
   824 ;; *************** function _xvprintf *****************
   825 ;; Defined at:
   826 ;;		line 88 in file "xprintf.c"
   827 ;; Parameters:    Size  Location     Type
   828 ;;  fmt             2    0[BANK0 ] PTR const unsigned char 
   829 ;;		 -> STR_6(7), STR_5(6), STR_4(6), STR_3(7), 
   830 ;;		 -> STR_1(13), 
   831 ;;  arp             1    2[BANK0 ] PTR PTR void 
   832 ;;		 -> xfprintf@arp(1), xsprintf@arp(1), xprintf@arp(1), 
   833 ;; Auto vars:     Size  Location     Type
   834 ;;  s              16    7[BANK0 ] unsigned char [16]
   835 ;;  v               4   38[BANK0 ] unsigned long 
   836 ;;  i               2   44[BANK0 ] unsigned int 
   837 ;;  f               2   42[BANK0 ] unsigned int 
   838 ;;  j               2   36[BANK0 ] unsigned int 
   839 ;;  w               2   34[BANK0 ] unsigned int 
   840 ;;  r               2   32[BANK0 ] unsigned int 
   841 ;;  c               1   47[BANK0 ] unsigned char 
   842 ;;  d               1   46[BANK0 ] unsigned char 
   843 ;;  p               1   31[BANK0 ] PTR unsigned char 
   844 ;;		 -> ?_xfprintf(1), ?_xsprintf(1), ?_xprintf(1), 
   845 ;; Return value:  Size  Location     Type
   846 ;;                  1    wreg      void 
   847 ;; Registers used:
   848 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
   849 ;; Tracked objects:
   850 ;;		On entry : 0/0
   851 ;;		On exit  : 0/0
   852 ;;		Unchanged: 0/0
   853 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
   854 ;;      Params:         0       3       0       0       0       0
   855 ;;      Locals:         0      41       0       0       0       0
   856 ;;      Temps:          0       4       0       0       0       0
   857 ;;      Totals:         0      48       0       0       0       0
   858 ;;Total ram usage:       48 bytes
   859 ;; Hardware stack levels used:    1
   860 ;; Hardware stack levels required when called:    4
   861 ;; This function calls:
   862 ;;		___lldiv
   863 ;;		___llmod
   864 ;;		___wmul
   865 ;;		_xputc
   866 ;;		_xputs
   867 ;; This function is called by:
   868 ;;		_xprintf
   869 ;;		_xsprintf
   870 ;;		_xfprintf
   871 ;; This function uses a non-reentrant model
   872 ;;
   873                           
   874                           
   875                           ;psect for function _xvprintf
   876  05CE                     _xvprintf:	
   877  05CE                     l105:	
   878                           ;incstack = 0
   879                           ; Regs used in _xvprintf: [wreg-fsr1h+status,2+status,0+pclath+cstack]
   880                           ;xprintf.c: 93: unsigned int r, i, j, w, f;
   881                           ;xprintf.c: 94: unsigned long v;
   882                           ;xprintf.c: 95: char s[16], c, d, *p;
   883                           ;xprintf.c: 98: for (;;) {
   884                           
   885                           
   886                           ;xprintf.c: 99: c = *fmt++;
   887  05CE  0020               	movlb	0	; select bank0
   888  05CF  0820               	movf	xvprintf@fmt,w
   889  05D0  0084               	movwf	4
   890  05D1  0821               	movf	xvprintf@fmt+1,w
   891  05D2  0085               	movwf	5
   892  05D3  0800               	movf	0,w	;code access
   893  05D4  00A3               	movwf	??_xvprintf
   894  05D5  0823               	movf	??_xvprintf,w
   895  05D6  00CF               	movwf	xvprintf@c
   896  05D7  3001               	movlw	1
   897  05D8  07A0               	addwf	xvprintf@fmt,f
   898  05D9  3000               	movlw	0
   899  05DA  3DA1               	addwfc	xvprintf@fmt+1,f
   900                           
   901                           ;xprintf.c: 100: if (!c) break;
   902  05DB  084F               	movf	xvprintf@c,w
   903  05DC  1903               	btfsc	3,2
   904  05DD  0008               	return
   905                           
   906                           ;xprintf.c: 101: if (c != '%') {
   907  05DE  3025               	movlw	37
   908  05DF  064F               	xorwf	xvprintf@c,w
   909  05E0  1903               	btfsc	3,2
   910  05E1  2DE7               	goto	l1422
   911                           
   912                           ;xprintf.c: 102: xputc(c); continue;
   913  05E2  084F               	movf	xvprintf@c,w
   914  05E3  3184  246A  3185   	fcall	_xputc
   915  05E6  2DCE               	goto	l105
   916  05E7                     l1422:	
   917                           
   918                           ;xprintf.c: 103: }
   919                           ;xprintf.c: 104: f = 0;
   920  05E7  0020               	movlb	0	; select bank0
   921  05E8  01CA               	clrf	xvprintf@f
   922  05E9  01CB               	clrf	xvprintf@f+1
   923                           
   924                           ;xprintf.c: 105: c = *fmt++;
   925  05EA  0820               	movf	xvprintf@fmt,w
   926  05EB  0084               	movwf	4
   927  05EC  0821               	movf	xvprintf@fmt+1,w
   928  05ED  0085               	movwf	5
   929  05EE  0800               	movf	0,w	;code access
   930  05EF  00A3               	movwf	??_xvprintf
   931  05F0  0823               	movf	??_xvprintf,w
   932  05F1  00CF               	movwf	xvprintf@c
   933  05F2  3001               	movlw	1
   934  05F3  07A0               	addwf	xvprintf@fmt,f
   935  05F4  3000               	movlw	0
   936  05F5  3DA1               	addwfc	xvprintf@fmt+1,f
   937                           
   938                           ;xprintf.c: 106: if (c == '0') {
   939  05F6  3030               	movlw	48
   940  05F7  064F               	xorwf	xvprintf@c,w
   941  05F8  1D03               	btfss	3,2
   942  05F9  2DFC               	goto	l1436
   943                           
   944                           ;xprintf.c: 107: f = 1; c = *fmt++;
   945  05FA  3001               	movlw	1
   946  05FB  2E01               	goto	L6
   947  05FC                     l1436:	
   948                           ;xprintf.c: 108: } else {
   949                           
   950                           
   951                           ;xprintf.c: 109: if (c == '-') {
   952  05FC  302D               	movlw	45
   953  05FD  064F               	xorwf	xvprintf@c,w
   954  05FE  1D03               	btfss	3,2
   955  05FF  2E10               	goto	l1444
   956                           
   957                           ;xprintf.c: 110: f = 2; c = *fmt++;
   958  0600  3002               	movlw	2
   959  0601                     L6:	
   960  0601  00CA               	movwf	xvprintf@f
   961  0602  3000               	movlw	0
   962  0603  00CB               	movwf	xvprintf@f+1
   963  0604  0820               	movf	xvprintf@fmt,w
   964  0605  0084               	movwf	4
   965  0606  0821               	movf	xvprintf@fmt+1,w
   966  0607  0085               	movwf	5
   967  0608  0800               	movf	0,w	;code access
   968  0609  00A3               	movwf	??_xvprintf
   969  060A  0823               	movf	??_xvprintf,w
   970  060B  00CF               	movwf	xvprintf@c
   971  060C  3001               	movlw	1
   972  060D  07A0               	addwf	xvprintf@fmt,f
   973  060E  3000               	movlw	0
   974  060F  3DA1               	addwfc	xvprintf@fmt+1,f
   975  0610                     l1444:	
   976                           
   977                           ;xprintf.c: 111: }
   978                           ;xprintf.c: 112: }
   979                           ;xprintf.c: 113: for (w = 0; c >= '0' && c <= '9'; c = *fmt++)
   980  0610  01C2               	clrf	xvprintf@w
   981  0611  01C3               	clrf	xvprintf@w+1
   982  0612  2E3A               	goto	l1452
   983  0613                     l1446:	
   984                           
   985                           ;xprintf.c: 114: w = w * 10 + c - '0';
   986  0613  084F               	movf	xvprintf@c,w
   987  0614  00A3               	movwf	??_xvprintf
   988  0615  01A4               	clrf	??_xvprintf+1
   989  0616  0843               	movf	xvprintf@w+1,w
   990  0617  00F1               	movwf	___wmul@multiplier+1
   991  0618  0842               	movf	xvprintf@w,w
   992  0619  00F0               	movwf	___wmul@multiplier
   993  061A  300A               	movlw	10
   994  061B  00F2               	movwf	___wmul@multiplicand
   995  061C  3000               	movlw	0
   996  061D  00F3               	movwf	___wmul@multiplicand+1
   997  061E  3184  244F  3185   	fcall	___wmul
   998  0621  0020               	movlb	0	; select bank0
   999  0622  0823               	movf	??_xvprintf,w
  1000  0623  0770               	addwf	?___wmul,w
  1001  0624  00A5               	movwf	??_xvprintf+2
  1002  0625  0824               	movf	??_xvprintf+1,w
  1003  0626  3D71               	addwfc	?___wmul+1,w
  1004  0627  00A6               	movwf	??_xvprintf+3
  1005  0628  0825               	movf	??_xvprintf+2,w
  1006  0629  3ED0               	addlw	208
  1007  062A  00C2               	movwf	xvprintf@w
  1008  062B  30FF               	movlw	255
  1009  062C  3D26               	addwfc	??_xvprintf+3,w
  1010  062D  00C3               	movwf	xvprintf@w+1
  1011  062E  0820               	movf	xvprintf@fmt,w
  1012  062F  0084               	movwf	4
  1013  0630  0821               	movf	xvprintf@fmt+1,w
  1014  0631  0085               	movwf	5
  1015  0632  0800               	movf	0,w	;code access
  1016  0633  00A3               	movwf	??_xvprintf
  1017  0634  0823               	movf	??_xvprintf,w
  1018  0635  00CF               	movwf	xvprintf@c
  1019  0636  3001               	movlw	1
  1020  0637  07A0               	addwf	xvprintf@fmt,f
  1021  0638  3000               	movlw	0
  1022  0639  3DA1               	addwfc	xvprintf@fmt+1,f
  1023  063A                     l1452:	
  1024  063A  3030               	movlw	48
  1025  063B  024F               	subwf	xvprintf@c,w
  1026  063C  1C03               	skipc
  1027  063D  2E42               	goto	l1456
  1028  063E  303A               	movlw	58
  1029  063F  024F               	subwf	xvprintf@c,w
  1030  0640  1C03               	skipc
  1031  0641  2E13               	goto	l1446
  1032  0642                     l1456:	
  1033                           
  1034                           ;xprintf.c: 115: if (c == 'l' || c == 'L') {
  1035  0642  306C               	movlw	108
  1036  0643  064F               	xorwf	xvprintf@c,w
  1037  0644  1903               	btfsc	3,2
  1038  0645  2E4A               	goto	l120
  1039  0646  304C               	movlw	76
  1040  0647  064F               	xorwf	xvprintf@c,w
  1041  0648  1D03               	btfss	3,2
  1042  0649  2E57               	goto	l1464
  1043  064A                     l120:	
  1044                           
  1045                           ;xprintf.c: 116: f |= 4; c = *fmt++;
  1046  064A  154A               	bsf	xvprintf@f,2
  1047  064B  0820               	movf	xvprintf@fmt,w
  1048  064C  0084               	movwf	4
  1049  064D  0821               	movf	xvprintf@fmt+1,w
  1050  064E  0085               	movwf	5
  1051  064F  0800               	movf	0,w	;code access
  1052  0650  00A3               	movwf	??_xvprintf
  1053  0651  0823               	movf	??_xvprintf,w
  1054  0652  00CF               	movwf	xvprintf@c
  1055  0653  3001               	movlw	1
  1056  0654  07A0               	addwf	xvprintf@fmt,f
  1057  0655  3000               	movlw	0
  1058  0656  3DA1               	addwfc	xvprintf@fmt+1,f
  1059  0657                     l1464:	
  1060                           
  1061                           ;xprintf.c: 117: }
  1062                           ;xprintf.c: 118: if (!c) break;
  1063  0657  084F               	movf	xvprintf@c,w
  1064  0658  1903               	btfsc	3,2
  1065  0659  0008               	return
  1066                           
  1067                           ;xprintf.c: 119: d = c;
  1068  065A  084F               	movf	xvprintf@c,w
  1069  065B  00A3               	movwf	??_xvprintf
  1070  065C  0823               	movf	??_xvprintf,w
  1071  065D  00CE               	movwf	xvprintf@d
  1072                           
  1073                           ;xprintf.c: 120: if (d >= 'a') d -= 0x20;
  1074  065E  3061               	movlw	97
  1075  065F  024E               	subwf	xvprintf@d,w
  1076  0660  1C03               	skipc
  1077  0661  2ECD               	goto	l1506
  1078  0662  3020               	movlw	32
  1079  0663  02CE               	subwf	xvprintf@d,f
  1080                           
  1081                           ;xprintf.c: 121: switch (d) {
  1082  0664  2ECD               	goto	l1506
  1083  0665                     l1472:	
  1084                           ;xprintf.c: 122: case 'S' :
  1085                           
  1086                           
  1087                           ;xprintf.c: 123: p = (*(char* *)__va_arg((*(char* **)arp), (char*)0));
  1088  0665  0822               	movf	xvprintf@arp,w
  1089  0666  0086               	movwf	6
  1090  0667  0187               	clrf	7
  1091  0668  3F40               	moviw [0]fsr1
  1092  0669  0084               	movwf	4
  1093  066A  0185               	clrf	5
  1094  066B  0A81               	incf	1,f
  1095  066C  0800               	movf	0,w
  1096  066D  00A3               	movwf	??_xvprintf
  1097  066E  0823               	movf	??_xvprintf,w
  1098  066F  00BF               	movwf	xvprintf@p
  1099                           
  1100                           ;xprintf.c: 124: for (j = 0; p[j]; j++) ;
  1101  0670  01C4               	clrf	xvprintf@j
  1102  0671  01C5               	clrf	xvprintf@j+1
  1103  0672                     l1478:	
  1104  0672  0844               	movf	xvprintf@j,w
  1105  0673  073F               	addwf	xvprintf@p,w
  1106  0674  00A3               	movwf	??_xvprintf
  1107  0675  0823               	movf	??_xvprintf,w
  1108  0676  0086               	movwf	6
  1109  0677  0187               	clrf	7
  1110  0678  0801               	movf	1,w
  1111  0679  1903               	btfsc	3,2
  1112  067A  2E84               	goto	l1482
  1113  067B  3001               	movlw	1
  1114  067C  07C4               	addwf	xvprintf@j,f
  1115  067D  3000               	movlw	0
  1116  067E  3DC5               	addwfc	xvprintf@j+1,f
  1117  067F  2E72               	goto	l1478
  1118  0680                     l1480:	
  1119                           ;xprintf.c: 125: while (!(f & 2) && j++ < w) xputc(' ');
  1120                           
  1121  0680  3020               	movlw	32
  1122  0681  3184  246A  3185   	fcall	_xputc
  1123  0684                     l1482:	
  1124  0684  0020               	movlb	0	; select bank0
  1125  0685  18CA               	btfsc	xvprintf@f,1
  1126  0686  2E96               	goto	l1486
  1127  0687  0845               	movf	xvprintf@j+1,w
  1128  0688  00A4               	movwf	??_xvprintf+1
  1129  0689  0844               	movf	xvprintf@j,w
  1130  068A  00A3               	movwf	??_xvprintf
  1131  068B  0AC4               	incf	xvprintf@j,f
  1132  068C  1903               	skipnz
  1133  068D  0AC5               	incf	xvprintf@j+1,f
  1134  068E  0843               	movf	xvprintf@w+1,w
  1135  068F  0224               	subwf	??_xvprintf+1,w
  1136  0690  1D03               	skipz
  1137  0691  2E94               	goto	u1185
  1138  0692  0842               	movf	xvprintf@w,w
  1139  0693  0223               	subwf	??_xvprintf,w
  1140  0694                     u1185:	
  1141  0694  1C03               	skipc
  1142  0695  2E80               	goto	l1480
  1143  0696                     l1486:	
  1144                           
  1145                           ;xprintf.c: 126: xputs(p);
  1146  0696  083F               	movf	xvprintf@p,w
  1147  0697  3183  23F9  3185   	fcall	_xputs
  1148  069A                     l1490:	
  1149                           ;xprintf.c: 127: while (j++ < w) xputc(' ');
  1150                           
  1151  069A  0020               	movlb	0	; select bank0
  1152  069B  0845               	movf	xvprintf@j+1,w
  1153  069C  00A4               	movwf	??_xvprintf+1
  1154  069D  0844               	movf	xvprintf@j,w
  1155  069E  00A3               	movwf	??_xvprintf
  1156  069F  0AC4               	incf	xvprintf@j,f
  1157  06A0  1903               	skipnz
  1158  06A1  0AC5               	incf	xvprintf@j+1,f
  1159  06A2  0843               	movf	xvprintf@w+1,w
  1160  06A3  0224               	subwf	??_xvprintf+1,w
  1161  06A4  1D03               	skipz
  1162  06A5  2EA8               	goto	u1195
  1163  06A6  0842               	movf	xvprintf@w,w
  1164  06A7  0223               	subwf	??_xvprintf,w
  1165  06A8                     u1195:	
  1166  06A8  1803               	btfsc	3,0
  1167  06A9  2DCE               	goto	l105
  1168  06AA  3020               	movlw	32
  1169  06AB  3184  246A  3185   	fcall	_xputc
  1170  06AE  2E9A               	goto	l1490
  1171  06AF                     l1492:	
  1172                           ;xprintf.c: 129: case 'C' :
  1173                           
  1174                           ;xprintf.c: 128: continue;
  1175                           
  1176                           
  1177                           ;xprintf.c: 130: xputc((char)(*(int *)__va_arg((*(int **)arp), (int)0))); continue;
  1178  06AF  0822               	movf	xvprintf@arp,w
  1179  06B0  0086               	movwf	6
  1180  06B1  0187               	clrf	7
  1181  06B2  0801               	movf	1,w
  1182  06B3  0084               	movwf	4
  1183  06B4  0185               	clrf	5
  1184  06B5  3002               	movlw	2
  1185  06B6  0781               	addwf	1,f
  1186  06B7  0800               	movf	0,w
  1187  06B8  3184  246A  3185   	fcall	_xputc
  1188  06BB  2DCE               	goto	l105
  1189  06BC                     l1494:	
  1190                           ;xprintf.c: 131: case 'B' :
  1191                           
  1192                           
  1193                           ;xprintf.c: 132: r = 2; break;
  1194  06BC  3002               	movlw	2
  1195  06BD  0020               	movlb	0	; select bank0
  1196  06BE  2EC4               	goto	L3
  1197  06BF                     l1496:	
  1198                           ;xprintf.c: 133: case 'O' :
  1199                           
  1200                           
  1201                           ;xprintf.c: 134: r = 8; break;
  1202  06BF  3008               	movlw	8
  1203  06C0  2EC4               	goto	L3
  1204  06C1                     l1498:	
  1205                           ;xprintf.c: 135: case 'D' :
  1206                           
  1207                           
  1208                           ;xprintf.c: 136: case 'U' :
  1209                           ;xprintf.c: 137: r = 10; break;
  1210  06C1  300A               	movlw	10
  1211  06C2  2EC4               	goto	L3
  1212  06C3                     l1500:	
  1213                           ;xprintf.c: 138: case 'X' :
  1214                           
  1215                           
  1216                           ;xprintf.c: 139: r = 16; break;
  1217  06C3  3010               	movlw	16
  1218  06C4                     L3:	
  1219  06C4  00C0               	movwf	xvprintf@r
  1220  06C5  3000               	movlw	0
  1221  06C6  00C1               	movwf	xvprintf@r+1
  1222  06C7  2EE5               	goto	l138
  1223  06C8                     l1502:	
  1224                           ;xprintf.c: 140: default:
  1225                           
  1226                           
  1227                           ;xprintf.c: 141: xputc(c); continue;
  1228  06C8  084F               	movf	xvprintf@c,w
  1229  06C9  3184  246A  3185   	fcall	_xputc
  1230  06CC  2DCE               	goto	l105
  1231  06CD                     l1506:	
  1232                           ;xprintf.c: 142: }
  1233                           
  1234  06CD  0020               	movlb	0	; select bank0
  1235  06CE  084E               	movf	xvprintf@d,w
  1236                           
  1237                           ; Switch size 1, requested type "space"
  1238                           ; Number of cases is 7, Range of values is 66 to 88
  1239                           ; switch strategies available:
  1240                           ; Name         Instructions Cycles
  1241                           ; simple_byte           22    12 (average)
  1242                           ; direct_byte           55     9 (fixed)
  1243                           ; jumptable            263     9 (fixed)
  1244                           ;	Chosen strategy is simple_byte
  1245  06CF  3A42               	xorlw	66	; case 66
  1246  06D0  1903               	skipnz
  1247  06D1  2EBC               	goto	l1494
  1248  06D2  3A01               	xorlw	1	; case 67
  1249  06D3  1903               	skipnz
  1250  06D4  2EAF               	goto	l1492
  1251  06D5  3A07               	xorlw	7	; case 68
  1252  06D6  1903               	skipnz
  1253  06D7  2EC1               	goto	l1498
  1254  06D8  3A0B               	xorlw	11	; case 79
  1255  06D9  1903               	skipnz
  1256  06DA  2EBF               	goto	l1496
  1257  06DB  3A1C               	xorlw	28	; case 83
  1258  06DC  1903               	skipnz
  1259  06DD  2E65               	goto	l1472
  1260  06DE  3A06               	xorlw	6	; case 85
  1261  06DF  1903               	skipnz
  1262  06E0  2EC1               	goto	l1498
  1263  06E1  3A0D               	xorlw	13	; case 88
  1264  06E2  1903               	skipnz
  1265  06E3  2EC3               	goto	l1500
  1266  06E4  2EC8               	goto	l1502
  1267  06E5                     l138:	
  1268                           
  1269                           ;xprintf.c: 145: v = (f & 4) ? (*(long *)__va_arg((*(long **)arp), (long)0)) : ((d == 'D
      +                          ') ? (long)(*(int *)__va_arg((*(int **)arp), (int)0)) : (long)(*(unsigned int *)__va_arg
      +                          ((*(unsigned int **)arp), (unsigned int)0)));
  1270  06E5  0020               	movlb	0	; select bank0
  1271  06E6  194A               	btfsc	xvprintf@f,2
  1272  06E7  2F1D               	goto	l1516
  1273  06E8  3044               	movlw	68
  1274  06E9  064E               	xorwf	xvprintf@d,w
  1275  06EA  1903               	btfsc	3,2
  1276  06EB  2EFF               	goto	l1512
  1277  06EC  0822               	movf	xvprintf@arp,w
  1278  06ED  0086               	movwf	6
  1279  06EE  0187               	clrf	7
  1280  06EF  0801               	movf	1,w
  1281  06F0  0084               	movwf	4
  1282  06F1  0185               	clrf	5
  1283  06F2  3002               	movlw	2
  1284  06F3  0781               	addwf	1,f
  1285  06F4  3F00               	moviw [0]fsr0
  1286  06F5  00A3               	movwf	??_xvprintf
  1287  06F6  3F01               	moviw [1]fsr0
  1288  06F7  00A4               	movwf	??_xvprintf+1
  1289  06F8  0823               	movf	??_xvprintf,w
  1290  06F9  00B7               	movwf	_xvprintf$154
  1291  06FA  0824               	movf	??_xvprintf+1,w
  1292  06FB  00B8               	movwf	_xvprintf$154+1
  1293  06FC  01B9               	clrf	_xvprintf$154+2
  1294  06FD  01BA               	clrf	_xvprintf$154+3
  1295  06FE  2F14               	goto	l1514
  1296  06FF                     l1512:	
  1297  06FF  0822               	movf	xvprintf@arp,w
  1298  0700  0086               	movwf	6
  1299  0701  0187               	clrf	7
  1300  0702  0801               	movf	1,w
  1301  0703  0084               	movwf	4
  1302  0704  0185               	clrf	5
  1303  0705  3002               	movlw	2
  1304  0706  0781               	addwf	1,f
  1305  0707  3F00               	moviw [0]fsr0
  1306  0708  00A3               	movwf	??_xvprintf
  1307  0709  3F01               	moviw [1]fsr0
  1308  070A  00A4               	movwf	??_xvprintf+1
  1309  070B  0823               	movf	??_xvprintf,w
  1310  070C  00B7               	movwf	_xvprintf$154
  1311  070D  0824               	movf	??_xvprintf+1,w
  1312  070E  00B8               	movwf	_xvprintf$154+1
  1313  070F  0D89               	rlf	9,f
  1314  0710  3B89               	subwfb	9,f
  1315  0711  0989               	comf	9,f
  1316  0712  00B9               	movwf	_xvprintf$154+2
  1317  0713  00BA               	movwf	_xvprintf$154+3
  1318  0714                     l1514:	
  1319  0714  083A               	movf	_xvprintf$154+3,w
  1320  0715  00C9               	movwf	xvprintf@v+3
  1321  0716  0839               	movf	_xvprintf$154+2,w
  1322  0717  00C8               	movwf	xvprintf@v+2
  1323  0718  0838               	movf	_xvprintf$154+1,w
  1324  0719  00C7               	movwf	xvprintf@v+1
  1325  071A  0837               	movf	_xvprintf$154,w
  1326  071B  00C6               	movwf	xvprintf@v
  1327  071C  2F2D               	goto	l1518
  1328  071D                     l1516:	
  1329  071D  0822               	movf	xvprintf@arp,w
  1330  071E  0086               	movwf	6
  1331  071F  0187               	clrf	7
  1332  0720  0801               	movf	1,w
  1333  0721  0084               	movwf	4
  1334  0722  0185               	clrf	5
  1335  0723  3004               	movlw	4
  1336  0724  0781               	addwf	1,f
  1337  0725  3F00               	moviw [0]fsr0
  1338  0726  00C6               	movwf	xvprintf@v
  1339  0727  3F01               	moviw [1]fsr0
  1340  0728  00C7               	movwf	xvprintf@v+1
  1341  0729  3F02               	moviw [2]fsr0
  1342  072A  00C8               	movwf	xvprintf@v+2
  1343  072B  3F03               	moviw [3]fsr0
  1344  072C  00C9               	movwf	xvprintf@v+3
  1345  072D                     l1518:	
  1346                           
  1347                           ;xprintf.c: 146: if (d == 'D' && (v & 0x80000000)) {
  1348  072D  3044               	movlw	68
  1349  072E  064E               	xorwf	xvprintf@d,w
  1350  072F  1903               	btfsc	3,2
  1351  0730  1FC9               	btfss	xvprintf@v+3,7
  1352  0731  2F3E               	goto	l1524
  1353                           
  1354                           ;xprintf.c: 147: v = 0 - v;
  1355  0732  09C6               	comf	xvprintf@v,f
  1356  0733  09C7               	comf	xvprintf@v+1,f
  1357  0734  09C8               	comf	xvprintf@v+2,f
  1358  0735  09C9               	comf	xvprintf@v+3,f
  1359  0736  0AC6               	incf	xvprintf@v,f
  1360  0737  1903               	skipnz
  1361  0738  0AC7               	incf	xvprintf@v+1,f
  1362  0739  1903               	skipnz
  1363  073A  0AC8               	incf	xvprintf@v+2,f
  1364  073B  1903               	skipnz
  1365  073C  0AC9               	incf	xvprintf@v+3,f
  1366                           
  1367                           ;xprintf.c: 148: f |= 8;
  1368  073D  15CA               	bsf	xvprintf@f,3
  1369  073E                     l1524:	
  1370                           
  1371                           ;xprintf.c: 149: }
  1372                           ;xprintf.c: 150: i = 0;
  1373  073E  01CC               	clrf	xvprintf@i
  1374  073F  01CD               	clrf	xvprintf@i+1
  1375  0740                     l1526:	
  1376                           ;xprintf.c: 151: do {
  1377                           
  1378                           
  1379                           ;xprintf.c: 152: d = (char)(v % r); v /= r;
  1380  0740  0840               	movf	xvprintf@r,w
  1381  0741  00F0               	movwf	___llmod@divisor
  1382  0742  0841               	movf	xvprintf@r+1,w
  1383  0743  00F1               	movwf	___llmod@divisor+1
  1384  0744  01F2               	clrf	___llmod@divisor+2
  1385  0745  01F3               	clrf	___llmod@divisor+3
  1386  0746  0849               	movf	xvprintf@v+3,w
  1387  0747  00F7               	movwf	___llmod@dividend+3
  1388  0748  0848               	movf	xvprintf@v+2,w
  1389  0749  00F6               	movwf	___llmod@dividend+2
  1390  074A  0847               	movf	xvprintf@v+1,w
  1391  074B  00F5               	movwf	___llmod@dividend+1
  1392  074C  0846               	movf	xvprintf@v,w
  1393  074D  00F4               	movwf	___llmod@dividend
  1394  074E  3184  24D1  3185   	fcall	___llmod
  1395  0751  0870               	movf	?___llmod,w
  1396  0752  0020               	movlb	0	; select bank0
  1397  0753  00A3               	movwf	??_xvprintf
  1398  0754  0823               	movf	??_xvprintf,w
  1399  0755  00CE               	movwf	xvprintf@d
  1400  0756  0840               	movf	xvprintf@r,w
  1401  0757  00F0               	movwf	___lldiv@divisor
  1402  0758  0841               	movf	xvprintf@r+1,w
  1403  0759  00F1               	movwf	___lldiv@divisor+1
  1404  075A  01F2               	clrf	___lldiv@divisor+2
  1405  075B  01F3               	clrf	___lldiv@divisor+3
  1406  075C  0849               	movf	xvprintf@v+3,w
  1407  075D  00F7               	movwf	___lldiv@dividend+3
  1408  075E  0848               	movf	xvprintf@v+2,w
  1409  075F  00F6               	movwf	___lldiv@dividend+2
  1410  0760  0847               	movf	xvprintf@v+1,w
  1411  0761  00F5               	movwf	___lldiv@dividend+1
  1412  0762  0846               	movf	xvprintf@v,w
  1413  0763  00F4               	movwf	___lldiv@dividend
  1414  0764  3185  2513  3185   	fcall	___lldiv
  1415  0767  0873               	movf	?___lldiv+3,w
  1416  0768  0020               	movlb	0	; select bank0
  1417  0769  00C9               	movwf	xvprintf@v+3
  1418  076A  0872               	movf	?___lldiv+2,w
  1419  076B  00C8               	movwf	xvprintf@v+2
  1420  076C  0871               	movf	?___lldiv+1,w
  1421  076D  00C7               	movwf	xvprintf@v+1
  1422  076E  0870               	movf	?___lldiv,w
  1423  076F  00C6               	movwf	xvprintf@v
  1424                           
  1425                           ;xprintf.c: 153: if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
  1426  0770  300A               	movlw	10
  1427  0771  024E               	subwf	xvprintf@d,w
  1428  0772  1C03               	skipc
  1429  0773  2F82               	goto	l1540
  1430  0774  3078               	movlw	120
  1431  0775  064F               	xorwf	xvprintf@c,w
  1432  0776  1903               	btfsc	3,2
  1433  0777  2F7A               	goto	l1536
  1434  0778  3007               	movlw	7
  1435  0779  2F7B               	goto	L4
  1436  077A                     l1536:	
  1437  077A  3027               	movlw	39
  1438  077B                     L4:	
  1439  077B  00BB               	movwf	_xvprintf$155
  1440  077C  3000               	movlw	0
  1441  077D  00BC               	movwf	_xvprintf$155+1
  1442  077E  083B               	movf	_xvprintf$155,w
  1443  077F  00A3               	movwf	??_xvprintf
  1444  0780  0823               	movf	??_xvprintf,w
  1445  0781  07CE               	addwf	xvprintf@d,f
  1446  0782                     l1540:	
  1447                           
  1448                           ;xprintf.c: 154: s[i++] = d + '0';
  1449  0782  084E               	movf	xvprintf@d,w
  1450  0783  3E30               	addlw	48
  1451  0784  00A3               	movwf	??_xvprintf
  1452  0785  084C               	movf	xvprintf@i,w
  1453  0786  3E27               	addlw	(low (xvprintf@s| 0))& (0+255)
  1454  0787  0086               	movwf	6
  1455  0788  0187               	clrf	7
  1456  0789  0823               	movf	??_xvprintf,w
  1457  078A  0081               	movwf	1
  1458  078B  3001               	movlw	1
  1459  078C  07CC               	addwf	xvprintf@i,f
  1460  078D  3000               	movlw	0
  1461  078E  3DCD               	addwfc	xvprintf@i+1,f
  1462                           
  1463                           ;xprintf.c: 155: } while (v && i < sizeof(s));
  1464  078F  0849               	movf	xvprintf@v+3,w
  1465  0790  0448               	iorwf	xvprintf@v+2,w
  1466  0791  0447               	iorwf	xvprintf@v+1,w
  1467  0792  0446               	iorwf	xvprintf@v,w
  1468  0793  1903               	skipnz
  1469  0794  2F9C               	goto	l161
  1470  0795  3000               	movlw	0
  1471  0796  024D               	subwf	xvprintf@i+1,w
  1472  0797  3010               	movlw	16
  1473  0798  1903               	skipnz
  1474  0799  024C               	subwf	xvprintf@i,w
  1475  079A  1C03               	skipc
  1476  079B  2F40               	goto	l1526
  1477  079C                     l161:	
  1478                           
  1479                           ;xprintf.c: 156: if (f & 8) s[i++] = '-';
  1480  079C  1DCA               	btfss	xvprintf@f,3
  1481  079D  2FAA               	goto	l1552
  1482  079E  302D               	movlw	45
  1483  079F  00A3               	movwf	??_xvprintf
  1484  07A0  084C               	movf	xvprintf@i,w
  1485  07A1  3E27               	addlw	(low (xvprintf@s| 0))& (0+255)
  1486  07A2  0086               	movwf	6
  1487  07A3  0187               	clrf	7
  1488  07A4  0823               	movf	??_xvprintf,w
  1489  07A5  0081               	movwf	1
  1490  07A6  3001               	movlw	1
  1491  07A7  07CC               	addwf	xvprintf@i,f
  1492  07A8  3000               	movlw	0
  1493  07A9  3DCD               	addwfc	xvprintf@i+1,f
  1494  07AA                     l1552:	
  1495                           
  1496                           ;xprintf.c: 157: j = i; d = (f & 1) ? '0' : ' ';
  1497  07AA  084D               	movf	xvprintf@i+1,w
  1498  07AB  00C5               	movwf	xvprintf@j+1
  1499  07AC  084C               	movf	xvprintf@i,w
  1500  07AD  00C4               	movwf	xvprintf@j
  1501  07AE  184A               	btfsc	xvprintf@f,0
  1502  07AF  2FB2               	goto	l1558
  1503  07B0  3020               	movlw	32
  1504  07B1  2FB3               	goto	L5
  1505  07B2                     l1558:	
  1506  07B2  3030               	movlw	48
  1507  07B3                     L5:	
  1508  07B3  00BD               	movwf	_xvprintf$156
  1509  07B4  3000               	movlw	0
  1510  07B5  00BE               	movwf	_xvprintf$156+1
  1511  07B6  083D               	movf	_xvprintf$156,w
  1512  07B7  00A3               	movwf	??_xvprintf
  1513  07B8  0823               	movf	??_xvprintf,w
  1514  07B9  00CE               	movwf	xvprintf@d
  1515                           
  1516                           ;xprintf.c: 158: while (!(f & 2) && j++ < w) xputc(d);
  1517  07BA  2FBF               	goto	l1562
  1518  07BB                     l1560:	
  1519  07BB  084E               	movf	xvprintf@d,w
  1520  07BC  3184  246A  3185   	fcall	_xputc
  1521  07BF                     l1562:	
  1522  07BF  0020               	movlb	0	; select bank0
  1523  07C0  18CA               	btfsc	xvprintf@f,1
  1524  07C1  2FD1               	goto	l1566
  1525  07C2  0845               	movf	xvprintf@j+1,w
  1526  07C3  00A4               	movwf	??_xvprintf+1
  1527  07C4  0844               	movf	xvprintf@j,w
  1528  07C5  00A3               	movwf	??_xvprintf
  1529  07C6  0AC4               	incf	xvprintf@j,f
  1530  07C7  1903               	skipnz
  1531  07C8  0AC5               	incf	xvprintf@j+1,f
  1532  07C9  0843               	movf	xvprintf@w+1,w
  1533  07CA  0224               	subwf	??_xvprintf+1,w
  1534  07CB  1D03               	skipz
  1535  07CC  2FCF               	goto	u1315
  1536  07CD  0842               	movf	xvprintf@w,w
  1537  07CE  0223               	subwf	??_xvprintf,w
  1538  07CF                     u1315:	
  1539  07CF  1C03               	skipc
  1540  07D0  2FBB               	goto	l1560
  1541  07D1                     l1566:	
  1542                           ;xprintf.c: 159: do xputc(s[--i]); while(i);
  1543                           
  1544  07D1  3001               	movlw	1
  1545  07D2  02CC               	subwf	xvprintf@i,f
  1546  07D3  3000               	movlw	0
  1547  07D4  3BCD               	subwfb	xvprintf@i+1,f
  1548  07D5  084C               	movf	xvprintf@i,w
  1549  07D6  3E27               	addlw	(low (xvprintf@s| 0))& (0+255)
  1550  07D7  0086               	movwf	6
  1551  07D8  0187               	clrf	7
  1552  07D9  0801               	movf	1,w
  1553  07DA  3184  246A  3185   	fcall	_xputc
  1554  07DD  0020               	movlb	0	; select bank0
  1555  07DE  084C               	movf	xvprintf@i,w
  1556  07DF  044D               	iorwf	xvprintf@i+1,w
  1557  07E0  1903               	btfsc	3,2
  1558  07E1  2FE7               	goto	l1572
  1559  07E2  2FD1               	goto	l1566
  1560  07E3                     l1570:	
  1561                           ;xprintf.c: 160: while (j++ < w) xputc(' ');
  1562                           
  1563  07E3  3020               	movlw	32
  1564  07E4  3184  246A  3185   	fcall	_xputc
  1565  07E7                     l1572:	
  1566  07E7  0020               	movlb	0	; select bank0
  1567  07E8  0845               	movf	xvprintf@j+1,w
  1568  07E9  00A4               	movwf	??_xvprintf+1
  1569  07EA  0844               	movf	xvprintf@j,w
  1570  07EB  00A3               	movwf	??_xvprintf
  1571  07EC  0AC4               	incf	xvprintf@j,f
  1572  07ED  1903               	skipnz
  1573  07EE  0AC5               	incf	xvprintf@j+1,f
  1574  07EF  0843               	movf	xvprintf@w+1,w
  1575  07F0  0224               	subwf	??_xvprintf+1,w
  1576  07F1  1D03               	skipz
  1577  07F2  2FF5               	goto	u1335
  1578  07F3  0842               	movf	xvprintf@w,w
  1579  07F4  0223               	subwf	??_xvprintf,w
  1580  07F5                     u1335:	
  1581  07F5  1803               	btfsc	3,0
  1582  07F6  2DCE               	goto	l105
  1583  07F7  2FE3               	goto	l1570
  1584  07F8                     __end_of_xvprintf:	
  1585                           ;xprintf.c: 161: }
  1586                           
  1587                           
  1588                           	psect	text3
  1589  03F9                     __ptext3:	
  1590 ;; *************** function _xputs *****************
  1591 ;; Defined at:
  1592 ;;		line 44 in file "xprintf.c"
  1593 ;; Parameters:    Size  Location     Type
  1594 ;;  str             1    wreg     PTR const unsigned char 
  1595 ;;		 -> ?_xfprintf(1), ?_xsprintf(1), ?_xprintf(1), 
  1596 ;; Auto vars:     Size  Location     Type
  1597 ;;  str             1    7[COMMON] PTR const unsigned char 
  1598 ;;		 -> ?_xfprintf(1), ?_xsprintf(1), ?_xprintf(1), 
  1599 ;; Return value:  Size  Location     Type
  1600 ;;                  1    wreg      void 
  1601 ;; Registers used:
  1602 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  1603 ;; Tracked objects:
  1604 ;;		On entry : 0/0
  1605 ;;		On exit  : 0/0
  1606 ;;		Unchanged: 0/0
  1607 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  1608 ;;      Params:         0       0       0       0       0       0
  1609 ;;      Locals:         1       0       0       0       0       0
  1610 ;;      Temps:          1       0       0       0       0       0
  1611 ;;      Totals:         2       0       0       0       0       0
  1612 ;;Total ram usage:        2 bytes
  1613 ;; Hardware stack levels used:    1
  1614 ;; Hardware stack levels required when called:    3
  1615 ;; This function calls:
  1616 ;;		_xputc
  1617 ;; This function is called by:
  1618 ;;		_xvprintf
  1619 ;; This function uses a non-reentrant model
  1620 ;;
  1621                           
  1622                           
  1623                           ;psect for function _xputs
  1624  03F9                     _xputs:	
  1625                           
  1626                           ;incstack = 0
  1627                           ; Regs used in _xputs: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  1628                           ;xputs@str stored from wreg
  1629  03F9  00F7               	movwf	xputs@str
  1630  03FA                     l1344:	
  1631                           ;xprintf.c: 48: while (*str)
  1632                           
  1633  03FA  0877               	movf	xputs@str,w
  1634  03FB  0086               	movwf	6
  1635  03FC  0187               	clrf	7
  1636  03FD  0801               	movf	1,w
  1637  03FE  1903               	btfsc	3,2
  1638  03FF  0008               	return
  1639                           
  1640                           ;xprintf.c: 49: xputc(*str++);
  1641  0400  0877               	movf	xputs@str,w
  1642  0401  0086               	movwf	6
  1643  0402  0187               	clrf	7
  1644  0403  0801               	movf	1,w
  1645  0404  3184  246A  3183   	fcall	_xputc
  1646  0407  3001               	movlw	1
  1647  0408  00F6               	movwf	??_xputs
  1648  0409  0876               	movf	??_xputs,w
  1649  040A  07F7               	addwf	xputs@str,f
  1650  040B  2BFA               	goto	l1344
  1651  040C                     __end_of_xputs:	
  1652                           
  1653                           	psect	text4
  1654  046A                     __ptext4:	
  1655 ;; *************** function _xputc *****************
  1656 ;; Defined at:
  1657 ;;		line 26 in file "xprintf.c"
  1658 ;; Parameters:    Size  Location     Type
  1659 ;;  c               1    wreg     unsigned char 
  1660 ;; Auto vars:     Size  Location     Type
  1661 ;;  c               1    5[COMMON] unsigned char 
  1662 ;; Return value:  Size  Location     Type
  1663 ;;                  1    wreg      void 
  1664 ;; Registers used:
  1665 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  1666 ;; Tracked objects:
  1667 ;;		On entry : 0/0
  1668 ;;		On exit  : 0/0
  1669 ;;		Unchanged: 0/0
  1670 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  1671 ;;      Params:         0       0       0       0       0       0
  1672 ;;      Locals:         1       0       0       0       0       0
  1673 ;;      Temps:          1       0       0       0       0       0
  1674 ;;      Totals:         2       0       0       0       0       0
  1675 ;;Total ram usage:        2 bytes
  1676 ;; Hardware stack levels used:    1
  1677 ;; Hardware stack levels required when called:    2
  1678 ;; This function calls:
  1679 ;;		Absolute function
  1680 ;;		_LCD_Put
  1681 ;; This function is called by:
  1682 ;;		_xputs
  1683 ;;		_xvprintf
  1684 ;;		_xfputs
  1685 ;;		_put_dump
  1686 ;;		_xgets
  1687 ;; This function uses a non-reentrant model
  1688 ;;
  1689                           
  1690                           
  1691                           ;psect for function _xputc
  1692  046A                     _xputc:	
  1693                           
  1694                           ;incstack = 0
  1695                           ; Regs used in _xputc: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  1696                           ;xputc@c stored from wreg
  1697  046A  00F5               	movwf	xputc@c
  1698  046B  300A               	movlw	10
  1699  046C  0675               	xorwf	xputc@c,w
  1700  046D  1D03               	btfss	3,2
  1701  046E  2C79               	goto	l1326
  1702  046F  3027               	movlw	(low (STR_2| (0+32768)))& (0+255)
  1703  0470  00F4               	movwf	??_xputc
  1704  0471  0874               	movf	??_xputc,w
  1705  0472  00F3               	movwf	LCD_Put@word
  1706  0473  0020               	movlb	0	; select bank0
  1707  0474  085B               	movf	_xfunc_out+1,w
  1708  0475  008A               	movwf	10
  1709  0476  085A               	movf	_xfunc_out,w
  1710  0477  000A               	callw
  1711  0478  3184               	pagesel	$
  1712  0479                     l1326:	
  1713                           
  1714                           ;xprintf.c: 30: if (outptr) {
  1715  0479  0020               	movlb	0	; select bank0
  1716  047A  085C               	movf	_outptr,w
  1717  047B  1903               	btfsc	3,2
  1718  047C  2C89               	goto	l1334
  1719                           
  1720                           ;xprintf.c: 31: *outptr++ = (unsigned char)c;
  1721  047D  0875               	movf	xputc@c,w
  1722  047E  00F4               	movwf	??_xputc
  1723  047F  085C               	movf	_outptr,w
  1724  0480  0086               	movwf	6
  1725  0481  0187               	clrf	7
  1726  0482  0874               	movf	??_xputc,w
  1727  0483  0081               	movwf	1
  1728  0484  3001               	movlw	1
  1729  0485  00F4               	movwf	??_xputc
  1730  0486  0874               	movf	??_xputc,w
  1731  0487  07DC               	addwf	_outptr,f
  1732                           
  1733                           ;xprintf.c: 32: return;
  1734  0488  0008               	return
  1735  0489                     l1334:	
  1736                           
  1737                           ;xprintf.c: 33: }
  1738                           ;xprintf.c: 35: if (xfunc_out) xfunc_out((unsigned char)c);
  1739  0489  085A               	movf	_xfunc_out,w
  1740  048A  045B               	iorwf	_xfunc_out+1,w
  1741  048B  1903               	btfsc	3,2
  1742  048C  0008               	return
  1743  048D  0875               	movf	xputc@c,w
  1744  048E  00F4               	movwf	??_xputc
  1745  048F  0874               	movf	??_xputc,w
  1746  0490  00F3               	movwf	LCD_Put@word
  1747  0491  085B               	movf	_xfunc_out+1,w
  1748  0492  008A               	movwf	10
  1749  0493  085A               	movf	_xfunc_out,w
  1750  0494  000A               	callw
  1751  0495  3184               	pagesel	$
  1752  0496  0008               	return
  1753  0497                     __end_of_xputc:	
  1754                           
  1755                           	psect	text5
  1756  03D4                     __ptext5:	
  1757 ;; *************** function _LCD_Put *****************
  1758 ;; Defined at:
  1759 ;;		line 47 in file "LCD.c"
  1760 ;; Parameters:    Size  Location     Type
  1761 ;;  word            1    3[COMMON] char 
  1762 ;; Auto vars:     Size  Location     Type
  1763 ;;		None
  1764 ;; Return value:  Size  Location     Type
  1765 ;;                  1    wreg      void 
  1766 ;; Registers used:
  1767 ;;		wreg, status,2, status,0, pclath, cstack
  1768 ;; Tracked objects:
  1769 ;;		On entry : 0/0
  1770 ;;		On exit  : 0/0
  1771 ;;		Unchanged: 0/0
  1772 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  1773 ;;      Params:         1       0       0       0       0       0
  1774 ;;      Locals:         0       0       0       0       0       0
  1775 ;;      Temps:          0       0       0       0       0       0
  1776 ;;      Totals:         1       0       0       0       0       0
  1777 ;;Total ram usage:        1 bytes
  1778 ;; Hardware stack levels used:    1
  1779 ;; Hardware stack levels required when called:    1
  1780 ;; This function calls:
  1781 ;;		_LCD_WriteData
  1782 ;; This function is called by:
  1783 ;;		_main
  1784 ;;		_xputc
  1785 ;; This function uses a non-reentrant model
  1786 ;;
  1787                           
  1788                           
  1789                           ;psect for function _LCD_Put
  1790  03D4                     _LCD_Put:	
  1791                           
  1792                           ;LCD.c: 49: RA4 = 1;
  1793                           
  1794                           ;incstack = 0
  1795                           ; Regs used in _LCD_Put: [wreg+status,2+status,0+pclath+cstack]
  1796  03D4  0020               	movlb	0	; select bank0
  1797  03D5  160C               	bsf	12,4	;volatile
  1798                           
  1799                           ;LCD.c: 50: LCD_WriteData(word);
  1800  03D6  0873               	movf	LCD_Put@word,w
  1801  03D7  3184  2497         	fcall	_LCD_WriteData
  1802  03D9  0008               	return
  1803  03DA                     __end_of_LCD_Put:	
  1804                           
  1805                           	psect	text6
  1806  044F                     __ptext6:	
  1807 ;; *************** function ___wmul *****************
  1808 ;; Defined at:
  1809 ;;		line 15 in file "/opt/microchip/xc8/v1.41/sources/common/Umul16.c"
  1810 ;; Parameters:    Size  Location     Type
  1811 ;;  multiplier      2    0[COMMON] unsigned int 
  1812 ;;  multiplicand    2    2[COMMON] unsigned int 
  1813 ;; Auto vars:     Size  Location     Type
  1814 ;;  product         2    4[COMMON] unsigned int 
  1815 ;; Return value:  Size  Location     Type
  1816 ;;                  2    0[COMMON] unsigned int 
  1817 ;; Registers used:
  1818 ;;		wreg, status,2, status,0
  1819 ;; Tracked objects:
  1820 ;;		On entry : 0/0
  1821 ;;		On exit  : 0/0
  1822 ;;		Unchanged: 0/0
  1823 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  1824 ;;      Params:         4       0       0       0       0       0
  1825 ;;      Locals:         2       0       0       0       0       0
  1826 ;;      Temps:          0       0       0       0       0       0
  1827 ;;      Totals:         6       0       0       0       0       0
  1828 ;;Total ram usage:        6 bytes
  1829 ;; Hardware stack levels used:    1
  1830 ;; This function calls:
  1831 ;;		Nothing
  1832 ;; This function is called by:
  1833 ;;		_xvprintf
  1834 ;; This function uses a non-reentrant model
  1835 ;;
  1836                           
  1837                           
  1838                           ;psect for function ___wmul
  1839  044F                     ___wmul:	
  1840                           
  1841                           ;incstack = 0
  1842                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  1843  044F  01F4               	clrf	___wmul@product
  1844  0450  01F5               	clrf	___wmul@product+1
  1845  0451                     l1348:	
  1846  0451  1C70               	btfss	___wmul@multiplier,0
  1847  0452  2C57               	goto	l342
  1848  0453  0872               	movf	___wmul@multiplicand,w
  1849  0454  07F4               	addwf	___wmul@product,f
  1850  0455  0873               	movf	___wmul@multiplicand+1,w
  1851  0456  3DF5               	addwfc	___wmul@product+1,f
  1852  0457                     l342:	
  1853  0457  3001               	movlw	1
  1854  0458                     u905:	
  1855  0458  35F2               	lslf	___wmul@multiplicand,f
  1856  0459  0DF3               	rlf	___wmul@multiplicand+1,f
  1857  045A  0B89               	decfsz	9,f
  1858  045B  2C58               	goto	u905
  1859  045C  3001               	movlw	1
  1860  045D                     u915:	
  1861  045D  36F1               	lsrf	___wmul@multiplier+1,f
  1862  045E  0CF0               	rrf	___wmul@multiplier,f
  1863  045F  0B89               	decfsz	9,f
  1864  0460  2C5D               	goto	u915
  1865  0461  0870               	movf	___wmul@multiplier,w
  1866  0462  0471               	iorwf	___wmul@multiplier+1,w
  1867  0463  1D03               	btfss	3,2
  1868  0464  2C51               	goto	l1348
  1869  0465  0875               	movf	___wmul@product+1,w
  1870  0466  00F1               	movwf	?___wmul+1
  1871  0467  0874               	movf	___wmul@product,w
  1872  0468  00F0               	movwf	?___wmul
  1873  0469  0008               	return
  1874  046A                     __end_of___wmul:	
  1875                           
  1876                           	psect	text7
  1877  04D1                     __ptext7:	
  1878 ;; *************** function ___llmod *****************
  1879 ;; Defined at:
  1880 ;;		line 6 in file "/opt/microchip/xc8/v1.41/sources/common/llmod.c"
  1881 ;; Parameters:    Size  Location     Type
  1882 ;;  divisor         4    0[COMMON] unsigned long 
  1883 ;;  dividend        4    4[COMMON] unsigned long 
  1884 ;; Auto vars:     Size  Location     Type
  1885 ;;  counter         1    9[COMMON] unsigned char 
  1886 ;; Return value:  Size  Location     Type
  1887 ;;                  4    0[COMMON] unsigned long 
  1888 ;; Registers used:
  1889 ;;		wreg, status,2, status,0
  1890 ;; Tracked objects:
  1891 ;;		On entry : 0/0
  1892 ;;		On exit  : 0/0
  1893 ;;		Unchanged: 0/0
  1894 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  1895 ;;      Params:         8       0       0       0       0       0
  1896 ;;      Locals:         1       0       0       0       0       0
  1897 ;;      Temps:          1       0       0       0       0       0
  1898 ;;      Totals:        10       0       0       0       0       0
  1899 ;;Total ram usage:       10 bytes
  1900 ;; Hardware stack levels used:    1
  1901 ;; This function calls:
  1902 ;;		Nothing
  1903 ;; This function is called by:
  1904 ;;		_xvprintf
  1905 ;; This function uses a non-reentrant model
  1906 ;;
  1907                           
  1908                           
  1909                           ;psect for function ___llmod
  1910  04D1                     ___llmod:	
  1911                           
  1912                           ;incstack = 0
  1913                           ; Regs used in ___llmod: [wreg+status,2+status,0]
  1914  04D1  0873               	movf	___llmod@divisor+3,w
  1915  04D2  0472               	iorwf	___llmod@divisor+2,w
  1916  04D3  0471               	iorwf	___llmod@divisor+1,w
  1917  04D4  0470               	iorwf	___llmod@divisor,w
  1918  04D5  1903               	skipnz
  1919  04D6  2D0A               	goto	l1400
  1920  04D7  01F9               	clrf	___llmod@counter
  1921  04D8  0AF9               	incf	___llmod@counter,f
  1922  04D9                     l1390:	
  1923  04D9  1BF3               	btfsc	___llmod@divisor+3,7
  1924  04DA  2CE7               	goto	l1392
  1925  04DB  3001               	movlw	1
  1926  04DC                     u1015:	
  1927  04DC  35F0               	lslf	___llmod@divisor,f
  1928  04DD  0DF1               	rlf	___llmod@divisor+1,f
  1929  04DE  0DF2               	rlf	___llmod@divisor+2,f
  1930  04DF  0DF3               	rlf	___llmod@divisor+3,f
  1931  04E0  0B89               	decfsz	9,f
  1932  04E1  2CDC               	goto	u1015
  1933  04E2  3001               	movlw	1
  1934  04E3  00F8               	movwf	??___llmod
  1935  04E4  0878               	movf	??___llmod,w
  1936  04E5  07F9               	addwf	___llmod@counter,f
  1937  04E6  2CD9               	goto	l1390
  1938  04E7                     l1392:	
  1939  04E7  0873               	movf	___llmod@divisor+3,w
  1940  04E8  0277               	subwf	___llmod@dividend+3,w
  1941  04E9  1D03               	skipz
  1942  04EA  2CF5               	goto	u1035
  1943  04EB  0872               	movf	___llmod@divisor+2,w
  1944  04EC  0276               	subwf	___llmod@dividend+2,w
  1945  04ED  1D03               	skipz
  1946  04EE  2CF5               	goto	u1035
  1947  04EF  0871               	movf	___llmod@divisor+1,w
  1948  04F0  0275               	subwf	___llmod@dividend+1,w
  1949  04F1  1D03               	skipz
  1950  04F2  2CF5               	goto	u1035
  1951  04F3  0870               	movf	___llmod@divisor,w
  1952  04F4  0274               	subwf	___llmod@dividend,w
  1953  04F5                     u1035:	
  1954  04F5  1C03               	skipc
  1955  04F6  2CFF               	goto	l1396
  1956  04F7  0870               	movf	___llmod@divisor,w
  1957  04F8  02F4               	subwf	___llmod@dividend,f
  1958  04F9  0871               	movf	___llmod@divisor+1,w
  1959  04FA  3BF5               	subwfb	___llmod@dividend+1,f
  1960  04FB  0872               	movf	___llmod@divisor+2,w
  1961  04FC  3BF6               	subwfb	___llmod@dividend+2,f
  1962  04FD  0873               	movf	___llmod@divisor+3,w
  1963  04FE  3BF7               	subwfb	___llmod@dividend+3,f
  1964  04FF                     l1396:	
  1965  04FF  3001               	movlw	1
  1966  0500                     u1045:	
  1967  0500  36F3               	lsrf	___llmod@divisor+3,f
  1968  0501  0CF2               	rrf	___llmod@divisor+2,f
  1969  0502  0CF1               	rrf	___llmod@divisor+1,f
  1970  0503  0CF0               	rrf	___llmod@divisor,f
  1971  0504  0B89               	decfsz	9,f
  1972  0505  2D00               	goto	u1045
  1973  0506  3001               	movlw	1
  1974  0507  02F9               	subwf	___llmod@counter,f
  1975  0508  1D03               	btfss	3,2
  1976  0509  2CE7               	goto	l1392
  1977  050A                     l1400:	
  1978  050A  0877               	movf	___llmod@dividend+3,w
  1979  050B  00F3               	movwf	?___llmod+3
  1980  050C  0876               	movf	___llmod@dividend+2,w
  1981  050D  00F2               	movwf	?___llmod+2
  1982  050E  0875               	movf	___llmod@dividend+1,w
  1983  050F  00F1               	movwf	?___llmod+1
  1984  0510  0874               	movf	___llmod@dividend,w
  1985  0511  00F0               	movwf	?___llmod
  1986  0512  0008               	return
  1987  0513                     __end_of___llmod:	
  1988                           
  1989                           	psect	text8
  1990  0513                     __ptext8:	
  1991 ;; *************** function ___lldiv *****************
  1992 ;; Defined at:
  1993 ;;		line 6 in file "/opt/microchip/xc8/v1.41/sources/common/lldiv.c"
  1994 ;; Parameters:    Size  Location     Type
  1995 ;;  divisor         4    0[COMMON] unsigned long 
  1996 ;;  dividend        4    4[COMMON] unsigned long 
  1997 ;; Auto vars:     Size  Location     Type
  1998 ;;  quotient        4    9[COMMON] unsigned long 
  1999 ;;  counter         1   13[COMMON] unsigned char 
  2000 ;; Return value:  Size  Location     Type
  2001 ;;                  4    0[COMMON] unsigned long 
  2002 ;; Registers used:
  2003 ;;		wreg, status,2, status,0
  2004 ;; Tracked objects:
  2005 ;;		On entry : 0/0
  2006 ;;		On exit  : 0/0
  2007 ;;		Unchanged: 0/0
  2008 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  2009 ;;      Params:         8       0       0       0       0       0
  2010 ;;      Locals:         5       0       0       0       0       0
  2011 ;;      Temps:          1       0       0       0       0       0
  2012 ;;      Totals:        14       0       0       0       0       0
  2013 ;;Total ram usage:       14 bytes
  2014 ;; Hardware stack levels used:    1
  2015 ;; This function calls:
  2016 ;;		Nothing
  2017 ;; This function is called by:
  2018 ;;		_xvprintf
  2019 ;; This function uses a non-reentrant model
  2020 ;;
  2021                           
  2022                           
  2023                           ;psect for function ___lldiv
  2024  0513                     ___lldiv:	
  2025                           
  2026                           ;incstack = 0
  2027                           ; Regs used in ___lldiv: [wreg+status,2+status,0]
  2028  0513  3000               	movlw	0
  2029  0514  00FC               	movwf	___lldiv@quotient+3
  2030  0515  3000               	movlw	0
  2031  0516  00FB               	movwf	___lldiv@quotient+2
  2032  0517  3000               	movlw	0
  2033  0518  00FA               	movwf	___lldiv@quotient+1
  2034  0519  3000               	movlw	0
  2035  051A  00F9               	movwf	___lldiv@quotient
  2036  051B  0873               	movf	___lldiv@divisor+3,w
  2037  051C  0472               	iorwf	___lldiv@divisor+2,w
  2038  051D  0471               	iorwf	___lldiv@divisor+1,w
  2039  051E  0470               	iorwf	___lldiv@divisor,w
  2040  051F  1903               	skipnz
  2041  0520  2D5C               	goto	l1380
  2042  0521  01FD               	clrf	___lldiv@counter
  2043  0522  0AFD               	incf	___lldiv@counter,f
  2044  0523                     l1366:	
  2045  0523  1BF3               	btfsc	___lldiv@divisor+3,7
  2046  0524  2D31               	goto	l1368
  2047  0525  3001               	movlw	1
  2048  0526                     u945:	
  2049  0526  35F0               	lslf	___lldiv@divisor,f
  2050  0527  0DF1               	rlf	___lldiv@divisor+1,f
  2051  0528  0DF2               	rlf	___lldiv@divisor+2,f
  2052  0529  0DF3               	rlf	___lldiv@divisor+3,f
  2053  052A  0B89               	decfsz	9,f
  2054  052B  2D26               	goto	u945
  2055  052C  3001               	movlw	1
  2056  052D  00F8               	movwf	??___lldiv
  2057  052E  0878               	movf	??___lldiv,w
  2058  052F  07FD               	addwf	___lldiv@counter,f
  2059  0530  2D23               	goto	l1366
  2060  0531                     l1368:	
  2061  0531  3001               	movlw	1
  2062  0532                     u965:	
  2063  0532  35F9               	lslf	___lldiv@quotient,f
  2064  0533  0DFA               	rlf	___lldiv@quotient+1,f
  2065  0534  0DFB               	rlf	___lldiv@quotient+2,f
  2066  0535  0DFC               	rlf	___lldiv@quotient+3,f
  2067  0536  0B89               	decfsz	9,f
  2068  0537  2D32               	goto	u965
  2069  0538  0873               	movf	___lldiv@divisor+3,w
  2070  0539  0277               	subwf	___lldiv@dividend+3,w
  2071  053A  1D03               	skipz
  2072  053B  2D46               	goto	u975
  2073  053C  0872               	movf	___lldiv@divisor+2,w
  2074  053D  0276               	subwf	___lldiv@dividend+2,w
  2075  053E  1D03               	skipz
  2076  053F  2D46               	goto	u975
  2077  0540  0871               	movf	___lldiv@divisor+1,w
  2078  0541  0275               	subwf	___lldiv@dividend+1,w
  2079  0542  1D03               	skipz
  2080  0543  2D46               	goto	u975
  2081  0544  0870               	movf	___lldiv@divisor,w
  2082  0545  0274               	subwf	___lldiv@dividend,w
  2083  0546                     u975:	
  2084  0546  1C03               	skipc
  2085  0547  2D51               	goto	l1376
  2086  0548  0870               	movf	___lldiv@divisor,w
  2087  0549  02F4               	subwf	___lldiv@dividend,f
  2088  054A  0871               	movf	___lldiv@divisor+1,w
  2089  054B  3BF5               	subwfb	___lldiv@dividend+1,f
  2090  054C  0872               	movf	___lldiv@divisor+2,w
  2091  054D  3BF6               	subwfb	___lldiv@dividend+2,f
  2092  054E  0873               	movf	___lldiv@divisor+3,w
  2093  054F  3BF7               	subwfb	___lldiv@dividend+3,f
  2094  0550  1479               	bsf	___lldiv@quotient,0
  2095  0551                     l1376:	
  2096  0551  3001               	movlw	1
  2097  0552                     u985:	
  2098  0552  36F3               	lsrf	___lldiv@divisor+3,f
  2099  0553  0CF2               	rrf	___lldiv@divisor+2,f
  2100  0554  0CF1               	rrf	___lldiv@divisor+1,f
  2101  0555  0CF0               	rrf	___lldiv@divisor,f
  2102  0556  0B89               	decfsz	9,f
  2103  0557  2D52               	goto	u985
  2104  0558  3001               	movlw	1
  2105  0559  02FD               	subwf	___lldiv@counter,f
  2106  055A  1D03               	btfss	3,2
  2107  055B  2D31               	goto	l1368
  2108  055C                     l1380:	
  2109  055C  087C               	movf	___lldiv@quotient+3,w
  2110  055D  00F3               	movwf	?___lldiv+3
  2111  055E  087B               	movf	___lldiv@quotient+2,w
  2112  055F  00F2               	movwf	?___lldiv+2
  2113  0560  087A               	movf	___lldiv@quotient+1,w
  2114  0561  00F1               	movwf	?___lldiv+1
  2115  0562  0879               	movf	___lldiv@quotient,w
  2116  0563  00F0               	movwf	?___lldiv
  2117  0564  0008               	return
  2118  0565                     __end_of___lldiv:	
  2119                           
  2120                           	psect	text9
  2121  0565                     __ptext9:	
  2122 ;; *************** function _LCD_Init *****************
  2123 ;; Defined at:
  2124 ;;		line 22 in file "LCD.c"
  2125 ;; Parameters:    Size  Location     Type
  2126 ;;		None
  2127 ;; Auto vars:     Size  Location     Type
  2128 ;;		None
  2129 ;; Return value:  Size  Location     Type
  2130 ;;                  1    wreg      void 
  2131 ;; Registers used:
  2132 ;;		wreg, status,2, status,0, pclath, cstack
  2133 ;; Tracked objects:
  2134 ;;		On entry : 0/0
  2135 ;;		On exit  : 0/0
  2136 ;;		Unchanged: 0/0
  2137 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  2138 ;;      Params:         0       0       0       0       0       0
  2139 ;;      Locals:         0       0       0       0       0       0
  2140 ;;      Temps:          2       0       0       0       0       0
  2141 ;;      Totals:         2       0       0       0       0       0
  2142 ;;Total ram usage:        2 bytes
  2143 ;; Hardware stack levels used:    1
  2144 ;; Hardware stack levels required when called:    2
  2145 ;; This function calls:
  2146 ;;		_LCD_DisplayClear
  2147 ;;		_LCD_WriteData
  2148 ;; This function is called by:
  2149 ;;		_main
  2150 ;; This function uses a non-reentrant model
  2151 ;;
  2152                           
  2153                           
  2154                           ;psect for function _LCD_Init
  2155  0565                     _LCD_Init:	
  2156                           
  2157                           ;LCD.c: 24: RA4 = 0;
  2158                           
  2159                           ;incstack = 0
  2160                           ; Regs used in _LCD_Init: [wreg+status,2+status,0+pclath+cstack]
  2161  0565  0020               	movlb	0	; select bank0
  2162  0566  120C               	bcf	12,4	;volatile
  2163                           
  2164                           ;LCD.c: 25: RA3 = 0;
  2165  0567  118C               	bcf	12,3	;volatile
  2166                           
  2167                           ;LCD.c: 27: _delay((unsigned long)((30)*(32000000/4000.0)));
  2168  0568  3002               	movlw	2
  2169  0569  00F5               	movwf	??_LCD_Init+1
  2170  056A  3038               	movlw	56
  2171  056B  00F4               	movwf	??_LCD_Init
  2172  056C  30AD               	movlw	173
  2173  056D                     u1537:	
  2174  056D  0B89               	decfsz	9,f
  2175  056E  2D6D               	goto	u1537
  2176  056F  0BF4               	decfsz	??_LCD_Init,f
  2177  0570  2D6D               	goto	u1537
  2178  0571  0BF5               	decfsz	??_LCD_Init+1,f
  2179  0572  2D6D               	goto	u1537
  2180  0573  0000               	nop
  2181                           
  2182                           ;LCD.c: 28: PORTB = ( ((0x03&0x0C)<<1)|(0x03&0x03) );
  2183  0574  3003               	movlw	3
  2184  0575  0020               	movlb	0	; select bank0
  2185  0576  008D               	movwf	13	;volatile
  2186                           
  2187                           ;LCD.c: 29: {RA3 = 1; _delay((unsigned long)((1)*(32000000/4000000.0))); RA3 = 0; _delay
      +                          ((unsigned long)((1)*(32000000/4000000.0)));};
  2188  0577  158C               	bsf	12,3	;volatile
  2189  0578  3200               	nop2	;2 cycle nop
  2190  0579  3200               	nop2	;2 cycle nop
  2191  057A  3200               	nop2	;2 cycle nop
  2192  057B  3200               	nop2	;2 cycle nop
  2193  057C  0020               	movlb	0	; select bank0
  2194  057D  118C               	bcf	12,3	;volatile
  2195  057E  3200               	nop2	;2 cycle nop
  2196  057F  3200               	nop2	;2 cycle nop
  2197  0580  3200               	nop2	;2 cycle nop
  2198  0581  3200               	nop2	;2 cycle nop
  2199                           
  2200                           ;LCD.c: 30: _delay((unsigned long)((5)*(32000000/4000.0)));
  2201  0582  3034               	movlw	52
  2202  0583  00F4               	movwf	??_LCD_Init
  2203  0584  30F2               	movlw	242
  2204  0585                     u1547:	
  2205  0585  0B89               	decfsz	9,f
  2206  0586  2D85               	goto	u1547
  2207  0587  0BF4               	decfsz	??_LCD_Init,f
  2208  0588  2D85               	goto	u1547
  2209                           
  2210                           ;LCD.c: 31: {RA3 = 1; _delay((unsigned long)((1)*(32000000/4000000.0))); RA3 = 0; _delay
      +                          ((unsigned long)((1)*(32000000/4000000.0)));};
  2211  0589  0020               	movlb	0	; select bank0
  2212  058A  158C               	bsf	12,3	;volatile
  2213  058B  3200               	nop2	;2 cycle nop
  2214  058C  3200               	nop2	;2 cycle nop
  2215  058D  3200               	nop2	;2 cycle nop
  2216  058E  3200               	nop2	;2 cycle nop
  2217  058F  0020               	movlb	0	; select bank0
  2218  0590  118C               	bcf	12,3	;volatile
  2219  0591  3200               	nop2	;2 cycle nop
  2220  0592  3200               	nop2	;2 cycle nop
  2221  0593  3200               	nop2	;2 cycle nop
  2222  0594  3200               	nop2	;2 cycle nop
  2223                           
  2224                           ;LCD.c: 32: _delay((unsigned long)((400)*(32000000/4000000.0)));
  2225  0595  3005               	movlw	5
  2226  0596  00F4               	movwf	??_LCD_Init
  2227  0597  3026               	movlw	38
  2228  0598                     u1557:	
  2229  0598  0B89               	decfsz	9,f
  2230  0599  2D98               	goto	u1557
  2231  059A  0BF4               	decfsz	??_LCD_Init,f
  2232  059B  2D98               	goto	u1557
  2233  059C  3200               	nop2
  2234                           
  2235                           ;LCD.c: 33: {RA3 = 1; _delay((unsigned long)((1)*(32000000/4000000.0))); RA3 = 0; _delay
      +                          ((unsigned long)((1)*(32000000/4000000.0)));};
  2236  059D  0020               	movlb	0	; select bank0
  2237  059E  158C               	bsf	12,3	;volatile
  2238  059F  3200               	nop2	;2 cycle nop
  2239  05A0  3200               	nop2	;2 cycle nop
  2240  05A1  3200               	nop2	;2 cycle nop
  2241  05A2  3200               	nop2	;2 cycle nop
  2242  05A3  0020               	movlb	0	; select bank0
  2243  05A4  118C               	bcf	12,3	;volatile
  2244  05A5  3200               	nop2	;2 cycle nop
  2245  05A6  3200               	nop2	;2 cycle nop
  2246  05A7  3200               	nop2	;2 cycle nop
  2247  05A8  3200               	nop2	;2 cycle nop
  2248                           
  2249                           ;LCD.c: 34: _delay((unsigned long)((400)*(32000000/4000000.0)));
  2250  05A9  3005               	movlw	5
  2251  05AA  00F4               	movwf	??_LCD_Init
  2252  05AB  3026               	movlw	38
  2253  05AC                     u1567:	
  2254  05AC  0B89               	decfsz	9,f
  2255  05AD  2DAC               	goto	u1567
  2256  05AE  0BF4               	decfsz	??_LCD_Init,f
  2257  05AF  2DAC               	goto	u1567
  2258  05B0  3200               	nop2
  2259                           
  2260                           ;LCD.c: 35: PORTB = ( ((0x02&0x0C)<<1)|(0x02&0x03) );
  2261  05B1  3002               	movlw	2
  2262  05B2  0020               	movlb	0	; select bank0
  2263  05B3  008D               	movwf	13	;volatile
  2264                           
  2265                           ;LCD.c: 36: {RA3 = 1; _delay((unsigned long)((1)*(32000000/4000000.0))); RA3 = 0; _delay
      +                          ((unsigned long)((1)*(32000000/4000000.0)));};
  2266  05B4  158C               	bsf	12,3	;volatile
  2267  05B5  3200               	nop2	;2 cycle nop
  2268  05B6  3200               	nop2	;2 cycle nop
  2269  05B7  3200               	nop2	;2 cycle nop
  2270  05B8  3200               	nop2	;2 cycle nop
  2271  05B9  0020               	movlb	0	; select bank0
  2272  05BA  118C               	bcf	12,3	;volatile
  2273  05BB  3200               	nop2	;2 cycle nop
  2274  05BC  3200               	nop2	;2 cycle nop
  2275  05BD  3200               	nop2	;2 cycle nop
  2276  05BE  3200               	nop2	;2 cycle nop
  2277                           
  2278                           ;LCD.c: 38: LCD_WriteData(0x28);
  2279  05BF  3028               	movlw	40
  2280  05C0  3184  2497  3185   	fcall	_LCD_WriteData
  2281                           
  2282                           ;LCD.c: 39: LCD_WriteData(0x0c);
  2283  05C3  300C               	movlw	12
  2284  05C4  3184  2497  3185   	fcall	_LCD_WriteData
  2285                           
  2286                           ;LCD.c: 40: LCD_DisplayClear();
  2287  05C7  3183  23DA  3185   	fcall	_LCD_DisplayClear
  2288                           
  2289                           ;LCD.c: 41: LCD_WriteData(0x06);
  2290  05CA  3006               	movlw	6
  2291  05CB  3184  2497         	fcall	_LCD_WriteData
  2292  05CD  0008               	return
  2293  05CE                     __end_of_LCD_Init:	
  2294                           
  2295                           	psect	text10
  2296  03DA                     __ptext10:	
  2297 ;; *************** function _LCD_DisplayClear *****************
  2298 ;; Defined at:
  2299 ;;		line 55 in file "LCD.c"
  2300 ;; Parameters:    Size  Location     Type
  2301 ;;		None
  2302 ;; Auto vars:     Size  Location     Type
  2303 ;;		None
  2304 ;; Return value:  Size  Location     Type
  2305 ;;                  1    wreg      void 
  2306 ;; Registers used:
  2307 ;;		wreg, status,2, status,0, pclath, cstack
  2308 ;; Tracked objects:
  2309 ;;		On entry : 0/0
  2310 ;;		On exit  : 0/0
  2311 ;;		Unchanged: 0/0
  2312 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  2313 ;;      Params:         0       0       0       0       0       0
  2314 ;;      Locals:         0       0       0       0       0       0
  2315 ;;      Temps:          1       0       0       0       0       0
  2316 ;;      Totals:         1       0       0       0       0       0
  2317 ;;Total ram usage:        1 bytes
  2318 ;; Hardware stack levels used:    1
  2319 ;; Hardware stack levels required when called:    1
  2320 ;; This function calls:
  2321 ;;		_LCD_WriteData
  2322 ;; This function is called by:
  2323 ;;		_LCD_Init
  2324 ;; This function uses a non-reentrant model
  2325 ;;
  2326                           
  2327                           
  2328                           ;psect for function _LCD_DisplayClear
  2329  03DA                     _LCD_DisplayClear:	
  2330                           
  2331                           ;LCD.c: 57: RA4 = 0;
  2332                           
  2333                           ;incstack = 0
  2334                           ; Regs used in _LCD_DisplayClear: [wreg+status,2+status,0+pclath+cstack]
  2335  03DA  0020               	movlb	0	; select bank0
  2336  03DB  120C               	bcf	12,4	;volatile
  2337                           
  2338                           ;LCD.c: 58: LCD_WriteData(0x01);
  2339  03DC  3001               	movlw	1
  2340  03DD  3184  2497  3183   	fcall	_LCD_WriteData
  2341                           
  2342                           ;LCD.c: 59: _delay((unsigned long)((2)*(32000000/4000.0)));
  2343  03E0  3015               	movlw	21
  2344  03E1  00F3               	movwf	??_LCD_DisplayClear
  2345  03E2  30C6               	movlw	198
  2346  03E3                     u1577:	
  2347  03E3  0B89               	decfsz	9,f
  2348  03E4  2BE3               	goto	u1577
  2349  03E5  0BF3               	decfsz	??_LCD_DisplayClear,f
  2350  03E6  2BE3               	goto	u1577
  2351  03E7  3200               	nop2
  2352  03E8  0008               	return
  2353  03E9                     __end_of_LCD_DisplayClear:	
  2354                           
  2355                           	psect	text11
  2356  0421                     __ptext11:	
  2357 ;; *************** function _LCD_CursorPosition *****************
  2358 ;; Defined at:
  2359 ;;		line 73 in file "LCD.c"
  2360 ;; Parameters:    Size  Location     Type
  2361 ;;  tx              1    wreg     unsigned char 
  2362 ;;  ty              1    3[COMMON] unsigned char 
  2363 ;; Auto vars:     Size  Location     Type
  2364 ;;  tx              1    5[COMMON] unsigned char 
  2365 ;; Return value:  Size  Location     Type
  2366 ;;                  1    wreg      void 
  2367 ;; Registers used:
  2368 ;;		wreg, status,2, status,0, pclath, cstack
  2369 ;; Tracked objects:
  2370 ;;		On entry : 0/0
  2371 ;;		On exit  : 0/0
  2372 ;;		Unchanged: 0/0
  2373 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  2374 ;;      Params:         1       0       0       0       0       0
  2375 ;;      Locals:         1       0       0       0       0       0
  2376 ;;      Temps:          1       0       0       0       0       0
  2377 ;;      Totals:         3       0       0       0       0       0
  2378 ;;Total ram usage:        3 bytes
  2379 ;; Hardware stack levels used:    1
  2380 ;; Hardware stack levels required when called:    1
  2381 ;; This function calls:
  2382 ;;		_LCD_WriteData
  2383 ;; This function is called by:
  2384 ;;		_main
  2385 ;; This function uses a non-reentrant model
  2386 ;;
  2387                           
  2388                           
  2389                           ;psect for function _LCD_CursorPosition
  2390  0421                     _LCD_CursorPosition:	
  2391                           
  2392                           ;incstack = 0
  2393                           ; Regs used in _LCD_CursorPosition: [wreg+status,2+status,0+pclath+cstack]
  2394                           ;LCD_CursorPosition@tx stored from wreg
  2395  0421  00F5               	movwf	LCD_CursorPosition@tx
  2396                           
  2397                           ;LCD.c: 75: RA4 = 0;
  2398  0422  0020               	movlb	0	; select bank0
  2399  0423  120C               	bcf	12,4	;volatile
  2400                           
  2401                           ;LCD.c: 76: LCD_WriteData(0x80|tx|(0x40*ty));
  2402  0424  0873               	movf	LCD_CursorPosition@ty,w
  2403  0425  00F4               	movwf	??_LCD_CursorPosition
  2404  0426  3005               	movlw	5
  2405  0427                     u1345:	
  2406  0427  35F4               	lslf	??_LCD_CursorPosition,f
  2407  0428  3EFF               	addlw	-1
  2408  0429  1D03               	skipz
  2409  042A  2C27               	goto	u1345
  2410  042B  3574               	lslf	??_LCD_CursorPosition,w
  2411  042C  0475               	iorwf	LCD_CursorPosition@tx,w
  2412  042D  3880               	iorlw	-128
  2413  042E  3184  2497  3184   	fcall	_LCD_WriteData
  2414                           
  2415                           ;LCD.c: 77: _delay((unsigned long)((40)*(32000000/4000000.0)));
  2416  0431  306A               	movlw	106
  2417  0432                     u1587:	
  2418  0432  0B89               	decfsz	9,f
  2419  0433  2C32               	goto	u1587
  2420  0434  3200               	nop2
  2421  0435  0008               	return
  2422  0436                     __end_of_LCD_CursorPosition:	
  2423                           
  2424                           	psect	text12
  2425  0497                     __ptext12:	
  2426 ;; *************** function _LCD_WriteData *****************
  2427 ;; Defined at:
  2428 ;;		line 11 in file "LCD.c"
  2429 ;; Parameters:    Size  Location     Type
  2430 ;;  point           1    wreg     char 
  2431 ;; Auto vars:     Size  Location     Type
  2432 ;;  point           1    2[COMMON] char 
  2433 ;; Return value:  Size  Location     Type
  2434 ;;                  1    wreg      void 
  2435 ;; Registers used:
  2436 ;;		wreg, status,2, status,0
  2437 ;; Tracked objects:
  2438 ;;		On entry : 0/0
  2439 ;;		On exit  : 0/0
  2440 ;;		Unchanged: 0/0
  2441 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  2442 ;;      Params:         0       0       0       0       0       0
  2443 ;;      Locals:         1       0       0       0       0       0
  2444 ;;      Temps:          2       0       0       0       0       0
  2445 ;;      Totals:         3       0       0       0       0       0
  2446 ;;Total ram usage:        3 bytes
  2447 ;; Hardware stack levels used:    1
  2448 ;; This function calls:
  2449 ;;		Nothing
  2450 ;; This function is called by:
  2451 ;;		_LCD_Init
  2452 ;;		_LCD_Put
  2453 ;;		_LCD_DisplayClear
  2454 ;;		_LCD_CursorPosition
  2455 ;;		_LCD_CursorHome
  2456 ;;		_LCD_CursorShift
  2457 ;;		_LCD_DispShift
  2458 ;; This function uses a non-reentrant model
  2459 ;;
  2460                           
  2461                           
  2462                           ;psect for function _LCD_WriteData
  2463  0497                     _LCD_WriteData:	
  2464                           
  2465                           ;incstack = 0
  2466                           ; Regs used in _LCD_WriteData: [wreg+status,2+status,0]
  2467                           ;LCD_WriteData@point stored from wreg
  2468  0497  00F2               	movwf	LCD_WriteData@point
  2469                           
  2470                           ;LCD.c: 13: _delay((unsigned long)((80)*(32000000/4000000.0)));
  2471  0498  30D5               	movlw	213
  2472  0499                     u1597:	
  2473  0499  0B89               	decfsz	9,f
  2474  049A  2C99               	goto	u1597
  2475  049B  0000               	nop
  2476                           
  2477                           ;LCD.c: 14: PORTB = ( (((point>>4)&0x0F&0x0C)<<1)|((point>>4)&0x0F&0x03) );
  2478  049C  0872               	movf	LCD_WriteData@point,w
  2479  049D  00F0               	movwf	??_LCD_WriteData
  2480  049E  3004               	movlw	4
  2481  049F                     u845:	
  2482  049F  1003               	clrc
  2483  04A0  1BF0               	btfsc	??_LCD_WriteData,7
  2484  04A1  1403               	setc
  2485  04A2  0CF0               	rrf	??_LCD_WriteData,f
  2486  04A3  0B89               	decfsz	9,f
  2487  04A4  2C9F               	goto	u845
  2488  04A5  3003               	movlw	3
  2489  04A6  0570               	andwf	??_LCD_WriteData,w
  2490  04A7  00F1               	movwf	??_LCD_WriteData+1
  2491  04A8  0E72               	swapf	LCD_WriteData@point,w
  2492  04A9  390F               	andlw	15
  2493  04AA  1989               	btfsc	9,3
  2494  04AB  38F0               	iorlw	240
  2495  04AC  390C               	andlw	12
  2496  04AD  0709               	addwf	9,w
  2497  04AE  0471               	iorwf	??_LCD_WriteData+1,w
  2498  04AF  0020               	movlb	0	; select bank0
  2499  04B0  008D               	movwf	13	;volatile
  2500                           
  2501                           ;LCD.c: 15: {RA3 = 1; _delay((unsigned long)((1)*(32000000/4000000.0))); RA3 = 0; _delay
      +                          ((unsigned long)((1)*(32000000/4000000.0)));};
  2502  04B1  158C               	bsf	12,3	;volatile
  2503  04B2  3200               	nop2	;2 cycle nop
  2504  04B3  3200               	nop2	;2 cycle nop
  2505  04B4  3200               	nop2	;2 cycle nop
  2506  04B5  3200               	nop2	;2 cycle nop
  2507  04B6  0020               	movlb	0	; select bank0
  2508  04B7  118C               	bcf	12,3	;volatile
  2509  04B8  3200               	nop2	;2 cycle nop
  2510  04B9  3200               	nop2	;2 cycle nop
  2511  04BA  3200               	nop2	;2 cycle nop
  2512  04BB  3200               	nop2	;2 cycle nop
  2513                           
  2514                           ;LCD.c: 16: PORTB = ( ((point&0x0F&0x0C)<<1)|(point&0x0F&0x03) );
  2515  04BC  3003               	movlw	3
  2516  04BD  0572               	andwf	LCD_WriteData@point,w
  2517  04BE  00F0               	movwf	??_LCD_WriteData
  2518  04BF  0872               	movf	LCD_WriteData@point,w
  2519  04C0  390C               	andlw	12
  2520  04C1  0709               	addwf	9,w
  2521  04C2  0470               	iorwf	??_LCD_WriteData,w
  2522  04C3  0020               	movlb	0	; select bank0
  2523  04C4  008D               	movwf	13	;volatile
  2524                           
  2525                           ;LCD.c: 17: {RA3 = 1; _delay((unsigned long)((1)*(32000000/4000000.0))); RA3 = 0; _delay
      +                          ((unsigned long)((1)*(32000000/4000000.0)));};
  2526  04C5  158C               	bsf	12,3	;volatile
  2527  04C6  3200               	nop2	;2 cycle nop
  2528  04C7  3200               	nop2	;2 cycle nop
  2529  04C8  3200               	nop2	;2 cycle nop
  2530  04C9  3200               	nop2	;2 cycle nop
  2531  04CA  0020               	movlb	0	; select bank0
  2532  04CB  118C               	bcf	12,3	;volatile
  2533  04CC  3200               	nop2	;2 cycle nop
  2534  04CD  3200               	nop2	;2 cycle nop
  2535  04CE  3200               	nop2	;2 cycle nop
  2536  04CF  3200               	nop2	;2 cycle nop
  2537  04D0  0008               	return
  2538  04D1                     __end_of_LCD_WriteData:	
  2539                           
  2540                           	psect	text13
  2541  040C                     __ptext13:	
  2542 ;; *************** function _Basic_Init *****************
  2543 ;; Defined at:
  2544 ;;		line 24 in file "main.c"
  2545 ;; Parameters:    Size  Location     Type
  2546 ;;		None
  2547 ;; Auto vars:     Size  Location     Type
  2548 ;;		None
  2549 ;; Return value:  Size  Location     Type
  2550 ;;                  1    wreg      char 
  2551 ;; Registers used:
  2552 ;;		wreg, status,2
  2553 ;; Tracked objects:
  2554 ;;		On entry : 0/0
  2555 ;;		On exit  : 0/0
  2556 ;;		Unchanged: 0/0
  2557 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  2558 ;;      Params:         0       0       0       0       0       0
  2559 ;;      Locals:         0       0       0       0       0       0
  2560 ;;      Temps:          0       0       0       0       0       0
  2561 ;;      Totals:         0       0       0       0       0       0
  2562 ;;Total ram usage:        0 bytes
  2563 ;; Hardware stack levels used:    1
  2564 ;; This function calls:
  2565 ;;		Nothing
  2566 ;; This function is called by:
  2567 ;;		_main
  2568 ;; This function uses a non-reentrant model
  2569 ;;
  2570                           
  2571                           
  2572                           ;psect for function _Basic_Init
  2573  040C                     _Basic_Init:	
  2574                           
  2575                           ;main.c: 26: OSCCON = 0xF3;
  2576                           
  2577                           ;incstack = 0
  2578                           ; Regs used in _Basic_Init: [wreg+status,2]
  2579  040C  30F3               	movlw	243
  2580  040D  0021               	movlb	1	; select bank1
  2581  040E  0099               	movwf	25	;volatile
  2582                           
  2583                           ;main.c: 30: TRISA = 0x07;
  2584  040F  3007               	movlw	7
  2585  0410  008C               	movwf	12	;volatile
  2586                           
  2587                           ;main.c: 31: ANSELA = 0x07;
  2588  0411  3007               	movlw	7
  2589  0412  0023               	movlb	3	; select bank3
  2590  0413  008C               	movwf	12	;volatile
  2591                           
  2592                           ;main.c: 33: TRISB = 0x40;
  2593  0414  3040               	movlw	64
  2594  0415  0021               	movlb	1	; select bank1
  2595  0416  008D               	movwf	13	;volatile
  2596                           
  2597                           ;main.c: 34: ANSELB = 0x00;
  2598  0417  0023               	movlb	3	; select bank3
  2599  0418  018D               	clrf	13	;volatile
  2600                           
  2601                           ;main.c: 36: APFCON0 = 0x08;
  2602  0419  3008               	movlw	8
  2603  041A  0022               	movlb	2	; select bank2
  2604  041B  009D               	movwf	29	;volatile
  2605                           
  2606                           ;main.c: 37: APFCON1 = 0x00;
  2607  041C  019E               	clrf	30	;volatile
  2608                           
  2609                           ;main.c: 39: PORTA = 0x00;
  2610  041D  0020               	movlb	0	; select bank0
  2611  041E  018C               	clrf	12	;volatile
  2612                           
  2613                           ;main.c: 40: PORTB = 0x00;
  2614  041F  018D               	clrf	13	;volatile
  2615  0420  0008               	return
  2616  0421                     __end_of_Basic_Init:	
  2617                           ;main.c: 42: return 0;
  2618                           ;	Return value of _Basic_Init is never used
  2619                           
  2620  007E                     btemp	set	126	;btemp
  2621  007E                     wtemp0	set	126


Data Sizes:
    Strings     41
    Constant    0
    Data        0
    BSS         5
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     56      61
    BANK1            80      0       0
    BANK2            80      0       0
    BANK3            80      0       0
    BANK4            48      0       0

Pointer List with Targets:

    xfunc_in	PTR FTN()unsigned char  size(2) Largest target is 1
		 -> Absolute function(), 

    xprintf@fmt	PTR const unsigned char  size(2) Largest target is 13
		 -> STR_6(CODE[7]), STR_5(CODE[6]), STR_4(CODE[6]), STR_3(CODE[7]), 
		 -> STR_1(CODE[13]), 

    xprintf@arp	PTR void [1] size(1) Largest target is 1
		 -> ?_xfprintf(COMMON[1]), ?_xsprintf(COMMON[1]), ?_xprintf(BANK0[1]), 

    xvprintf@arp	PTR PTR void  size(1) Largest target is 1
		 -> xfprintf@arp(COMMON[1]), xsprintf@arp(COMMON[1]), xprintf@arp(BANK0[1]), 

    xvprintf@p	PTR unsigned char  size(1) Largest target is 1
		 -> ?_xfprintf(COMMON[1]), ?_xsprintf(COMMON[1]), ?_xprintf(BANK0[1]), 

    xvprintf@fmt	PTR const unsigned char  size(2) Largest target is 13
		 -> STR_6(CODE[7]), STR_5(CODE[6]), STR_4(CODE[6]), STR_3(CODE[7]), 
		 -> STR_1(CODE[13]), 

    xputs@str	PTR const unsigned char  size(1) Largest target is 1
		 -> ?_xfprintf(COMMON[1]), ?_xsprintf(COMMON[1]), ?_xprintf(BANK0[1]), 

    outptr	PTR unsigned char  size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    xfunc_out	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), LCD_Put(), 


Critical Paths under _main in COMMON

    _xvprintf->___lldiv
    _xputs->_xputc
    _xputc->_LCD_Put
    _LCD_Put->_LCD_WriteData
    _LCD_Init->_LCD_DisplayClear
    _LCD_DisplayClear->_LCD_WriteData
    _LCD_CursorPosition->_LCD_WriteData

Critical Paths under _main in BANK0

    _main->_xprintf
    _xprintf->_xvprintf

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0    4073
                         _Basic_Init
                 _LCD_CursorPosition
                           _LCD_Init
                            _xprintf
 ---------------------------------------------------------------------------------
 (1) _xprintf                                              8     2      6    3701
                                             48 BANK0      8     2      6
                           _xvprintf
 ---------------------------------------------------------------------------------
 (2) _xvprintf                                            48    45      3    3326
                                              0 BANK0     48    45      3
                            ___lldiv
                            ___llmod
                             ___wmul
                              _xputc
                              _xputs
 ---------------------------------------------------------------------------------
 (3) _xputs                                                2     2      0     337
                                              6 COMMON     2     2      0
                              _xputc
 ---------------------------------------------------------------------------------
 (4) _xputc                                                2     2      0     262
                                              4 COMMON     2     2      0
                   Absolute function *
                            _LCD_Put *
 ---------------------------------------------------------------------------------
 (5) _LCD_Put                                              1     0      1     196
                                              3 COMMON     1     0      1
                      _LCD_WriteData
 ---------------------------------------------------------------------------------
 (5) Absolute function(Fake)                               1     0      1       0
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     220
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (3) ___llmod                                             10     2      8     287
                                              0 COMMON    10     2      8
 ---------------------------------------------------------------------------------
 (3) ___lldiv                                             14     6      8     290
                                              0 COMMON    14     6      8
 ---------------------------------------------------------------------------------
 (1) _LCD_Init                                             2     2      0     176
                                              4 COMMON     2     2      0
                   _LCD_DisplayClear
                      _LCD_WriteData
 ---------------------------------------------------------------------------------
 (2) _LCD_DisplayClear                                     1     1      0      88
                                              3 COMMON     1     1      0
                      _LCD_WriteData
 ---------------------------------------------------------------------------------
 (1) _LCD_CursorPosition                                   3     2      1     196
                                              3 COMMON     3     2      1
                      _LCD_WriteData
 ---------------------------------------------------------------------------------
 (6) _LCD_WriteData                                        3     3      0      88
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (1) _Basic_Init                                           0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Basic_Init
   _LCD_CursorPosition
     _LCD_WriteData
   _LCD_Init
     _LCD_DisplayClear
       _LCD_WriteData
     _LCD_WriteData
   _xprintf
     _xvprintf
       ___lldiv
       ___llmod
       ___wmul
       _xputc
         Absolute function(Fake) *
         _LCD_Put *
           _LCD_WriteData
       _xputs
         _xputc
           Absolute function(Fake) *
           _LCD_Put *
             _LCD_WriteData

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             170      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      E       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0      4B       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BANK0               50     38      3D       6       76.2%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BITBANK1            50      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BANK1               50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BITBANK2            50      0       0       9        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BANK2               50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BITBANK3            50      0       0      11        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BANK3               50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BITBANK4            30      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BANK4               30      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
DATA                 0      0      4B      15        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.41 build -162212810 
Symbol Table                                                                                   Sun Feb 26 05:10:11 2017

                __CFG_CP$OFF 0000          ___wmul@multiplicand 0072                          l120 064A  
                        l105 05CE                          l161 079C                          l138 06E5  
                        l342 0457                          _RA3 0063                          _RA4 0064  
               __CFG_CPD$OFF 0000                          u905 0458                          u915 045D  
                        u845 049F                          u945 0526                          u965 0532  
                        u975 0546                          u985 0552                 __CFG_BORV$LO 0000  
                        wreg 0009                   _Basic_Init 040C                 __CFG_LVP$OFF 0000  
            __end_of_LCD_Put 03DA                         l1400 050A                         l1500 06C3  
                       l1334 0489                         l1326 0479                         l1502 06C8  
                       l1422 05E7                         l1344 03FA                         l1512 06FF  
                       l1514 0714                         l1506 06CD                         l1380 055C  
                       l1348 0451                         l1540 0782                         l1524 073E  
                       l1516 071D                         l1452 063A                         l1444 0610  
                       l1436 05FC                         l1366 0523                         l1390 04D9  
                       l1526 0740                         l1518 072D                         l1446 0613  
                       l1376 0551                         l1368 0531                         l1392 04E7  
                       l1560 07BB                         l1552 07AA                         l1536 077A  
                       l1480 0680                         l1472 0665                         l1464 0657  
                       l1456 0642                         l1570 07E3                         l1562 07BF  
                       l1490 069A                         l1482 0684                         l1396 04FF  
                       l1572 07E7                         l1492 06AF                         l1566 07D1  
                       l1558 07B2                         l1494 06BC                         l1486 0696  
                       l1478 0672                         l1496 06BF                         l1498 06C1  
                       STR_1 0800                 __CFG_WDTE$ON 0000                         STR_2 0827  
                       STR_3 080D                         STR_4 081B                         STR_5 0821  
                       STR_6 0814                         u1015 04DC                         u1035 04F5  
                       u1045 0500                         u1315 07CF                         u1335 07F5  
                       u1345 0427                         u1185 0694                         u1195 06A8  
                       u1537 056D                         u1547 0585                         u1557 0598  
                       u1567 05AC                         u1577 03E3                         u1587 0432  
                       u1597 0499                 __CFG_WRT$OFF 0000                         _main 0436  
                       fsr0h 0005                         fsr1h 0007                         indf0 0000  
                       fsr0l 0004                         indf1 0001                         fsr1l 0006  
                       btemp 007E                __CFG_BOREN$ON 0000                         start 0002  
              __CFG_IESO$OFF 0000                _LCD_WriteData 0497                __CFG_MCLRE$ON 0000  
   __end_of_LCD_DisplayClear 03E9             __end_of_LCD_Init 05CE                __CFG_PLLEN$ON 0000  
                LCD_Put@word 0073                        ?_main 0070              __end_of___lldiv 0565  
            __end_of___llmod 0513                        _PORTA 000C                        _PORTB 000D  
                      _TRISA 008C                        _TRISB 008D                __CFG_PWRTE$ON 0000  
             __CFG_FCMEN$OFF 0000                        _xputc 046A                        _xputs 03F9  
                      pclath 000A                        status 0003                        wtemp0 007E  
            __end_of_xprintf 03F9           _LCD_CursorPosition 0421               ?_LCD_WriteData 0070  
            __initialization 07F8                 __end_of_main 044F          ?_LCD_CursorPosition 0073  
                     ??_main 007E                    ??_LCD_Put 0074                  ?_Basic_Init 0070  
           ___llmod@dividend 0074         ??_LCD_CursorPosition 0074                       _ANSELA 018C  
                     _ANSELB 018D                       ?_xputc 0070                       ?_xputs 0070  
                     _OSCCON 0099                       ___wmul 044F                    ??___lldiv 0078  
                  ??___llmod 0078                       _outptr 005C                       xputc@c 0075  
                  ??_xprintf 0056      __end_of__initialization 07FD                    ?_LCD_Init 0070  
            ??_LCD_WriteData 0070             __end_of_xvprintf 07F8               __pcstackCOMMON 0070  
        __size_of_Basic_Init 0015                __end_of_xputc 0497                __end_of_xputs 040C  
                    ??_xputc 0074                      ??_xputs 0076                   __pbssBANK0 0058  
                 ??_LCD_Init 0074                   __pmaintext 0436                      ?___wmul 0070  
          ?_LCD_DisplayClear 0070                      _APFCON0 011D                      _APFCON1 011E  
         ??_LCD_DisplayClear 0073                      _LCD_Put 03D4                 _xvprintf$154 0037  
               _xvprintf$155 003B                 _xvprintf$156 003D                      ___lldiv 0513  
            __size_of___wmul 001B                      ___llmod 04D1              __CFG_STVREN$OFF 0000  
                    __ptext1 03E9                      __ptext2 05CE                      __ptext3 03F9  
                    __ptext4 046A                      __ptext5 03D4                      __ptext6 044F  
                    __ptext7 04D1                      __ptext8 0513                      __ptext9 0565  
                  ?_xvprintf 0020                 ??_Basic_Init 0070         end_of_initialization 07FD  
                    _xprintf 03E9              ___lldiv@divisor 0070              ___lldiv@counter 007D  
         __end_of_Basic_Init 0421                 __pstringtext 0800             __CFG_FOSC$INTOSC 0000  
                 ??_xvprintf 0023  __size_of_LCD_CursorPosition 0015            __size_of_LCD_Init 0069  
             __end_of___wmul 046A          start_initialization 07F8              ___llmod@divisor 0070  
            ___llmod@counter 0079         LCD_CursorPosition@tx 0075         LCD_CursorPosition@ty 0073  
      __end_of_LCD_WriteData 04D1                     ??___wmul 0074                     ?_LCD_Put 0073  
                  ___latbits 0001                __pcstackBANK0 0020    __size_of_LCD_DisplayClear 000F  
                   ?___lldiv 0070                     ?___llmod 0070            __size_of_xvprintf 022A  
                   ?_xprintf 0050               __size_of_xputc 002D               __size_of_xputs 0013  
                   _LCD_Init 0565               ___wmul@product 0074            ___wmul@multiplier 0070  
                  _xfunc_out 005A             __size_of_LCD_Put 0006             __size_of___lldiv 0052  
           __size_of___llmod 0042           LCD_WriteData@point 0072   __end_of_LCD_CursorPosition 0436  
                   __ptext10 03DA                     __ptext11 0421                     __ptext12 0497  
                   __ptext13 040C             _LCD_DisplayClear 03DA             __size_of_xprintf 0010  
              __size_of_main 0019                     _xfunc_in 0058                     _xvprintf 05CE  
                 xprintf@arp 0057                   xprintf@fmt 0050             ___lldiv@dividend 0074  
          __CFG_CLKOUTEN$OFF 0000                  xvprintf@arp 0022                  xvprintf@fmt 0020  
           ___lldiv@quotient 0079       __size_of_LCD_WriteData 003A                     xputs@str 0077  
                  xvprintf@c 004F                    xvprintf@d 004E                    xvprintf@f 004A  
                  xvprintf@i 004C                    xvprintf@j 0044                    xvprintf@p 003F  
                  xvprintf@r 0040                    xvprintf@s 0027                    xvprintf@v 0046  
                  xvprintf@w 0042  
