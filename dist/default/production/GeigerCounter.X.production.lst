

Microchip Technology PIC LITE Macro Assembler V1.41 build -162212810 
                                                                                               Wed Jun 28 21:26:52 2017

Microchip Technology Omniscient Code Generator v1.41 (Free mode) build 201701250102
     1                           	processor	16F1827
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK1,global,class=CODE,delta=2
     5                           	psect	idataBANK2,global,class=CODE,delta=2
     6                           	psect	stringtext,global,class=STRCODE,delta=2
     7                           	psect	cinit,global,class=CODE,merge=1,delta=2
     8                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    11                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	dataBANK2,global,class=BANK2,space=1,delta=1
    13                           	psect	inittext,global,class=CODE,delta=2
    14                           	psect	clrtext,global,class=CODE,delta=2
    15                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    16                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    17                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    18                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    19                           	psect	text1,local,class=CODE,merge=1,delta=2
    20                           	psect	text2,local,class=CODE,merge=1,delta=2
    21                           	psect	text3,local,class=CODE,merge=1,delta=2,group=2
    22                           	psect	text4,local,class=CODE,merge=1,delta=2,group=2
    23                           	psect	text5,local,class=CODE,merge=1,delta=2,group=2
    24                           	psect	text6,local,class=CODE,merge=1,delta=2
    25                           	psect	text7,local,class=CODE,merge=1,delta=2
    26                           	psect	text8,local,class=CODE,merge=1,delta=2
    27                           	psect	text9,local,class=CODE,merge=1,delta=2
    28                           	psect	text10,local,class=CODE,merge=1,delta=2
    29                           	psect	text11,local,class=CODE,merge=1,delta=2
    30                           	psect	text12,local,class=CODE,merge=1,delta=2
    31                           	psect	text13,local,class=CODE,merge=1,delta=2
    32                           	psect	text14,local,class=CODE,merge=1,delta=2
    33                           	psect	text15,local,class=CODE,merge=1,delta=2
    34                           	psect	text16,local,class=CODE,merge=1,delta=2
    35                           	psect	text17,local,class=CODE,merge=1,delta=2
    36                           	psect	text18,local,class=CODE,merge=1,delta=2
    37                           	psect	text19,local,class=CODE,merge=1,delta=2
    38                           	psect	text20,local,class=CODE,merge=1,delta=2,group=2
    39                           	psect	text21,local,class=CODE,merge=1,delta=2,group=2
    40                           	psect	text22,local,class=CODE,merge=1,delta=2
    41                           	psect	text23,local,class=CODE,merge=1,delta=2
    42                           	psect	text24,local,class=CODE,merge=1,delta=2
    43                           	psect	text25,local,class=CODE,merge=1,delta=2
    44                           	psect	text26,local,class=CODE,merge=1,delta=2
    45                           	psect	text27,local,class=CODE,merge=1,delta=2
    46                           	psect	text28,local,class=CODE,merge=1,delta=2
    47                           	psect	text29,local,class=CODE,merge=1,delta=2
    48                           	psect	text30,local,class=CODE,merge=1,delta=2
    49                           	psect	text31,local,class=CODE,merge=1,delta=2
    50                           	psect	text32,local,class=CODE,merge=1,delta=2
    51                           	psect	text33,local,class=CODE,merge=1,delta=2
    52                           	psect	text34,local,class=CODE,merge=1,delta=2
    53                           	psect	text35,local,class=CODE,merge=1,delta=2
    54                           	psect	intentry,global,class=CODE,delta=2
    55                           	psect	text37,local,class=CODE,merge=1,delta=2
    56                           	psect	text38,local,class=CODE,merge=1,delta=2
    57                           	psect	text39,local,class=CODE,merge=1,delta=2
    58                           	psect	text40,local,class=CODE,merge=1,delta=2
    59                           	psect	text41,local,class=CODE,merge=1,delta=2
    60                           	psect	text42,local,class=CODE,merge=1,delta=2
    61                           	psect	text43,local,class=CODE,merge=1,delta=2
    62                           	psect	text44,local,class=CODE,merge=1,delta=2
    63                           	psect	text45,local,class=CODE,merge=1,delta=2
    64                           	psect	text46,local,class=CODE,merge=1,delta=2
    65                           	dabs	1,0x7E,2
    66  0000                     
    67                           ; Version 1.41
    68                           ; Generated 25/01/2017 GMT
    69                           ; 
    70                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    71                           ; All rights reserved.
    72                           ; 
    73                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    74                           ; 
    75                           ; Redistribution and use in source and binary forms, with or without modification, are
    76                           ; permitted provided that the following conditions are met:
    77                           ; 
    78                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    79                           ;        conditions and the following disclaimer.
    80                           ; 
    81                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    82                           ;        of conditions and the following disclaimer in the documentation and/or other
    83                           ;        materials provided with the distribution.
    84                           ; 
    85                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    86                           ;        software without specific prior written permission.
    87                           ; 
    88                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    89                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    90                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    91                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    92                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    93                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    94                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    95                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    96                           ; 
    97                           ; 
    98                           ; Code-generator required, PIC16F1827 Definitions
    99                           ; 
   100                           ; SFR Addresses
   101  0000                     	;# 
   102  0001                     	;# 
   103  0002                     	;# 
   104  0003                     	;# 
   105  0004                     	;# 
   106  0005                     	;# 
   107  0006                     	;# 
   108  0007                     	;# 
   109  0008                     	;# 
   110  0009                     	;# 
   111  000A                     	;# 
   112  000B                     	;# 
   113  000C                     	;# 
   114  000D                     	;# 
   115  0011                     	;# 
   116  0012                     	;# 
   117  0013                     	;# 
   118  0014                     	;# 
   119  0015                     	;# 
   120  0016                     	;# 
   121  0016                     	;# 
   122  0017                     	;# 
   123  0018                     	;# 
   124  0019                     	;# 
   125  001A                     	;# 
   126  001B                     	;# 
   127  001C                     	;# 
   128  001E                     	;# 
   129  001F                     	;# 
   130  008C                     	;# 
   131  008D                     	;# 
   132  0091                     	;# 
   133  0092                     	;# 
   134  0093                     	;# 
   135  0094                     	;# 
   136  0095                     	;# 
   137  0096                     	;# 
   138  0097                     	;# 
   139  0098                     	;# 
   140  0099                     	;# 
   141  009A                     	;# 
   142  009B                     	;# 
   143  009B                     	;# 
   144  009C                     	;# 
   145  009D                     	;# 
   146  009E                     	;# 
   147  010C                     	;# 
   148  010D                     	;# 
   149  0111                     	;# 
   150  0112                     	;# 
   151  0113                     	;# 
   152  0114                     	;# 
   153  0115                     	;# 
   154  0116                     	;# 
   155  0117                     	;# 
   156  0118                     	;# 
   157  0119                     	;# 
   158  011A                     	;# 
   159  011B                     	;# 
   160  011D                     	;# 
   161  011E                     	;# 
   162  018C                     	;# 
   163  018D                     	;# 
   164  0191                     	;# 
   165  0191                     	;# 
   166  0192                     	;# 
   167  0193                     	;# 
   168  0193                     	;# 
   169  0193                     	;# 
   170  0194                     	;# 
   171  0195                     	;# 
   172  0196                     	;# 
   173  0199                     	;# 
   174  019A                     	;# 
   175  019B                     	;# 
   176  019B                     	;# 
   177  019B                     	;# 
   178  019B                     	;# 
   179  019C                     	;# 
   180  019C                     	;# 
   181  019D                     	;# 
   182  019E                     	;# 
   183  019F                     	;# 
   184  020C                     	;# 
   185  020D                     	;# 
   186  0211                     	;# 
   187  0211                     	;# 
   188  0212                     	;# 
   189  0212                     	;# 
   190  0213                     	;# 
   191  0213                     	;# 
   192  0214                     	;# 
   193  0214                     	;# 
   194  0215                     	;# 
   195  0215                     	;# 
   196  0215                     	;# 
   197  0216                     	;# 
   198  0216                     	;# 
   199  0217                     	;# 
   200  0217                     	;# 
   201  0219                     	;# 
   202  021A                     	;# 
   203  021B                     	;# 
   204  021C                     	;# 
   205  021D                     	;# 
   206  021E                     	;# 
   207  021F                     	;# 
   208  0291                     	;# 
   209  0291                     	;# 
   210  0292                     	;# 
   211  0293                     	;# 
   212  0294                     	;# 
   213  0295                     	;# 
   214  0295                     	;# 
   215  0296                     	;# 
   216  0298                     	;# 
   217  0298                     	;# 
   218  0299                     	;# 
   219  029A                     	;# 
   220  029B                     	;# 
   221  029C                     	;# 
   222  029C                     	;# 
   223  029D                     	;# 
   224  029E                     	;# 
   225  029E                     	;# 
   226  0311                     	;# 
   227  0311                     	;# 
   228  0312                     	;# 
   229  0313                     	;# 
   230  0318                     	;# 
   231  0318                     	;# 
   232  0319                     	;# 
   233  031A                     	;# 
   234  0394                     	;# 
   235  0395                     	;# 
   236  0396                     	;# 
   237  039A                     	;# 
   238  039C                     	;# 
   239  039D                     	;# 
   240  039E                     	;# 
   241  039F                     	;# 
   242  0415                     	;# 
   243  0416                     	;# 
   244  0417                     	;# 
   245  041C                     	;# 
   246  041D                     	;# 
   247  041E                     	;# 
   248  0FE4                     	;# 
   249  0FE5                     	;# 
   250  0FE6                     	;# 
   251  0FE7                     	;# 
   252  0FE8                     	;# 
   253  0FE9                     	;# 
   254  0FEA                     	;# 
   255  0FEB                     	;# 
   256  0FED                     	;# 
   257  0FEE                     	;# 
   258  0FEF                     	;# 
   259  0000                     	;# 
   260  0001                     	;# 
   261  0002                     	;# 
   262  0003                     	;# 
   263  0004                     	;# 
   264  0005                     	;# 
   265  0006                     	;# 
   266  0007                     	;# 
   267  0008                     	;# 
   268  0009                     	;# 
   269  000A                     	;# 
   270  000B                     	;# 
   271  000C                     	;# 
   272  000D                     	;# 
   273  0011                     	;# 
   274  0012                     	;# 
   275  0013                     	;# 
   276  0014                     	;# 
   277  0015                     	;# 
   278  0016                     	;# 
   279  0016                     	;# 
   280  0017                     	;# 
   281  0018                     	;# 
   282  0019                     	;# 
   283  001A                     	;# 
   284  001B                     	;# 
   285  001C                     	;# 
   286  001E                     	;# 
   287  001F                     	;# 
   288  008C                     	;# 
   289  008D                     	;# 
   290  0091                     	;# 
   291  0092                     	;# 
   292  0093                     	;# 
   293  0094                     	;# 
   294  0095                     	;# 
   295  0096                     	;# 
   296  0097                     	;# 
   297  0098                     	;# 
   298  0099                     	;# 
   299  009A                     	;# 
   300  009B                     	;# 
   301  009B                     	;# 
   302  009C                     	;# 
   303  009D                     	;# 
   304  009E                     	;# 
   305  010C                     	;# 
   306  010D                     	;# 
   307  0111                     	;# 
   308  0112                     	;# 
   309  0113                     	;# 
   310  0114                     	;# 
   311  0115                     	;# 
   312  0116                     	;# 
   313  0117                     	;# 
   314  0118                     	;# 
   315  0119                     	;# 
   316  011A                     	;# 
   317  011B                     	;# 
   318  011D                     	;# 
   319  011E                     	;# 
   320  018C                     	;# 
   321  018D                     	;# 
   322  0191                     	;# 
   323  0191                     	;# 
   324  0192                     	;# 
   325  0193                     	;# 
   326  0193                     	;# 
   327  0193                     	;# 
   328  0194                     	;# 
   329  0195                     	;# 
   330  0196                     	;# 
   331  0199                     	;# 
   332  019A                     	;# 
   333  019B                     	;# 
   334  019B                     	;# 
   335  019B                     	;# 
   336  019B                     	;# 
   337  019C                     	;# 
   338  019C                     	;# 
   339  019D                     	;# 
   340  019E                     	;# 
   341  019F                     	;# 
   342  020C                     	;# 
   343  020D                     	;# 
   344  0211                     	;# 
   345  0211                     	;# 
   346  0212                     	;# 
   347  0212                     	;# 
   348  0213                     	;# 
   349  0213                     	;# 
   350  0214                     	;# 
   351  0214                     	;# 
   352  0215                     	;# 
   353  0215                     	;# 
   354  0215                     	;# 
   355  0216                     	;# 
   356  0216                     	;# 
   357  0217                     	;# 
   358  0217                     	;# 
   359  0219                     	;# 
   360  021A                     	;# 
   361  021B                     	;# 
   362  021C                     	;# 
   363  021D                     	;# 
   364  021E                     	;# 
   365  021F                     	;# 
   366  0291                     	;# 
   367  0291                     	;# 
   368  0292                     	;# 
   369  0293                     	;# 
   370  0294                     	;# 
   371  0295                     	;# 
   372  0295                     	;# 
   373  0296                     	;# 
   374  0298                     	;# 
   375  0298                     	;# 
   376  0299                     	;# 
   377  029A                     	;# 
   378  029B                     	;# 
   379  029C                     	;# 
   380  029C                     	;# 
   381  029D                     	;# 
   382  029E                     	;# 
   383  029E                     	;# 
   384  0311                     	;# 
   385  0311                     	;# 
   386  0312                     	;# 
   387  0313                     	;# 
   388  0318                     	;# 
   389  0318                     	;# 
   390  0319                     	;# 
   391  031A                     	;# 
   392  0394                     	;# 
   393  0395                     	;# 
   394  0396                     	;# 
   395  039A                     	;# 
   396  039C                     	;# 
   397  039D                     	;# 
   398  039E                     	;# 
   399  039F                     	;# 
   400  0415                     	;# 
   401  0416                     	;# 
   402  0417                     	;# 
   403  041C                     	;# 
   404  041D                     	;# 
   405  041E                     	;# 
   406  0FE4                     	;# 
   407  0FE5                     	;# 
   408  0FE6                     	;# 
   409  0FE7                     	;# 
   410  0FE8                     	;# 
   411  0FE9                     	;# 
   412  0FEA                     	;# 
   413  0FEB                     	;# 
   414  0FED                     	;# 
   415  0FEE                     	;# 
   416  0FEF                     	;# 
   417  0000                     	;# 
   418  0001                     	;# 
   419  0002                     	;# 
   420  0003                     	;# 
   421  0004                     	;# 
   422  0005                     	;# 
   423  0006                     	;# 
   424  0007                     	;# 
   425  0008                     	;# 
   426  0009                     	;# 
   427  000A                     	;# 
   428  000B                     	;# 
   429  000C                     	;# 
   430  000D                     	;# 
   431  0011                     	;# 
   432  0012                     	;# 
   433  0013                     	;# 
   434  0014                     	;# 
   435  0015                     	;# 
   436  0016                     	;# 
   437  0016                     	;# 
   438  0017                     	;# 
   439  0018                     	;# 
   440  0019                     	;# 
   441  001A                     	;# 
   442  001B                     	;# 
   443  001C                     	;# 
   444  001E                     	;# 
   445  001F                     	;# 
   446  008C                     	;# 
   447  008D                     	;# 
   448  0091                     	;# 
   449  0092                     	;# 
   450  0093                     	;# 
   451  0094                     	;# 
   452  0095                     	;# 
   453  0096                     	;# 
   454  0097                     	;# 
   455  0098                     	;# 
   456  0099                     	;# 
   457  009A                     	;# 
   458  009B                     	;# 
   459  009B                     	;# 
   460  009C                     	;# 
   461  009D                     	;# 
   462  009E                     	;# 
   463  010C                     	;# 
   464  010D                     	;# 
   465  0111                     	;# 
   466  0112                     	;# 
   467  0113                     	;# 
   468  0114                     	;# 
   469  0115                     	;# 
   470  0116                     	;# 
   471  0117                     	;# 
   472  0118                     	;# 
   473  0119                     	;# 
   474  011A                     	;# 
   475  011B                     	;# 
   476  011D                     	;# 
   477  011E                     	;# 
   478  018C                     	;# 
   479  018D                     	;# 
   480  0191                     	;# 
   481  0191                     	;# 
   482  0192                     	;# 
   483  0193                     	;# 
   484  0193                     	;# 
   485  0193                     	;# 
   486  0194                     	;# 
   487  0195                     	;# 
   488  0196                     	;# 
   489  0199                     	;# 
   490  019A                     	;# 
   491  019B                     	;# 
   492  019B                     	;# 
   493  019B                     	;# 
   494  019B                     	;# 
   495  019C                     	;# 
   496  019C                     	;# 
   497  019D                     	;# 
   498  019E                     	;# 
   499  019F                     	;# 
   500  020C                     	;# 
   501  020D                     	;# 
   502  0211                     	;# 
   503  0211                     	;# 
   504  0212                     	;# 
   505  0212                     	;# 
   506  0213                     	;# 
   507  0213                     	;# 
   508  0214                     	;# 
   509  0214                     	;# 
   510  0215                     	;# 
   511  0215                     	;# 
   512  0215                     	;# 
   513  0216                     	;# 
   514  0216                     	;# 
   515  0217                     	;# 
   516  0217                     	;# 
   517  0219                     	;# 
   518  021A                     	;# 
   519  021B                     	;# 
   520  021C                     	;# 
   521  021D                     	;# 
   522  021E                     	;# 
   523  021F                     	;# 
   524  0291                     	;# 
   525  0291                     	;# 
   526  0292                     	;# 
   527  0293                     	;# 
   528  0294                     	;# 
   529  0295                     	;# 
   530  0295                     	;# 
   531  0296                     	;# 
   532  0298                     	;# 
   533  0298                     	;# 
   534  0299                     	;# 
   535  029A                     	;# 
   536  029B                     	;# 
   537  029C                     	;# 
   538  029C                     	;# 
   539  029D                     	;# 
   540  029E                     	;# 
   541  029E                     	;# 
   542  0311                     	;# 
   543  0311                     	;# 
   544  0312                     	;# 
   545  0313                     	;# 
   546  0318                     	;# 
   547  0318                     	;# 
   548  0319                     	;# 
   549  031A                     	;# 
   550  0394                     	;# 
   551  0395                     	;# 
   552  0396                     	;# 
   553  039A                     	;# 
   554  039C                     	;# 
   555  039D                     	;# 
   556  039E                     	;# 
   557  039F                     	;# 
   558  0415                     	;# 
   559  0416                     	;# 
   560  0417                     	;# 
   561  041C                     	;# 
   562  041D                     	;# 
   563  041E                     	;# 
   564  0FE4                     	;# 
   565  0FE5                     	;# 
   566  0FE6                     	;# 
   567  0FE7                     	;# 
   568  0FE8                     	;# 
   569  0FE9                     	;# 
   570  0FEA                     	;# 
   571  0FEB                     	;# 
   572  0FED                     	;# 
   573  0FEE                     	;# 
   574  0FEF                     	;# 
   575  0000                     	;# 
   576  0001                     	;# 
   577  0002                     	;# 
   578  0003                     	;# 
   579  0004                     	;# 
   580  0005                     	;# 
   581  0006                     	;# 
   582  0007                     	;# 
   583  0008                     	;# 
   584  0009                     	;# 
   585  000A                     	;# 
   586  000B                     	;# 
   587  000C                     	;# 
   588  000D                     	;# 
   589  0011                     	;# 
   590  0012                     	;# 
   591  0013                     	;# 
   592  0014                     	;# 
   593  0015                     	;# 
   594  0016                     	;# 
   595  0016                     	;# 
   596  0017                     	;# 
   597  0018                     	;# 
   598  0019                     	;# 
   599  001A                     	;# 
   600  001B                     	;# 
   601  001C                     	;# 
   602  001E                     	;# 
   603  001F                     	;# 
   604  008C                     	;# 
   605  008D                     	;# 
   606  0091                     	;# 
   607  0092                     	;# 
   608  0093                     	;# 
   609  0094                     	;# 
   610  0095                     	;# 
   611  0096                     	;# 
   612  0097                     	;# 
   613  0098                     	;# 
   614  0099                     	;# 
   615  009A                     	;# 
   616  009B                     	;# 
   617  009B                     	;# 
   618  009C                     	;# 
   619  009D                     	;# 
   620  009E                     	;# 
   621  010C                     	;# 
   622  010D                     	;# 
   623  0111                     	;# 
   624  0112                     	;# 
   625  0113                     	;# 
   626  0114                     	;# 
   627  0115                     	;# 
   628  0116                     	;# 
   629  0117                     	;# 
   630  0118                     	;# 
   631  0119                     	;# 
   632  011A                     	;# 
   633  011B                     	;# 
   634  011D                     	;# 
   635  011E                     	;# 
   636  018C                     	;# 
   637  018D                     	;# 
   638  0191                     	;# 
   639  0191                     	;# 
   640  0192                     	;# 
   641  0193                     	;# 
   642  0193                     	;# 
   643  0193                     	;# 
   644  0194                     	;# 
   645  0195                     	;# 
   646  0196                     	;# 
   647  0199                     	;# 
   648  019A                     	;# 
   649  019B                     	;# 
   650  019B                     	;# 
   651  019B                     	;# 
   652  019B                     	;# 
   653  019C                     	;# 
   654  019C                     	;# 
   655  019D                     	;# 
   656  019E                     	;# 
   657  019F                     	;# 
   658  020C                     	;# 
   659  020D                     	;# 
   660  0211                     	;# 
   661  0211                     	;# 
   662  0212                     	;# 
   663  0212                     	;# 
   664  0213                     	;# 
   665  0213                     	;# 
   666  0214                     	;# 
   667  0214                     	;# 
   668  0215                     	;# 
   669  0215                     	;# 
   670  0215                     	;# 
   671  0216                     	;# 
   672  0216                     	;# 
   673  0217                     	;# 
   674  0217                     	;# 
   675  0219                     	;# 
   676  021A                     	;# 
   677  021B                     	;# 
   678  021C                     	;# 
   679  021D                     	;# 
   680  021E                     	;# 
   681  021F                     	;# 
   682  0291                     	;# 
   683  0291                     	;# 
   684  0292                     	;# 
   685  0293                     	;# 
   686  0294                     	;# 
   687  0295                     	;# 
   688  0295                     	;# 
   689  0296                     	;# 
   690  0298                     	;# 
   691  0298                     	;# 
   692  0299                     	;# 
   693  029A                     	;# 
   694  029B                     	;# 
   695  029C                     	;# 
   696  029C                     	;# 
   697  029D                     	;# 
   698  029E                     	;# 
   699  029E                     	;# 
   700  0311                     	;# 
   701  0311                     	;# 
   702  0312                     	;# 
   703  0313                     	;# 
   704  0318                     	;# 
   705  0318                     	;# 
   706  0319                     	;# 
   707  031A                     	;# 
   708  0394                     	;# 
   709  0395                     	;# 
   710  0396                     	;# 
   711  039A                     	;# 
   712  039C                     	;# 
   713  039D                     	;# 
   714  039E                     	;# 
   715  039F                     	;# 
   716  0415                     	;# 
   717  0416                     	;# 
   718  0417                     	;# 
   719  041C                     	;# 
   720  041D                     	;# 
   721  041E                     	;# 
   722  0FE4                     	;# 
   723  0FE5                     	;# 
   724  0FE6                     	;# 
   725  0FE7                     	;# 
   726  0FE8                     	;# 
   727  0FE9                     	;# 
   728  0FEA                     	;# 
   729  0FEB                     	;# 
   730  0FED                     	;# 
   731  0FEE                     	;# 
   732  0FEF                     	;# 
   733  0000                     	;# 
   734  0001                     	;# 
   735  0002                     	;# 
   736  0003                     	;# 
   737  0004                     	;# 
   738  0005                     	;# 
   739  0006                     	;# 
   740  0007                     	;# 
   741  0008                     	;# 
   742  0009                     	;# 
   743  000A                     	;# 
   744  000B                     	;# 
   745  000C                     	;# 
   746  000D                     	;# 
   747  0011                     	;# 
   748  0012                     	;# 
   749  0013                     	;# 
   750  0014                     	;# 
   751  0015                     	;# 
   752  0016                     	;# 
   753  0016                     	;# 
   754  0017                     	;# 
   755  0018                     	;# 
   756  0019                     	;# 
   757  001A                     	;# 
   758  001B                     	;# 
   759  001C                     	;# 
   760  001E                     	;# 
   761  001F                     	;# 
   762  008C                     	;# 
   763  008D                     	;# 
   764  0091                     	;# 
   765  0092                     	;# 
   766  0093                     	;# 
   767  0094                     	;# 
   768  0095                     	;# 
   769  0096                     	;# 
   770  0097                     	;# 
   771  0098                     	;# 
   772  0099                     	;# 
   773  009A                     	;# 
   774  009B                     	;# 
   775  009B                     	;# 
   776  009C                     	;# 
   777  009D                     	;# 
   778  009E                     	;# 
   779  010C                     	;# 
   780  010D                     	;# 
   781  0111                     	;# 
   782  0112                     	;# 
   783  0113                     	;# 
   784  0114                     	;# 
   785  0115                     	;# 
   786  0116                     	;# 
   787  0117                     	;# 
   788  0118                     	;# 
   789  0119                     	;# 
   790  011A                     	;# 
   791  011B                     	;# 
   792  011D                     	;# 
   793  011E                     	;# 
   794  018C                     	;# 
   795  018D                     	;# 
   796  0191                     	;# 
   797  0191                     	;# 
   798  0192                     	;# 
   799  0193                     	;# 
   800  0193                     	;# 
   801  0193                     	;# 
   802  0194                     	;# 
   803  0195                     	;# 
   804  0196                     	;# 
   805  0199                     	;# 
   806  019A                     	;# 
   807  019B                     	;# 
   808  019B                     	;# 
   809  019B                     	;# 
   810  019B                     	;# 
   811  019C                     	;# 
   812  019C                     	;# 
   813  019D                     	;# 
   814  019E                     	;# 
   815  019F                     	;# 
   816  020C                     	;# 
   817  020D                     	;# 
   818  0211                     	;# 
   819  0211                     	;# 
   820  0212                     	;# 
   821  0212                     	;# 
   822  0213                     	;# 
   823  0213                     	;# 
   824  0214                     	;# 
   825  0214                     	;# 
   826  0215                     	;# 
   827  0215                     	;# 
   828  0215                     	;# 
   829  0216                     	;# 
   830  0216                     	;# 
   831  0217                     	;# 
   832  0217                     	;# 
   833  0219                     	;# 
   834  021A                     	;# 
   835  021B                     	;# 
   836  021C                     	;# 
   837  021D                     	;# 
   838  021E                     	;# 
   839  021F                     	;# 
   840  0291                     	;# 
   841  0291                     	;# 
   842  0292                     	;# 
   843  0293                     	;# 
   844  0294                     	;# 
   845  0295                     	;# 
   846  0295                     	;# 
   847  0296                     	;# 
   848  0298                     	;# 
   849  0298                     	;# 
   850  0299                     	;# 
   851  029A                     	;# 
   852  029B                     	;# 
   853  029C                     	;# 
   854  029C                     	;# 
   855  029D                     	;# 
   856  029E                     	;# 
   857  029E                     	;# 
   858  0311                     	;# 
   859  0311                     	;# 
   860  0312                     	;# 
   861  0313                     	;# 
   862  0318                     	;# 
   863  0318                     	;# 
   864  0319                     	;# 
   865  031A                     	;# 
   866  0394                     	;# 
   867  0395                     	;# 
   868  0396                     	;# 
   869  039A                     	;# 
   870  039C                     	;# 
   871  039D                     	;# 
   872  039E                     	;# 
   873  039F                     	;# 
   874  0415                     	;# 
   875  0416                     	;# 
   876  0417                     	;# 
   877  041C                     	;# 
   878  041D                     	;# 
   879  041E                     	;# 
   880  0FE4                     	;# 
   881  0FE5                     	;# 
   882  0FE6                     	;# 
   883  0FE7                     	;# 
   884  0FE8                     	;# 
   885  0FE9                     	;# 
   886  0FEA                     	;# 
   887  0FEB                     	;# 
   888  0FED                     	;# 
   889  0FEE                     	;# 
   890  0FEF                     	;# 
   891  0000                     	;# 
   892  0001                     	;# 
   893  0002                     	;# 
   894  0003                     	;# 
   895  0004                     	;# 
   896  0005                     	;# 
   897  0006                     	;# 
   898  0007                     	;# 
   899  0008                     	;# 
   900  0009                     	;# 
   901  000A                     	;# 
   902  000B                     	;# 
   903  000C                     	;# 
   904  000D                     	;# 
   905  0011                     	;# 
   906  0012                     	;# 
   907  0013                     	;# 
   908  0014                     	;# 
   909  0015                     	;# 
   910  0016                     	;# 
   911  0016                     	;# 
   912  0017                     	;# 
   913  0018                     	;# 
   914  0019                     	;# 
   915  001A                     	;# 
   916  001B                     	;# 
   917  001C                     	;# 
   918  001E                     	;# 
   919  001F                     	;# 
   920  008C                     	;# 
   921  008D                     	;# 
   922  0091                     	;# 
   923  0092                     	;# 
   924  0093                     	;# 
   925  0094                     	;# 
   926  0095                     	;# 
   927  0096                     	;# 
   928  0097                     	;# 
   929  0098                     	;# 
   930  0099                     	;# 
   931  009A                     	;# 
   932  009B                     	;# 
   933  009B                     	;# 
   934  009C                     	;# 
   935  009D                     	;# 
   936  009E                     	;# 
   937  010C                     	;# 
   938  010D                     	;# 
   939  0111                     	;# 
   940  0112                     	;# 
   941  0113                     	;# 
   942  0114                     	;# 
   943  0115                     	;# 
   944  0116                     	;# 
   945  0117                     	;# 
   946  0118                     	;# 
   947  0119                     	;# 
   948  011A                     	;# 
   949  011B                     	;# 
   950  011D                     	;# 
   951  011E                     	;# 
   952  018C                     	;# 
   953  018D                     	;# 
   954  0191                     	;# 
   955  0191                     	;# 
   956  0192                     	;# 
   957  0193                     	;# 
   958  0193                     	;# 
   959  0193                     	;# 
   960  0194                     	;# 
   961  0195                     	;# 
   962  0196                     	;# 
   963  0199                     	;# 
   964  019A                     	;# 
   965  019B                     	;# 
   966  019B                     	;# 
   967  019B                     	;# 
   968  019B                     	;# 
   969  019C                     	;# 
   970  019C                     	;# 
   971  019D                     	;# 
   972  019E                     	;# 
   973  019F                     	;# 
   974  020C                     	;# 
   975  020D                     	;# 
   976  0211                     	;# 
   977  0211                     	;# 
   978  0212                     	;# 
   979  0212                     	;# 
   980  0213                     	;# 
   981  0213                     	;# 
   982  0214                     	;# 
   983  0214                     	;# 
   984  0215                     	;# 
   985  0215                     	;# 
   986  0215                     	;# 
   987  0216                     	;# 
   988  0216                     	;# 
   989  0217                     	;# 
   990  0217                     	;# 
   991  0219                     	;# 
   992  021A                     	;# 
   993  021B                     	;# 
   994  021C                     	;# 
   995  021D                     	;# 
   996  021E                     	;# 
   997  021F                     	;# 
   998  0291                     	;# 
   999  0291                     	;# 
  1000  0292                     	;# 
  1001  0293                     	;# 
  1002  0294                     	;# 
  1003  0295                     	;# 
  1004  0295                     	;# 
  1005  0296                     	;# 
  1006  0298                     	;# 
  1007  0298                     	;# 
  1008  0299                     	;# 
  1009  029A                     	;# 
  1010  029B                     	;# 
  1011  029C                     	;# 
  1012  029C                     	;# 
  1013  029D                     	;# 
  1014  029E                     	;# 
  1015  029E                     	;# 
  1016  0311                     	;# 
  1017  0311                     	;# 
  1018  0312                     	;# 
  1019  0313                     	;# 
  1020  0318                     	;# 
  1021  0318                     	;# 
  1022  0319                     	;# 
  1023  031A                     	;# 
  1024  0394                     	;# 
  1025  0395                     	;# 
  1026  0396                     	;# 
  1027  039A                     	;# 
  1028  039C                     	;# 
  1029  039D                     	;# 
  1030  039E                     	;# 
  1031  039F                     	;# 
  1032  0415                     	;# 
  1033  0416                     	;# 
  1034  0417                     	;# 
  1035  041C                     	;# 
  1036  041D                     	;# 
  1037  041E                     	;# 
  1038  0FE4                     	;# 
  1039  0FE5                     	;# 
  1040  0FE6                     	;# 
  1041  0FE7                     	;# 
  1042  0FE8                     	;# 
  1043  0FE9                     	;# 
  1044  0FEA                     	;# 
  1045  0FEB                     	;# 
  1046  0FED                     	;# 
  1047  0FEE                     	;# 
  1048  0FEF                     	;# 
  1049  0000                     	;# 
  1050  0001                     	;# 
  1051  0002                     	;# 
  1052  0003                     	;# 
  1053  0004                     	;# 
  1054  0005                     	;# 
  1055  0006                     	;# 
  1056  0007                     	;# 
  1057  0008                     	;# 
  1058  0009                     	;# 
  1059  000A                     	;# 
  1060  000B                     	;# 
  1061  000C                     	;# 
  1062  000D                     	;# 
  1063  0011                     	;# 
  1064  0012                     	;# 
  1065  0013                     	;# 
  1066  0014                     	;# 
  1067  0015                     	;# 
  1068  0016                     	;# 
  1069  0016                     	;# 
  1070  0017                     	;# 
  1071  0018                     	;# 
  1072  0019                     	;# 
  1073  001A                     	;# 
  1074  001B                     	;# 
  1075  001C                     	;# 
  1076  001E                     	;# 
  1077  001F                     	;# 
  1078  008C                     	;# 
  1079  008D                     	;# 
  1080  0091                     	;# 
  1081  0092                     	;# 
  1082  0093                     	;# 
  1083  0094                     	;# 
  1084  0095                     	;# 
  1085  0096                     	;# 
  1086  0097                     	;# 
  1087  0098                     	;# 
  1088  0099                     	;# 
  1089  009A                     	;# 
  1090  009B                     	;# 
  1091  009B                     	;# 
  1092  009C                     	;# 
  1093  009D                     	;# 
  1094  009E                     	;# 
  1095  010C                     	;# 
  1096  010D                     	;# 
  1097  0111                     	;# 
  1098  0112                     	;# 
  1099  0113                     	;# 
  1100  0114                     	;# 
  1101  0115                     	;# 
  1102  0116                     	;# 
  1103  0117                     	;# 
  1104  0118                     	;# 
  1105  0119                     	;# 
  1106  011A                     	;# 
  1107  011B                     	;# 
  1108  011D                     	;# 
  1109  011E                     	;# 
  1110  018C                     	;# 
  1111  018D                     	;# 
  1112  0191                     	;# 
  1113  0191                     	;# 
  1114  0192                     	;# 
  1115  0193                     	;# 
  1116  0193                     	;# 
  1117  0193                     	;# 
  1118  0194                     	;# 
  1119  0195                     	;# 
  1120  0196                     	;# 
  1121  0199                     	;# 
  1122  019A                     	;# 
  1123  019B                     	;# 
  1124  019B                     	;# 
  1125  019B                     	;# 
  1126  019B                     	;# 
  1127  019C                     	;# 
  1128  019C                     	;# 
  1129  019D                     	;# 
  1130  019E                     	;# 
  1131  019F                     	;# 
  1132  020C                     	;# 
  1133  020D                     	;# 
  1134  0211                     	;# 
  1135  0211                     	;# 
  1136  0212                     	;# 
  1137  0212                     	;# 
  1138  0213                     	;# 
  1139  0213                     	;# 
  1140  0214                     	;# 
  1141  0214                     	;# 
  1142  0215                     	;# 
  1143  0215                     	;# 
  1144  0215                     	;# 
  1145  0216                     	;# 
  1146  0216                     	;# 
  1147  0217                     	;# 
  1148  0217                     	;# 
  1149  0219                     	;# 
  1150  021A                     	;# 
  1151  021B                     	;# 
  1152  021C                     	;# 
  1153  021D                     	;# 
  1154  021E                     	;# 
  1155  021F                     	;# 
  1156  0291                     	;# 
  1157  0291                     	;# 
  1158  0292                     	;# 
  1159  0293                     	;# 
  1160  0294                     	;# 
  1161  0295                     	;# 
  1162  0295                     	;# 
  1163  0296                     	;# 
  1164  0298                     	;# 
  1165  0298                     	;# 
  1166  0299                     	;# 
  1167  029A                     	;# 
  1168  029B                     	;# 
  1169  029C                     	;# 
  1170  029C                     	;# 
  1171  029D                     	;# 
  1172  029E                     	;# 
  1173  029E                     	;# 
  1174  0311                     	;# 
  1175  0311                     	;# 
  1176  0312                     	;# 
  1177  0313                     	;# 
  1178  0318                     	;# 
  1179  0318                     	;# 
  1180  0319                     	;# 
  1181  031A                     	;# 
  1182  0394                     	;# 
  1183  0395                     	;# 
  1184  0396                     	;# 
  1185  039A                     	;# 
  1186  039C                     	;# 
  1187  039D                     	;# 
  1188  039E                     	;# 
  1189  039F                     	;# 
  1190  0415                     	;# 
  1191  0416                     	;# 
  1192  0417                     	;# 
  1193  041C                     	;# 
  1194  041D                     	;# 
  1195  041E                     	;# 
  1196  0FE4                     	;# 
  1197  0FE5                     	;# 
  1198  0FE6                     	;# 
  1199  0FE7                     	;# 
  1200  0FE8                     	;# 
  1201  0FE9                     	;# 
  1202  0FEA                     	;# 
  1203  0FEB                     	;# 
  1204  0FED                     	;# 
  1205  0FEE                     	;# 
  1206  0FEF                     	;# 
  1207  0000                     	;# 
  1208  0001                     	;# 
  1209  0002                     	;# 
  1210  0003                     	;# 
  1211  0004                     	;# 
  1212  0005                     	;# 
  1213  0006                     	;# 
  1214  0007                     	;# 
  1215  0008                     	;# 
  1216  0009                     	;# 
  1217  000A                     	;# 
  1218  000B                     	;# 
  1219  000C                     	;# 
  1220  000D                     	;# 
  1221  0011                     	;# 
  1222  0012                     	;# 
  1223  0013                     	;# 
  1224  0014                     	;# 
  1225  0015                     	;# 
  1226  0016                     	;# 
  1227  0016                     	;# 
  1228  0017                     	;# 
  1229  0018                     	;# 
  1230  0019                     	;# 
  1231  001A                     	;# 
  1232  001B                     	;# 
  1233  001C                     	;# 
  1234  001E                     	;# 
  1235  001F                     	;# 
  1236  008C                     	;# 
  1237  008D                     	;# 
  1238  0091                     	;# 
  1239  0092                     	;# 
  1240  0093                     	;# 
  1241  0094                     	;# 
  1242  0095                     	;# 
  1243  0096                     	;# 
  1244  0097                     	;# 
  1245  0098                     	;# 
  1246  0099                     	;# 
  1247  009A                     	;# 
  1248  009B                     	;# 
  1249  009B                     	;# 
  1250  009C                     	;# 
  1251  009D                     	;# 
  1252  009E                     	;# 
  1253  010C                     	;# 
  1254  010D                     	;# 
  1255  0111                     	;# 
  1256  0112                     	;# 
  1257  0113                     	;# 
  1258  0114                     	;# 
  1259  0115                     	;# 
  1260  0116                     	;# 
  1261  0117                     	;# 
  1262  0118                     	;# 
  1263  0119                     	;# 
  1264  011A                     	;# 
  1265  011B                     	;# 
  1266  011D                     	;# 
  1267  011E                     	;# 
  1268  018C                     	;# 
  1269  018D                     	;# 
  1270  0191                     	;# 
  1271  0191                     	;# 
  1272  0192                     	;# 
  1273  0193                     	;# 
  1274  0193                     	;# 
  1275  0193                     	;# 
  1276  0194                     	;# 
  1277  0195                     	;# 
  1278  0196                     	;# 
  1279  0199                     	;# 
  1280  019A                     	;# 
  1281  019B                     	;# 
  1282  019B                     	;# 
  1283  019B                     	;# 
  1284  019B                     	;# 
  1285  019C                     	;# 
  1286  019C                     	;# 
  1287  019D                     	;# 
  1288  019E                     	;# 
  1289  019F                     	;# 
  1290  020C                     	;# 
  1291  020D                     	;# 
  1292  0211                     	;# 
  1293  0211                     	;# 
  1294  0212                     	;# 
  1295  0212                     	;# 
  1296  0213                     	;# 
  1297  0213                     	;# 
  1298  0214                     	;# 
  1299  0214                     	;# 
  1300  0215                     	;# 
  1301  0215                     	;# 
  1302  0215                     	;# 
  1303  0216                     	;# 
  1304  0216                     	;# 
  1305  0217                     	;# 
  1306  0217                     	;# 
  1307  0219                     	;# 
  1308  021A                     	;# 
  1309  021B                     	;# 
  1310  021C                     	;# 
  1311  021D                     	;# 
  1312  021E                     	;# 
  1313  021F                     	;# 
  1314  0291                     	;# 
  1315  0291                     	;# 
  1316  0292                     	;# 
  1317  0293                     	;# 
  1318  0294                     	;# 
  1319  0295                     	;# 
  1320  0295                     	;# 
  1321  0296                     	;# 
  1322  0298                     	;# 
  1323  0298                     	;# 
  1324  0299                     	;# 
  1325  029A                     	;# 
  1326  029B                     	;# 
  1327  029C                     	;# 
  1328  029C                     	;# 
  1329  029D                     	;# 
  1330  029E                     	;# 
  1331  029E                     	;# 
  1332  0311                     	;# 
  1333  0311                     	;# 
  1334  0312                     	;# 
  1335  0313                     	;# 
  1336  0318                     	;# 
  1337  0318                     	;# 
  1338  0319                     	;# 
  1339  031A                     	;# 
  1340  0394                     	;# 
  1341  0395                     	;# 
  1342  0396                     	;# 
  1343  039A                     	;# 
  1344  039C                     	;# 
  1345  039D                     	;# 
  1346  039E                     	;# 
  1347  039F                     	;# 
  1348  0415                     	;# 
  1349  0416                     	;# 
  1350  0417                     	;# 
  1351  041C                     	;# 
  1352  041D                     	;# 
  1353  041E                     	;# 
  1354  0FE4                     	;# 
  1355  0FE5                     	;# 
  1356  0FE6                     	;# 
  1357  0FE7                     	;# 
  1358  0FE8                     	;# 
  1359  0FE9                     	;# 
  1360  0FEA                     	;# 
  1361  0FEB                     	;# 
  1362  0FED                     	;# 
  1363  0FEE                     	;# 
  1364  0FEF                     	;# 
  1365  0000                     	;# 
  1366  0001                     	;# 
  1367  0002                     	;# 
  1368  0003                     	;# 
  1369  0004                     	;# 
  1370  0005                     	;# 
  1371  0006                     	;# 
  1372  0007                     	;# 
  1373  0008                     	;# 
  1374  0009                     	;# 
  1375  000A                     	;# 
  1376  000B                     	;# 
  1377  000C                     	;# 
  1378  000D                     	;# 
  1379  0011                     	;# 
  1380  0012                     	;# 
  1381  0013                     	;# 
  1382  0014                     	;# 
  1383  0015                     	;# 
  1384  0016                     	;# 
  1385  0016                     	;# 
  1386  0017                     	;# 
  1387  0018                     	;# 
  1388  0019                     	;# 
  1389  001A                     	;# 
  1390  001B                     	;# 
  1391  001C                     	;# 
  1392  001E                     	;# 
  1393  001F                     	;# 
  1394  008C                     	;# 
  1395  008D                     	;# 
  1396  0091                     	;# 
  1397  0092                     	;# 
  1398  0093                     	;# 
  1399  0094                     	;# 
  1400  0095                     	;# 
  1401  0096                     	;# 
  1402  0097                     	;# 
  1403  0098                     	;# 
  1404  0099                     	;# 
  1405  009A                     	;# 
  1406  009B                     	;# 
  1407  009B                     	;# 
  1408  009C                     	;# 
  1409  009D                     	;# 
  1410  009E                     	;# 
  1411  010C                     	;# 
  1412  010D                     	;# 
  1413  0111                     	;# 
  1414  0112                     	;# 
  1415  0113                     	;# 
  1416  0114                     	;# 
  1417  0115                     	;# 
  1418  0116                     	;# 
  1419  0117                     	;# 
  1420  0118                     	;# 
  1421  0119                     	;# 
  1422  011A                     	;# 
  1423  011B                     	;# 
  1424  011D                     	;# 
  1425  011E                     	;# 
  1426  018C                     	;# 
  1427  018D                     	;# 
  1428  0191                     	;# 
  1429  0191                     	;# 
  1430  0192                     	;# 
  1431  0193                     	;# 
  1432  0193                     	;# 
  1433  0193                     	;# 
  1434  0194                     	;# 
  1435  0195                     	;# 
  1436  0196                     	;# 
  1437  0199                     	;# 
  1438  019A                     	;# 
  1439  019B                     	;# 
  1440  019B                     	;# 
  1441  019B                     	;# 
  1442  019B                     	;# 
  1443  019C                     	;# 
  1444  019C                     	;# 
  1445  019D                     	;# 
  1446  019E                     	;# 
  1447  019F                     	;# 
  1448  020C                     	;# 
  1449  020D                     	;# 
  1450  0211                     	;# 
  1451  0211                     	;# 
  1452  0212                     	;# 
  1453  0212                     	;# 
  1454  0213                     	;# 
  1455  0213                     	;# 
  1456  0214                     	;# 
  1457  0214                     	;# 
  1458  0215                     	;# 
  1459  0215                     	;# 
  1460  0215                     	;# 
  1461  0216                     	;# 
  1462  0216                     	;# 
  1463  0217                     	;# 
  1464  0217                     	;# 
  1465  0219                     	;# 
  1466  021A                     	;# 
  1467  021B                     	;# 
  1468  021C                     	;# 
  1469  021D                     	;# 
  1470  021E                     	;# 
  1471  021F                     	;# 
  1472  0291                     	;# 
  1473  0291                     	;# 
  1474  0292                     	;# 
  1475  0293                     	;# 
  1476  0294                     	;# 
  1477  0295                     	;# 
  1478  0295                     	;# 
  1479  0296                     	;# 
  1480  0298                     	;# 
  1481  0298                     	;# 
  1482  0299                     	;# 
  1483  029A                     	;# 
  1484  029B                     	;# 
  1485  029C                     	;# 
  1486  029C                     	;# 
  1487  029D                     	;# 
  1488  029E                     	;# 
  1489  029E                     	;# 
  1490  0311                     	;# 
  1491  0311                     	;# 
  1492  0312                     	;# 
  1493  0313                     	;# 
  1494  0318                     	;# 
  1495  0318                     	;# 
  1496  0319                     	;# 
  1497  031A                     	;# 
  1498  0394                     	;# 
  1499  0395                     	;# 
  1500  0396                     	;# 
  1501  039A                     	;# 
  1502  039C                     	;# 
  1503  039D                     	;# 
  1504  039E                     	;# 
  1505  039F                     	;# 
  1506  0415                     	;# 
  1507  0416                     	;# 
  1508  0417                     	;# 
  1509  041C                     	;# 
  1510  041D                     	;# 
  1511  041E                     	;# 
  1512  0FE4                     	;# 
  1513  0FE5                     	;# 
  1514  0FE6                     	;# 
  1515  0FE7                     	;# 
  1516  0FE8                     	;# 
  1517  0FE9                     	;# 
  1518  0FEA                     	;# 
  1519  0FEB                     	;# 
  1520  0FED                     	;# 
  1521  0FEE                     	;# 
  1522  0FEF                     	;# 
  1523  0000                     	;# 
  1524  0001                     	;# 
  1525  0002                     	;# 
  1526  0003                     	;# 
  1527  0004                     	;# 
  1528  0005                     	;# 
  1529  0006                     	;# 
  1530  0007                     	;# 
  1531  0008                     	;# 
  1532  0009                     	;# 
  1533  000A                     	;# 
  1534  000B                     	;# 
  1535  000C                     	;# 
  1536  000D                     	;# 
  1537  0011                     	;# 
  1538  0012                     	;# 
  1539  0013                     	;# 
  1540  0014                     	;# 
  1541  0015                     	;# 
  1542  0016                     	;# 
  1543  0016                     	;# 
  1544  0017                     	;# 
  1545  0018                     	;# 
  1546  0019                     	;# 
  1547  001A                     	;# 
  1548  001B                     	;# 
  1549  001C                     	;# 
  1550  001E                     	;# 
  1551  001F                     	;# 
  1552  008C                     	;# 
  1553  008D                     	;# 
  1554  0091                     	;# 
  1555  0092                     	;# 
  1556  0093                     	;# 
  1557  0094                     	;# 
  1558  0095                     	;# 
  1559  0096                     	;# 
  1560  0097                     	;# 
  1561  0098                     	;# 
  1562  0099                     	;# 
  1563  009A                     	;# 
  1564  009B                     	;# 
  1565  009B                     	;# 
  1566  009C                     	;# 
  1567  009D                     	;# 
  1568  009E                     	;# 
  1569  010C                     	;# 
  1570  010D                     	;# 
  1571  0111                     	;# 
  1572  0112                     	;# 
  1573  0113                     	;# 
  1574  0114                     	;# 
  1575  0115                     	;# 
  1576  0116                     	;# 
  1577  0117                     	;# 
  1578  0118                     	;# 
  1579  0119                     	;# 
  1580  011A                     	;# 
  1581  011B                     	;# 
  1582  011D                     	;# 
  1583  011E                     	;# 
  1584  018C                     	;# 
  1585  018D                     	;# 
  1586  0191                     	;# 
  1587  0191                     	;# 
  1588  0192                     	;# 
  1589  0193                     	;# 
  1590  0193                     	;# 
  1591  0193                     	;# 
  1592  0194                     	;# 
  1593  0195                     	;# 
  1594  0196                     	;# 
  1595  0199                     	;# 
  1596  019A                     	;# 
  1597  019B                     	;# 
  1598  019B                     	;# 
  1599  019B                     	;# 
  1600  019B                     	;# 
  1601  019C                     	;# 
  1602  019C                     	;# 
  1603  019D                     	;# 
  1604  019E                     	;# 
  1605  019F                     	;# 
  1606  020C                     	;# 
  1607  020D                     	;# 
  1608  0211                     	;# 
  1609  0211                     	;# 
  1610  0212                     	;# 
  1611  0212                     	;# 
  1612  0213                     	;# 
  1613  0213                     	;# 
  1614  0214                     	;# 
  1615  0214                     	;# 
  1616  0215                     	;# 
  1617  0215                     	;# 
  1618  0215                     	;# 
  1619  0216                     	;# 
  1620  0216                     	;# 
  1621  0217                     	;# 
  1622  0217                     	;# 
  1623  0219                     	;# 
  1624  021A                     	;# 
  1625  021B                     	;# 
  1626  021C                     	;# 
  1627  021D                     	;# 
  1628  021E                     	;# 
  1629  021F                     	;# 
  1630  0291                     	;# 
  1631  0291                     	;# 
  1632  0292                     	;# 
  1633  0293                     	;# 
  1634  0294                     	;# 
  1635  0295                     	;# 
  1636  0295                     	;# 
  1637  0296                     	;# 
  1638  0298                     	;# 
  1639  0298                     	;# 
  1640  0299                     	;# 
  1641  029A                     	;# 
  1642  029B                     	;# 
  1643  029C                     	;# 
  1644  029C                     	;# 
  1645  029D                     	;# 
  1646  029E                     	;# 
  1647  029E                     	;# 
  1648  0311                     	;# 
  1649  0311                     	;# 
  1650  0312                     	;# 
  1651  0313                     	;# 
  1652  0318                     	;# 
  1653  0318                     	;# 
  1654  0319                     	;# 
  1655  031A                     	;# 
  1656  0394                     	;# 
  1657  0395                     	;# 
  1658  0396                     	;# 
  1659  039A                     	;# 
  1660  039C                     	;# 
  1661  039D                     	;# 
  1662  039E                     	;# 
  1663  039F                     	;# 
  1664  0415                     	;# 
  1665  0416                     	;# 
  1666  0417                     	;# 
  1667  041C                     	;# 
  1668  041D                     	;# 
  1669  041E                     	;# 
  1670  0FE4                     	;# 
  1671  0FE5                     	;# 
  1672  0FE6                     	;# 
  1673  0FE7                     	;# 
  1674  0FE8                     	;# 
  1675  0FE9                     	;# 
  1676  0FEA                     	;# 
  1677  0FEB                     	;# 
  1678  0FED                     	;# 
  1679  0FEE                     	;# 
  1680  0FEF                     	;# 
  1681  0000                     	;# 
  1682  0001                     	;# 
  1683  0002                     	;# 
  1684  0003                     	;# 
  1685  0004                     	;# 
  1686  0005                     	;# 
  1687  0006                     	;# 
  1688  0007                     	;# 
  1689  0008                     	;# 
  1690  0009                     	;# 
  1691  000A                     	;# 
  1692  000B                     	;# 
  1693  000C                     	;# 
  1694  000D                     	;# 
  1695  0011                     	;# 
  1696  0012                     	;# 
  1697  0013                     	;# 
  1698  0014                     	;# 
  1699  0015                     	;# 
  1700  0016                     	;# 
  1701  0016                     	;# 
  1702  0017                     	;# 
  1703  0018                     	;# 
  1704  0019                     	;# 
  1705  001A                     	;# 
  1706  001B                     	;# 
  1707  001C                     	;# 
  1708  001E                     	;# 
  1709  001F                     	;# 
  1710  008C                     	;# 
  1711  008D                     	;# 
  1712  0091                     	;# 
  1713  0092                     	;# 
  1714  0093                     	;# 
  1715  0094                     	;# 
  1716  0095                     	;# 
  1717  0096                     	;# 
  1718  0097                     	;# 
  1719  0098                     	;# 
  1720  0099                     	;# 
  1721  009A                     	;# 
  1722  009B                     	;# 
  1723  009B                     	;# 
  1724  009C                     	;# 
  1725  009D                     	;# 
  1726  009E                     	;# 
  1727  010C                     	;# 
  1728  010D                     	;# 
  1729  0111                     	;# 
  1730  0112                     	;# 
  1731  0113                     	;# 
  1732  0114                     	;# 
  1733  0115                     	;# 
  1734  0116                     	;# 
  1735  0117                     	;# 
  1736  0118                     	;# 
  1737  0119                     	;# 
  1738  011A                     	;# 
  1739  011B                     	;# 
  1740  011D                     	;# 
  1741  011E                     	;# 
  1742  018C                     	;# 
  1743  018D                     	;# 
  1744  0191                     	;# 
  1745  0191                     	;# 
  1746  0192                     	;# 
  1747  0193                     	;# 
  1748  0193                     	;# 
  1749  0193                     	;# 
  1750  0194                     	;# 
  1751  0195                     	;# 
  1752  0196                     	;# 
  1753  0199                     	;# 
  1754  019A                     	;# 
  1755  019B                     	;# 
  1756  019B                     	;# 
  1757  019B                     	;# 
  1758  019B                     	;# 
  1759  019C                     	;# 
  1760  019C                     	;# 
  1761  019D                     	;# 
  1762  019E                     	;# 
  1763  019F                     	;# 
  1764  020C                     	;# 
  1765  020D                     	;# 
  1766  0211                     	;# 
  1767  0211                     	;# 
  1768  0212                     	;# 
  1769  0212                     	;# 
  1770  0213                     	;# 
  1771  0213                     	;# 
  1772  0214                     	;# 
  1773  0214                     	;# 
  1774  0215                     	;# 
  1775  0215                     	;# 
  1776  0215                     	;# 
  1777  0216                     	;# 
  1778  0216                     	;# 
  1779  0217                     	;# 
  1780  0217                     	;# 
  1781  0219                     	;# 
  1782  021A                     	;# 
  1783  021B                     	;# 
  1784  021C                     	;# 
  1785  021D                     	;# 
  1786  021E                     	;# 
  1787  021F                     	;# 
  1788  0291                     	;# 
  1789  0291                     	;# 
  1790  0292                     	;# 
  1791  0293                     	;# 
  1792  0294                     	;# 
  1793  0295                     	;# 
  1794  0295                     	;# 
  1795  0296                     	;# 
  1796  0298                     	;# 
  1797  0298                     	;# 
  1798  0299                     	;# 
  1799  029A                     	;# 
  1800  029B                     	;# 
  1801  029C                     	;# 
  1802  029C                     	;# 
  1803  029D                     	;# 
  1804  029E                     	;# 
  1805  029E                     	;# 
  1806  0311                     	;# 
  1807  0311                     	;# 
  1808  0312                     	;# 
  1809  0313                     	;# 
  1810  0318                     	;# 
  1811  0318                     	;# 
  1812  0319                     	;# 
  1813  031A                     	;# 
  1814  0394                     	;# 
  1815  0395                     	;# 
  1816  0396                     	;# 
  1817  039A                     	;# 
  1818  039C                     	;# 
  1819  039D                     	;# 
  1820  039E                     	;# 
  1821  039F                     	;# 
  1822  0415                     	;# 
  1823  0416                     	;# 
  1824  0417                     	;# 
  1825  041C                     	;# 
  1826  041D                     	;# 
  1827  041E                     	;# 
  1828  0FE4                     	;# 
  1829  0FE5                     	;# 
  1830  0FE6                     	;# 
  1831  0FE7                     	;# 
  1832  0FE8                     	;# 
  1833  0FE9                     	;# 
  1834  0FEA                     	;# 
  1835  0FEB                     	;# 
  1836  0FED                     	;# 
  1837  0FEE                     	;# 
  1838  0FEF                     	;# 
  1839                           
  1840                           	psect	idataBANK1
  1841  0E92                     __pidataBANK1:	
  1842                           
  1843                           ;initializer for _DAC_VoltageTable
  1844  0E92  3499               	retlw	low (STR_8| (0+32768))
  1845  0E93  3483               	retlw	high (STR_8| (0+32768))
  1846  0E94  3449               	retlw	low (STR_9| (0+32768))
  1847  0E95  3483               	retlw	high (STR_9| (0+32768))
  1848  0E96  349E               	retlw	low (STR_10| (0+32768))
  1849  0E97  3483               	retlw	high (STR_10| (0+32768))
  1850  0E98  344F               	retlw	low (STR_11| (0+32768))
  1851  0E99  3483               	retlw	high (STR_11| (0+32768))
  1852  0E9A  34A3               	retlw	low (STR_12| (0+32768))
  1853  0E9B  3483               	retlw	high (STR_12| (0+32768))
  1854  0E9C  3455               	retlw	low (STR_13| (0+32768))
  1855  0E9D  3483               	retlw	high (STR_13| (0+32768))
  1856  0E9E  34A8               	retlw	low (STR_14| (0+32768))
  1857  0E9F  3483               	retlw	high (STR_14| (0+32768))
  1858  0EA0  345B               	retlw	low (STR_15| (0+32768))
  1859  0EA1  3483               	retlw	high (STR_15| (0+32768))
  1860  0EA2  34AD               	retlw	low (STR_16| (0+32768))
  1861  0EA3  3483               	retlw	high (STR_16| (0+32768))
  1862  0EA4  3461               	retlw	low (STR_17| (0+32768))
  1863  0EA5  3483               	retlw	high (STR_17| (0+32768))
  1864  0EA6  348A               	retlw	low (STR_18| (0+32768))
  1865  0EA7  3483               	retlw	high (STR_18| (0+32768))
  1866  0EA8  343D               	retlw	low (STR_19| (0+32768))
  1867  0EA9  3483               	retlw	high (STR_19| (0+32768))
  1868  0EAA  348F               	retlw	low (STR_20| (0+32768))
  1869  0EAB  3483               	retlw	high (STR_20| (0+32768))
  1870  0EAC  3443               	retlw	low (STR_21| (0+32768))
  1871  0EAD  3483               	retlw	high (STR_21| (0+32768))
  1872  0EAE  3494               	retlw	low (STR_22| (0+32768))
  1873  0EAF  3483               	retlw	high (STR_22| (0+32768))
  1874                           
  1875                           	psect	idataBANK2
  1876  07AB                     __pidataBANK2:	
  1877                           
  1878                           ;initializer for _H7826_01_Gain
  1879  07AB  3467               	retlw	low (STR_38| (0+32768))
  1880  07AC  3483               	retlw	high (STR_38| (0+32768))
  1881  07AD  346C               	retlw	low (STR_39| (0+32768))
  1882  07AE  3483               	retlw	high (STR_39| (0+32768))
  1883  07AF  3480               	retlw	low (STR_40| (0+32768))
  1884  07B0  3483               	retlw	high (STR_40| (0+32768))
  1885  07B1  3471               	retlw	low (STR_41| (0+32768))
  1886  07B2  3483               	retlw	high (STR_41| (0+32768))
  1887  07B3  341F               	retlw	low (STR_42| (0+32768))
  1888  07B4  3483               	retlw	high (STR_42| (0+32768))
  1889  07B5  3425               	retlw	low (STR_43| (0+32768))
  1890  07B6  3483               	retlw	high (STR_43| (0+32768))
  1891  07B7  342B               	retlw	low (STR_44| (0+32768))
  1892  07B8  3483               	retlw	high (STR_44| (0+32768))
  1893  07B9  3413               	retlw	low (STR_45| (0+32768))
  1894  07BA  3483               	retlw	high (STR_45| (0+32768))
  1895  07BB  34CE               	retlw	low (STR_46| (0+32768))
  1896  07BC  3482               	retlw	high (STR_46| (0+32768))
  1897  07BD  34F8               	retlw	low (STR_47| (0+32768))
  1898  07BE  3482               	retlw	high (STR_47| (0+32768))
  1899  07BF  34D5               	retlw	low (STR_48| (0+32768))
  1900  07C0  3482               	retlw	high (STR_48| (0+32768))
  1901  07C1  34DC               	retlw	low (STR_49| (0+32768))
  1902  07C2  3482               	retlw	high (STR_49| (0+32768))
  1903  07C3  3406               	retlw	low (STR_50| (0+32768))
  1904  07C4  3483               	retlw	high (STR_50| (0+32768))
  1905  07C5  34C0               	retlw	low (STR_51| (0+32768))
  1906  07C6  3482               	retlw	high (STR_51| (0+32768))
  1907  07C7  34C7               	retlw	low (STR_52| (0+32768))
  1908  07C8  3482               	retlw	high (STR_52| (0+32768))
  1909                           
  1910                           ;initializer for _H7826_Gain
  1911  07C9  347B               	retlw	low (STR_23| (0+32768))
  1912  07CA  3483               	retlw	high (STR_23| (0+32768))
  1913  07CB  3476               	retlw	low (STR_24| (0+32768))
  1914  07CC  3483               	retlw	high (STR_24| (0+32768))
  1915  07CD  3485               	retlw	low (STR_25| (0+32768))
  1916  07CE  3483               	retlw	high (STR_25| (0+32768))
  1917  07CF  3437               	retlw	low (STR_26| (0+32768))
  1918  07D0  3483               	retlw	high (STR_26| (0+32768))
  1919  07D1  340D               	retlw	low (STR_27| (0+32768))
  1920  07D2  3483               	retlw	high (STR_27| (0+32768))
  1921  07D3  3419               	retlw	low (STR_28| (0+32768))
  1922  07D4  3483               	retlw	high (STR_28| (0+32768))
  1923  07D5  3431               	retlw	low (STR_29| (0+32768))
  1924  07D6  3483               	retlw	high (STR_29| (0+32768))
  1925  07D7  34EA               	retlw	low (STR_30| (0+32768))
  1926  07D8  3482               	retlw	high (STR_30| (0+32768))
  1927  07D9  34E3               	retlw	low (STR_31| (0+32768))
  1928  07DA  3482               	retlw	high (STR_31| (0+32768))
  1929  07DB  34F1               	retlw	low (STR_32| (0+32768))
  1930  07DC  3482               	retlw	high (STR_32| (0+32768))
  1931  07DD  34B9               	retlw	low (STR_33| (0+32768))
  1932  07DE  3482               	retlw	high (STR_33| (0+32768))
  1933  07DF  34FF               	retlw	low (STR_34| (0+32768))
  1934  07E0  3482               	retlw	high (STR_34| (0+32768))
  1935  07E1  34B1               	retlw	low (STR_35| (0+32768))
  1936  07E2  3482               	retlw	high (STR_35| (0+32768))
  1937  07E3  34A9               	retlw	low (STR_36| (0+32768))
  1938  07E4  3482               	retlw	high (STR_36| (0+32768))
  1939  07E5  34A1               	retlw	low (STR_37| (0+32768))
  1940  07E6  3482               	retlw	high (STR_37| (0+32768))
  1941                           
  1942                           	psect	stringtext
  1943  0226                     __pstringtext:	
  1944  0226                     _dpowers:	
  1945  0226  3401               	retlw	1
  1946  0227  3400               	retlw	0
  1947  0228  3400               	retlw	0
  1948  0229  3400               	retlw	0
  1949  022A  340A               	retlw	10
  1950  022B  3400               	retlw	0
  1951  022C  3400               	retlw	0
  1952  022D  3400               	retlw	0
  1953  022E  3464               	retlw	100
  1954  022F  3400               	retlw	0
  1955  0230  3400               	retlw	0
  1956  0231  3400               	retlw	0
  1957  0232  34E8               	retlw	232
  1958  0233  3403               	retlw	3
  1959  0234  3400               	retlw	0
  1960  0235  3400               	retlw	0
  1961  0236  3410               	retlw	16
  1962  0237  3427               	retlw	39
  1963  0238  3400               	retlw	0
  1964  0239  3400               	retlw	0
  1965  023A  34A0               	retlw	160
  1966  023B  3486               	retlw	134
  1967  023C  3401               	retlw	1
  1968  023D  3400               	retlw	0
  1969  023E  3440               	retlw	64
  1970  023F  3442               	retlw	66
  1971  0240  340F               	retlw	15
  1972  0241  3400               	retlw	0
  1973  0242  3480               	retlw	128
  1974  0243  3496               	retlw	150
  1975  0244  3498               	retlw	152
  1976  0245  3400               	retlw	0
  1977  0246  3400               	retlw	0
  1978  0247  34E1               	retlw	225
  1979  0248  34F5               	retlw	245
  1980  0249  3405               	retlw	5
  1981  024A  3400               	retlw	0
  1982  024B  34CA               	retlw	202
  1983  024C  349A               	retlw	154
  1984  024D  343B               	retlw	59
  1985  024E                     __end_of_dpowers:	
  1986  024E                     _DAC_DataTable:	
  1987  024E  3499               	retlw	153
  1988  024F  3401               	retlw	1
  1989  0250  34C2               	retlw	194
  1990  0251  3401               	retlw	1
  1991  0252  34EB               	retlw	235
  1992  0253  3401               	retlw	1
  1993  0254  3414               	retlw	20
  1994  0255  3402               	retlw	2
  1995  0256  343D               	retlw	61
  1996  0257  3402               	retlw	2
  1997  0258  3466               	retlw	102
  1998  0259  3402               	retlw	2
  1999  025A  348F               	retlw	143
  2000  025B  3402               	retlw	2
  2001  025C  34B8               	retlw	184
  2002  025D  3402               	retlw	2
  2003  025E  34E1               	retlw	225
  2004  025F  3402               	retlw	2
  2005  0260  340A               	retlw	10
  2006  0261  3403               	retlw	3
  2007  0262  3433               	retlw	51
  2008  0263  3403               	retlw	3
  2009  0264  345B               	retlw	91
  2010  0265  3403               	retlw	3
  2011  0266  3484               	retlw	132
  2012  0267  3403               	retlw	3
  2013  0268  34AD               	retlw	173
  2014  0269  3403               	retlw	3
  2015  026A  34D6               	retlw	214
  2016  026B  3403               	retlw	3
  2017  026C                     __end_of_DAC_DataTable:	
  2018  026C                     _sense_parameter:	
  2019  026C  3450               	retlw	80
  2020  026D  3482               	retlw	130
  2021  026E  3482               	retlw	130
  2022  026F                     __end_of_sense_parameter:	
  2023  0016                     _TMR1	set	22
  2024  000C                     _PORTA	set	12
  2025  001F                     _CPSCON1	set	31
  2026  001E                     _CPSCON0	set	30
  2027  0015                     _TMR0	set	21
  2028  0019                     _T1GCON	set	25
  2029  0018                     _T1CON	set	24
  2030  000D                     _PORTB	set	13
  2031  001B                     _PR2	set	27
  2032  001A                     _TMR2	set	26
  2033  001C                     _T2CON	set	28
  2034  009B                     _TMR6IF	set	155
  2035  0088                     _TMR1IF	set	136
  2036  00C0                     _TMR1ON	set	192
  2037  005F                     _GIE	set	95
  2038  005E                     _PEIE	set	94
  2039  00A1                     _BCL2IF	set	161
  2040  00A0                     _SSP2IF	set	160
  2041  0099                     _OSCCON	set	153
  2042  0095                     _OPTION_REG	set	149
  2043  008D                     _TRISB	set	141
  2044  008C                     _TRISA	set	140
  2045  049B                     _TMR6IE	set	1179
  2046  0488                     _TMR1IE	set	1160
  2047  04A1                     _BCL2IE	set	1185
  2048  04A0                     _SSP2IE	set	1184
  2049  011E                     _APFCON1	set	286
  2050  011D                     _APFCON0	set	285
  2051  0866                     _LATA6	set	2150
  2052  0863                     _LATA3	set	2147
  2053  0864                     _LATA4	set	2148
  2054  018D                     _ANSELB	set	397
  2055  018C                     _ANSELA	set	396
  2056  020D                     _WPUB	set	525
  2057  021C                     _SSP2STATbits	set	540
  2058  0219                     _SSP2BUF	set	537
  2059  021E                     _SSP2CON2	set	542
  2060  021B                     _SSP2MSK	set	539
  2061  021E                     _SSP2CON2bits	set	542
  2062  021D                     _SSP2CON1bits	set	541
  2063  021A                     _SSP2ADD	set	538
  2064  021C                     _SSP2STAT	set	540
  2065  021D                     _SSP2CON1	set	541
  2066  0298                     _CCPR2L	set	664
  2067  029E                     _CCPTMRS	set	670
  2068  029A                     _CCP2CON	set	666
  2069  041E                     _T6CON	set	1054
  2070  041C                     _TMR6	set	1052
  2071  041D                     _PR6	set	1053
  2072  026F                     STR_1:	
  2073  026F  3420               	retlw	32	;' '
  2074  0270  3420               	retlw	32	;' '
  2075  0271  3443               	retlw	67	;'C'
  2076  0272  346F               	retlw	111	;'o'
  2077  0273  3475               	retlw	117	;'u'
  2078  0274  346E               	retlw	110	;'n'
  2079  0275  3474               	retlw	116	;'t'
  2080  0276  3474               	retlw	116	;'t'
  2081  0277  3469               	retlw	105	;'i'
  2082  0278  346E               	retlw	110	;'n'
  2083  0279  3467               	retlw	103	;'g'
  2084  027A  342E               	retlw	46	;'.'
  2085  027B  342E               	retlw	46	;'.'
  2086  027C  342E               	retlw	46	;'.'
  2087  027D  3420               	retlw	32	;' '
  2088  027E  3420               	retlw	32	;' '
  2089  027F  3400               	retlw	0
  2090  0280                     STR_2:	
  2091  0280  3420               	retlw	32	;' '
  2092  0281  3425               	retlw	37	;'%'
  2093  0282  3437               	retlw	55	;'7'
  2094  0283  346C               	retlw	108	;'l'
  2095  0284  3475               	retlw	117	;'u'
  2096  0285  3420               	retlw	32	;' '
  2097  0286  3420               	retlw	32	;' '
  2098  0287  3425               	retlw	37	;'%'
  2099  0288  3430               	retlw	48	;'0'
  2100  0289  3432               	retlw	50	;'2'
  2101  028A  3464               	retlw	100	;'d'
  2102  028B  343A               	retlw	58	;':'
  2103  028C  3425               	retlw	37	;'%'
  2104  028D  3430               	retlw	48	;'0'
  2105  028E  3432               	retlw	50	;'2'
  2106  028F  3464               	retlw	100	;'d'
  2107  0290  3400               	retlw	0
  2108  0291                     STR_3:	
  2109  0291  3420               	retlw	32	;' '
  2110  0292  3443               	retlw	67	;'C'
  2111  0293  346F               	retlw	111	;'o'
  2112  0294  3475               	retlw	117	;'u'
  2113  0295  346E               	retlw	110	;'n'
  2114  0296  3474               	retlw	116	;'t'
  2115  0297  3420               	retlw	32	;' '
  2116  0298  3453               	retlw	83	;'S'
  2117  0299  3474               	retlw	116	;'t'
  2118  029A  346F               	retlw	111	;'o'
  2119  029B  3470               	retlw	112	;'p'
  2120  029C  3470               	retlw	112	;'p'
  2121  029D  3465               	retlw	101	;'e'
  2122  029E  3464               	retlw	100	;'d'
  2123  029F  3420               	retlw	32	;' '
  2124  02A0  3400               	retlw	0
  2125  02A1                     STR_37:	
  2126  02A1  3432               	retlw	50	;'2'
  2127  02A2  3437               	retlw	55	;'7'
  2128  02A3  3437               	retlw	55	;'7'
  2129  02A4  3434               	retlw	52	;'4'
  2130  02A5  3435               	retlw	53	;'5'
  2131  02A6  3436               	retlw	54	;'6'
  2132  02A7  3432               	retlw	50	;'2'
  2133  02A8  3400               	retlw	0
  2134  02A9                     STR_36:	
  2135  02A9  3431               	retlw	49	;'1'
  2136  02AA  3439               	retlw	57	;'9'
  2137  02AB  3434               	retlw	52	;'4'
  2138  02AC  3430               	retlw	48	;'0'
  2139  02AD  3436               	retlw	54	;'6'
  2140  02AE  3437               	retlw	55	;'7'
  2141  02AF  3433               	retlw	51	;'3'
  2142  02B0  3400               	retlw	0
  2143  02B1                     STR_35:	
  2144  02B1  3431               	retlw	49	;'1'
  2145  02B2  3433               	retlw	51	;'3'
  2146  02B3  3433               	retlw	51	;'3'
  2147  02B4  3436               	retlw	54	;'6'
  2148  02B5  3430               	retlw	48	;'0'
  2149  02B6  3430               	retlw	48	;'0'
  2150  02B7  3436               	retlw	54	;'6'
  2151  02B8  3400               	retlw	0
  2152  02B9                     STR_33:	
  2153  02B9  3436               	retlw	54	;'6'
  2154  02BA  3430               	retlw	48	;'0'
  2155  02BB  3430               	retlw	48	;'0'
  2156  02BC  3430               	retlw	48	;'0'
  2157  02BD  3430               	retlw	48	;'0'
  2158  02BE  3430               	retlw	48	;'0'
  2159  02BF  3400               	retlw	0
  2160  02C0                     STR_51:	
  2161  02C0  3437               	retlw	55	;'7'
  2162  02C1  3430               	retlw	48	;'0'
  2163  02C2  3430               	retlw	48	;'0'
  2164  02C3  3438               	retlw	56	;'8'
  2165  02C4  3439               	retlw	57	;'9'
  2166  02C5  3430               	retlw	48	;'0'
  2167  02C6  3400               	retlw	0
  2168  02C7                     STR_52:	
  2169  02C7  3439               	retlw	57	;'9'
  2170  02C8  3436               	retlw	54	;'6'
  2171  02C9  3438               	retlw	56	;'8'
  2172  02CA  3434               	retlw	52	;'4'
  2173  02CB  3437               	retlw	55	;'7'
  2174  02CC  3432               	retlw	50	;'2'
  2175  02CD  3400               	retlw	0
  2176  02CE                     STR_46:	
  2177  02CE  3431               	retlw	49	;'1'
  2178  02CF  3430               	retlw	48	;'0'
  2179  02D0  3438               	retlw	56	;'8'
  2180  02D1  3438               	retlw	56	;'8'
  2181  02D2  3434               	retlw	52	;'4'
  2182  02D3  3433               	retlw	51	;'3'
  2183  02D4  3400               	retlw	0
  2184  02D5                     STR_48:	
  2185  02D5  3432               	retlw	50	;'2'
  2186  02D6  3434               	retlw	52	;'4'
  2187  02D7  3432               	retlw	50	;'2'
  2188  02D8  3433               	retlw	51	;'3'
  2189  02D9  3436               	retlw	54	;'6'
  2190  02DA  3434               	retlw	52	;'4'
  2191  02DB  3400               	retlw	0
  2192  02DC                     STR_49:	
  2193  02DC  3433               	retlw	51	;'3'
  2194  02DD  3435               	retlw	53	;'5'
  2195  02DE  3431               	retlw	49	;'1'
  2196  02DF  3431               	retlw	49	;'1'
  2197  02E0  3432               	retlw	50	;'2'
  2198  02E1  3437               	retlw	55	;'7'
  2199  02E2  3400               	retlw	0
  2200  02E3                     STR_31:	
  2201  02E3  3432               	retlw	50	;'2'
  2202  02E4  3434               	retlw	52	;'4'
  2203  02E5  3437               	retlw	55	;'7'
  2204  02E6  3436               	retlw	54	;'6'
  2205  02E7  3434               	retlw	52	;'4'
  2206  02E8  3437               	retlw	55	;'7'
  2207  02E9  3400               	retlw	0
  2208  02EA                     STR_30:	
  2209  02EA  3431               	retlw	49	;'1'
  2210  02EB  3435               	retlw	53	;'5'
  2211  02EC  3433               	retlw	51	;'3'
  2212  02ED  3432               	retlw	50	;'2'
  2213  02EE  3432               	retlw	50	;'2'
  2214  02EF  3438               	retlw	56	;'8'
  2215  02F0  3400               	retlw	0
  2216  02F1                     STR_32:	
  2217  02F1  3433               	retlw	51	;'3'
  2218  02F2  3438               	retlw	56	;'8'
  2219  02F3  3439               	retlw	57	;'9'
  2220  02F4  3439               	retlw	57	;'9'
  2221  02F5  3438               	retlw	56	;'8'
  2222  02F6  3438               	retlw	56	;'8'
  2223  02F7  3400               	retlw	0
  2224  02F8                     STR_47:	
  2225  02F8  3431               	retlw	49	;'1'
  2226  02F9  3436               	retlw	54	;'6'
  2227  02FA  3434               	retlw	52	;'4'
  2228  02FB  3431               	retlw	49	;'1'
  2229  02FC  3433               	retlw	51	;'3'
  2230  02FD  3439               	retlw	57	;'9'
  2231  02FE  3400               	retlw	0
  2232  02FF                     STR_34:	
  2233  02FF  3439               	retlw	57	;'9'
  2234  0300  3430               	retlw	48	;'0'
  2235  0301  3433               	retlw	51	;'3'
  2236  0302  3438               	retlw	56	;'8'
  2237  0303  3439               	retlw	57	;'9'
  2238  0304  3439               	retlw	57	;'9'
  2239  0305  3400               	retlw	0
  2240  0306                     STR_50:	
  2241  0306  3434               	retlw	52	;'4'
  2242  0307  3439               	retlw	57	;'9'
  2243  0308  3439               	retlw	57	;'9'
  2244  0309  3439               	retlw	57	;'9'
  2245  030A  3439               	retlw	57	;'9'
  2246  030B  3439               	retlw	57	;'9'
  2247  030C  3400               	retlw	0
  2248  030D                     STR_27:	
  2249  030D  3433               	retlw	51	;'3'
  2250  030E  3430               	retlw	48	;'0'
  2251  030F  3430               	retlw	48	;'0'
  2252  0310  3430               	retlw	48	;'0'
  2253  0311  3430               	retlw	48	;'0'
  2254  0312  3400               	retlw	0
  2255  0313                     STR_45:	
  2256  0313  3437               	retlw	55	;'7'
  2257  0314  3430               	retlw	48	;'0'
  2258  0315  3435               	retlw	53	;'5'
  2259  0316  3430               	retlw	48	;'0'
  2260  0317  3430               	retlw	48	;'0'
  2261  0318  3400               	retlw	0
  2262  0319                     STR_28:	
  2263  0319  3435               	retlw	53	;'5'
  2264  031A  3433               	retlw	51	;'3'
  2265  031B  3435               	retlw	53	;'5'
  2266  031C  3435               	retlw	53	;'5'
  2267  031D  3433               	retlw	51	;'3'
  2268  031E  3400               	retlw	0
  2269  031F                     STR_42:	
  2270  031F  3431               	retlw	49	;'1'
  2271  0320  3436               	retlw	54	;'6'
  2272  0321  3431               	retlw	49	;'1'
  2273  0322  3432               	retlw	50	;'2'
  2274  0323  3435               	retlw	53	;'5'
  2275  0324  3400               	retlw	0
  2276  0325                     STR_43:	
  2277  0325  3432               	retlw	50	;'2'
  2278  0326  3437               	retlw	55	;'7'
  2279  0327  3432               	retlw	50	;'2'
  2280  0328  3433               	retlw	51	;'3'
  2281  0329  3438               	retlw	56	;'8'
  2282  032A  3400               	retlw	0
  2283  032B                     STR_44:	
  2284  032B  3434               	retlw	52	;'4'
  2285  032C  3434               	retlw	52	;'4'
  2286  032D  3434               	retlw	52	;'4'
  2287  032E  3437               	retlw	55	;'7'
  2288  032F  3438               	retlw	56	;'8'
  2289  0330  3400               	retlw	0
  2290  0331                     STR_29:	
  2291  0331  3439               	retlw	57	;'9'
  2292  0332  3432               	retlw	50	;'2'
  2293  0333  3430               	retlw	48	;'0'
  2294  0334  3438               	retlw	56	;'8'
  2295  0335  3438               	retlw	56	;'8'
  2296  0336  3400               	retlw	0
  2297  0337                     STR_26:	
  2298  0337  3431               	retlw	49	;'1'
  2299  0338  3436               	retlw	54	;'6'
  2300  0339  3430               	retlw	48	;'0'
  2301  033A  3439               	retlw	57	;'9'
  2302  033B  3439               	retlw	57	;'9'
  2303  033C  3400               	retlw	0
  2304  033D                     STR_19:	
  2305  033D  3431               	retlw	49	;'1'
  2306  033E  342E               	retlw	46	;'.'
  2307  033F  3430               	retlw	48	;'0'
  2308  0340  3435               	retlw	53	;'5'
  2309  0341  3456               	retlw	86	;'V'
  2310  0342  3400               	retlw	0
  2311  0343                     STR_21:	
  2312  0343  3431               	retlw	49	;'1'
  2313  0344  342E               	retlw	46	;'.'
  2314  0345  3431               	retlw	49	;'1'
  2315  0346  3435               	retlw	53	;'5'
  2316  0347  3456               	retlw	86	;'V'
  2317  0348  3400               	retlw	0
  2318  0349                     STR_9:	
  2319  0349  3430               	retlw	48	;'0'
  2320  034A  342E               	retlw	46	;'.'
  2321  034B  3435               	retlw	53	;'5'
  2322  034C  3435               	retlw	53	;'5'
  2323  034D  3456               	retlw	86	;'V'
  2324  034E  3400               	retlw	0
  2325  034F                     STR_11:	
  2326  034F  3430               	retlw	48	;'0'
  2327  0350  342E               	retlw	46	;'.'
  2328  0351  3436               	retlw	54	;'6'
  2329  0352  3435               	retlw	53	;'5'
  2330  0353  3456               	retlw	86	;'V'
  2331  0354  3400               	retlw	0
  2332  0355                     STR_13:	
  2333  0355  3430               	retlw	48	;'0'
  2334  0356  342E               	retlw	46	;'.'
  2335  0357  3437               	retlw	55	;'7'
  2336  0358  3435               	retlw	53	;'5'
  2337  0359  3456               	retlw	86	;'V'
  2338  035A  3400               	retlw	0
  2339  035B                     STR_15:	
  2340  035B  3430               	retlw	48	;'0'
  2341  035C  342E               	retlw	46	;'.'
  2342  035D  3438               	retlw	56	;'8'
  2343  035E  3435               	retlw	53	;'5'
  2344  035F  3456               	retlw	86	;'V'
  2345  0360  3400               	retlw	0
  2346  0361                     STR_17:	
  2347  0361  3430               	retlw	48	;'0'
  2348  0362  342E               	retlw	46	;'.'
  2349  0363  3439               	retlw	57	;'9'
  2350  0364  3435               	retlw	53	;'5'
  2351  0365  3456               	retlw	86	;'V'
  2352  0366  3400               	retlw	0
  2353  0367                     STR_38:	
  2354  0367  3431               	retlw	49	;'1'
  2355  0368  3432               	retlw	50	;'2'
  2356  0369  3435               	retlw	53	;'5'
  2357  036A  3430               	retlw	48	;'0'
  2358  036B  3400               	retlw	0
  2359  036C                     STR_39:	
  2360  036C  3432               	retlw	50	;'2'
  2361  036D  3435               	retlw	53	;'5'
  2362  036E  3438               	retlw	56	;'8'
  2363  036F  3430               	retlw	48	;'0'
  2364  0370  3400               	retlw	0
  2365  0371                     STR_41:	
  2366  0371  3439               	retlw	57	;'9'
  2367  0372  3431               	retlw	49	;'1'
  2368  0373  3438               	retlw	56	;'8'
  2369  0374  3432               	retlw	50	;'2'
  2370  0375  3400               	retlw	0
  2371  0376                     STR_24:	
  2372  0376  3433               	retlw	51	;'3'
  2373  0377  3439               	retlw	57	;'9'
  2374  0378  3435               	retlw	53	;'5'
  2375  0379  3437               	retlw	55	;'7'
  2376  037A  3400               	retlw	0
  2377  037B                     STR_23:	
  2378  037B  3431               	retlw	49	;'1'
  2379  037C  3437               	retlw	55	;'7'
  2380  037D  3437               	retlw	55	;'7'
  2381  037E  3437               	retlw	55	;'7'
  2382  037F  3400               	retlw	0
  2383  0380                     STR_40:	
  2384  0380  3434               	retlw	52	;'4'
  2385  0381  3439               	retlw	57	;'9'
  2386  0382  3439               	retlw	57	;'9'
  2387  0383  3438               	retlw	56	;'8'
  2388  0384  3400               	retlw	0
  2389  0385                     STR_25:	
  2390  0385  3438               	retlw	56	;'8'
  2391  0386  3432               	retlw	50	;'2'
  2392  0387  3431               	retlw	49	;'1'
  2393  0388  3439               	retlw	57	;'9'
  2394  0389  3400               	retlw	0
  2395  038A                     STR_18:	
  2396  038A  3431               	retlw	49	;'1'
  2397  038B  342E               	retlw	46	;'.'
  2398  038C  3430               	retlw	48	;'0'
  2399  038D  3456               	retlw	86	;'V'
  2400  038E  3400               	retlw	0
  2401  038F                     STR_20:	
  2402  038F  3431               	retlw	49	;'1'
  2403  0390  342E               	retlw	46	;'.'
  2404  0391  3431               	retlw	49	;'1'
  2405  0392  3456               	retlw	86	;'V'
  2406  0393  3400               	retlw	0
  2407  0394                     STR_22:	
  2408  0394  3431               	retlw	49	;'1'
  2409  0395  342E               	retlw	46	;'.'
  2410  0396  3432               	retlw	50	;'2'
  2411  0397  3456               	retlw	86	;'V'
  2412  0398  3400               	retlw	0
  2413  0399                     STR_8:	
  2414  0399  3430               	retlw	48	;'0'
  2415  039A  342E               	retlw	46	;'.'
  2416  039B  3435               	retlw	53	;'5'
  2417  039C  3456               	retlw	86	;'V'
  2418  039D  3400               	retlw	0
  2419  039E                     STR_10:	
  2420  039E  3430               	retlw	48	;'0'
  2421  039F  342E               	retlw	46	;'.'
  2422  03A0  3436               	retlw	54	;'6'
  2423  03A1  3456               	retlw	86	;'V'
  2424  03A2  3400               	retlw	0
  2425  03A3                     STR_12:	
  2426  03A3  3430               	retlw	48	;'0'
  2427  03A4  342E               	retlw	46	;'.'
  2428  03A5  3437               	retlw	55	;'7'
  2429  03A6  3456               	retlw	86	;'V'
  2430  03A7  3400               	retlw	0
  2431  03A8                     STR_14:	
  2432  03A8  3430               	retlw	48	;'0'
  2433  03A9  342E               	retlw	46	;'.'
  2434  03AA  3438               	retlw	56	;'8'
  2435  03AB  3456               	retlw	86	;'V'
  2436  03AC  3400               	retlw	0
  2437  03AD                     STR_16:	
  2438  03AD  3430               	retlw	48	;'0'
  2439  03AE  342E               	retlw	46	;'.'
  2440  03AF  3439               	retlw	57	;'9'
  2441  03B0  3456               	retlw	86	;'V'
  2442  03B1  3400               	retlw	0
  2443  03B2                     STR_5:	
  2444  03B2  3425               	retlw	37	;'%'
  2445  03B3  3437               	retlw	55	;'7'
  2446  03B4  346C               	retlw	108	;'l'
  2447  03B5  3475               	retlw	117	;'u'
  2448  03B6  3400               	retlw	0
  2449  0280                     
  2450                           ; #config settings
  2451  0000                     
  2452                           	psect	cinit
  2453  002D                     start_initialization:	
  2454  002D                     __initialization:	
  2455                           
  2456                           ; Initialize objects allocated to BANK1
  2457  002D  3092               	movlw	low __pidataBANK1
  2458  002E  0084               	movwf	4
  2459  002F  308E               	movlw	(high __pidataBANK1)| (0+128)
  2460  0030  0085               	movwf	5
  2461  0031  30A0               	movlw	low __pdataBANK1
  2462  0032  0086               	movwf	6
  2463  0033  3000               	movlw	high __pdataBANK1
  2464  0034  0087               	movwf	7
  2465  0035  301E               	movlw	30
  2466  0036  318D  2516  3180   	fcall	init_ram
  2467                           
  2468                           ; Initialize objects allocated to BANK2
  2469  0039  30AB               	movlw	low __pidataBANK2
  2470  003A  0084               	movwf	4
  2471  003B  3087               	movlw	(high __pidataBANK2)| (0+128)
  2472  003C  0085               	movwf	5
  2473  003D  3020               	movlw	low __pdataBANK2
  2474  003E  0086               	movwf	6
  2475  003F  3001               	movlw	high __pdataBANK2
  2476  0040  0087               	movwf	7
  2477  0041  303C               	movlw	60
  2478  0042  318D  2516  3180   	fcall	init_ram
  2479                           
  2480                           ; Clear objects allocated to COMMON
  2481  0045  01F0               	clrf	__pbssCOMMON& (0+127)
  2482  0046  01F1               	clrf	(__pbssCOMMON+1)& (0+127)
  2483  0047  01F2               	clrf	(__pbssCOMMON+2)& (0+127)
  2484  0048  01F3               	clrf	(__pbssCOMMON+3)& (0+127)
  2485  0049  01F4               	clrf	(__pbssCOMMON+4)& (0+127)
  2486  004A  01F5               	clrf	(__pbssCOMMON+5)& (0+127)
  2487                           
  2488                           ; Clear objects allocated to BANK0
  2489  004B  3061               	movlw	low __pbssBANK0
  2490  004C  0084               	movwf	4
  2491  004D  3000               	movlw	high __pbssBANK0
  2492  004E  0085               	movwf	5
  2493  004F  300C               	movlw	12
  2494  0050  318D  2510  3180   	fcall	clear_ram0
  2495                           
  2496                           ; Clear objects allocated to BANK1
  2497  0053  30BE               	movlw	low __pbssBANK1
  2498  0054  0084               	movwf	4
  2499  0055  3000               	movlw	high __pbssBANK1
  2500  0056  0085               	movwf	5
  2501  0057  301D               	movlw	29
  2502  0058  318D  2510         	fcall	clear_ram0
  2503  005A                     end_of_initialization:	
  2504                           ;End of C runtime variable initialization code
  2505                           
  2506  005A                     __end_of__initialization:	
  2507  005A  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  2508  005B  0020               	movlb	0
  2509  005C  3183  2BB7         	ljmp	_main	;jump to C main() function
  2510                           
  2511                           	psect	bssCOMMON
  2512  0070                     __pbssCOMMON:	
  2513  0070                     _mTouch_Interval:	
  2514  0070                     	ds	3
  2515  0073                     _count:	
  2516  0073                     	ds	2
  2517  0075                     mTouch_Read@channel:	
  2518  0075                     	ds	1
  2519                           
  2520                           	psect	bssBANK0
  2521  0061                     __pbssBANK0:	
  2522  0061                     _tcnt:	
  2523  0061                     	ds	8
  2524  0069                     _state_mode:	
  2525  0069                     	ds	1
  2526  006A                     _VoltageReg:	
  2527  006A                     	ds	2
  2528  006C                     _ConfigReg:	
  2529  006C                     	ds	1
  2530                           
  2531                           	psect	bssBANK1
  2532  00BE                     __pbssBANK1:	
  2533  00BE                     _cnts:	
  2534  00BE                     	ds	4
  2535  00C2                     _CPS_PreData:	
  2536  00C2                     	ds	3
  2537  00C5                     _CPS_Data:	
  2538  00C5                     	ds	3
  2539  00C8                     _I2C2_Config:	
  2540  00C8                     	ds	19
  2541                           
  2542                           	psect	dataBANK1
  2543  00A0                     __pdataBANK1:	
  2544  00A0                     _DAC_VoltageTable:	
  2545  00A0                     	ds	30
  2546                           
  2547                           	psect	dataBANK2
  2548  0120                     __pdataBANK2:	
  2549  0120                     _H7826_01_Gain:	
  2550  0120                     	ds	30
  2551  013E                     _H7826_Gain:	
  2552  013E                     	ds	30
  2553                           
  2554                           	psect	inittext
  2555  0D16                     init_ram:	
  2556  0D16  00FE               	movwf	126
  2557  0D17                     initloop:	
  2558  0D17  0012               	moviw fsr0++
  2559  0D18  001E               	movwi fsr1++
  2560  0D19  0BFE               	decfsz	126,f
  2561  0D1A  2D17               	goto	initloop
  2562  0D1B  3400               	retlw	0
  2563                           
  2564                           	psect	clrtext
  2565  0D10                     clear_ram0:	
  2566                           ;	Called with FSR0 containing the base address, and
  2567                           ;	WREG with the size to clear
  2568                           
  2569  0D10  0064               	clrwdt	;clear the watchdog before getting into this loop
  2570  0D11                     clrloop0:	
  2571  0D11  0180               	clrf	0	;clear RAM location pointed to by FSR
  2572  0D12  3101               	addfsr 0,1
  2573  0D13  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  2574  0D14  2D11               	goto	clrloop0	;have we reached the end yet?
  2575  0D15  3400               	retlw	0	;all done for this memory range, return
  2576                           
  2577                           	psect	cstackBANK1
  2578  00DB                     __pcstackBANK1:	
  2579  00DB                     ??_main:	
  2580                           
  2581                           ; 1 bytes @ 0x0
  2582  00DB                     	ds	4
  2583                           
  2584                           	psect	cstackCOMMON
  2585  0076                     __pcstackCOMMON:	
  2586  0076                     ?_isdigit:	
  2587  0076                     ?_LCD_DisplayClear:	
  2588                           ; 1 bit 
  2589                           
  2590  0076                     ?_Timer1_ClearRecord:	
  2591                           ; 1 bytes @ 0x0
  2592                           
  2593  0076                     ?_Basic_Init:	
  2594                           ; 1 bytes @ 0x0
  2595                           
  2596  0076                     ?_Buzzer_Init:	
  2597                           ; 1 bytes @ 0x0
  2598                           
  2599  0076                     ?_Buzzer_SetDuty:	
  2600                           ; 1 bytes @ 0x0
  2601                           
  2602  0076                     ?_Buzzer_Count1ms:	
  2603                           ; 1 bytes @ 0x0
  2604                           
  2605  0076                     ?_I2C2_PinInit:	
  2606                           ; 1 bytes @ 0x0
  2607                           
  2608  0076                     ?_I2C2_Interrupt:	
  2609                           ; 1 bytes @ 0x0
  2610                           
  2611  0076                     ??_I2C2_Interrupt:	
  2612                           ; 1 bytes @ 0x0
  2613                           
  2614  0076                     ?_I2C_CommonInterrupt:	
  2615                           ; 1 bytes @ 0x0
  2616                           
  2617  0076                     ?_LCD_WriteData:	
  2618                           ; 1 bytes @ 0x0
  2619                           
  2620  0076                     ?_LCD_Init:	
  2621                           ; 1 bytes @ 0x0
  2622                           
  2623  0076                     ?_putch:	
  2624                           ; 1 bytes @ 0x0
  2625                           
  2626  0076                     ?_LCD_CursorHome:	
  2627                           ; 1 bytes @ 0x0
  2628                           
  2629  0076                     ?_DAC_Initialize:	
  2630                           ; 1 bytes @ 0x0
  2631                           
  2632  0076                     ?_Timer1_Init:	
  2633                           ; 1 bytes @ 0x0
  2634                           
  2635  0076                     ?_Timer1_StartCount:	
  2636                           ; 1 bytes @ 0x0
  2637                           
  2638  0076                     ?_Timer1_StopCount:	
  2639                           ; 1 bytes @ 0x0
  2640                           
  2641  0076                     ?_Timer1_GetSecond:	
  2642                           ; 1 bytes @ 0x0
  2643                           
  2644  0076                     ?_Timer1_GetMinute:	
  2645                           ; 1 bytes @ 0x0
  2646                           
  2647  0076                     ?_Timer1_Count1ms:	
  2648                           ; 1 bytes @ 0x0
  2649                           
  2650  0076                     ?_Timer1_DetectAssignCount:	
  2651                           ; 1 bytes @ 0x0
  2652                           
  2653  0076                     ??_Timer1_DetectAssignCount:	
  2654                           ; 1 bytes @ 0x0
  2655                           
  2656  0076                     ?_Timer6_Init:	
  2657                           ; 1 bytes @ 0x0
  2658                           
  2659  0076                     ?_Timer6_CheckFlag:	
  2660                           ; 1 bytes @ 0x0
  2661                           
  2662  0076                     ??_Timer6_CheckFlag:	
  2663                           ; 1 bytes @ 0x0
  2664                           
  2665  0076                     ?_mTouch_PortInit:	
  2666                           ; 1 bytes @ 0x0
  2667                           
  2668  0076                     ?_mTouch_Init:	
  2669                           ; 1 bytes @ 0x0
  2670                           
  2671  0076                     ?_mTouch_Read:	
  2672                           ; 1 bytes @ 0x0
  2673                           
  2674  0076                     ??_mTouch_Read:	
  2675                           ; 1 bytes @ 0x0
  2676                           
  2677  0076                     ?_mTouch_IntervalDecrement:	
  2678                           ; 1 bytes @ 0x0
  2679                           
  2680  0076                     ??_mTouch_IntervalDecrement:	
  2681                           ; 1 bytes @ 0x0
  2682                           
  2683  0076                     ?_mTouch_Check:	
  2684                           ; 1 bytes @ 0x0
  2685                           
  2686  0076                     ?_main:	
  2687                           ; 1 bytes @ 0x0
  2688                           
  2689  0076                     ?_Handler:	
  2690                           ; 1 bytes @ 0x0
  2691                           
  2692  0076                     ?i1_Buzzer_MiliSecond:	
  2693                           ; 1 bytes @ 0x0
  2694                           
  2695  0076                     Buzzer_SetDuty@duty:	
  2696                           ; 1 bytes @ 0x0
  2697                           
  2698  0076                     i1Buzzer_MiliSecond@time:	
  2699                           ; 2 bytes @ 0x0
  2700                           
  2701                           
  2702                           ; 2 bytes @ 0x0
  2703  0076                     	ds	1
  2704  0077                     ??_I2C_CommonInterrupt:	
  2705                           
  2706                           ; 1 bytes @ 0x1
  2707  0077                     	ds	1
  2708  0078                     ??_Buzzer_SetDuty:	
  2709  0078                     ??_Timer1_Count1ms:	
  2710                           ; 1 bytes @ 0x2
  2711                           
  2712  0078                     ??i1_Buzzer_MiliSecond:	
  2713                           ; 1 bytes @ 0x2
  2714                           
  2715                           
  2716                           ; 1 bytes @ 0x2
  2717  0078                     	ds	2
  2718  007A                     Buzzer_SetDuty@CCP2CON_Pre:	
  2719                           
  2720                           ; 1 bytes @ 0x4
  2721  007A                     	ds	1
  2722  007B                     ??_Buzzer_Count1ms:	
  2723  007B                     ??_Handler:	
  2724                           ; 1 bytes @ 0x5
  2725                           
  2726                           
  2727                           ; 1 bytes @ 0x5
  2728  007B                     	ds	1
  2729                           
  2730                           	psect	cstackBANK0
  2731  0020                     __pcstackBANK0:	
  2732  0020                     ??_Timer1_ClearRecord:	
  2733  0020                     ??_Basic_Init:	
  2734                           ; 1 bytes @ 0x0
  2735                           
  2736  0020                     ??_isdigit:	
  2737                           ; 1 bytes @ 0x0
  2738                           
  2739  0020                     ??_Buzzer_Init:	
  2740                           ; 1 bytes @ 0x0
  2741                           
  2742  0020                     ?_Buzzer_MiliSecond:	
  2743                           ; 1 bytes @ 0x0
  2744                           
  2745  0020                     ??_I2C2_PinInit:	
  2746                           ; 1 bytes @ 0x0
  2747                           
  2748  0020                     ?_I2C2_Transmit:	
  2749                           ; 1 bytes @ 0x0
  2750                           
  2751  0020                     ??_LCD_WriteData:	
  2752                           ; 1 bytes @ 0x0
  2753                           
  2754  0020                     ??_Timer1_Init:	
  2755                           ; 1 bytes @ 0x0
  2756                           
  2757  0020                     ??_Timer1_StartCount:	
  2758                           ; 1 bytes @ 0x0
  2759                           
  2760  0020                     ??_Timer1_StopCount:	
  2761                           ; 1 bytes @ 0x0
  2762                           
  2763  0020                     ??_Timer1_GetSecond:	
  2764                           ; 1 bytes @ 0x0
  2765                           
  2766  0020                     ??_Timer1_GetMinute:	
  2767                           ; 1 bytes @ 0x0
  2768                           
  2769  0020                     ??_Timer6_Init:	
  2770                           ; 1 bytes @ 0x0
  2771                           
  2772  0020                     ??_mTouch_PortInit:	
  2773                           ; 1 bytes @ 0x0
  2774                           
  2775  0020                     ?___wmul:	
  2776                           ; 1 bytes @ 0x0
  2777                           
  2778  0020                     ?_Timer1_GetCountSum:	
  2779                           ; 2 bytes @ 0x0
  2780                           
  2781  0020                     ?___lmul:	
  2782                           ; 4 bytes @ 0x0
  2783                           
  2784  0020                     I2C2_Transmit@pData:	
  2785                           ; 4 bytes @ 0x0
  2786                           
  2787  0020                     _isdigit$777:	
  2788                           ; 1 bytes @ 0x0
  2789                           
  2790  0020                     Buzzer_MiliSecond@time:	
  2791                           ; 1 bytes @ 0x0
  2792                           
  2793  0020                     ___wmul@multiplier:	
  2794                           ; 2 bytes @ 0x0
  2795                           
  2796  0020                     ___lmul@multiplier:	
  2797                           ; 2 bytes @ 0x0
  2798                           
  2799                           
  2800                           ; 4 bytes @ 0x0
  2801  0020                     	ds	1
  2802  0021                     ?_I2C2_Setting:	
  2803  0021                     ??_mTouch_Init:	
  2804                           ; 1 bytes @ 0x1
  2805                           
  2806  0021                     I2C2_Setting@mode:	
  2807                           ; 1 bytes @ 0x1
  2808                           
  2809  0021                     I2C2_Transmit@size:	
  2810                           ; 1 bytes @ 0x1
  2811                           
  2812  0021                     isdigit@c:	
  2813                           ; 1 bytes @ 0x1
  2814                           
  2815                           
  2816                           ; 1 bytes @ 0x1
  2817  0021                     	ds	1
  2818  0022                     ??_Buzzer_MiliSecond:	
  2819  0022                     ??_I2C2_Transmit:	
  2820                           ; 1 bytes @ 0x2
  2821                           
  2822  0022                     ??_mTouch_Check:	
  2823                           ; 1 bytes @ 0x2
  2824                           
  2825  0022                     I2C2_Setting@Speed:	
  2826                           ; 1 bytes @ 0x2
  2827                           
  2828  0022                     LCD_WriteData@point:	
  2829                           ; 1 bytes @ 0x2
  2830                           
  2831  0022                     ___wmul@multiplicand:	
  2832                           ; 1 bytes @ 0x2
  2833                           
  2834                           
  2835                           ; 2 bytes @ 0x2
  2836  0022                     	ds	1
  2837  0023                     ??_LCD_DisplayClear:	
  2838  0023                     ??_I2C2_Setting:	
  2839                           ; 1 bytes @ 0x3
  2840                           
  2841  0023                     ??_putch:	
  2842                           ; 1 bytes @ 0x3
  2843                           
  2844  0023                     ??_LCD_CursorHome:	
  2845                           ; 1 bytes @ 0x3
  2846                           
  2847  0023                     ?_LCD_CursorPosition:	
  2848                           ; 1 bytes @ 0x3
  2849                           
  2850  0023                     putch@c:	
  2851                           ; 1 bytes @ 0x3
  2852                           
  2853  0023                     LCD_CursorPosition@ty:	
  2854                           ; 1 bytes @ 0x3
  2855                           
  2856                           
  2857                           ; 1 bytes @ 0x3
  2858  0023                     	ds	1
  2859  0024                     ??_LCD_Init:	
  2860  0024                     ??_LCD_CursorPosition:	
  2861                           ; 1 bytes @ 0x4
  2862                           
  2863  0024                     ??_Timer1_GetCountSum:	
  2864                           ; 1 bytes @ 0x4
  2865                           
  2866  0024                     ??___wmul:	
  2867                           ; 1 bytes @ 0x4
  2868                           
  2869  0024                     I2C2_Setting@address:	
  2870                           ; 1 bytes @ 0x4
  2871                           
  2872  0024                     I2C2_Transmit@address:	
  2873                           ; 1 bytes @ 0x4
  2874                           
  2875  0024                     ___wmul@product:	
  2876                           ; 1 bytes @ 0x4
  2877                           
  2878  0024                     ___lmul@multiplicand:	
  2879                           ; 2 bytes @ 0x4
  2880                           
  2881                           
  2882                           ; 4 bytes @ 0x4
  2883  0024                     	ds	1
  2884  0025                     ?_I2C_Init:	
  2885  0025                     I2C2_Transmit@i:	
  2886                           ; 1 bytes @ 0x5
  2887                           
  2888  0025                     I2C_Init@address:	
  2889                           ; 1 bytes @ 0x5
  2890                           
  2891  0025                     LCD_CursorPosition@tx:	
  2892                           ; 1 bytes @ 0x5
  2893                           
  2894                           
  2895                           ; 1 bytes @ 0x5
  2896  0025                     	ds	1
  2897  0026                     I2C2_Transmit@i_172:	
  2898  0026                     I2C_Init@mode:	
  2899                           ; 1 bytes @ 0x6
  2900                           
  2901                           
  2902                           ; 1 bytes @ 0x6
  2903  0026                     	ds	1
  2904  0027                     I2C2_Transmit@result:	
  2905  0027                     I2C_Init@Speed:	
  2906                           ; 1 bytes @ 0x7
  2907                           
  2908  0027                     mTouch_Check@chan:	
  2909                           ; 1 bytes @ 0x7
  2910                           
  2911                           
  2912                           ; 1 bytes @ 0x7
  2913  0027                     	ds	1
  2914  0028                     ??_I2C_Init:	
  2915  0028                     ?_I2C_Transmit:	
  2916                           ; 1 bytes @ 0x8
  2917                           
  2918  0028                     ??___lmul:	
  2919                           ; 1 bytes @ 0x8
  2920                           
  2921  0028                     I2C_Transmit@address:	
  2922                           ; 1 bytes @ 0x8
  2923                           
  2924  0028                     ___lmul@product:	
  2925                           ; 1 bytes @ 0x8
  2926                           
  2927                           
  2928                           ; 4 bytes @ 0x8
  2929  0028                     	ds	1
  2930  0029                     I2C_Transmit@pData:	
  2931                           
  2932                           ; 1 bytes @ 0x9
  2933  0029                     	ds	1
  2934  002A                     I2C_Init@I2Cx:	
  2935  002A                     I2C_Transmit@size:	
  2936                           ; 1 bytes @ 0xA
  2937                           
  2938                           
  2939                           ; 1 bytes @ 0xA
  2940  002A                     	ds	1
  2941  002B                     ??_I2C_Transmit:	
  2942                           
  2943                           ; 1 bytes @ 0xB
  2944  002B                     	ds	1
  2945  002C                     ?___lldiv:	
  2946  002C                     ___lldiv@divisor:	
  2947                           ; 4 bytes @ 0xC
  2948                           
  2949                           
  2950                           ; 4 bytes @ 0xC
  2951  002C                     	ds	2
  2952  002E                     I2C_Transmit@I2Cx:	
  2953                           
  2954                           ; 1 bytes @ 0xE
  2955  002E                     	ds	1
  2956  002F                     I2C_Transmit@result:	
  2957                           
  2958                           ; 1 bytes @ 0xF
  2959  002F                     	ds	1
  2960  0030                     ??_DAC_Initialize:	
  2961  0030                     ?_DAC_WriteVoltage:	
  2962                           ; 1 bytes @ 0x10
  2963                           
  2964  0030                     DAC_WriteVoltage@volue:	
  2965                           ; 1 bytes @ 0x10
  2966                           
  2967  0030                     ___lldiv@dividend:	
  2968                           ; 2 bytes @ 0x10
  2969                           
  2970                           
  2971                           ; 4 bytes @ 0x10
  2972  0030                     	ds	2
  2973  0032                     ??_DAC_WriteVoltage:	
  2974                           
  2975                           ; 1 bytes @ 0x12
  2976  0032                     	ds	2
  2977  0034                     ??___lldiv:	
  2978                           
  2979                           ; 1 bytes @ 0x14
  2980  0034                     	ds	1
  2981  0035                     ___lldiv@quotient:	
  2982                           
  2983                           ; 4 bytes @ 0x15
  2984  0035                     	ds	4
  2985  0039                     ___lldiv@counter:	
  2986                           
  2987                           ; 1 bytes @ 0x19
  2988  0039                     	ds	1
  2989  003A                     ?_Timer1_GetCPS:	
  2990  003A                     ?___llmod:	
  2991                           ; 4 bytes @ 0x1A
  2992                           
  2993  003A                     ___llmod@divisor:	
  2994                           ; 4 bytes @ 0x1A
  2995                           
  2996                           
  2997                           ; 4 bytes @ 0x1A
  2998  003A                     	ds	4
  2999  003E                     ??_Timer1_GetCPS:	
  3000  003E                     ?_Timer1_GetCPM:	
  3001                           ; 1 bytes @ 0x1E
  3002                           
  3003  003E                     ___llmod@dividend:	
  3004                           ; 4 bytes @ 0x1E
  3005                           
  3006                           
  3007                           ; 4 bytes @ 0x1E
  3008  003E                     	ds	4
  3009  0042                     ??_Timer1_GetCPM:	
  3010  0042                     ??___llmod:	
  3011                           ; 1 bytes @ 0x22
  3012                           
  3013  0042                     _Timer1_GetCPM$1068:	
  3014                           ; 1 bytes @ 0x22
  3015                           
  3016                           
  3017                           ; 4 bytes @ 0x22
  3018  0042                     	ds	1
  3019  0043                     ___llmod@counter:	
  3020                           
  3021                           ; 1 bytes @ 0x23
  3022  0043                     	ds	3
  3023  0046                     ?_printf:	
  3024  0046                     printf@f:	
  3025                           ; 2 bytes @ 0x26
  3026                           
  3027                           
  3028                           ; 2 bytes @ 0x26
  3029  0046                     	ds	10
  3030  0050                     ??_printf:	
  3031                           
  3032                           ; 1 bytes @ 0x30
  3033  0050                     	ds	6
  3034  0056                     printf@prec:	
  3035                           
  3036                           ; 2 bytes @ 0x36
  3037  0056                     	ds	2
  3038  0058                     printf@val:	
  3039                           
  3040                           ; 4 bytes @ 0x38
  3041  0058                     	ds	4
  3042  005C                     printf@ap:	
  3043                           
  3044                           ; 1 bytes @ 0x3C
  3045  005C                     	ds	1
  3046  005D                     printf@flag:	
  3047                           
  3048                           ; 1 bytes @ 0x3D
  3049  005D                     	ds	1
  3050  005E                     printf@width:	
  3051                           
  3052                           ; 2 bytes @ 0x3E
  3053  005E                     	ds	2
  3054  0060                     printf@c:	
  3055                           
  3056                           ; 1 bytes @ 0x40
  3057  0060                     	ds	1
  3058                           
  3059                           	psect	maintext
  3060  03B7                     __pmaintext:	
  3061 ;;
  3062 ;;Main: autosize = 0, tempsize = 4, incstack = 0, save=0
  3063 ;;
  3064 ;; *************** function _main *****************
  3065 ;; Defined at:
  3066 ;;		line 16 in file "main.c"
  3067 ;; Parameters:    Size  Location     Type
  3068 ;;		None
  3069 ;; Auto vars:     Size  Location     Type
  3070 ;;		None
  3071 ;; Return value:  Size  Location     Type
  3072 ;;                  1    wreg      char 
  3073 ;; Registers used:
  3074 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3075 ;; Tracked objects:
  3076 ;;		On entry : B1F/0
  3077 ;;		On exit  : 0/0
  3078 ;;		Unchanged: 0/0
  3079 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  3080 ;;      Params:         0       0       0       0       0       0
  3081 ;;      Locals:         0       0       0       0       0       0
  3082 ;;      Temps:          0       0       4       0       0       0
  3083 ;;      Totals:         0       0       4       0       0       0
  3084 ;;Total ram usage:        4 bytes
  3085 ;; Hardware stack levels required when called:    7
  3086 ;; This function calls:
  3087 ;;		_Basic_Init
  3088 ;;		_Buzzer_Init
  3089 ;;		_DAC_Initialize
  3090 ;;		_DAC_WriteVoltage
  3091 ;;		_LCD_CursorHome
  3092 ;;		_LCD_CursorPosition
  3093 ;;		_LCD_DisplayClear
  3094 ;;		_LCD_Init
  3095 ;;		_Timer1_ClearRecord
  3096 ;;		_Timer1_GetCPM
  3097 ;;		_Timer1_GetCPS
  3098 ;;		_Timer1_GetCountSum
  3099 ;;		_Timer1_GetMinute
  3100 ;;		_Timer1_GetSecond
  3101 ;;		_Timer1_Init
  3102 ;;		_Timer1_StartCount
  3103 ;;		_Timer1_StopCount
  3104 ;;		_Timer6_Init
  3105 ;;		_mTouch_Check
  3106 ;;		_mTouch_Init
  3107 ;;		_printf
  3108 ;; This function is called by:
  3109 ;;		Startup code after reset
  3110 ;; This function uses a non-reentrant model
  3111 ;;
  3112                           
  3113                           
  3114                           ;psect for function _main
  3115  03B7                     _main:	
  3116                           
  3117                           ;main.c: 18: Basic_Init();
  3118                           
  3119                           ;incstack = 0
  3120                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3121  03B7  318D  259C  3183   	fcall	_Basic_Init
  3122                           
  3123                           ;main.c: 20: LATA6 = 1;
  3124  03BA  0022               	movlb	2	; select bank2
  3125  03BB  170C               	bsf	12,6	;volatile
  3126                           
  3127                           ;main.c: 22: Buzzer_Init();
  3128  03BC  318F  2717  3183   	fcall	_Buzzer_Init
  3129                           
  3130                           ;main.c: 24: LCD_Init();
  3131  03BF  3185  2549  3183   	fcall	_LCD_Init
  3132                           
  3133                           ;main.c: 26: Timer1_Init();
  3134  03C2  318E  26D0  3183   	fcall	_Timer1_Init
  3135                           
  3136                           ;main.c: 27: Timer1_StopCount();
  3137  03C5  318D  2508  3183   	fcall	_Timer1_StopCount
  3138                           
  3139                           ;main.c: 29: mTouch_Init();
  3140  03C8  318D  25D1  3183   	fcall	_mTouch_Init
  3141                           
  3142                           ;main.c: 31: Timer6_Init();
  3143  03CB  318D  25BE  3183   	fcall	_Timer6_Init
  3144                           
  3145                           ;main.c: 33: DAC_Initialize();
  3146  03CE  318E  26B0  3183   	fcall	_DAC_Initialize
  3147                           
  3148                           ;main.c: 34: DAC_WriteVoltage(DAC_DataTable[0]);
  3149  03D1  304E               	movlw	low (_DAC_DataTable| (0+32768))
  3150  03D2  0084               	movwf	4
  3151  03D3  3082               	movlw	high (_DAC_DataTable| (0+32768))
  3152  03D4  0085               	movwf	5
  3153  03D5  3F00               	moviw [0]fsr0
  3154  03D6  0020               	movlb	0	; select bank0
  3155  03D7  00B0               	movwf	DAC_WriteVoltage@volue
  3156  03D8  3F01               	moviw [1]fsr0
  3157  03D9  00B1               	movwf	DAC_WriteVoltage@volue+1
  3158  03DA  318F  2767  3183   	fcall	_DAC_WriteVoltage
  3159                           
  3160                           ;main.c: 35: DAC_WriteVoltage(DAC_DataTable[6]);
  3161  03DD  305A               	movlw	low ((_DAC_DataTable+12)| (0+32768))
  3162  03DE  0084               	movwf	4
  3163  03DF  3082               	movlw	high ((_DAC_DataTable+12)| (0+32768))
  3164  03E0  0085               	movwf	5
  3165  03E1  3F00               	moviw [0]fsr0
  3166  03E2  0020               	movlb	0	; select bank0
  3167  03E3  00B0               	movwf	DAC_WriteVoltage@volue
  3168  03E4  3F01               	moviw [1]fsr0
  3169  03E5  00B1               	movwf	DAC_WriteVoltage@volue+1
  3170  03E6  318F  2767  3183   	fcall	_DAC_WriteVoltage
  3171                           
  3172                           ;main.c: 45: }
  3173  03E9  2C8D               	goto	l3499
  3174  03EA                     l3509:	
  3175                           
  3176                           ;main.c: 46: else if(mTouch_Check(0x02))
  3177  03EA  3002               	movlw	2
  3178  03EB  3186  265F  3183   	fcall	_mTouch_Check
  3179  03EE  3A00               	xorlw	0
  3180  03EF  1903               	skipnz
  3181  03F0  2C04               	goto	l3521
  3182                           
  3183                           ;main.c: 47: {
  3184                           ;main.c: 48: Timer1_StopCount();
  3185  03F1  318D  2508  3183   	fcall	_Timer1_StopCount
  3186                           
  3187                           ;main.c: 49: LCD_DisplayClear();
  3188  03F4  318D  258C  3183   	fcall	_LCD_DisplayClear
  3189                           
  3190                           ;main.c: 50: if(state_mode==STOPPING)
  3191  03F7  0020               	movlb	0	; select bank0
  3192  03F8  0869               	movf	_state_mode,w
  3193  03F9  1D03               	btfss	3,2
  3194  03FA  2C02               	goto	l3519
  3195                           
  3196                           ;main.c: 51: state_mode = RESULT;
  3197  03FB  3002               	movlw	2
  3198  03FC  0021               	movlb	1	; select bank1
  3199  03FD  00DB               	movwf	??_main^(0+128)
  3200  03FE  085B               	movf	??_main^(0+128),w
  3201  03FF  0020               	movlb	0	; select bank0
  3202  0400  00E9               	movwf	_state_mode
  3203  0401  2CA4               	goto	l3549
  3204  0402                     l3519:	
  3205                           
  3206                           ;main.c: 52: else
  3207                           ;main.c: 53: state_mode = STOPPING;
  3208  0402  01E9               	clrf	_state_mode
  3209                           
  3210                           ;main.c: 54: }
  3211  0403  2CA4               	goto	l3549
  3212  0404                     l3521:	
  3213                           
  3214                           ;main.c: 55: else if(mTouch_Check(0x01)&&(state_mode!=COUNTING))
  3215  0404  3001               	movlw	1
  3216  0405  3186  265F  3183   	fcall	_mTouch_Check
  3217  0408  3A00               	xorlw	0
  3218  0409  1903               	skipnz
  3219  040A  2CA4               	goto	l3549
  3220  040B  0020               	movlb	0	; select bank0
  3221  040C  0369               	decf	_state_mode,w
  3222  040D  1903               	btfsc	3,2
  3223  040E  2CA4               	goto	l3549
  3224                           
  3225                           ;main.c: 56: {
  3226                           ;main.c: 57: Timer1_ClearRecord();
  3227  040F  318D  25F9  3183   	fcall	_Timer1_ClearRecord
  3228                           
  3229                           ;main.c: 58: }
  3230                           ;main.c: 60: switch(state_mode)
  3231  0412  2CA4               	goto	l3549
  3232  0413                     l3527:	
  3233                           ;main.c: 61: {
  3234                           ;main.c: 62: case COUNTING:
  3235                           
  3236                           
  3237                           ;main.c: 63: LCD_CursorPosition(0,0);
  3238  0413  0020               	movlb	0	; select bank0
  3239  0414  01A3               	clrf	LCD_CursorPosition@ty
  3240  0415  3000               	movlw	0
  3241  0416  318E  260E  3183   	fcall	_LCD_CursorPosition
  3242                           
  3243                           ;main.c: 64: printf("  Countting...  ");
  3244  0419  306F               	movlw	low (STR_1| (0+32768))
  3245  041A  0020               	movlb	0	; select bank0
  3246  041B  00C6               	movwf	printf@f
  3247  041C  3082               	movlw	high (STR_1| (0+32768))
  3248  041D  2C28               	goto	L2
  3249  041E                     l3533:	
  3250                           ;main.c: 69: case STOPPING:
  3251                           
  3252                           ;main.c: 67: break;
  3253                           
  3254                           ;main.c: 66: printf(" %7lu  %02d:%02d",Timer1_GetCountSum(),Timer1_GetMinute(),Timer1_Ge
      +                          tSecond());
  3255                           
  3256                           ;main.c: 65: LCD_CursorPosition(0,1);
  3257                           
  3258                           
  3259                           ;main.c: 70: LCD_CursorPosition(0,0);
  3260  041E  0020               	movlb	0	; select bank0
  3261  041F  01A3               	clrf	LCD_CursorPosition@ty
  3262  0420  3000               	movlw	0
  3263  0421  318E  260E  3183   	fcall	_LCD_CursorPosition
  3264                           
  3265                           ;main.c: 71: printf(" Count Stopped ");
  3266  0424  3091               	movlw	low (STR_3| (0+32768))
  3267  0425  0020               	movlb	0	; select bank0
  3268  0426  00C6               	movwf	printf@f
  3269  0427  3082               	movlw	high (STR_3| (0+32768))
  3270  0428                     L2:	
  3271  0428  00C7               	movwf	printf@f+1
  3272  0429  2C55               	goto	L1
  3273  042A                     l3539:	
  3274                           ;main.c: 76: case RESULT:
  3275                           
  3276                           ;main.c: 74: break;
  3277                           
  3278                           ;main.c: 73: printf(" %7lu  %02d:%02d",Timer1_GetCountSum(),Timer1_GetMinute(),Timer1_Ge
      +                          tSecond());
  3279                           
  3280                           ;main.c: 72: LCD_CursorPosition(0,1);
  3281                           
  3282                           
  3283                           ;main.c: 77: LCD_CursorPosition(0,0);
  3284  042A  0020               	movlb	0	; select bank0
  3285  042B  01A3               	clrf	LCD_CursorPosition@ty
  3286  042C  3000               	movlw	0
  3287  042D  318E  260E  3183   	fcall	_LCD_CursorPosition
  3288                           
  3289                           ;main.c: 78: printf("%7lu",Timer1_GetCPS());
  3290  0430  30B2               	movlw	low (STR_5| (0+32768))
  3291  0431  0020               	movlb	0	; select bank0
  3292  0432  00C6               	movwf	printf@f
  3293  0433  3083               	movlw	high (STR_5| (0+32768))
  3294  0434  00C7               	movwf	printf@f+1
  3295  0435  3187  2731  3183   	fcall	_Timer1_GetCPS
  3296  0438  0020               	movlb	0	; select bank0
  3297  0439  083D               	movf	?_Timer1_GetCPS+3,w
  3298  043A  00CB               	movwf	?_printf+5
  3299  043B  083C               	movf	?_Timer1_GetCPS+2,w
  3300  043C  00CA               	movwf	?_printf+4
  3301  043D  083B               	movf	?_Timer1_GetCPS+1,w
  3302  043E  00C9               	movwf	?_printf+3
  3303  043F  083A               	movf	?_Timer1_GetCPS,w
  3304  0440  00C8               	movwf	?_printf+2
  3305  0441  3180  205E  3183   	fcall	_printf
  3306                           
  3307                           ;main.c: 79: printf("%7lu",Timer1_GetCPM());
  3308  0444  30B2               	movlw	low (STR_5| (0+32768))
  3309  0445  0020               	movlb	0	; select bank0
  3310  0446  00C6               	movwf	printf@f
  3311  0447  3083               	movlw	high (STR_5| (0+32768))
  3312  0448  00C7               	movwf	printf@f+1
  3313  0449  318F  273F  3183   	fcall	_Timer1_GetCPM
  3314  044C  0020               	movlb	0	; select bank0
  3315  044D  0841               	movf	?_Timer1_GetCPM+3,w
  3316  044E  00CB               	movwf	?_printf+5
  3317  044F  0840               	movf	?_Timer1_GetCPM+2,w
  3318  0450  00CA               	movwf	?_printf+4
  3319  0451  083F               	movf	?_Timer1_GetCPM+1,w
  3320  0452  00C9               	movwf	?_printf+3
  3321  0453  083E               	movf	?_Timer1_GetCPM,w
  3322  0454  00C8               	movwf	?_printf+2
  3323  0455                     L1:	
  3324  0455  3180  205E  3183   	fcall	_printf
  3325                           
  3326                           ;main.c: 80: LCD_CursorPosition(0,1);
  3327  0458  0020               	movlb	0	; select bank0
  3328  0459  01A3               	clrf	LCD_CursorPosition@ty
  3329  045A  0AA3               	incf	LCD_CursorPosition@ty,f
  3330  045B  3000               	movlw	0
  3331  045C  318E  260E  3183   	fcall	_LCD_CursorPosition
  3332                           
  3333                           ;main.c: 81: printf(" %7lu  %02d:%02d",Timer1_GetCountSum(),Timer1_GetMinute(),Timer1_Ge
      +                          tSecond());
  3334  045F  3080               	movlw	low (STR_2| (0+32768))
  3335  0460  0020               	movlb	0	; select bank0
  3336  0461  00C6               	movwf	printf@f
  3337  0462  3082               	movlw	high (STR_2| (0+32768))
  3338  0463  00C7               	movwf	printf@f+1
  3339  0464  318D  25AD  3183   	fcall	_Timer1_GetCountSum
  3340  0467  0020               	movlb	0	; select bank0
  3341  0468  0823               	movf	?_Timer1_GetCountSum+3,w
  3342  0469  00CB               	movwf	?_printf+5
  3343  046A  0822               	movf	?_Timer1_GetCountSum+2,w
  3344  046B  00CA               	movwf	?_printf+4
  3345  046C  0821               	movf	?_Timer1_GetCountSum+1,w
  3346  046D  00C9               	movwf	?_printf+3
  3347  046E  0820               	movf	?_Timer1_GetCountSum,w
  3348  046F  00C8               	movwf	?_printf+2
  3349  0470  318D  2502  3183   	fcall	_Timer1_GetMinute
  3350  0473  0021               	movlb	1	; select bank1
  3351  0474  00DB               	movwf	??_main^(0+128)
  3352  0475  01DC               	clrf	(??_main^(0+128)+1)
  3353  0476  085B               	movf	??_main^(0+128),w
  3354  0477  0020               	movlb	0	; select bank0
  3355  0478  00CC               	movwf	?_printf+6
  3356  0479  0021               	movlb	1	; select bank1
  3357  047A  085C               	movf	(??_main+1)^(0+128),w
  3358  047B  0020               	movlb	0	; select bank0
  3359  047C  00CD               	movwf	?_printf+7
  3360  047D  318D  2505  3183   	fcall	_Timer1_GetSecond
  3361  0480  0021               	movlb	1	; select bank1
  3362  0481  00DD               	movwf	(??_main+2)^(0+128)
  3363  0482  01DE               	clrf	((??_main+2)^(0+128)+1)
  3364  0483  085D               	movf	(??_main+2)^(0+128),w
  3365  0484  0020               	movlb	0	; select bank0
  3366  0485  00CE               	movwf	?_printf+8
  3367  0486  0021               	movlb	1	; select bank1
  3368  0487  085E               	movf	(??_main+3)^(0+128),w
  3369  0488  0020               	movlb	0	; select bank0
  3370  0489  00CF               	movwf	?_printf+9
  3371  048A  3180  205E  3183   	fcall	_printf
  3372  048D                     l3499:	
  3373                           ;main.c: 37: while(1)
  3374                           
  3375                           ;main.c: 83: }
  3376                           
  3377                           ;main.c: 82: break;
  3378                           
  3379                           
  3380                           ;main.c: 38: {
  3381                           ;main.c: 39: LCD_CursorHome();
  3382  048D  318D  257C  3183   	fcall	_LCD_CursorHome
  3383                           
  3384                           ;main.c: 40: if(mTouch_Check(0x00)&&(state_mode==STOPPING))
  3385  0490  3000               	movlw	0
  3386  0491  3186  265F  3183   	fcall	_mTouch_Check
  3387  0494  3A00               	xorlw	0
  3388  0495  1903               	skipnz
  3389  0496  2BEA               	goto	l3509
  3390  0497  0020               	movlb	0	; select bank0
  3391  0498  0869               	movf	_state_mode,w
  3392  0499  1D03               	btfss	3,2
  3393  049A  2BEA               	goto	l3509
  3394                           
  3395                           ;main.c: 41: {
  3396                           ;main.c: 42: Timer1_StartCount();
  3397  049B  318D  250B  3183   	fcall	_Timer1_StartCount
  3398                           
  3399                           ;main.c: 43: LCD_DisplayClear();
  3400  049E  318D  258C  3183   	fcall	_LCD_DisplayClear
  3401                           
  3402                           ;main.c: 44: state_mode = COUNTING;
  3403  04A1  0020               	movlb	0	; select bank0
  3404  04A2  01E9               	clrf	_state_mode
  3405  04A3  0AE9               	incf	_state_mode,f
  3406  04A4                     l3549:	
  3407  04A4  0020               	movlb	0	; select bank0
  3408  04A5  0869               	movf	_state_mode,w
  3409                           
  3410                           ; Switch size 1, requested type "space"
  3411                           ; Number of cases is 3, Range of values is 0 to 2
  3412                           ; switch strategies available:
  3413                           ; Name         Instructions Cycles
  3414                           ; simple_byte           10     6 (average)
  3415                           ; direct_byte           12     6 (fixed)
  3416                           ; jumptable            260     6 (fixed)
  3417                           ;	Chosen strategy is simple_byte
  3418  04A6  3A00               	xorlw	0	; case 0
  3419  04A7  1903               	skipnz
  3420  04A8  2C1E               	goto	l3533
  3421  04A9  3A01               	xorlw	1	; case 1
  3422  04AA  1903               	skipnz
  3423  04AB  2C13               	goto	l3527
  3424  04AC  3A03               	xorlw	3	; case 2
  3425  04AD  1903               	skipnz
  3426  04AE  2C2A               	goto	l3539
  3427  04AF  2C8D               	goto	l3499
  3428  04B0  2C8D               	goto	l3499
  3429  04B1                     __end_of_main:	
  3430                           ;main.c: 85: }
  3431                           ;main.c: 86: return 0;
  3432                           ;	Return value of _main is never used
  3433                           
  3434                           
  3435                           	psect	text1
  3436  005E                     __ptext1:	
  3437 ;; *************** function _printf *****************
  3438 ;; Defined at:
  3439 ;;		line 464 in file "/opt/microchip/xc8/v1.41/sources/common/doprnt.c"
  3440 ;; Parameters:    Size  Location     Type
  3441 ;;  f               2   38[BANK0 ] PTR const unsigned char 
  3442 ;;		 -> STR_7(17), STR_6(5), STR_5(5), STR_4(17), 
  3443 ;;		 -> STR_3(16), STR_2(17), STR_1(17), 
  3444 ;; Auto vars:     Size  Location     Type
  3445 ;;  val             4   56[BANK0 ] unsigned long 
  3446 ;;  tmpval          4    0        struct .
  3447 ;;  width           2   62[BANK0 ] int 
  3448 ;;  prec            2   54[BANK0 ] int 
  3449 ;;  cp              2    0        PTR const unsigned char 
  3450 ;;  len             2    0        unsigned int 
  3451 ;;  c               1   64[BANK0 ] char 
  3452 ;;  flag            1   61[BANK0 ] unsigned char 
  3453 ;;  ap              1   60[BANK0 ] PTR void [1]
  3454 ;;		 -> ?_printf(2), 
  3455 ;; Return value:  Size  Location     Type
  3456 ;;                  2   38[BANK0 ] int 
  3457 ;; Registers used:
  3458 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3459 ;; Tracked objects:
  3460 ;;		On entry : 0/0
  3461 ;;		On exit  : 0/0
  3462 ;;		Unchanged: 0/0
  3463 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  3464 ;;      Params:         0      10       0       0       0       0
  3465 ;;      Locals:         0      11       0       0       0       0
  3466 ;;      Temps:          0       6       0       0       0       0
  3467 ;;      Totals:         0      27       0       0       0       0
  3468 ;;Total ram usage:       27 bytes
  3469 ;; Hardware stack levels used:    1
  3470 ;; Hardware stack levels required when called:    5
  3471 ;; This function calls:
  3472 ;;		___lldiv
  3473 ;;		___llmod
  3474 ;;		___wmul
  3475 ;;		_isdigit
  3476 ;;		_putch
  3477 ;; This function is called by:
  3478 ;;		_main
  3479 ;; This function uses a non-reentrant model
  3480 ;;
  3481                           
  3482                           
  3483                           ;psect for function _printf
  3484  005E                     _printf:	
  3485                           
  3486                           ;doprnt.c: 466: va_list ap;
  3487                           ;doprnt.c: 499: signed char c;
  3488                           ;doprnt.c: 501: int width;
  3489                           ;doprnt.c: 504: int prec;
  3490                           ;doprnt.c: 508: unsigned char flag;
  3491                           ;doprnt.c: 523: union {
  3492                           ;doprnt.c: 524: unsigned long vd;
  3493                           ;doprnt.c: 525: double integ;
  3494                           ;doprnt.c: 526: } tmpval;
  3495                           ;doprnt.c: 528: unsigned long val;
  3496                           ;doprnt.c: 529: unsigned len;
  3497                           ;doprnt.c: 530: const char * cp;
  3498                           ;doprnt.c: 533: *ap = __va_start();
  3499                           
  3500                           ;incstack = 0
  3501                           ; Regs used in _printf: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3502  005E  3048               	movlw	(low ((?_printf| 0+2)))& (0+255)
  3503  005F  0020               	movlb	0	; select bank0
  3504  0060  00D0               	movwf	??_printf
  3505  0061  0850               	movf	??_printf,w
  3506  0062  00DC               	movwf	printf@ap
  3507  0063                     l3455:	
  3508                           ;doprnt.c: 536: while(c = *f++) {
  3509                           
  3510  0063  0020               	movlb	0	; select bank0
  3511  0064  0847               	movf	printf@f+1,w
  3512  0065  00D1               	movwf	??_printf+1
  3513  0066  0846               	movf	printf@f,w
  3514  0067  00D0               	movwf	??_printf
  3515  0068  0AC6               	incf	printf@f,f
  3516  0069  1903               	skipnz
  3517  006A  0AC7               	incf	printf@f+1,f
  3518  006B  0850               	movf	??_printf,w
  3519  006C  0084               	movwf	4
  3520  006D  0851               	movf	??_printf+1,w
  3521  006E  0085               	movwf	5
  3522  006F  0800               	movf	0,w	;code access
  3523  0070  00D2               	movwf	??_printf+2
  3524  0071  0852               	movf	??_printf+2,w
  3525  0072  00E0               	movwf	printf@c
  3526  0073  0860               	movf	printf@c,w
  3527  0074  1903               	btfsc	3,2
  3528  0075  0008               	return
  3529                           
  3530                           ;doprnt.c: 538: if(c != '%')
  3531  0076  3025               	movlw	37
  3532  0077  0660               	xorwf	printf@c,w
  3533  0078  1903               	btfsc	3,2
  3534  0079  287F               	goto	l3355
  3535                           
  3536                           ;doprnt.c: 540: {
  3537                           ;doprnt.c: 541: (putch(c) );
  3538  007A  0860               	movf	printf@c,w
  3539  007B  318D  2525  3180   	fcall	_putch
  3540                           
  3541                           ;doprnt.c: 542: continue;
  3542  007E  2863               	goto	l3455
  3543  007F                     l3355:	
  3544                           
  3545                           ;doprnt.c: 543: }
  3546                           ;doprnt.c: 546: width = 0;
  3547  007F  0020               	movlb	0	; select bank0
  3548  0080  01DE               	clrf	printf@width
  3549  0081  01DF               	clrf	printf@width+1
  3550                           
  3551                           ;doprnt.c: 548: flag = 0;
  3552  0082  01DD               	clrf	printf@flag
  3553                           
  3554                           ;doprnt.c: 551: switch(*f) {
  3555                           
  3556                           ;doprnt.c: 550: for(;;) {
  3557  0083  2889               	goto	l3361
  3558  0084                     l549:	
  3559                           ;doprnt.c: 579: case '0':
  3560                           
  3561                           
  3562                           ;doprnt.c: 580: flag |= 0x04;
  3563  0084  155D               	bsf	printf@flag,2
  3564                           
  3565                           ;doprnt.c: 581: f++;
  3566  0085  3001               	movlw	1
  3567  0086  07C6               	addwf	printf@f,f
  3568  0087  3000               	movlw	0
  3569  0088  3DC7               	addwfc	printf@f+1,f
  3570  0089                     l3361:	
  3571                           ;doprnt.c: 584: }
  3572                           
  3573                           ;doprnt.c: 582: continue;
  3574                           
  3575  0089  0846               	movf	printf@f,w
  3576  008A  0084               	movwf	4
  3577  008B  0847               	movf	printf@f+1,w
  3578  008C  0085               	movwf	5
  3579  008D  0800               	movf	0,w	;code access
  3580                           
  3581                           ; Switch size 1, requested type "space"
  3582                           ; Number of cases is 1, Range of values is 48 to 48
  3583                           ; switch strategies available:
  3584                           ; Name         Instructions Cycles
  3585                           ; simple_byte            4     3 (average)
  3586                           ; direct_byte           11     9 (fixed)
  3587                           ; jumptable            263     9 (fixed)
  3588                           ;	Chosen strategy is simple_byte
  3589  008E  3A30               	xorlw	48	; case 48
  3590  008F  1903               	skipnz
  3591  0090  2884               	goto	l549
  3592  0091  2892               	goto	l3363
  3593  0092                     l3363:	
  3594                           ;doprnt.c: 586: }
  3595                           
  3596                           ;doprnt.c: 585: break;
  3597                           
  3598                           
  3599                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  3600  0092  0846               	movf	printf@f,w
  3601  0093  0084               	movwf	4
  3602  0094  0847               	movf	printf@f+1,w
  3603  0095  0085               	movwf	5
  3604  0096  0800               	movf	0,w	;code access
  3605  0097  318D  255D  3180   	fcall	_isdigit
  3606  009A  1C03               	btfss	3,0
  3607  009B  28D2               	goto	l3377
  3608                           
  3609                           ;doprnt.c: 598: width = 0;
  3610  009C  0020               	movlb	0	; select bank0
  3611  009D  01DE               	clrf	printf@width
  3612  009E  01DF               	clrf	printf@width+1
  3613  009F                     l3367:	
  3614                           ;doprnt.c: 599: do {
  3615                           
  3616                           
  3617                           ;doprnt.c: 600: width *= 10;
  3618  009F  300A               	movlw	10
  3619  00A0  0020               	movlb	0	; select bank0
  3620  00A1  00A0               	movwf	___wmul@multiplier
  3621  00A2  3000               	movlw	0
  3622  00A3  00A1               	movwf	___wmul@multiplier+1
  3623  00A4  085F               	movf	printf@width+1,w
  3624  00A5  00A3               	movwf	___wmul@multiplicand+1
  3625  00A6  085E               	movf	printf@width,w
  3626  00A7  00A2               	movwf	___wmul@multiplicand
  3627  00A8  318E  2676  3180   	fcall	___wmul
  3628  00AB  0020               	movlb	0	; select bank0
  3629  00AC  0821               	movf	?___wmul+1,w
  3630  00AD  00DF               	movwf	printf@width+1
  3631  00AE  0820               	movf	?___wmul,w
  3632  00AF  00DE               	movwf	printf@width
  3633                           
  3634                           ;doprnt.c: 601: width += *f++ - '0';
  3635  00B0  0846               	movf	printf@f,w
  3636  00B1  0084               	movwf	4
  3637  00B2  0847               	movf	printf@f+1,w
  3638  00B3  0085               	movwf	5
  3639  00B4  0800               	movf	0,w	;code access
  3640  00B5  3ED0               	addlw	208
  3641  00B6  00D0               	movwf	??_printf
  3642  00B7  30FF               	movlw	255
  3643  00B8  1803               	skipnc
  3644  00B9  3000               	movlw	0
  3645  00BA  00D1               	movwf	??_printf+1
  3646  00BB  0850               	movf	??_printf,w
  3647  00BC  07DE               	addwf	printf@width,f
  3648  00BD  0851               	movf	??_printf+1,w
  3649  00BE  3DDF               	addwfc	printf@width+1,f
  3650  00BF  3001               	movlw	1
  3651  00C0  07C6               	addwf	printf@f,f
  3652  00C1  3000               	movlw	0
  3653  00C2  3DC7               	addwfc	printf@f+1,f
  3654                           
  3655                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  3656  00C3  0846               	movf	printf@f,w
  3657  00C4  0084               	movwf	4
  3658  00C5  0847               	movf	printf@f+1,w
  3659  00C6  0085               	movwf	5
  3660  00C7  0800               	movf	0,w	;code access
  3661  00C8  318D  255D  3180   	fcall	_isdigit
  3662  00CB  1C03               	btfss	3,0
  3663  00CC  28D2               	goto	l3377
  3664  00CD  289F               	goto	l3367
  3665  00CE                     l560:	
  3666                           ;doprnt.c: 641: case 'l':
  3667                           
  3668                           ;doprnt.c: 638: goto alldone;
  3669                           
  3670                           ;doprnt.c: 637: case 0:
  3671                           
  3672                           ;doprnt.c: 635: switch(c = *f++) {
  3673                           
  3674                           ;doprnt.c: 608: }
  3675                           ;doprnt.c: 633: loop:
  3676                           
  3677                           
  3678                           ;doprnt.c: 643: flag |= 0x10;
  3679  00CE  165D               	bsf	printf@flag,4
  3680                           
  3681                           ;doprnt.c: 644: goto loop;
  3682  00CF  28D2               	goto	l3377
  3683  00D0                     l565:	
  3684                           ;doprnt.c: 817: case 'u':
  3685                           
  3686                           ;doprnt.c: 813: continue;
  3687                           
  3688                           ;doprnt.c: 802: default:
  3689                           
  3690                           ;doprnt.c: 698: case 'i':
  3691                           ;doprnt.c: 699: break;
  3692                           
  3693                           ;doprnt.c: 697: case 'd':
  3694                           
  3695                           
  3696                           ;doprnt.c: 818: flag |= 0x40;
  3697  00D0  175D               	bsf	printf@flag,6
  3698                           
  3699                           ;doprnt.c: 822: }
  3700                           
  3701                           ;doprnt.c: 819: break;
  3702  00D1  28F0               	goto	l563
  3703  00D2                     l3377:	
  3704  00D2  0020               	movlb	0	; select bank0
  3705  00D3  0847               	movf	printf@f+1,w
  3706  00D4  00D1               	movwf	??_printf+1
  3707  00D5  0846               	movf	printf@f,w
  3708  00D6  00D0               	movwf	??_printf
  3709  00D7  0AC6               	incf	printf@f,f
  3710  00D8  1903               	skipnz
  3711  00D9  0AC7               	incf	printf@f+1,f
  3712  00DA  0850               	movf	??_printf,w
  3713  00DB  0084               	movwf	4
  3714  00DC  0851               	movf	??_printf+1,w
  3715  00DD  0085               	movwf	5
  3716  00DE  0800               	movf	0,w	;code access
  3717  00DF  00E0               	movwf	printf@c
  3718                           
  3719                           ; Switch size 1, requested type "space"
  3720                           ; Number of cases is 5, Range of values is 0 to 117
  3721                           ; switch strategies available:
  3722                           ; Name         Instructions Cycles
  3723                           ; simple_byte           16     9 (average)
  3724                           ; direct_byte          242     6 (fixed)
  3725                           ; jumptable            260     6 (fixed)
  3726                           ;	Chosen strategy is simple_byte
  3727  00E0  3A00               	xorlw	0	; case 0
  3728  00E1  1903               	skipnz
  3729  00E2  2A25               	goto	l593
  3730  00E3  3A64               	xorlw	100	; case 100
  3731  00E4  1903               	skipnz
  3732  00E5  28F0               	goto	l563
  3733  00E6  3A0D               	xorlw	13	; case 105
  3734  00E7  1903               	skipnz
  3735  00E8  28F0               	goto	l563
  3736  00E9  3A05               	xorlw	5	; case 108
  3737  00EA  1903               	skipnz
  3738  00EB  28CE               	goto	l560
  3739  00EC  3A19               	xorlw	25	; case 117
  3740  00ED  1903               	skipnz
  3741  00EE  28D0               	goto	l565
  3742  00EF  2863               	goto	l3455
  3743  00F0                     l563:	
  3744                           
  3745                           ;doprnt.c: 1251: if((flag & 0x40) == 0x00)
  3746  00F0  1B5D               	btfsc	printf@flag,6
  3747  00F1  2927               	goto	l566
  3748                           
  3749                           ;doprnt.c: 1253: {
  3750                           ;doprnt.c: 1255: if(flag & 0x10)
  3751  00F2  1E5D               	btfss	printf@flag,4
  3752  00F3  2901               	goto	l3385
  3753                           
  3754                           ;doprnt.c: 1256: val = (*(long *)__va_arg((*(long **)ap), (long)0));
  3755  00F4  085C               	movf	printf@ap,w
  3756  00F5  0086               	movwf	6
  3757  00F6  0187               	clrf	7
  3758  00F7  3F40               	moviw [0]fsr1
  3759  00F8  00D8               	movwf	printf@val
  3760  00F9  3F41               	moviw [1]fsr1
  3761  00FA  00D9               	movwf	printf@val+1
  3762  00FB  3F42               	moviw [2]fsr1
  3763  00FC  00DA               	movwf	printf@val+2
  3764  00FD  3F43               	moviw [3]fsr1
  3765  00FE  00DB               	movwf	printf@val+3
  3766  00FF  3004               	movlw	4
  3767  0100  2912               	goto	L4
  3768  0101                     l3385:	
  3769                           
  3770                           ;doprnt.c: 1257: else
  3771                           ;doprnt.c: 1259: val = (long)(*(int *)__va_arg((*(int **)ap), (int)0));
  3772  0101  085C               	movf	printf@ap,w
  3773  0102  0086               	movwf	6
  3774  0103  0187               	clrf	7
  3775  0104  3F40               	moviw [0]fsr1
  3776  0105  00D0               	movwf	??_printf
  3777  0106  3F41               	moviw [1]fsr1
  3778  0107  00D1               	movwf	??_printf+1
  3779  0108  0850               	movf	??_printf,w
  3780  0109  00D8               	movwf	printf@val
  3781  010A  0851               	movf	??_printf+1,w
  3782  010B  00D9               	movwf	printf@val+1
  3783  010C  0D89               	rlf	9,f
  3784  010D  3B89               	subwfb	9,f
  3785  010E  0989               	comf	9,f
  3786  010F  00DA               	movwf	printf@val+2
  3787  0110  00DB               	movwf	printf@val+3
  3788  0111  3002               	movlw	2
  3789  0112                     L4:	
  3790  0112  00D0               	movwf	??_printf
  3791  0113  0850               	movf	??_printf,w
  3792  0114  07DC               	addwf	printf@ap,f
  3793                           
  3794                           ;doprnt.c: 1261: if((long)val < 0) {
  3795  0115  1FDB               	btfss	printf@val+3,7
  3796  0116  2947               	goto	l3403
  3797                           
  3798                           ;doprnt.c: 1262: flag |= 0x03;
  3799  0117  3003               	movlw	3
  3800  0118  00D0               	movwf	??_printf
  3801  0119  0850               	movf	??_printf,w
  3802  011A  04DD               	iorwf	printf@flag,f
  3803                           
  3804                           ;doprnt.c: 1263: val = -val;
  3805  011B  09D8               	comf	printf@val,f
  3806  011C  09D9               	comf	printf@val+1,f
  3807  011D  09DA               	comf	printf@val+2,f
  3808  011E  09DB               	comf	printf@val+3,f
  3809  011F  0AD8               	incf	printf@val,f
  3810  0120  1903               	skipnz
  3811  0121  0AD9               	incf	printf@val+1,f
  3812  0122  1903               	skipnz
  3813  0123  0ADA               	incf	printf@val+2,f
  3814  0124  1903               	skipnz
  3815  0125  0ADB               	incf	printf@val+3,f
  3816                           
  3817                           ;doprnt.c: 1264: }
  3818                           ;doprnt.c: 1266: }
  3819  0126  2947               	goto	l3403
  3820  0127                     l566:	
  3821                           
  3822                           ;doprnt.c: 1268: else
  3823                           ;doprnt.c: 1273: {
  3824                           ;doprnt.c: 1281: if(flag & 0x10)
  3825  0127  1E5D               	btfss	printf@flag,4
  3826  0128  2936               	goto	l3399
  3827                           
  3828                           ;doprnt.c: 1282: val = (*(unsigned long *)__va_arg((*(unsigned long **)ap), (unsigned lo
      +                          ng)0));
  3829  0129  085C               	movf	printf@ap,w
  3830  012A  0086               	movwf	6
  3831  012B  0187               	clrf	7
  3832  012C  3F40               	moviw [0]fsr1
  3833  012D  00D8               	movwf	printf@val
  3834  012E  3F41               	moviw [1]fsr1
  3835  012F  00D9               	movwf	printf@val+1
  3836  0130  3F42               	moviw [2]fsr1
  3837  0131  00DA               	movwf	printf@val+2
  3838  0132  3F43               	moviw [3]fsr1
  3839  0133  00DB               	movwf	printf@val+3
  3840  0134  3004               	movlw	4
  3841  0135  2944               	goto	L5
  3842  0136                     l3399:	
  3843                           
  3844                           ;doprnt.c: 1283: else
  3845                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  3846  0136  085C               	movf	printf@ap,w
  3847  0137  0086               	movwf	6
  3848  0138  0187               	clrf	7
  3849  0139  3F40               	moviw [0]fsr1
  3850  013A  00D0               	movwf	??_printf
  3851  013B  3F41               	moviw [1]fsr1
  3852  013C  00D1               	movwf	??_printf+1
  3853  013D  0850               	movf	??_printf,w
  3854  013E  00D8               	movwf	printf@val
  3855  013F  0851               	movf	??_printf+1,w
  3856  0140  00D9               	movwf	printf@val+1
  3857  0141  01DA               	clrf	printf@val+2
  3858  0142  01DB               	clrf	printf@val+3
  3859  0143  3002               	movlw	2
  3860  0144                     L5:	
  3861  0144  00D0               	movwf	??_printf
  3862  0145  0850               	movf	??_printf,w
  3863  0146  07DC               	addwf	printf@ap,f
  3864  0147                     l3403:	
  3865                           
  3866                           ;doprnt.c: 1287: }
  3867                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  3868  0147  01E0               	clrf	printf@c
  3869  0148  0AE0               	incf	printf@c,f
  3870  0149  300A               	movlw	10
  3871  014A  0660               	xorwf	printf@c,w
  3872  014B  1903               	btfsc	3,2
  3873  014C  297A               	goto	l3415
  3874  014D                     l3409:	
  3875                           
  3876                           ;doprnt.c: 1306: if(val < dpowers[c])
  3877  014D  0860               	movf	printf@c,w
  3878  014E  00D0               	movwf	??_printf
  3879  014F  01D1               	clrf	??_printf+1
  3880  0150  35D0               	lslf	??_printf,f
  3881  0151  0DD1               	rlf	??_printf+1,f
  3882  0152  35D0               	lslf	??_printf,f
  3883  0153  0DD1               	rlf	??_printf+1,f
  3884  0154  3026               	movlw	low (_dpowers| (0+32768))
  3885  0155  0750               	addwf	??_printf,w
  3886  0156  0084               	movwf	4
  3887  0157  3082               	movlw	high (_dpowers| (0+32768))
  3888  0158  3D51               	addwfc	??_printf+1,w
  3889  0159  0085               	movwf	5
  3890  015A  3F00               	moviw [0]fsr0
  3891  015B  00D2               	movwf	??_printf+2
  3892  015C  3F01               	moviw [1]fsr0
  3893  015D  00D3               	movwf	??_printf+3
  3894  015E  3F02               	moviw [2]fsr0
  3895  015F  00D4               	movwf	??_printf+4
  3896  0160  3F03               	moviw [3]fsr0
  3897  0161  00D5               	movwf	??_printf+5
  3898  0162  0855               	movf	??_printf+5,w
  3899  0163  025B               	subwf	printf@val+3,w
  3900  0164  1D03               	skipz
  3901  0165  2970               	goto	u2855
  3902  0166  0854               	movf	??_printf+4,w
  3903  0167  025A               	subwf	printf@val+2,w
  3904  0168  1D03               	skipz
  3905  0169  2970               	goto	u2855
  3906  016A  0853               	movf	??_printf+3,w
  3907  016B  0259               	subwf	printf@val+1,w
  3908  016C  1D03               	skipz
  3909  016D  2970               	goto	u2855
  3910  016E  0852               	movf	??_printf+2,w
  3911  016F  0258               	subwf	printf@val,w
  3912  0170                     u2855:	
  3913  0170  1C03               	btfss	3,0
  3914  0171  297A               	goto	l3415
  3915                           
  3916                           ;doprnt.c: 1307: break;
  3917  0172  3001               	movlw	1
  3918  0173  00D0               	movwf	??_printf
  3919  0174  0850               	movf	??_printf,w
  3920  0175  07E0               	addwf	printf@c,f
  3921  0176  300A               	movlw	10
  3922  0177  0660               	xorwf	printf@c,w
  3923  0178  1D03               	btfss	3,2
  3924  0179  294D               	goto	l3409
  3925  017A                     l3415:	
  3926                           
  3927                           ;doprnt.c: 1345: if(width && flag & 0x03)
  3928  017A  085E               	movf	printf@width,w
  3929  017B  045F               	iorwf	printf@width+1,w
  3930  017C  1903               	btfsc	3,2
  3931  017D  2986               	goto	l576
  3932  017E  085D               	movf	printf@flag,w
  3933  017F  3903               	andlw	3
  3934  0180  1903               	btfsc	3,2
  3935  0181  2986               	goto	l576
  3936                           
  3937                           ;doprnt.c: 1346: width--;
  3938  0182  30FF               	movlw	255
  3939  0183  07DE               	addwf	printf@width,f
  3940  0184  30FF               	movlw	255
  3941  0185  3DDF               	addwfc	printf@width+1,f
  3942  0186                     l576:	
  3943                           
  3944                           ;doprnt.c: 1381: if(width > c)
  3945  0186  0860               	movf	printf@c,w
  3946  0187  00D0               	movwf	??_printf
  3947  0188  01D1               	clrf	??_printf+1
  3948  0189  1BD0               	btfsc	??_printf,7
  3949  018A  03D1               	decf	??_printf+1,f
  3950  018B  0851               	movf	??_printf+1,w
  3951  018C  3A80               	xorlw	128
  3952  018D  00D2               	movwf	??_printf+2
  3953  018E  085F               	movf	printf@width+1,w
  3954  018F  3A80               	xorlw	128
  3955  0190  0252               	subwf	??_printf+2,w
  3956  0191  1D03               	skipz
  3957  0192  2995               	goto	u2895
  3958  0193  085E               	movf	printf@width,w
  3959  0194  0250               	subwf	??_printf,w
  3960  0195                     u2895:	
  3961  0195  1803               	skipnc
  3962  0196  29A2               	goto	l3423
  3963                           
  3964                           ;doprnt.c: 1382: width -= c;
  3965  0197  0020               	movlb	0	; select bank0
  3966  0198  0860               	movf	printf@c,w
  3967  0199  00D0               	movwf	??_printf
  3968  019A  01D1               	clrf	??_printf+1
  3969  019B  1BD0               	btfsc	??_printf,7
  3970  019C  03D1               	decf	??_printf+1,f
  3971  019D  0850               	movf	??_printf,w
  3972  019E  02DE               	subwf	printf@width,f
  3973  019F  0851               	movf	??_printf+1,w
  3974  01A0  3BDF               	subwfb	printf@width+1,f
  3975  01A1  29A5               	goto	l3425
  3976  01A2                     l3423:	
  3977                           
  3978                           ;doprnt.c: 1383: else
  3979                           ;doprnt.c: 1384: width = 0;
  3980  01A2  0020               	movlb	0	; select bank0
  3981  01A3  01DE               	clrf	printf@width
  3982  01A4  01DF               	clrf	printf@width+1
  3983  01A5                     l3425:	
  3984                           
  3985                           ;doprnt.c: 1387: if(flag & 0x04) {
  3986  01A5  1D5D               	btfss	printf@flag,2
  3987  01A6  29BE               	goto	l3437
  3988                           
  3989                           ;doprnt.c: 1392: if(flag & 0x03)
  3990  01A7  085D               	movf	printf@flag,w
  3991  01A8  3903               	andlw	3
  3992  01A9  1903               	btfsc	3,2
  3993  01AA  29AF               	goto	l3431
  3994                           
  3995                           ;doprnt.c: 1393: (putch('-') );
  3996  01AB  302D               	movlw	45
  3997  01AC  318D  2525  3180   	fcall	_putch
  3998  01AF                     l3431:	
  3999                           
  4000                           ;doprnt.c: 1415: if(width)
  4001  01AF  0020               	movlb	0	; select bank0
  4002  01B0                     L6:	
  4003  01B0  085E               	movf	printf@width,w
  4004  01B1  045F               	iorwf	printf@width+1,w
  4005  01B2  1903               	btfsc	3,2
  4006  01B3  29D7               	goto	l3447
  4007                           
  4008                           ;doprnt.c: 1417: (putch('0') );
  4009                           
  4010                           ;doprnt.c: 1416: do
  4011  01B4  3030               	movlw	48
  4012  01B5  318D  2525  3180   	fcall	_putch
  4013                           
  4014                           ;doprnt.c: 1418: while(--width);
  4015  01B8  30FF               	movlw	255
  4016  01B9  0020               	movlb	0	; select bank0
  4017  01BA  07DE               	addwf	printf@width,f
  4018  01BB  30FF               	movlw	255
  4019  01BC  3DDF               	addwfc	printf@width+1,f
  4020  01BD  29B0               	goto	L6
  4021  01BE                     l3437:	
  4022                           ;doprnt.c: 1420: } else
  4023                           
  4024                           
  4025                           ;doprnt.c: 1422: {
  4026                           ;doprnt.c: 1424: if(width
  4027                           ;doprnt.c: 1428: )
  4028  01BE  085E               	movf	printf@width,w
  4029  01BF  045F               	iorwf	printf@width+1,w
  4030  01C0  1903               	btfsc	3,2
  4031  01C1  29CF               	goto	l3443
  4032  01C2                     l3439:	
  4033                           ;doprnt.c: 1429: do
  4034                           
  4035                           
  4036                           ;doprnt.c: 1430: (putch(' ') );
  4037  01C2  3020               	movlw	32
  4038  01C3  318D  2525  3180   	fcall	_putch
  4039                           
  4040                           ;doprnt.c: 1431: while(--width);
  4041  01C6  30FF               	movlw	255
  4042  01C7  0020               	movlb	0	; select bank0
  4043  01C8  07DE               	addwf	printf@width,f
  4044  01C9  30FF               	movlw	255
  4045  01CA  3DDF               	addwfc	printf@width+1,f
  4046  01CB  085E               	movf	printf@width,w
  4047  01CC  045F               	iorwf	printf@width+1,w
  4048  01CD  1D03               	btfss	3,2
  4049  01CE  29C2               	goto	l3439
  4050  01CF                     l3443:	
  4051                           
  4052                           ;doprnt.c: 1438: if(flag & 0x03)
  4053  01CF  085D               	movf	printf@flag,w
  4054  01D0  3903               	andlw	3
  4055  01D1  1903               	btfsc	3,2
  4056  01D2  29D7               	goto	l3447
  4057                           
  4058                           ;doprnt.c: 1439: (putch('-') );
  4059  01D3  302D               	movlw	45
  4060  01D4  318D  2525  3180   	fcall	_putch
  4061  01D7                     l3447:	
  4062                           
  4063                           ;doprnt.c: 1469: }
  4064                           ;doprnt.c: 1472: prec = c;
  4065  01D7  0020               	movlb	0	; select bank0
  4066  01D8  0860               	movf	printf@c,w
  4067  01D9  00D6               	movwf	printf@prec
  4068  01DA  01D7               	clrf	printf@prec+1
  4069  01DB  1BD6               	btfsc	printf@prec,7
  4070  01DC  03D7               	decf	printf@prec+1,f
  4071  01DD                     l3453:	
  4072                           ;doprnt.c: 1474: while(prec--) {
  4073                           
  4074  01DD  30FF               	movlw	255
  4075  01DE  0020               	movlb	0	; select bank0
  4076  01DF  07D6               	addwf	printf@prec,f
  4077  01E0  30FF               	movlw	255
  4078  01E1  3DD7               	addwfc	printf@prec+1,f
  4079  01E2  0A56               	incf	printf@prec,w
  4080  01E3  1903               	btfsc	3,2
  4081  01E4  0A57               	incf	printf@prec+1,w
  4082  01E5  1903               	btfsc	3,2
  4083  01E6  2863               	goto	l3455
  4084                           
  4085                           ;doprnt.c: 1478: {
  4086                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  4087  01E7  3000               	movlw	0
  4088  01E8  00BD               	movwf	___llmod@divisor+3
  4089  01E9  3000               	movlw	0
  4090  01EA  00BC               	movwf	___llmod@divisor+2
  4091  01EB  3000               	movlw	0
  4092  01EC  00BB               	movwf	___llmod@divisor+1
  4093  01ED  300A               	movlw	10
  4094  01EE  00BA               	movwf	___llmod@divisor
  4095  01EF  0857               	movf	printf@prec+1,w
  4096  01F0  0085               	movwf	5
  4097  01F1  0856               	movf	printf@prec,w
  4098  01F2  0084               	movwf	4
  4099  01F3  3584               	lslf	4,f
  4100  01F4  0D85               	rlf	5,f
  4101  01F5  3584               	lslf	4,f
  4102  01F6  0D85               	rlf	5,f
  4103  01F7  3026               	movlw	low (_dpowers| (0+32768))
  4104  01F8  0784               	addwf	4,f
  4105  01F9  3082               	movlw	high (_dpowers| (0+32768))
  4106  01FA  3D85               	addwfc	5,f
  4107  01FB  3F00               	moviw [0]fsr0
  4108  01FC  00AC               	movwf	___lldiv@divisor
  4109  01FD  3F01               	moviw [1]fsr0
  4110  01FE  00AD               	movwf	___lldiv@divisor+1
  4111  01FF  3F02               	moviw [2]fsr0
  4112  0200  00AE               	movwf	___lldiv@divisor+2
  4113  0201  3F03               	moviw [3]fsr0
  4114  0202  00AF               	movwf	___lldiv@divisor+3
  4115  0203  085B               	movf	printf@val+3,w
  4116  0204  00B3               	movwf	___lldiv@dividend+3
  4117  0205  085A               	movf	printf@val+2,w
  4118  0206  00B2               	movwf	___lldiv@dividend+2
  4119  0207  0859               	movf	printf@val+1,w
  4120  0208  00B1               	movwf	___lldiv@dividend+1
  4121  0209  0858               	movf	printf@val,w
  4122  020A  00B0               	movwf	___lldiv@dividend
  4123  020B  3186  260C  3180   	fcall	___lldiv
  4124  020E  0020               	movlb	0	; select bank0
  4125  020F  082F               	movf	?___lldiv+3,w
  4126  0210  00C1               	movwf	___llmod@dividend+3
  4127  0211  082E               	movf	?___lldiv+2,w
  4128  0212  00C0               	movwf	___llmod@dividend+2
  4129  0213  082D               	movf	?___lldiv+1,w
  4130  0214  00BF               	movwf	___llmod@dividend+1
  4131  0215  082C               	movf	?___lldiv,w
  4132  0216  00BE               	movwf	___llmod@dividend
  4133  0217  3186  26EE  3180   	fcall	___llmod
  4134  021A  0020               	movlb	0	; select bank0
  4135  021B  083A               	movf	?___llmod,w
  4136  021C  3E30               	addlw	48
  4137  021D  00D0               	movwf	??_printf
  4138  021E  0850               	movf	??_printf,w
  4139  021F  00E0               	movwf	printf@c
  4140                           
  4141                           ;doprnt.c: 1523: }
  4142                           ;doprnt.c: 1524: (putch(c) );
  4143  0220  0860               	movf	printf@c,w
  4144  0221  318D  2525  3180   	fcall	_putch
  4145  0224  29DD               	goto	l3453
  4146  0225                     l593:	
  4147                           ;doprnt.c: 1540: return 0;
  4148                           ;	Return value of _printf is never used
  4149                           
  4150                           ;doprnt.c: 1525: }
  4151                           ;doprnt.c: 1533: }
  4152                           ;doprnt.c: 1535: alldone:
  4153                           
  4154  0225  0008               	return
  4155  0226                     __end_of_printf:	
  4156                           
  4157                           	psect	text2
  4158  0D25                     __ptext2:	
  4159 ;; *************** function _putch *****************
  4160 ;; Defined at:
  4161 ;;		line 64 in file "LCD.c"
  4162 ;; Parameters:    Size  Location     Type
  4163 ;;  c               1    wreg     unsigned char 
  4164 ;; Auto vars:     Size  Location     Type
  4165 ;;  c               1    3[BANK0 ] unsigned char 
  4166 ;; Return value:  Size  Location     Type
  4167 ;;                  1    wreg      void 
  4168 ;; Registers used:
  4169 ;;		wreg, status,2, status,0, pclath, cstack
  4170 ;; Tracked objects:
  4171 ;;		On entry : 0/0
  4172 ;;		On exit  : 0/0
  4173 ;;		Unchanged: 0/0
  4174 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  4175 ;;      Params:         0       0       0       0       0       0
  4176 ;;      Locals:         0       1       0       0       0       0
  4177 ;;      Temps:          0       0       0       0       0       0
  4178 ;;      Totals:         0       1       0       0       0       0
  4179 ;;Total ram usage:        1 bytes
  4180 ;; Hardware stack levels used:    1
  4181 ;; Hardware stack levels required when called:    4
  4182 ;; This function calls:
  4183 ;;		_LCD_WriteData
  4184 ;; This function is called by:
  4185 ;;		_printf
  4186 ;; This function uses a non-reentrant model
  4187 ;;
  4188                           
  4189                           
  4190                           ;psect for function _putch
  4191  0D25                     _putch:	
  4192                           
  4193                           ;incstack = 0
  4194                           ; Regs used in _putch: [wreg+status,2+status,0+pclath+cstack]
  4195                           ;putch@c stored from wreg
  4196  0D25  0020               	movlb	0	; select bank0
  4197  0D26  00A3               	movwf	putch@c
  4198                           
  4199                           ;LCD.c: 66: LATA3 = 1;
  4200  0D27  0022               	movlb	2	; select bank2
  4201  0D28  158C               	bsf	12,3	;volatile
  4202                           
  4203                           ;LCD.c: 67: LCD_WriteData(c);
  4204  0D29  0020               	movlb	0	; select bank0
  4205  0D2A  0823               	movf	putch@c,w
  4206  0D2B  3187  276E         	fcall	_LCD_WriteData
  4207  0D2D  0008               	return
  4208  0D2E                     __end_of_putch:	
  4209                           
  4210                           	psect	text3
  4211  0D5D                     __ptext3:	
  4212 ;; *************** function _isdigit *****************
  4213 ;; Defined at:
  4214 ;;		line 8 in file "/opt/microchip/xc8/v1.41/sources/common/isdigit.c"
  4215 ;; Parameters:    Size  Location     Type
  4216 ;;  c               1    wreg     unsigned char 
  4217 ;; Auto vars:     Size  Location     Type
  4218 ;;  c               1    1[BANK0 ] unsigned char 
  4219 ;; Return value:  Size  Location     Type
  4220 ;;		None               void
  4221 ;; Registers used:
  4222 ;;		wreg, status,2, status,0
  4223 ;; Tracked objects:
  4224 ;;		On entry : 0/0
  4225 ;;		On exit  : 0/0
  4226 ;;		Unchanged: 0/0
  4227 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  4228 ;;      Params:         0       0       0       0       0       0
  4229 ;;      Locals:         0       2       0       0       0       0
  4230 ;;      Temps:          0       0       0       0       0       0
  4231 ;;      Totals:         0       2       0       0       0       0
  4232 ;;Total ram usage:        2 bytes
  4233 ;; Hardware stack levels used:    1
  4234 ;; Hardware stack levels required when called:    3
  4235 ;; This function calls:
  4236 ;;		Nothing
  4237 ;; This function is called by:
  4238 ;;		_printf
  4239 ;; This function uses a non-reentrant model
  4240 ;;
  4241                           
  4242                           
  4243                           ;psect for function _isdigit
  4244  0D5D                     _isdigit:	
  4245                           
  4246                           ;incstack = 0
  4247                           ; Regs used in _isdigit: [wreg+status,2+status,0]
  4248                           ;isdigit@c stored from wreg
  4249  0D5D  0020               	movlb	0	; select bank0
  4250  0D5E  00A1               	movwf	isdigit@c
  4251  0D5F  01A0               	clrf	_isdigit$777
  4252  0D60  303A               	movlw	58
  4253  0D61  0221               	subwf	isdigit@c,w
  4254  0D62  1803               	skipnc
  4255  0D63  2D6A               	goto	l3083
  4256  0D64  3030               	movlw	48
  4257  0D65  0221               	subwf	isdigit@c,w
  4258  0D66  1C03               	skipc
  4259  0D67  2D6A               	goto	l3083
  4260  0D68  01A0               	clrf	_isdigit$777
  4261  0D69  0AA0               	incf	_isdigit$777,f
  4262  0D6A                     l3083:	
  4263  0D6A  0C20               	rrf	_isdigit$777,w
  4264  0D6B  0008               	return
  4265  0D6C                     __end_of_isdigit:	
  4266                           
  4267                           	psect	text4
  4268  0E76                     __ptext4:	
  4269 ;; *************** function ___wmul *****************
  4270 ;; Defined at:
  4271 ;;		line 15 in file "/opt/microchip/xc8/v1.41/sources/common/Umul16.c"
  4272 ;; Parameters:    Size  Location     Type
  4273 ;;  multiplier      2    0[BANK0 ] unsigned int 
  4274 ;;  multiplicand    2    2[BANK0 ] unsigned int 
  4275 ;; Auto vars:     Size  Location     Type
  4276 ;;  product         2    4[BANK0 ] unsigned int 
  4277 ;; Return value:  Size  Location     Type
  4278 ;;                  2    0[BANK0 ] unsigned int 
  4279 ;; Registers used:
  4280 ;;		wreg, status,2, status,0
  4281 ;; Tracked objects:
  4282 ;;		On entry : 0/0
  4283 ;;		On exit  : 0/0
  4284 ;;		Unchanged: 0/0
  4285 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  4286 ;;      Params:         0       4       0       0       0       0
  4287 ;;      Locals:         0       2       0       0       0       0
  4288 ;;      Temps:          0       0       0       0       0       0
  4289 ;;      Totals:         0       6       0       0       0       0
  4290 ;;Total ram usage:        6 bytes
  4291 ;; Hardware stack levels used:    1
  4292 ;; Hardware stack levels required when called:    3
  4293 ;; This function calls:
  4294 ;;		Nothing
  4295 ;; This function is called by:
  4296 ;;		_printf
  4297 ;; This function uses a non-reentrant model
  4298 ;;
  4299                           
  4300                           
  4301                           ;psect for function ___wmul
  4302  0E76                     ___wmul:	
  4303                           
  4304                           ;incstack = 0
  4305                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  4306  0E76  0020               	movlb	0	; select bank0
  4307  0E77  01A4               	clrf	___wmul@product
  4308  0E78  01A5               	clrf	___wmul@product+1
  4309  0E79                     l3089:	
  4310  0E79  1C20               	btfss	___wmul@multiplier,0
  4311  0E7A  2E7F               	goto	l718
  4312  0E7B  0822               	movf	___wmul@multiplicand,w
  4313  0E7C  07A4               	addwf	___wmul@product,f
  4314  0E7D  0823               	movf	___wmul@multiplicand+1,w
  4315  0E7E  3DA5               	addwfc	___wmul@product+1,f
  4316  0E7F                     l718:	
  4317  0E7F  3001               	movlw	1
  4318  0E80                     u2645:	
  4319  0E80  35A2               	lslf	___wmul@multiplicand,f
  4320  0E81  0DA3               	rlf	___wmul@multiplicand+1,f
  4321  0E82  0B89               	decfsz	9,f
  4322  0E83  2E80               	goto	u2645
  4323  0E84  3001               	movlw	1
  4324  0E85                     u2655:	
  4325  0E85  36A1               	lsrf	___wmul@multiplier+1,f
  4326  0E86  0CA0               	rrf	___wmul@multiplier,f
  4327  0E87  0B89               	decfsz	9,f
  4328  0E88  2E85               	goto	u2655
  4329  0E89  0820               	movf	___wmul@multiplier,w
  4330  0E8A  0421               	iorwf	___wmul@multiplier+1,w
  4331  0E8B  1D03               	btfss	3,2
  4332  0E8C  2E79               	goto	l3089
  4333  0E8D  0825               	movf	___wmul@product+1,w
  4334  0E8E  00A1               	movwf	?___wmul+1
  4335  0E8F  0824               	movf	___wmul@product,w
  4336  0E90  00A0               	movwf	?___wmul
  4337  0E91  0008               	return
  4338  0E92                     __end_of___wmul:	
  4339                           
  4340                           	psect	text5
  4341  06EE                     __ptext5:	
  4342 ;; *************** function ___llmod *****************
  4343 ;; Defined at:
  4344 ;;		line 6 in file "/opt/microchip/xc8/v1.41/sources/common/llmod.c"
  4345 ;; Parameters:    Size  Location     Type
  4346 ;;  divisor         4   26[BANK0 ] unsigned long 
  4347 ;;  dividend        4   30[BANK0 ] unsigned long 
  4348 ;; Auto vars:     Size  Location     Type
  4349 ;;  counter         1   35[BANK0 ] unsigned char 
  4350 ;; Return value:  Size  Location     Type
  4351 ;;                  4   26[BANK0 ] unsigned long 
  4352 ;; Registers used:
  4353 ;;		wreg, status,2, status,0
  4354 ;; Tracked objects:
  4355 ;;		On entry : 0/0
  4356 ;;		On exit  : 0/0
  4357 ;;		Unchanged: 0/0
  4358 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  4359 ;;      Params:         0       8       0       0       0       0
  4360 ;;      Locals:         0       1       0       0       0       0
  4361 ;;      Temps:          0       1       0       0       0       0
  4362 ;;      Totals:         0      10       0       0       0       0
  4363 ;;Total ram usage:       10 bytes
  4364 ;; Hardware stack levels used:    1
  4365 ;; Hardware stack levels required when called:    3
  4366 ;; This function calls:
  4367 ;;		Nothing
  4368 ;; This function is called by:
  4369 ;;		_printf
  4370 ;; This function uses a non-reentrant model
  4371 ;;
  4372                           
  4373                           
  4374                           ;psect for function ___llmod
  4375  06EE                     ___llmod:	
  4376                           
  4377                           ;incstack = 0
  4378                           ; Regs used in ___llmod: [wreg+status,2+status,0]
  4379  06EE  0020               	movlb	0	; select bank0
  4380  06EF  083D               	movf	___llmod@divisor+3,w
  4381  06F0  043C               	iorwf	___llmod@divisor+2,w
  4382  06F1  043B               	iorwf	___llmod@divisor+1,w
  4383  06F2  043A               	iorwf	___llmod@divisor,w
  4384  06F3  1903               	skipnz
  4385  06F4  2F28               	goto	l3117
  4386  06F5  01C3               	clrf	___llmod@counter
  4387  06F6  0AC3               	incf	___llmod@counter,f
  4388  06F7                     l3107:	
  4389  06F7  1BBD               	btfsc	___llmod@divisor+3,7
  4390  06F8  2F05               	goto	l3109
  4391  06F9  3001               	movlw	1
  4392  06FA                     u2685:	
  4393  06FA  35BA               	lslf	___llmod@divisor,f
  4394  06FB  0DBB               	rlf	___llmod@divisor+1,f
  4395  06FC  0DBC               	rlf	___llmod@divisor+2,f
  4396  06FD  0DBD               	rlf	___llmod@divisor+3,f
  4397  06FE  0B89               	decfsz	9,f
  4398  06FF  2EFA               	goto	u2685
  4399  0700  3001               	movlw	1
  4400  0701  00C2               	movwf	??___llmod
  4401  0702  0842               	movf	??___llmod,w
  4402  0703  07C3               	addwf	___llmod@counter,f
  4403  0704  2EF7               	goto	l3107
  4404  0705                     l3109:	
  4405  0705  083D               	movf	___llmod@divisor+3,w
  4406  0706  0241               	subwf	___llmod@dividend+3,w
  4407  0707  1D03               	skipz
  4408  0708  2F13               	goto	u2705
  4409  0709  083C               	movf	___llmod@divisor+2,w
  4410  070A  0240               	subwf	___llmod@dividend+2,w
  4411  070B  1D03               	skipz
  4412  070C  2F13               	goto	u2705
  4413  070D  083B               	movf	___llmod@divisor+1,w
  4414  070E  023F               	subwf	___llmod@dividend+1,w
  4415  070F  1D03               	skipz
  4416  0710  2F13               	goto	u2705
  4417  0711  083A               	movf	___llmod@divisor,w
  4418  0712  023E               	subwf	___llmod@dividend,w
  4419  0713                     u2705:	
  4420  0713  1C03               	skipc
  4421  0714  2F1D               	goto	l3113
  4422  0715  083A               	movf	___llmod@divisor,w
  4423  0716  02BE               	subwf	___llmod@dividend,f
  4424  0717  083B               	movf	___llmod@divisor+1,w
  4425  0718  3BBF               	subwfb	___llmod@dividend+1,f
  4426  0719  083C               	movf	___llmod@divisor+2,w
  4427  071A  3BC0               	subwfb	___llmod@dividend+2,f
  4428  071B  083D               	movf	___llmod@divisor+3,w
  4429  071C  3BC1               	subwfb	___llmod@dividend+3,f
  4430  071D                     l3113:	
  4431  071D  3001               	movlw	1
  4432  071E                     u2715:	
  4433  071E  36BD               	lsrf	___llmod@divisor+3,f
  4434  071F  0CBC               	rrf	___llmod@divisor+2,f
  4435  0720  0CBB               	rrf	___llmod@divisor+1,f
  4436  0721  0CBA               	rrf	___llmod@divisor,f
  4437  0722  0B89               	decfsz	9,f
  4438  0723  2F1E               	goto	u2715
  4439  0724  3001               	movlw	1
  4440  0725  02C3               	subwf	___llmod@counter,f
  4441  0726  1D03               	btfss	3,2
  4442  0727  2F05               	goto	l3109
  4443  0728                     l3117:	
  4444  0728  0841               	movf	___llmod@dividend+3,w
  4445  0729  00BD               	movwf	?___llmod+3
  4446  072A  0840               	movf	___llmod@dividend+2,w
  4447  072B  00BC               	movwf	?___llmod+2
  4448  072C  083F               	movf	___llmod@dividend+1,w
  4449  072D  00BB               	movwf	?___llmod+1
  4450  072E  083E               	movf	___llmod@dividend,w
  4451  072F  00BA               	movwf	?___llmod
  4452  0730  0008               	return
  4453  0731                     __end_of___llmod:	
  4454                           
  4455                           	psect	text6
  4456  0DD1                     __ptext6:	
  4457 ;; *************** function _mTouch_Init *****************
  4458 ;; Defined at:
  4459 ;;		line 19 in file "mTouch.c"
  4460 ;; Parameters:    Size  Location     Type
  4461 ;;		None
  4462 ;; Auto vars:     Size  Location     Type
  4463 ;;		None
  4464 ;; Return value:  Size  Location     Type
  4465 ;;                  1    wreg      void 
  4466 ;; Registers used:
  4467 ;;		wreg, status,2, status,0, pclath, cstack
  4468 ;; Tracked objects:
  4469 ;;		On entry : 0/0
  4470 ;;		On exit  : 0/0
  4471 ;;		Unchanged: 0/0
  4472 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  4473 ;;      Params:         0       0       0       0       0       0
  4474 ;;      Locals:         0       0       0       0       0       0
  4475 ;;      Temps:          0       1       0       0       0       0
  4476 ;;      Totals:         0       1       0       0       0       0
  4477 ;;Total ram usage:        1 bytes
  4478 ;; Hardware stack levels used:    1
  4479 ;; Hardware stack levels required when called:    4
  4480 ;; This function calls:
  4481 ;;		_mTouch_PortInit
  4482 ;; This function is called by:
  4483 ;;		_main
  4484 ;; This function uses a non-reentrant model
  4485 ;;
  4486                           
  4487                           
  4488                           ;psect for function _mTouch_Init
  4489  0DD1                     _mTouch_Init:	
  4490                           
  4491                           ;mTouch.c: 21: mTouch_PortInit();
  4492                           
  4493                           ;incstack = 0
  4494                           ; Regs used in _mTouch_Init: [wreg+status,2+status,0+pclath+cstack]
  4495  0DD1  318D  2550         	fcall	_mTouch_PortInit
  4496                           
  4497                           ;mTouch.c: 24: OPTION_REG |= (0x0<<0);
  4498  0DD3  0021               	movlb	1	; select bank1
  4499  0DD4  0815               	movf	21,w	;volatile
  4500                           
  4501                           ;mTouch.c: 25: OPTION_REG |= (0x1<<3);
  4502  0DD5  1595               	bsf	21,3	;volatile
  4503                           
  4504                           ;mTouch.c: 26: OPTION_REG |= (0x1<<5);
  4505  0DD6  1695               	bsf	21,5	;volatile
  4506                           
  4507                           ;mTouch.c: 27: TMR0 = 0x00;
  4508  0DD7  0020               	movlb	0	; select bank0
  4509  0DD8  0195               	clrf	21	;volatile
  4510                           
  4511                           ;mTouch.c: 30: CPSCON0 |= (0x01<<0);
  4512  0DD9  141E               	bsf	30,0	;volatile
  4513                           
  4514                           ;mTouch.c: 31: CPSCON0 |= (0x03<<2);
  4515  0DDA  300C               	movlw	12
  4516  0DDB  00A1               	movwf	??_mTouch_Init
  4517  0DDC  0821               	movf	??_mTouch_Init,w
  4518  0DDD  049E               	iorwf	30,f	;volatile
  4519                           
  4520                           ;mTouch.c: 32: CPSCON0 &= ~(0x01<<7);;
  4521  0DDE  307F               	movlw	127
  4522  0DDF  00A1               	movwf	??_mTouch_Init
  4523  0DE0  0821               	movf	??_mTouch_Init,w
  4524  0DE1  059E               	andwf	30,f	;volatile
  4525                           
  4526                           ;mTouch.c: 33: CPSCON1 = (uint8_t)0x00;
  4527  0DE2  019F               	clrf	31	;volatile
  4528  0DE3  0008               	return
  4529  0DE4                     __end_of_mTouch_Init:	
  4530                           
  4531                           	psect	text7
  4532  0D50                     __ptext7:	
  4533 ;; *************** function _mTouch_PortInit *****************
  4534 ;; Defined at:
  4535 ;;		line 13 in file "mTouch.c"
  4536 ;; Parameters:    Size  Location     Type
  4537 ;;		None
  4538 ;; Auto vars:     Size  Location     Type
  4539 ;;		None
  4540 ;; Return value:  Size  Location     Type
  4541 ;;                  1    wreg      void 
  4542 ;; Registers used:
  4543 ;;		wreg, status,2, status,0
  4544 ;; Tracked objects:
  4545 ;;		On entry : 0/0
  4546 ;;		On exit  : 0/0
  4547 ;;		Unchanged: 0/0
  4548 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  4549 ;;      Params:         0       0       0       0       0       0
  4550 ;;      Locals:         0       0       0       0       0       0
  4551 ;;      Temps:          0       1       0       0       0       0
  4552 ;;      Totals:         0       1       0       0       0       0
  4553 ;;Total ram usage:        1 bytes
  4554 ;; Hardware stack levels used:    1
  4555 ;; Hardware stack levels required when called:    3
  4556 ;; This function calls:
  4557 ;;		Nothing
  4558 ;; This function is called by:
  4559 ;;		_mTouch_Init
  4560 ;; This function uses a non-reentrant model
  4561 ;;
  4562                           
  4563                           
  4564                           ;psect for function _mTouch_PortInit
  4565  0D50                     _mTouch_PortInit:	
  4566                           
  4567                           ;mTouch.c: 15: TRISA |= (0x07);
  4568                           
  4569                           ;incstack = 0
  4570                           ; Regs used in _mTouch_PortInit: [wreg+status,2+status,0]
  4571  0D50  3007               	movlw	7
  4572  0D51  0020               	movlb	0	; select bank0
  4573  0D52  00A0               	movwf	??_mTouch_PortInit
  4574  0D53  0820               	movf	??_mTouch_PortInit,w
  4575  0D54  0021               	movlb	1	; select bank1
  4576  0D55  048C               	iorwf	12,f	;volatile
  4577                           
  4578                           ;mTouch.c: 16: ANSELA |= (0x07);
  4579  0D56  3007               	movlw	7
  4580  0D57  0020               	movlb	0	; select bank0
  4581  0D58  00A0               	movwf	??_mTouch_PortInit
  4582  0D59  0820               	movf	??_mTouch_PortInit,w
  4583  0D5A  0023               	movlb	3	; select bank3
  4584  0D5B  048C               	iorwf	12,f	;volatile
  4585  0D5C  0008               	return
  4586  0D5D                     __end_of_mTouch_PortInit:	
  4587                           
  4588                           	psect	text8
  4589  065F                     __ptext8:	
  4590 ;; *************** function _mTouch_Check *****************
  4591 ;; Defined at:
  4592 ;;		line 61 in file "mTouch.c"
  4593 ;; Parameters:    Size  Location     Type
  4594 ;;  chan            1    wreg     unsigned char 
  4595 ;; Auto vars:     Size  Location     Type
  4596 ;;  chan            1    7[BANK0 ] unsigned char 
  4597 ;; Return value:  Size  Location     Type
  4598 ;;                  1    wreg      unsigned char 
  4599 ;; Registers used:
  4600 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4601 ;; Tracked objects:
  4602 ;;		On entry : 0/0
  4603 ;;		On exit  : 0/0
  4604 ;;		Unchanged: 0/0
  4605 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  4606 ;;      Params:         0       0       0       0       0       0
  4607 ;;      Locals:         0       1       0       0       0       0
  4608 ;;      Temps:          0       5       0       0       0       0
  4609 ;;      Totals:         0       6       0       0       0       0
  4610 ;;Total ram usage:        6 bytes
  4611 ;; Hardware stack levels used:    1
  4612 ;; Hardware stack levels required when called:    4
  4613 ;; This function calls:
  4614 ;;		_Buzzer_MiliSecond
  4615 ;; This function is called by:
  4616 ;;		_main
  4617 ;; This function uses a non-reentrant model
  4618 ;;
  4619                           
  4620                           
  4621                           ;psect for function _mTouch_Check
  4622  065F                     _mTouch_Check:	
  4623                           
  4624                           ;incstack = 0
  4625                           ; Regs used in _mTouch_Check: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4626                           ;mTouch_Check@chan stored from wreg
  4627  065F  0020               	movlb	0	; select bank0
  4628  0660  00A7               	movwf	mTouch_Check@chan
  4629                           
  4630                           ;mTouch.c: 63: if(2<chan)return 0;
  4631  0661  3003               	movlw	3
  4632  0662  0227               	subwf	mTouch_Check@chan,w
  4633  0663  1C03               	skipc
  4634  0664  2E67               	goto	l3313
  4635  0665  3000               	movlw	0
  4636  0666  0008               	return
  4637  0667                     l3313:	
  4638                           
  4639                           ;mTouch.c: 65: if(((CPS_PreData[chan]-CPS_Data[chan])>sense_parameter[chan])&&!mTouch_In
      +                          terval[chan])
  4640  0667  0827               	movf	mTouch_Check@chan,w
  4641  0668  3EC5               	addlw	(low (_CPS_Data| 0))& (0+255)
  4642  0669  0086               	movwf	6
  4643  066A  0187               	clrf	7
  4644  066B  0801               	movf	1,w
  4645  066C  00A2               	movwf	??_mTouch_Check
  4646  066D  01A3               	clrf	??_mTouch_Check+1
  4647  066E  09A2               	comf	??_mTouch_Check,f
  4648  066F  09A3               	comf	??_mTouch_Check+1,f
  4649  0670  0AA2               	incf	??_mTouch_Check,f
  4650  0671  1903               	skipnz
  4651  0672  0AA3               	incf	??_mTouch_Check+1,f
  4652  0673  0827               	movf	mTouch_Check@chan,w
  4653  0674  3EC2               	addlw	(low (_CPS_PreData| 0))& (0+255)
  4654  0675  0086               	movwf	6
  4655  0676  0187               	clrf	7
  4656  0677  0801               	movf	1,w
  4657  0678  0722               	addwf	??_mTouch_Check,w
  4658  0679  00A4               	movwf	??_mTouch_Check+2
  4659  067A  0823               	movf	??_mTouch_Check+1,w
  4660  067B  1803               	skipnc
  4661  067C  0A23               	incf	??_mTouch_Check+1,w
  4662  067D  00A5               	movwf	??_mTouch_Check+3
  4663  067E  0827               	movf	mTouch_Check@chan,w
  4664  067F  3E6C               	addlw	low (_sense_parameter| (0+32768))
  4665  0680  0084               	movwf	4
  4666  0681  3082               	movlw	high (_sense_parameter| (0+32768))
  4667  0682  1803               	skipnc
  4668  0683  3E01               	addlw	1
  4669  0684  0085               	movwf	5
  4670  0685  0800               	movf	0,w	;code access
  4671  0686  00A6               	movwf	??_mTouch_Check+4
  4672  0687  0825               	movf	??_mTouch_Check+3,w
  4673  0688  3A80               	xorlw	128
  4674  0689  3C80               	sublw	128
  4675  068A  1D03               	skipz
  4676  068B  2E8E               	goto	u2755
  4677  068C  0824               	movf	??_mTouch_Check+2,w
  4678  068D  0226               	subwf	??_mTouch_Check+4,w
  4679  068E                     u2755:	
  4680  068E  1803               	skipnc
  4681  068F  2EA8               	goto	l3325
  4682  0690  0020               	movlb	0	; select bank0
  4683  0691  0827               	movf	mTouch_Check@chan,w
  4684  0692  3E70               	addlw	(low (_mTouch_Interval| 0))& (0+255)
  4685  0693  0086               	movwf	6
  4686  0694  0187               	clrf	7
  4687  0695  0801               	movf	1,w
  4688  0696  1D03               	btfss	3,2
  4689  0697  2EA8               	goto	l3325
  4690                           
  4691                           ;mTouch.c: 66: {
  4692                           ;mTouch.c: 67: mTouch_Interval[chan] = 100;
  4693  0698  3064               	movlw	100
  4694  0699  00A2               	movwf	??_mTouch_Check
  4695  069A  0827               	movf	mTouch_Check@chan,w
  4696  069B  3E70               	addlw	(low (_mTouch_Interval| 0))& (0+255)
  4697  069C  0086               	movwf	6
  4698  069D  0187               	clrf	7
  4699  069E  0822               	movf	??_mTouch_Check,w
  4700  069F  0081               	movwf	1
  4701                           
  4702                           ;mTouch.c: 68: Buzzer_MiliSecond(100);
  4703  06A0  3064               	movlw	100
  4704  06A1  00A0               	movwf	Buzzer_MiliSecond@time
  4705  06A2  3000               	movlw	0
  4706  06A3  00A1               	movwf	Buzzer_MiliSecond@time+1
  4707  06A4  318D  252E         	fcall	_Buzzer_MiliSecond
  4708                           
  4709                           ;mTouch.c: 69: return 1;
  4710  06A6  3001               	movlw	1
  4711  06A7  0008               	return
  4712  06A8                     l3325:	
  4713                           
  4714                           ;mTouch.c: 70: }
  4715                           ;mTouch.c: 71: return 0;
  4716  06A8  3000               	movlw	0
  4717  06A9  0008               	return
  4718  06AA                     __end_of_mTouch_Check:	
  4719                           
  4720                           	psect	text9
  4721  0D2E                     __ptext9:	
  4722 ;; *************** function _Buzzer_MiliSecond *****************
  4723 ;; Defined at:
  4724 ;;		line 38 in file "Buzzer.c"
  4725 ;; Parameters:    Size  Location     Type
  4726 ;;  time            2    0[BANK0 ] unsigned int 
  4727 ;; Auto vars:     Size  Location     Type
  4728 ;;		None
  4729 ;; Return value:  Size  Location     Type
  4730 ;;                  1    wreg      void 
  4731 ;; Registers used:
  4732 ;;		wreg, status,2, status,0
  4733 ;; Tracked objects:
  4734 ;;		On entry : 0/0
  4735 ;;		On exit  : 0/0
  4736 ;;		Unchanged: 0/0
  4737 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  4738 ;;      Params:         0       2       0       0       0       0
  4739 ;;      Locals:         0       0       0       0       0       0
  4740 ;;      Temps:          0       0       0       0       0       0
  4741 ;;      Totals:         0       2       0       0       0       0
  4742 ;;Total ram usage:        2 bytes
  4743 ;; Hardware stack levels used:    1
  4744 ;; Hardware stack levels required when called:    3
  4745 ;; This function calls:
  4746 ;;		Nothing
  4747 ;; This function is called by:
  4748 ;;		_mTouch_Check
  4749 ;; This function uses a non-reentrant model
  4750 ;;
  4751                           
  4752                           
  4753                           ;psect for function _Buzzer_MiliSecond
  4754  0D2E                     _Buzzer_MiliSecond:	
  4755                           
  4756                           ;Buzzer.c: 40: if(count==0)
  4757                           
  4758                           ;incstack = 0
  4759                           ; Regs used in _Buzzer_MiliSecond: [wreg+status,2+status,0]
  4760  0D2E  0873               	movf	_count,w
  4761  0D2F  0474               	iorwf	_count+1,w
  4762  0D30  1D03               	btfss	3,2
  4763  0D31  0008               	return
  4764                           
  4765                           ;Buzzer.c: 41: count = time;
  4766  0D32  0020               	movlb	0	; select bank0
  4767  0D33  0821               	movf	Buzzer_MiliSecond@time+1,w
  4768  0D34  00F4               	movwf	_count+1
  4769  0D35  0820               	movf	Buzzer_MiliSecond@time,w
  4770  0D36  00F3               	movwf	_count
  4771  0D37  0008               	return
  4772  0D38                     __end_of_Buzzer_MiliSecond:	
  4773                           
  4774                           	psect	text10
  4775  0DBE                     __ptext10:	
  4776 ;; *************** function _Timer6_Init *****************
  4777 ;; Defined at:
  4778 ;;		line 3 in file "Timer6.c"
  4779 ;; Parameters:    Size  Location     Type
  4780 ;;		None
  4781 ;; Auto vars:     Size  Location     Type
  4782 ;;		None
  4783 ;; Return value:  Size  Location     Type
  4784 ;;                  1    wreg      void 
  4785 ;; Registers used:
  4786 ;;		wreg, status,2, status,0
  4787 ;; Tracked objects:
  4788 ;;		On entry : 0/0
  4789 ;;		On exit  : 0/0
  4790 ;;		Unchanged: 0/0
  4791 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  4792 ;;      Params:         0       0       0       0       0       0
  4793 ;;      Locals:         0       0       0       0       0       0
  4794 ;;      Temps:          0       1       0       0       0       0
  4795 ;;      Totals:         0       1       0       0       0       0
  4796 ;;Total ram usage:        1 bytes
  4797 ;; Hardware stack levels used:    1
  4798 ;; Hardware stack levels required when called:    3
  4799 ;; This function calls:
  4800 ;;		Nothing
  4801 ;; This function is called by:
  4802 ;;		_main
  4803 ;; This function uses a non-reentrant model
  4804 ;;
  4805                           
  4806                           
  4807                           ;psect for function _Timer6_Init
  4808  0DBE                     _Timer6_Init:	
  4809                           
  4810                           ;Timer6.c: 5: PR6 = 0x7D;
  4811                           
  4812                           ;incstack = 0
  4813                           ; Regs used in _Timer6_Init: [wreg+status,2+status,0]
  4814  0DBE  307D               	movlw	125
  4815  0DBF  0028               	movlb	8	; select bank8
  4816  0DC0  009D               	movwf	29	;volatile
  4817                           
  4818                           ;Timer6.c: 6: TMR6 = 0x00;
  4819  0DC1  019C               	clrf	28	;volatile
  4820                           
  4821                           ;Timer6.c: 7: T6CON |= (0x03<<0);
  4822  0DC2  3003               	movlw	3
  4823  0DC3  0020               	movlb	0	; select bank0
  4824  0DC4  00A0               	movwf	??_Timer6_Init
  4825  0DC5  0820               	movf	??_Timer6_Init,w
  4826  0DC6  0028               	movlb	8	; select bank8
  4827  0DC7  049E               	iorwf	30,f	;volatile
  4828                           
  4829                           ;Timer6.c: 8: T6CON |= (0x00<<3);
  4830  0DC8  081E               	movf	30,w	;volatile
  4831                           
  4832                           ;Timer6.c: 9: T6CON |= (0x01<<2);
  4833  0DC9  151E               	bsf	30,2	;volatile
  4834                           
  4835                           ;Timer6.c: 11: TMR6IF = 0;
  4836  0DCA  0020               	movlb	0	; select bank0
  4837  0DCB  1193               	bcf	19,3	;volatile
  4838                           
  4839                           ;Timer6.c: 12: TMR6IE = 1;
  4840  0DCC  0021               	movlb	1	; select bank1
  4841  0DCD  1593               	bsf	19,3	;volatile
  4842                           
  4843                           ;Timer6.c: 13: PEIE = 1;
  4844  0DCE  170B               	bsf	11,6	;volatile
  4845                           
  4846                           ;Timer6.c: 14: GIE = 1;
  4847  0DCF  178B               	bsf	11,7	;volatile
  4848  0DD0  0008               	return
  4849  0DD1                     __end_of_Timer6_Init:	
  4850                           
  4851                           	psect	text11
  4852  0D08                     __ptext11:	
  4853 ;; *************** function _Timer1_StopCount *****************
  4854 ;; Defined at:
  4855 ;;		line 37 in file "Timer1.c"
  4856 ;; Parameters:    Size  Location     Type
  4857 ;;		None
  4858 ;; Auto vars:     Size  Location     Type
  4859 ;;		None
  4860 ;; Return value:  Size  Location     Type
  4861 ;;                  1    wreg      void 
  4862 ;; Registers used:
  4863 ;;		None
  4864 ;; Tracked objects:
  4865 ;;		On entry : 0/0
  4866 ;;		On exit  : 0/0
  4867 ;;		Unchanged: 0/0
  4868 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  4869 ;;      Params:         0       0       0       0       0       0
  4870 ;;      Locals:         0       0       0       0       0       0
  4871 ;;      Temps:          0       0       0       0       0       0
  4872 ;;      Totals:         0       0       0       0       0       0
  4873 ;;Total ram usage:        0 bytes
  4874 ;; Hardware stack levels used:    1
  4875 ;; Hardware stack levels required when called:    3
  4876 ;; This function calls:
  4877 ;;		Nothing
  4878 ;; This function is called by:
  4879 ;;		_main
  4880 ;; This function uses a non-reentrant model
  4881 ;;
  4882                           
  4883                           
  4884                           ;psect for function _Timer1_StopCount
  4885  0D08                     _Timer1_StopCount:	
  4886                           
  4887                           ;Timer1.c: 39: TMR1ON = 0;
  4888                           
  4889                           ;incstack = 0
  4890                           ; Regs used in _Timer1_StopCount: []
  4891  0D08  0020               	movlb	0	; select bank0
  4892  0D09  1018               	bcf	24,0	;volatile
  4893  0D0A  0008               	return
  4894  0D0B                     __end_of_Timer1_StopCount:	
  4895                           
  4896                           	psect	text12
  4897  0D0B                     __ptext12:	
  4898 ;; *************** function _Timer1_StartCount *****************
  4899 ;; Defined at:
  4900 ;;		line 31 in file "Timer1.c"
  4901 ;; Parameters:    Size  Location     Type
  4902 ;;		None
  4903 ;; Auto vars:     Size  Location     Type
  4904 ;;		None
  4905 ;; Return value:  Size  Location     Type
  4906 ;;                  1    wreg      void 
  4907 ;; Registers used:
  4908 ;;		wreg, status,2, status,0, pclath, cstack
  4909 ;; Tracked objects:
  4910 ;;		On entry : 0/0
  4911 ;;		On exit  : 0/0
  4912 ;;		Unchanged: 0/0
  4913 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  4914 ;;      Params:         0       0       0       0       0       0
  4915 ;;      Locals:         0       0       0       0       0       0
  4916 ;;      Temps:          0       0       0       0       0       0
  4917 ;;      Totals:         0       0       0       0       0       0
  4918 ;;Total ram usage:        0 bytes
  4919 ;; Hardware stack levels used:    1
  4920 ;; Hardware stack levels required when called:    4
  4921 ;; This function calls:
  4922 ;;		_Timer1_ClearRecord
  4923 ;; This function is called by:
  4924 ;;		_main
  4925 ;; This function uses a non-reentrant model
  4926 ;;
  4927                           
  4928                           
  4929                           ;psect for function _Timer1_StartCount
  4930  0D0B                     _Timer1_StartCount:	
  4931                           
  4932                           ;Timer1.c: 33: Timer1_ClearRecord();
  4933                           
  4934                           ;incstack = 0
  4935                           ; Regs used in _Timer1_StartCount: [wreg+status,2+status,0+pclath+cstack]
  4936  0D0B  318D  25F9         	fcall	_Timer1_ClearRecord
  4937                           
  4938                           ;Timer1.c: 34: TMR1ON = 1;
  4939  0D0D  0020               	movlb	0	; select bank0
  4940  0D0E  1418               	bsf	24,0	;volatile
  4941  0D0F  0008               	return
  4942  0D10                     __end_of_Timer1_StartCount:	
  4943                           
  4944                           	psect	text13
  4945  0DF9                     __ptext13:	
  4946 ;; *************** function _Timer1_ClearRecord *****************
  4947 ;; Defined at:
  4948 ;;		line 42 in file "Timer1.c"
  4949 ;; Parameters:    Size  Location     Type
  4950 ;;		None
  4951 ;; Auto vars:     Size  Location     Type
  4952 ;;		None
  4953 ;; Return value:  Size  Location     Type
  4954 ;;                  1    wreg      void 
  4955 ;; Registers used:
  4956 ;;		wreg, status,2
  4957 ;; Tracked objects:
  4958 ;;		On entry : 0/0
  4959 ;;		On exit  : 0/0
  4960 ;;		Unchanged: 0/0
  4961 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  4962 ;;      Params:         0       0       0       0       0       0
  4963 ;;      Locals:         0       0       0       0       0       0
  4964 ;;      Temps:          0       0       0       0       0       0
  4965 ;;      Totals:         0       0       0       0       0       0
  4966 ;;Total ram usage:        0 bytes
  4967 ;; Hardware stack levels used:    1
  4968 ;; Hardware stack levels required when called:    3
  4969 ;; This function calls:
  4970 ;;		Nothing
  4971 ;; This function is called by:
  4972 ;;		_Timer1_StartCount
  4973 ;;		_main
  4974 ;; This function uses a non-reentrant model
  4975 ;;
  4976                           
  4977                           
  4978                           ;psect for function _Timer1_ClearRecord
  4979  0DF9                     _Timer1_ClearRecord:	
  4980                           
  4981                           ;Timer1.c: 44: cnts.SigmaDeltaCount= 0;
  4982                           
  4983                           ;incstack = 0
  4984                           ; Regs used in _Timer1_ClearRecord: [wreg+status,2]
  4985  0DF9  3000               	movlw	0
  4986  0DFA  0021               	movlb	1	; select bank1
  4987  0DFB  00C1               	movwf	(_cnts+3)^(0+128)
  4988  0DFC  3000               	movlw	0
  4989  0DFD  00C0               	movwf	(_cnts+2)^(0+128)
  4990  0DFE  3000               	movlw	0
  4991  0DFF  00BF               	movwf	(_cnts+1)^(0+128)
  4992  0E00  3000               	movlw	0
  4993  0E01  00BE               	movwf	_cnts^(0+128)
  4994                           
  4995                           ;Timer1.c: 45: tcnt.Delta_t = 0;
  4996  0E02  3000               	movlw	0
  4997  0E03  0020               	movlb	0	; select bank0
  4998  0E04  00E6               	movwf	_tcnt+5
  4999  0E05  3000               	movlw	0
  5000  0E06  00E5               	movwf	_tcnt+4
  5001  0E07  3000               	movlw	0
  5002  0E08  00E4               	movwf	_tcnt+3
  5003  0E09  3000               	movlw	0
  5004  0E0A  00E3               	movwf	_tcnt+2
  5005                           
  5006                           ;Timer1.c: 46: tcnt.Second_t = 0;
  5007  0E0B  01E1               	clrf	_tcnt
  5008                           
  5009                           ;Timer1.c: 47: tcnt.Minute_t = 0;
  5010  0E0C  01E2               	clrf	_tcnt+1
  5011  0E0D  0008               	return
  5012  0E0E                     __end_of_Timer1_ClearRecord:	
  5013                           
  5014                           	psect	text14
  5015  0ED0                     __ptext14:	
  5016 ;; *************** function _Timer1_Init *****************
  5017 ;; Defined at:
  5018 ;;		line 6 in file "Timer1.c"
  5019 ;; Parameters:    Size  Location     Type
  5020 ;;		None
  5021 ;; Auto vars:     Size  Location     Type
  5022 ;;		None
  5023 ;; Return value:  Size  Location     Type
  5024 ;;                  1    wreg      void 
  5025 ;; Registers used:
  5026 ;;		wreg, status,2, status,0
  5027 ;; Tracked objects:
  5028 ;;		On entry : 0/0
  5029 ;;		On exit  : 0/0
  5030 ;;		Unchanged: 0/0
  5031 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  5032 ;;      Params:         0       0       0       0       0       0
  5033 ;;      Locals:         0       0       0       0       0       0
  5034 ;;      Temps:          0       1       0       0       0       0
  5035 ;;      Totals:         0       1       0       0       0       0
  5036 ;;Total ram usage:        1 bytes
  5037 ;; Hardware stack levels used:    1
  5038 ;; Hardware stack levels required when called:    3
  5039 ;; This function calls:
  5040 ;;		Nothing
  5041 ;; This function is called by:
  5042 ;;		_main
  5043 ;; This function uses a non-reentrant model
  5044 ;;
  5045                           
  5046                           
  5047                           ;psect for function _Timer1_Init
  5048  0ED0                     _Timer1_Init:	
  5049                           
  5050                           ;Timer1.c: 8: TRISB |= (1<<6);
  5051                           
  5052                           ;incstack = 0
  5053                           ; Regs used in _Timer1_Init: [wreg+status,2+status,0]
  5054  0ED0  0021               	movlb	1	; select bank1
  5055  0ED1  170D               	bsf	13,6	;volatile
  5056                           
  5057                           ;Timer1.c: 9: ANSELB &= ~(1<<6);
  5058  0ED2  30BF               	movlw	191
  5059  0ED3  0020               	movlb	0	; select bank0
  5060  0ED4  00A0               	movwf	??_Timer1_Init
  5061  0ED5  0820               	movf	??_Timer1_Init,w
  5062  0ED6  0023               	movlb	3	; select bank3
  5063  0ED7  058D               	andwf	13,f	;volatile
  5064                           
  5065                           ;Timer1.c: 10: WPUB |= (1<<6);
  5066  0ED8  0024               	movlb	4	; select bank4
  5067  0ED9  170D               	bsf	13,6	;volatile
  5068                           
  5069                           ;Timer1.c: 12: T1CON |= (0x01<<2);
  5070  0EDA  0020               	movlb	0	; select bank0
  5071  0EDB  1518               	bsf	24,2	;volatile
  5072                           
  5073                           ;Timer1.c: 13: T1CON &= ~(0x01<<3);
  5074  0EDC  30F7               	movlw	247
  5075  0EDD  00A0               	movwf	??_Timer1_Init
  5076  0EDE  0820               	movf	??_Timer1_Init,w
  5077  0EDF  0598               	andwf	24,f	;volatile
  5078                           
  5079                           ;Timer1.c: 14: T1CON |= (0x00<<4);
  5080  0EE0  0818               	movf	24,w	;volatile
  5081                           
  5082                           ;Timer1.c: 15: T1CON |= (0x02<<6);
  5083  0EE1  1798               	bsf	24,7	;volatile
  5084                           
  5085                           ;Timer1.c: 17: T1GCON = 0x00;
  5086  0EE2  0199               	clrf	25	;volatile
  5087                           
  5088                           ;Timer1.c: 19: {TMR1ON = 0; TMR1 = (uint16_t)0xFFFF - 10UL+1; TMR1ON = 1; };
  5089  0EE3  1018               	bcf	24,0	;volatile
  5090  0EE4  30FF               	movlw	255
  5091  0EE5  0097               	movwf	23	;volatile
  5092  0EE6  30F6               	movlw	246
  5093  0EE7  0096               	movwf	22	;volatile
  5094  0EE8  1418               	bsf	24,0	;volatile
  5095                           
  5096                           ;Timer1.c: 21: TMR1IF = 0;
  5097  0EE9  1011               	bcf	17,0	;volatile
  5098                           
  5099                           ;Timer1.c: 22: TMR1IE = 1;
  5100  0EEA  0021               	movlb	1	; select bank1
  5101  0EEB  1411               	bsf	17,0	;volatile
  5102                           
  5103                           ;Timer1.c: 23: PEIE = 1;
  5104  0EEC  170B               	bsf	11,6	;volatile
  5105                           
  5106                           ;Timer1.c: 24: GIE = 1;
  5107  0EED  178B               	bsf	11,7	;volatile
  5108                           
  5109                           ;Timer1.c: 26: TMR1ON = 0;
  5110  0EEE  0020               	movlb	0	; select bank0
  5111  0EEF  1018               	bcf	24,0	;volatile
  5112  0EF0  0008               	return
  5113  0EF1                     __end_of_Timer1_Init:	
  5114                           
  5115                           	psect	text15
  5116  0D05                     __ptext15:	
  5117 ;; *************** function _Timer1_GetSecond *****************
  5118 ;; Defined at:
  5119 ;;		line 65 in file "Timer1.c"
  5120 ;; Parameters:    Size  Location     Type
  5121 ;;		None
  5122 ;; Auto vars:     Size  Location     Type
  5123 ;;		None
  5124 ;; Return value:  Size  Location     Type
  5125 ;;                  1    wreg      unsigned char 
  5126 ;; Registers used:
  5127 ;;		wreg
  5128 ;; Tracked objects:
  5129 ;;		On entry : 0/0
  5130 ;;		On exit  : 0/0
  5131 ;;		Unchanged: 0/0
  5132 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  5133 ;;      Params:         0       0       0       0       0       0
  5134 ;;      Locals:         0       0       0       0       0       0
  5135 ;;      Temps:          0       0       0       0       0       0
  5136 ;;      Totals:         0       0       0       0       0       0
  5137 ;;Total ram usage:        0 bytes
  5138 ;; Hardware stack levels used:    1
  5139 ;; Hardware stack levels required when called:    3
  5140 ;; This function calls:
  5141 ;;		Nothing
  5142 ;; This function is called by:
  5143 ;;		_main
  5144 ;; This function uses a non-reentrant model
  5145 ;;
  5146                           
  5147                           
  5148                           ;psect for function _Timer1_GetSecond
  5149  0D05                     _Timer1_GetSecond:	
  5150                           
  5151                           ;Timer1.c: 67: return tcnt.Second_t;
  5152                           
  5153                           ;incstack = 0
  5154                           ; Regs used in _Timer1_GetSecond: [wreg]
  5155  0D05  0020               	movlb	0	; select bank0
  5156  0D06  0861               	movf	_tcnt,w
  5157  0D07  0008               	return
  5158  0D08                     __end_of_Timer1_GetSecond:	
  5159                           
  5160                           	psect	text16
  5161  0D02                     __ptext16:	
  5162 ;; *************** function _Timer1_GetMinute *****************
  5163 ;; Defined at:
  5164 ;;		line 70 in file "Timer1.c"
  5165 ;; Parameters:    Size  Location     Type
  5166 ;;		None
  5167 ;; Auto vars:     Size  Location     Type
  5168 ;;		None
  5169 ;; Return value:  Size  Location     Type
  5170 ;;                  1    wreg      unsigned char 
  5171 ;; Registers used:
  5172 ;;		wreg
  5173 ;; Tracked objects:
  5174 ;;		On entry : 0/0
  5175 ;;		On exit  : 0/0
  5176 ;;		Unchanged: 0/0
  5177 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  5178 ;;      Params:         0       0       0       0       0       0
  5179 ;;      Locals:         0       0       0       0       0       0
  5180 ;;      Temps:          0       0       0       0       0       0
  5181 ;;      Totals:         0       0       0       0       0       0
  5182 ;;Total ram usage:        0 bytes
  5183 ;; Hardware stack levels used:    1
  5184 ;; Hardware stack levels required when called:    3
  5185 ;; This function calls:
  5186 ;;		Nothing
  5187 ;; This function is called by:
  5188 ;;		_main
  5189 ;; This function uses a non-reentrant model
  5190 ;;
  5191                           
  5192                           
  5193                           ;psect for function _Timer1_GetMinute
  5194  0D02                     _Timer1_GetMinute:	
  5195                           
  5196                           ;Timer1.c: 72: return tcnt.Minute_t;
  5197                           
  5198                           ;incstack = 0
  5199                           ; Regs used in _Timer1_GetMinute: [wreg]
  5200  0D02  0020               	movlb	0	; select bank0
  5201  0D03  0862               	movf	_tcnt+1,w
  5202  0D04  0008               	return
  5203  0D05                     __end_of_Timer1_GetMinute:	
  5204                           
  5205                           	psect	text17
  5206  0DAD                     __ptext17:	
  5207 ;; *************** function _Timer1_GetCountSum *****************
  5208 ;; Defined at:
  5209 ;;		line 50 in file "Timer1.c"
  5210 ;; Parameters:    Size  Location     Type
  5211 ;;		None
  5212 ;; Auto vars:     Size  Location     Type
  5213 ;;		None
  5214 ;; Return value:  Size  Location     Type
  5215 ;;                  4    0[BANK0 ] unsigned long 
  5216 ;; Registers used:
  5217 ;;		wreg
  5218 ;; Tracked objects:
  5219 ;;		On entry : 0/0
  5220 ;;		On exit  : 0/0
  5221 ;;		Unchanged: 0/0
  5222 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  5223 ;;      Params:         0       4       0       0       0       0
  5224 ;;      Locals:         0       0       0       0       0       0
  5225 ;;      Temps:          0       0       0       0       0       0
  5226 ;;      Totals:         0       4       0       0       0       0
  5227 ;;Total ram usage:        4 bytes
  5228 ;; Hardware stack levels used:    1
  5229 ;; Hardware stack levels required when called:    3
  5230 ;; This function calls:
  5231 ;;		Nothing
  5232 ;; This function is called by:
  5233 ;;		_main
  5234 ;; This function uses a non-reentrant model
  5235 ;;
  5236                           
  5237                           
  5238                           ;psect for function _Timer1_GetCountSum
  5239  0DAD                     _Timer1_GetCountSum:	
  5240                           
  5241                           ;Timer1.c: 52: return cnts.SigmaDeltaCount;
  5242                           
  5243                           ;incstack = 0
  5244                           ; Regs used in _Timer1_GetCountSum: [wreg]
  5245  0DAD  0021               	movlb	1	; select bank1
  5246  0DAE  0841               	movf	(_cnts+3)^(0+128),w
  5247  0DAF  0020               	movlb	0	; select bank0
  5248  0DB0  00A3               	movwf	?_Timer1_GetCountSum+3
  5249  0DB1  0021               	movlb	1	; select bank1
  5250  0DB2  0840               	movf	(_cnts+2)^(0+128),w
  5251  0DB3  0020               	movlb	0	; select bank0
  5252  0DB4  00A2               	movwf	?_Timer1_GetCountSum+2
  5253  0DB5  0021               	movlb	1	; select bank1
  5254  0DB6  083F               	movf	(_cnts+1)^(0+128),w
  5255  0DB7  0020               	movlb	0	; select bank0
  5256  0DB8  00A1               	movwf	?_Timer1_GetCountSum+1
  5257  0DB9  0021               	movlb	1	; select bank1
  5258  0DBA  083E               	movf	_cnts^(0+128),w
  5259  0DBB  0020               	movlb	0	; select bank0
  5260  0DBC  00A0               	movwf	?_Timer1_GetCountSum
  5261  0DBD  0008               	return
  5262  0DBE                     __end_of_Timer1_GetCountSum:	
  5263                           
  5264                           	psect	text18
  5265  0F3F                     __ptext18:	
  5266 ;; *************** function _Timer1_GetCPM *****************
  5267 ;; Defined at:
  5268 ;;		line 60 in file "Timer1.c"
  5269 ;; Parameters:    Size  Location     Type
  5270 ;;		None
  5271 ;; Auto vars:     Size  Location     Type
  5272 ;;		None
  5273 ;; Return value:  Size  Location     Type
  5274 ;;                  4   30[BANK0 ] unsigned long 
  5275 ;; Registers used:
  5276 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5277 ;; Tracked objects:
  5278 ;;		On entry : 0/0
  5279 ;;		On exit  : 0/0
  5280 ;;		Unchanged: 0/0
  5281 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  5282 ;;      Params:         0       4       0       0       0       0
  5283 ;;      Locals:         0       4       0       0       0       0
  5284 ;;      Temps:          0       0       0       0       0       0
  5285 ;;      Totals:         0       8       0       0       0       0
  5286 ;;Total ram usage:        8 bytes
  5287 ;; Hardware stack levels used:    1
  5288 ;; Hardware stack levels required when called:    5
  5289 ;; This function calls:
  5290 ;;		_Timer1_GetCPS
  5291 ;;		___lmul
  5292 ;; This function is called by:
  5293 ;;		_main
  5294 ;; This function uses a non-reentrant model
  5295 ;;
  5296                           
  5297                           
  5298                           ;psect for function _Timer1_GetCPM
  5299  0F3F                     _Timer1_GetCPM:	
  5300                           
  5301                           ;Timer1.c: 62: return (uint32_t)(Timer1_GetCPS()*60);
  5302                           
  5303                           ;incstack = 0
  5304                           ; Regs used in _Timer1_GetCPM: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5305  0F3F  3187  2731  318F   	fcall	_Timer1_GetCPS
  5306  0F42  0020               	movlb	0	; select bank0
  5307  0F43  083D               	movf	?_Timer1_GetCPS+3,w
  5308  0F44  00C5               	movwf	_Timer1_GetCPM$1068+3
  5309  0F45  083C               	movf	?_Timer1_GetCPS+2,w
  5310  0F46  00C4               	movwf	_Timer1_GetCPM$1068+2
  5311  0F47  083B               	movf	?_Timer1_GetCPS+1,w
  5312  0F48  00C3               	movwf	_Timer1_GetCPM$1068+1
  5313  0F49  083A               	movf	?_Timer1_GetCPS,w
  5314  0F4A  00C2               	movwf	_Timer1_GetCPM$1068
  5315                           
  5316                           ;Timer1.c: 62: return (uint32_t)(Timer1_GetCPS()*60);
  5317  0F4B  0845               	movf	_Timer1_GetCPM$1068+3,w
  5318  0F4C  00A3               	movwf	___lmul@multiplier+3
  5319  0F4D  0844               	movf	_Timer1_GetCPM$1068+2,w
  5320  0F4E  00A2               	movwf	___lmul@multiplier+2
  5321  0F4F  0843               	movf	_Timer1_GetCPM$1068+1,w
  5322  0F50  00A1               	movwf	___lmul@multiplier+1
  5323  0F51  0842               	movf	_Timer1_GetCPM$1068,w
  5324  0F52  00A0               	movwf	___lmul@multiplier
  5325  0F53  3000               	movlw	0
  5326  0F54  00A7               	movwf	___lmul@multiplicand+3
  5327  0F55  3000               	movlw	0
  5328  0F56  00A6               	movwf	___lmul@multiplicand+2
  5329  0F57  3000               	movlw	0
  5330  0F58  00A5               	movwf	___lmul@multiplicand+1
  5331  0F59  303C               	movlw	60
  5332  0F5A  00A4               	movwf	___lmul@multiplicand
  5333  0F5B  318F  2796         	fcall	___lmul
  5334  0F5D  0020               	movlb	0	; select bank0
  5335  0F5E  0823               	movf	?___lmul+3,w
  5336  0F5F  00C1               	movwf	?_Timer1_GetCPM+3
  5337  0F60  0822               	movf	?___lmul+2,w
  5338  0F61  00C0               	movwf	?_Timer1_GetCPM+2
  5339  0F62  0821               	movf	?___lmul+1,w
  5340  0F63  00BF               	movwf	?_Timer1_GetCPM+1
  5341  0F64  0820               	movf	?___lmul,w
  5342  0F65  00BE               	movwf	?_Timer1_GetCPM
  5343  0F66  0008               	return
  5344  0F67                     __end_of_Timer1_GetCPM:	
  5345                           
  5346                           	psect	text19
  5347  0731                     __ptext19:	
  5348 ;; *************** function _Timer1_GetCPS *****************
  5349 ;; Defined at:
  5350 ;;		line 55 in file "Timer1.c"
  5351 ;; Parameters:    Size  Location     Type
  5352 ;;		None
  5353 ;; Auto vars:     Size  Location     Type
  5354 ;;		None
  5355 ;; Return value:  Size  Location     Type
  5356 ;;                  4   26[BANK0 ] unsigned long 
  5357 ;; Registers used:
  5358 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5359 ;; Tracked objects:
  5360 ;;		On entry : 0/0
  5361 ;;		On exit  : 0/0
  5362 ;;		Unchanged: 0/0
  5363 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  5364 ;;      Params:         0       4       0       0       0       0
  5365 ;;      Locals:         0       0       0       0       0       0
  5366 ;;      Temps:          0       0       0       0       0       0
  5367 ;;      Totals:         0       4       0       0       0       0
  5368 ;;Total ram usage:        4 bytes
  5369 ;; Hardware stack levels used:    1
  5370 ;; Hardware stack levels required when called:    4
  5371 ;; This function calls:
  5372 ;;		___lldiv
  5373 ;;		___lmul
  5374 ;; This function is called by:
  5375 ;;		_Timer1_GetCPM
  5376 ;;		_main
  5377 ;; This function uses a non-reentrant model
  5378 ;;
  5379                           
  5380                           
  5381                           ;psect for function _Timer1_GetCPS
  5382  0731                     _Timer1_GetCPS:	
  5383                           
  5384                           ;Timer1.c: 57: return (uint32_t)((cnts.SigmaDeltaCount * 1000UL)/tcnt.Delta_t);
  5385                           
  5386                           ;incstack = 0
  5387                           ; Regs used in _Timer1_GetCPS: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5388  0731  3002               	movlw	2
  5389  0732  3E61               	addlw	(low (_tcnt| 0))& (0+255)
  5390  0733  0086               	movwf	6
  5391  0734  0187               	clrf	7
  5392  0735  3F40               	moviw [0]fsr1
  5393  0736  0020               	movlb	0	; select bank0
  5394  0737  00AC               	movwf	___lldiv@divisor
  5395  0738  3F41               	moviw [1]fsr1
  5396  0739  00AD               	movwf	___lldiv@divisor+1
  5397  073A  3F42               	moviw [2]fsr1
  5398  073B  00AE               	movwf	___lldiv@divisor+2
  5399  073C  3F43               	moviw [3]fsr1
  5400  073D  00AF               	movwf	___lldiv@divisor+3
  5401  073E  0021               	movlb	1	; select bank1
  5402  073F  0841               	movf	(_cnts+3)^(0+128),w
  5403  0740  0020               	movlb	0	; select bank0
  5404  0741  00A3               	movwf	___lmul@multiplier+3
  5405  0742  0021               	movlb	1	; select bank1
  5406  0743  0840               	movf	(_cnts+2)^(0+128),w
  5407  0744  0020               	movlb	0	; select bank0
  5408  0745  00A2               	movwf	___lmul@multiplier+2
  5409  0746  0021               	movlb	1	; select bank1
  5410  0747  083F               	movf	(_cnts+1)^(0+128),w
  5411  0748  0020               	movlb	0	; select bank0
  5412  0749  00A1               	movwf	___lmul@multiplier+1
  5413  074A  0021               	movlb	1	; select bank1
  5414  074B  083E               	movf	_cnts^(0+128),w
  5415  074C  0020               	movlb	0	; select bank0
  5416  074D  00A0               	movwf	___lmul@multiplier
  5417  074E  3000               	movlw	0
  5418  074F  00A7               	movwf	___lmul@multiplicand+3
  5419  0750  3000               	movlw	0
  5420  0751  00A6               	movwf	___lmul@multiplicand+2
  5421  0752  3003               	movlw	3
  5422  0753  00A5               	movwf	___lmul@multiplicand+1
  5423  0754  30E8               	movlw	232
  5424  0755  00A4               	movwf	___lmul@multiplicand
  5425  0756  318F  2796  3187   	fcall	___lmul
  5426  0759  0020               	movlb	0	; select bank0
  5427  075A  0823               	movf	?___lmul+3,w
  5428  075B  00B3               	movwf	___lldiv@dividend+3
  5429  075C  0822               	movf	?___lmul+2,w
  5430  075D  00B2               	movwf	___lldiv@dividend+2
  5431  075E  0821               	movf	?___lmul+1,w
  5432  075F  00B1               	movwf	___lldiv@dividend+1
  5433  0760  0820               	movf	?___lmul,w
  5434  0761  00B0               	movwf	___lldiv@dividend
  5435  0762  3186  260C         	fcall	___lldiv
  5436  0764  0020               	movlb	0	; select bank0
  5437  0765  082F               	movf	?___lldiv+3,w
  5438  0766  00BD               	movwf	?_Timer1_GetCPS+3
  5439  0767  082E               	movf	?___lldiv+2,w
  5440  0768  00BC               	movwf	?_Timer1_GetCPS+2
  5441  0769  082D               	movf	?___lldiv+1,w
  5442  076A  00BB               	movwf	?_Timer1_GetCPS+1
  5443  076B  082C               	movf	?___lldiv,w
  5444  076C  00BA               	movwf	?_Timer1_GetCPS
  5445  076D  0008               	return
  5446  076E                     __end_of_Timer1_GetCPS:	
  5447                           
  5448                           	psect	text20
  5449  0F96                     __ptext20:	
  5450 ;; *************** function ___lmul *****************
  5451 ;; Defined at:
  5452 ;;		line 15 in file "/opt/microchip/xc8/v1.41/sources/common/Umul32.c"
  5453 ;; Parameters:    Size  Location     Type
  5454 ;;  multiplier      4    0[BANK0 ] unsigned long 
  5455 ;;  multiplicand    4    4[BANK0 ] unsigned long 
  5456 ;; Auto vars:     Size  Location     Type
  5457 ;;  product         4    8[BANK0 ] unsigned long 
  5458 ;; Return value:  Size  Location     Type
  5459 ;;                  4    0[BANK0 ] unsigned long 
  5460 ;; Registers used:
  5461 ;;		wreg, status,2, status,0
  5462 ;; Tracked objects:
  5463 ;;		On entry : 0/0
  5464 ;;		On exit  : 0/0
  5465 ;;		Unchanged: 0/0
  5466 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  5467 ;;      Params:         0       8       0       0       0       0
  5468 ;;      Locals:         0       4       0       0       0       0
  5469 ;;      Temps:          0       0       0       0       0       0
  5470 ;;      Totals:         0      12       0       0       0       0
  5471 ;;Total ram usage:       12 bytes
  5472 ;; Hardware stack levels used:    1
  5473 ;; Hardware stack levels required when called:    3
  5474 ;; This function calls:
  5475 ;;		Nothing
  5476 ;; This function is called by:
  5477 ;;		_Timer1_GetCPS
  5478 ;;		_Timer1_GetCPM
  5479 ;; This function uses a non-reentrant model
  5480 ;;
  5481                           
  5482                           
  5483                           ;psect for function ___lmul
  5484  0F96                     ___lmul:	
  5485                           
  5486                           ;incstack = 0
  5487                           ; Regs used in ___lmul: [wreg+status,2+status,0]
  5488  0F96  3000               	movlw	0
  5489  0F97  0020               	movlb	0	; select bank0
  5490  0F98  00AB               	movwf	___lmul@product+3
  5491  0F99  3000               	movlw	0
  5492  0F9A  00AA               	movwf	___lmul@product+2
  5493  0F9B  3000               	movlw	0
  5494  0F9C  00A9               	movwf	___lmul@product+1
  5495  0F9D  3000               	movlw	0
  5496  0F9E  00A8               	movwf	___lmul@product
  5497  0F9F                     l2993:	
  5498  0F9F  1C20               	btfss	___lmul@multiplier,0
  5499  0FA0  2FA9               	goto	l2997
  5500  0FA1  0824               	movf	___lmul@multiplicand,w
  5501  0FA2  07A8               	addwf	___lmul@product,f
  5502  0FA3  0825               	movf	___lmul@multiplicand+1,w
  5503  0FA4  3DA9               	addwfc	___lmul@product+1,f
  5504  0FA5  0826               	movf	___lmul@multiplicand+2,w
  5505  0FA6  3DAA               	addwfc	___lmul@product+2,f
  5506  0FA7  0827               	movf	___lmul@multiplicand+3,w
  5507  0FA8  3DAB               	addwfc	___lmul@product+3,f
  5508  0FA9                     l2997:	
  5509  0FA9  3001               	movlw	1
  5510  0FAA                     u2505:	
  5511  0FAA  35A4               	lslf	___lmul@multiplicand,f
  5512  0FAB  0DA5               	rlf	___lmul@multiplicand+1,f
  5513  0FAC  0DA6               	rlf	___lmul@multiplicand+2,f
  5514  0FAD  0DA7               	rlf	___lmul@multiplicand+3,f
  5515  0FAE  0B89               	decfsz	9,f
  5516  0FAF  2FAA               	goto	u2505
  5517  0FB0  3001               	movlw	1
  5518  0FB1                     u2515:	
  5519  0FB1  36A3               	lsrf	___lmul@multiplier+3,f
  5520  0FB2  0CA2               	rrf	___lmul@multiplier+2,f
  5521  0FB3  0CA1               	rrf	___lmul@multiplier+1,f
  5522  0FB4  0CA0               	rrf	___lmul@multiplier,f
  5523  0FB5  0B89               	decfsz	9,f
  5524  0FB6  2FB1               	goto	u2515
  5525  0FB7  0823               	movf	___lmul@multiplier+3,w
  5526  0FB8  0422               	iorwf	___lmul@multiplier+2,w
  5527  0FB9  0421               	iorwf	___lmul@multiplier+1,w
  5528  0FBA  0420               	iorwf	___lmul@multiplier,w
  5529  0FBB  1D03               	skipz
  5530  0FBC  2F9F               	goto	l2993
  5531  0FBD  082B               	movf	___lmul@product+3,w
  5532  0FBE  00A3               	movwf	?___lmul+3
  5533  0FBF  082A               	movf	___lmul@product+2,w
  5534  0FC0  00A2               	movwf	?___lmul+2
  5535  0FC1  0829               	movf	___lmul@product+1,w
  5536  0FC2  00A1               	movwf	?___lmul+1
  5537  0FC3  0828               	movf	___lmul@product,w
  5538  0FC4  00A0               	movwf	?___lmul
  5539  0FC5  0008               	return
  5540  0FC6                     __end_of___lmul:	
  5541                           
  5542                           	psect	text21
  5543  060C                     __ptext21:	
  5544 ;; *************** function ___lldiv *****************
  5545 ;; Defined at:
  5546 ;;		line 6 in file "/opt/microchip/xc8/v1.41/sources/common/lldiv.c"
  5547 ;; Parameters:    Size  Location     Type
  5548 ;;  divisor         4   12[BANK0 ] unsigned long 
  5549 ;;  dividend        4   16[BANK0 ] unsigned long 
  5550 ;; Auto vars:     Size  Location     Type
  5551 ;;  quotient        4   21[BANK0 ] unsigned long 
  5552 ;;  counter         1   25[BANK0 ] unsigned char 
  5553 ;; Return value:  Size  Location     Type
  5554 ;;                  4   12[BANK0 ] unsigned long 
  5555 ;; Registers used:
  5556 ;;		wreg, status,2, status,0
  5557 ;; Tracked objects:
  5558 ;;		On entry : 0/0
  5559 ;;		On exit  : 0/0
  5560 ;;		Unchanged: 0/0
  5561 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  5562 ;;      Params:         0       8       0       0       0       0
  5563 ;;      Locals:         0       5       0       0       0       0
  5564 ;;      Temps:          0       1       0       0       0       0
  5565 ;;      Totals:         0      14       0       0       0       0
  5566 ;;Total ram usage:       14 bytes
  5567 ;; Hardware stack levels used:    1
  5568 ;; Hardware stack levels required when called:    3
  5569 ;; This function calls:
  5570 ;;		Nothing
  5571 ;; This function is called by:
  5572 ;;		_Timer1_GetCPS
  5573 ;;		_printf
  5574 ;; This function uses a non-reentrant model
  5575 ;;
  5576                           
  5577                           
  5578                           ;psect for function ___lldiv
  5579  060C                     ___lldiv:	
  5580                           
  5581                           ;incstack = 0
  5582                           ; Regs used in ___lldiv: [wreg+status,2+status,0]
  5583  060C  3000               	movlw	0
  5584  060D  0020               	movlb	0	; select bank0
  5585  060E  00B8               	movwf	___lldiv@quotient+3
  5586  060F  3000               	movlw	0
  5587  0610  00B7               	movwf	___lldiv@quotient+2
  5588  0611  3000               	movlw	0
  5589  0612  00B6               	movwf	___lldiv@quotient+1
  5590  0613  3000               	movlw	0
  5591  0614  00B5               	movwf	___lldiv@quotient
  5592  0615  082F               	movf	___lldiv@divisor+3,w
  5593  0616  042E               	iorwf	___lldiv@divisor+2,w
  5594  0617  042D               	iorwf	___lldiv@divisor+1,w
  5595  0618  042C               	iorwf	___lldiv@divisor,w
  5596  0619  1903               	skipnz
  5597  061A  2E56               	goto	l3025
  5598  061B  01B9               	clrf	___lldiv@counter
  5599  061C  0AB9               	incf	___lldiv@counter,f
  5600  061D                     l3011:	
  5601  061D  1BAF               	btfsc	___lldiv@divisor+3,7
  5602  061E  2E2B               	goto	l3013
  5603  061F  3001               	movlw	1
  5604  0620                     u2545:	
  5605  0620  35AC               	lslf	___lldiv@divisor,f
  5606  0621  0DAD               	rlf	___lldiv@divisor+1,f
  5607  0622  0DAE               	rlf	___lldiv@divisor+2,f
  5608  0623  0DAF               	rlf	___lldiv@divisor+3,f
  5609  0624  0B89               	decfsz	9,f
  5610  0625  2E20               	goto	u2545
  5611  0626  3001               	movlw	1
  5612  0627  00B4               	movwf	??___lldiv
  5613  0628  0834               	movf	??___lldiv,w
  5614  0629  07B9               	addwf	___lldiv@counter,f
  5615  062A  2E1D               	goto	l3011
  5616  062B                     l3013:	
  5617  062B  3001               	movlw	1
  5618  062C                     u2565:	
  5619  062C  35B5               	lslf	___lldiv@quotient,f
  5620  062D  0DB6               	rlf	___lldiv@quotient+1,f
  5621  062E  0DB7               	rlf	___lldiv@quotient+2,f
  5622  062F  0DB8               	rlf	___lldiv@quotient+3,f
  5623  0630  0B89               	decfsz	9,f
  5624  0631  2E2C               	goto	u2565
  5625  0632  082F               	movf	___lldiv@divisor+3,w
  5626  0633  0233               	subwf	___lldiv@dividend+3,w
  5627  0634  1D03               	skipz
  5628  0635  2E40               	goto	u2575
  5629  0636  082E               	movf	___lldiv@divisor+2,w
  5630  0637  0232               	subwf	___lldiv@dividend+2,w
  5631  0638  1D03               	skipz
  5632  0639  2E40               	goto	u2575
  5633  063A  082D               	movf	___lldiv@divisor+1,w
  5634  063B  0231               	subwf	___lldiv@dividend+1,w
  5635  063C  1D03               	skipz
  5636  063D  2E40               	goto	u2575
  5637  063E  082C               	movf	___lldiv@divisor,w
  5638  063F  0230               	subwf	___lldiv@dividend,w
  5639  0640                     u2575:	
  5640  0640  1C03               	skipc
  5641  0641  2E4B               	goto	l3021
  5642  0642  082C               	movf	___lldiv@divisor,w
  5643  0643  02B0               	subwf	___lldiv@dividend,f
  5644  0644  082D               	movf	___lldiv@divisor+1,w
  5645  0645  3BB1               	subwfb	___lldiv@dividend+1,f
  5646  0646  082E               	movf	___lldiv@divisor+2,w
  5647  0647  3BB2               	subwfb	___lldiv@dividend+2,f
  5648  0648  082F               	movf	___lldiv@divisor+3,w
  5649  0649  3BB3               	subwfb	___lldiv@dividend+3,f
  5650  064A  1435               	bsf	___lldiv@quotient,0
  5651  064B                     l3021:	
  5652  064B  3001               	movlw	1
  5653  064C                     u2585:	
  5654  064C  36AF               	lsrf	___lldiv@divisor+3,f
  5655  064D  0CAE               	rrf	___lldiv@divisor+2,f
  5656  064E  0CAD               	rrf	___lldiv@divisor+1,f
  5657  064F  0CAC               	rrf	___lldiv@divisor,f
  5658  0650  0B89               	decfsz	9,f
  5659  0651  2E4C               	goto	u2585
  5660  0652  3001               	movlw	1
  5661  0653  02B9               	subwf	___lldiv@counter,f
  5662  0654  1D03               	btfss	3,2
  5663  0655  2E2B               	goto	l3013
  5664  0656                     l3025:	
  5665  0656  0838               	movf	___lldiv@quotient+3,w
  5666  0657  00AF               	movwf	?___lldiv+3
  5667  0658  0837               	movf	___lldiv@quotient+2,w
  5668  0659  00AE               	movwf	?___lldiv+2
  5669  065A  0836               	movf	___lldiv@quotient+1,w
  5670  065B  00AD               	movwf	?___lldiv+1
  5671  065C  0835               	movf	___lldiv@quotient,w
  5672  065D  00AC               	movwf	?___lldiv
  5673  065E  0008               	return
  5674  065F                     __end_of___lldiv:	
  5675                           
  5676                           	psect	text22
  5677  0549                     __ptext22:	
  5678 ;; *************** function _LCD_Init *****************
  5679 ;; Defined at:
  5680 ;;		line 28 in file "LCD.c"
  5681 ;; Parameters:    Size  Location     Type
  5682 ;;		None
  5683 ;; Auto vars:     Size  Location     Type
  5684 ;;		None
  5685 ;; Return value:  Size  Location     Type
  5686 ;;                  1    wreg      void 
  5687 ;; Registers used:
  5688 ;;		wreg, status,2, status,0, pclath, cstack
  5689 ;; Tracked objects:
  5690 ;;		On entry : 0/0
  5691 ;;		On exit  : 0/0
  5692 ;;		Unchanged: 0/0
  5693 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  5694 ;;      Params:         0       0       0       0       0       0
  5695 ;;      Locals:         0       0       0       0       0       0
  5696 ;;      Temps:          0       2       0       0       0       0
  5697 ;;      Totals:         0       2       0       0       0       0
  5698 ;;Total ram usage:        2 bytes
  5699 ;; Hardware stack levels used:    1
  5700 ;; Hardware stack levels required when called:    5
  5701 ;; This function calls:
  5702 ;;		_LCD_DisplayClear
  5703 ;;		_LCD_WriteData
  5704 ;; This function is called by:
  5705 ;;		_main
  5706 ;; This function uses a non-reentrant model
  5707 ;;
  5708                           
  5709                           
  5710                           ;psect for function _LCD_Init
  5711  0549                     _LCD_Init:	
  5712                           
  5713                           ;LCD.c: 30: LATA3 = 0;
  5714                           
  5715                           ;incstack = 0
  5716                           ; Regs used in _LCD_Init: [wreg+status,2+status,0+pclath+cstack]
  5717  0549  0022               	movlb	2	; select bank2
  5718  054A  118C               	bcf	12,3	;volatile
  5719                           
  5720                           ;LCD.c: 31: LATA4 = 0;
  5721  054B  120C               	bcf	12,4	;volatile
  5722                           
  5723                           ;LCD.c: 33: _delay((unsigned long)((30)*(32000000/4000.0)));
  5724  054C  3002               	movlw	2
  5725  054D  0020               	movlb	0	; select bank0
  5726  054E  00A5               	movwf	??_LCD_Init+1
  5727  054F  3038               	movlw	56
  5728  0550  00A4               	movwf	??_LCD_Init
  5729  0551  30AD               	movlw	173
  5730  0552                     u3097:	
  5731  0552  0B89               	decfsz	9,f
  5732  0553  2D52               	goto	u3097
  5733  0554  0BA4               	decfsz	??_LCD_Init,f
  5734  0555  2D52               	goto	u3097
  5735  0556  0BA5               	decfsz	??_LCD_Init+1,f
  5736  0557  2D52               	goto	u3097
  5737                           
  5738                           ;LCD.c: 34: PORTB = ( ((0x03&0x0C)<<1)|(0x03&0x03) );
  5739  0558  3003               	movlw	3
  5740  0559  0020               	movlb	0	; select bank0
  5741  055A  008D               	movwf	13	;volatile
  5742                           
  5743                           ;LCD.c: 35: {LATA4 = 1; _delay((unsigned long)((1)*(32000000/4000000.0))); LATA4 = 0; _d
      +                          elay((unsigned long)((1)*(32000000/4000000.0)));};
  5744  055B  0022               	movlb	2	; select bank2
  5745  055C  160C               	bsf	12,4	;volatile
  5746  055D  3200               	nop2	;2 cycle nop
  5747  055E  3200               	nop2	;2 cycle nop
  5748  055F  3200               	nop2	;2 cycle nop
  5749  0560  3200               	nop2	;2 cycle nop
  5750  0561  0022               	movlb	2	; select bank2
  5751  0562  120C               	bcf	12,4	;volatile
  5752  0563  3200               	nop2	;2 cycle nop
  5753  0564  3200               	nop2	;2 cycle nop
  5754  0565  3200               	nop2	;2 cycle nop
  5755  0566  3200               	nop2	;2 cycle nop
  5756                           
  5757                           ;LCD.c: 36: _delay((unsigned long)((5)*(32000000/4000.0)));
  5758  0567  3034               	movlw	52
  5759  0568  0020               	movlb	0	; select bank0
  5760  0569  00A4               	movwf	??_LCD_Init
  5761  056A  30F1               	movlw	241
  5762  056B                     u3107:	
  5763  056B  0B89               	decfsz	9,f
  5764  056C  2D6B               	goto	u3107
  5765  056D  0BA4               	decfsz	??_LCD_Init,f
  5766  056E  2D6B               	goto	u3107
  5767  056F  3200               	nop2
  5768                           
  5769                           ;LCD.c: 37: {LATA4 = 1; _delay((unsigned long)((1)*(32000000/4000000.0))); LATA4 = 0; _d
      +                          elay((unsigned long)((1)*(32000000/4000000.0)));};
  5770  0570  0022               	movlb	2	; select bank2
  5771  0571  160C               	bsf	12,4	;volatile
  5772  0572  3200               	nop2	;2 cycle nop
  5773  0573  3200               	nop2	;2 cycle nop
  5774  0574  3200               	nop2	;2 cycle nop
  5775  0575  3200               	nop2	;2 cycle nop
  5776  0576  0022               	movlb	2	; select bank2
  5777  0577  120C               	bcf	12,4	;volatile
  5778  0578  3200               	nop2	;2 cycle nop
  5779  0579  3200               	nop2	;2 cycle nop
  5780  057A  3200               	nop2	;2 cycle nop
  5781  057B  3200               	nop2	;2 cycle nop
  5782                           
  5783                           ;LCD.c: 38: _delay((unsigned long)((400)*(32000000/4000000.0)));
  5784  057C  3005               	movlw	5
  5785  057D  0020               	movlb	0	; select bank0
  5786  057E  00A4               	movwf	??_LCD_Init
  5787  057F  3026               	movlw	38
  5788  0580                     u3117:	
  5789  0580  0B89               	decfsz	9,f
  5790  0581  2D80               	goto	u3117
  5791  0582  0BA4               	decfsz	??_LCD_Init,f
  5792  0583  2D80               	goto	u3117
  5793  0584  0000               	nop
  5794                           
  5795                           ;LCD.c: 39: {LATA4 = 1; _delay((unsigned long)((1)*(32000000/4000000.0))); LATA4 = 0; _d
      +                          elay((unsigned long)((1)*(32000000/4000000.0)));};
  5796  0585  0022               	movlb	2	; select bank2
  5797  0586  160C               	bsf	12,4	;volatile
  5798  0587  3200               	nop2	;2 cycle nop
  5799  0588  3200               	nop2	;2 cycle nop
  5800  0589  3200               	nop2	;2 cycle nop
  5801  058A  3200               	nop2	;2 cycle nop
  5802  058B  0022               	movlb	2	; select bank2
  5803  058C  120C               	bcf	12,4	;volatile
  5804  058D  3200               	nop2	;2 cycle nop
  5805  058E  3200               	nop2	;2 cycle nop
  5806  058F  3200               	nop2	;2 cycle nop
  5807  0590  3200               	nop2	;2 cycle nop
  5808                           
  5809                           ;LCD.c: 40: _delay((unsigned long)((400)*(32000000/4000000.0)));
  5810  0591  3005               	movlw	5
  5811  0592  0020               	movlb	0	; select bank0
  5812  0593  00A4               	movwf	??_LCD_Init
  5813  0594  3026               	movlw	38
  5814  0595                     u3127:	
  5815  0595  0B89               	decfsz	9,f
  5816  0596  2D95               	goto	u3127
  5817  0597  0BA4               	decfsz	??_LCD_Init,f
  5818  0598  2D95               	goto	u3127
  5819  0599  0000               	nop
  5820                           
  5821                           ;LCD.c: 41: PORTB = ( ((0x02&0x0C)<<1)|(0x02&0x03) );
  5822  059A  3002               	movlw	2
  5823  059B  0020               	movlb	0	; select bank0
  5824  059C  008D               	movwf	13	;volatile
  5825                           
  5826                           ;LCD.c: 42: {LATA4 = 1; _delay((unsigned long)((1)*(32000000/4000000.0))); LATA4 = 0; _d
      +                          elay((unsigned long)((1)*(32000000/4000000.0)));};
  5827  059D  0022               	movlb	2	; select bank2
  5828  059E  160C               	bsf	12,4	;volatile
  5829  059F  3200               	nop2	;2 cycle nop
  5830  05A0  3200               	nop2	;2 cycle nop
  5831  05A1  3200               	nop2	;2 cycle nop
  5832  05A2  3200               	nop2	;2 cycle nop
  5833  05A3  0022               	movlb	2	; select bank2
  5834  05A4  120C               	bcf	12,4	;volatile
  5835  05A5  3200               	nop2	;2 cycle nop
  5836  05A6  3200               	nop2	;2 cycle nop
  5837  05A7  3200               	nop2	;2 cycle nop
  5838  05A8  3200               	nop2	;2 cycle nop
  5839                           
  5840                           ;LCD.c: 44: LCD_WriteData(0x28);
  5841  05A9  3028               	movlw	40
  5842  05AA  3187  276E  3185   	fcall	_LCD_WriteData
  5843                           
  5844                           ;LCD.c: 45: LCD_WriteData(0x0c);
  5845  05AD  300C               	movlw	12
  5846  05AE  3187  276E  3185   	fcall	_LCD_WriteData
  5847                           
  5848                           ;LCD.c: 46: LCD_DisplayClear();
  5849  05B1  318D  258C  3185   	fcall	_LCD_DisplayClear
  5850                           
  5851                           ;LCD.c: 47: LCD_WriteData(0x06);
  5852  05B4  3006               	movlw	6
  5853  05B5  3187  276E         	fcall	_LCD_WriteData
  5854  05B7  0008               	return
  5855  05B8                     __end_of_LCD_Init:	
  5856                           
  5857                           	psect	text23
  5858  0D8C                     __ptext23:	
  5859 ;; *************** function _LCD_DisplayClear *****************
  5860 ;; Defined at:
  5861 ;;		line 73 in file "LCD.c"
  5862 ;; Parameters:    Size  Location     Type
  5863 ;;		None
  5864 ;; Auto vars:     Size  Location     Type
  5865 ;;		None
  5866 ;; Return value:  Size  Location     Type
  5867 ;;                  1    wreg      void 
  5868 ;; Registers used:
  5869 ;;		wreg, status,2, status,0, pclath, cstack
  5870 ;; Tracked objects:
  5871 ;;		On entry : 0/0
  5872 ;;		On exit  : 0/0
  5873 ;;		Unchanged: 0/0
  5874 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  5875 ;;      Params:         0       0       0       0       0       0
  5876 ;;      Locals:         0       0       0       0       0       0
  5877 ;;      Temps:          0       1       0       0       0       0
  5878 ;;      Totals:         0       1       0       0       0       0
  5879 ;;Total ram usage:        1 bytes
  5880 ;; Hardware stack levels used:    1
  5881 ;; Hardware stack levels required when called:    4
  5882 ;; This function calls:
  5883 ;;		_LCD_WriteData
  5884 ;; This function is called by:
  5885 ;;		_LCD_Init
  5886 ;;		_main
  5887 ;; This function uses a non-reentrant model
  5888 ;;
  5889                           
  5890                           
  5891                           ;psect for function _LCD_DisplayClear
  5892  0D8C                     _LCD_DisplayClear:	
  5893                           
  5894                           ;LCD.c: 75: LATA3 = 0;
  5895                           
  5896                           ;incstack = 0
  5897                           ; Regs used in _LCD_DisplayClear: [wreg+status,2+status,0+pclath+cstack]
  5898  0D8C  0022               	movlb	2	; select bank2
  5899  0D8D  118C               	bcf	12,3	;volatile
  5900                           
  5901                           ;LCD.c: 76: LCD_WriteData(0x01);
  5902  0D8E  3001               	movlw	1
  5903  0D8F  3187  276E  318D   	fcall	_LCD_WriteData
  5904                           
  5905                           ;LCD.c: 77: _delay((unsigned long)((2)*(32000000/4000.0)));
  5906  0D92  3015               	movlw	21
  5907  0D93  0020               	movlb	0	; select bank0
  5908  0D94  00A3               	movwf	??_LCD_DisplayClear
  5909  0D95  30C6               	movlw	198
  5910  0D96                     u3137:	
  5911  0D96  0B89               	decfsz	9,f
  5912  0D97  2D96               	goto	u3137
  5913  0D98  0BA3               	decfsz	??_LCD_DisplayClear,f
  5914  0D99  2D96               	goto	u3137
  5915  0D9A  0000               	nop
  5916  0D9B  0008               	return
  5917  0D9C                     __end_of_LCD_DisplayClear:	
  5918                           
  5919                           	psect	text24
  5920  0E0E                     __ptext24:	
  5921 ;; *************** function _LCD_CursorPosition *****************
  5922 ;; Defined at:
  5923 ;;		line 95 in file "LCD.c"
  5924 ;; Parameters:    Size  Location     Type
  5925 ;;  tx              1    wreg     unsigned char 
  5926 ;;  ty              1    3[BANK0 ] unsigned char 
  5927 ;; Auto vars:     Size  Location     Type
  5928 ;;  tx              1    5[BANK0 ] unsigned char 
  5929 ;; Return value:  Size  Location     Type
  5930 ;;                  1    wreg      void 
  5931 ;; Registers used:
  5932 ;;		wreg, status,2, status,0, pclath, cstack
  5933 ;; Tracked objects:
  5934 ;;		On entry : 0/0
  5935 ;;		On exit  : 0/0
  5936 ;;		Unchanged: 0/0
  5937 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  5938 ;;      Params:         0       1       0       0       0       0
  5939 ;;      Locals:         0       1       0       0       0       0
  5940 ;;      Temps:          0       1       0       0       0       0
  5941 ;;      Totals:         0       3       0       0       0       0
  5942 ;;Total ram usage:        3 bytes
  5943 ;; Hardware stack levels used:    1
  5944 ;; Hardware stack levels required when called:    4
  5945 ;; This function calls:
  5946 ;;		_LCD_WriteData
  5947 ;; This function is called by:
  5948 ;;		_main
  5949 ;; This function uses a non-reentrant model
  5950 ;;
  5951                           
  5952                           
  5953                           ;psect for function _LCD_CursorPosition
  5954  0E0E                     _LCD_CursorPosition:	
  5955                           
  5956                           ;incstack = 0
  5957                           ; Regs used in _LCD_CursorPosition: [wreg+status,2+status,0+pclath+cstack]
  5958                           ;LCD_CursorPosition@tx stored from wreg
  5959  0E0E  0020               	movlb	0	; select bank0
  5960  0E0F  00A5               	movwf	LCD_CursorPosition@tx
  5961                           
  5962                           ;LCD.c: 97: LATA3 = 0;
  5963  0E10  0022               	movlb	2	; select bank2
  5964  0E11  118C               	bcf	12,3	;volatile
  5965                           
  5966                           ;LCD.c: 98: LCD_WriteData(0x80|tx|(0x40*ty));
  5967  0E12  0020               	movlb	0	; select bank0
  5968  0E13  0823               	movf	LCD_CursorPosition@ty,w
  5969  0E14  00A4               	movwf	??_LCD_CursorPosition
  5970  0E15  3005               	movlw	5
  5971  0E16                     u2735:	
  5972  0E16  35A4               	lslf	??_LCD_CursorPosition,f
  5973  0E17  3EFF               	addlw	-1
  5974  0E18  1D03               	skipz
  5975  0E19  2E16               	goto	u2735
  5976  0E1A  3524               	lslf	??_LCD_CursorPosition,w
  5977  0E1B  0425               	iorwf	LCD_CursorPosition@tx,w
  5978  0E1C  3880               	iorlw	-128
  5979  0E1D  3187  276E  318E   	fcall	_LCD_WriteData
  5980                           
  5981                           ;LCD.c: 99: _delay((unsigned long)((40)*(32000000/4000000.0)));
  5982  0E20  306A               	movlw	106
  5983  0E21                     u3147:	
  5984  0E21  0B89               	decfsz	9,f
  5985  0E22  2E21               	goto	u3147
  5986  0E23  3200               	nop2
  5987  0E24  0008               	return
  5988  0E25                     __end_of_LCD_CursorPosition:	
  5989                           
  5990                           	psect	text25
  5991  0D7C                     __ptext25:	
  5992 ;; *************** function _LCD_CursorHome *****************
  5993 ;; Defined at:
  5994 ;;		line 84 in file "LCD.c"
  5995 ;; Parameters:    Size  Location     Type
  5996 ;;		None
  5997 ;; Auto vars:     Size  Location     Type
  5998 ;;		None
  5999 ;; Return value:  Size  Location     Type
  6000 ;;                  1    wreg      void 
  6001 ;; Registers used:
  6002 ;;		wreg, status,2, status,0, pclath, cstack
  6003 ;; Tracked objects:
  6004 ;;		On entry : 0/0
  6005 ;;		On exit  : 0/0
  6006 ;;		Unchanged: 0/0
  6007 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  6008 ;;      Params:         0       0       0       0       0       0
  6009 ;;      Locals:         0       0       0       0       0       0
  6010 ;;      Temps:          0       1       0       0       0       0
  6011 ;;      Totals:         0       1       0       0       0       0
  6012 ;;Total ram usage:        1 bytes
  6013 ;; Hardware stack levels used:    1
  6014 ;; Hardware stack levels required when called:    4
  6015 ;; This function calls:
  6016 ;;		_LCD_WriteData
  6017 ;; This function is called by:
  6018 ;;		_main
  6019 ;; This function uses a non-reentrant model
  6020 ;;
  6021                           
  6022                           
  6023                           ;psect for function _LCD_CursorHome
  6024  0D7C                     _LCD_CursorHome:	
  6025                           
  6026                           ;LCD.c: 86: LATA3 = 0;
  6027                           
  6028                           ;incstack = 0
  6029                           ; Regs used in _LCD_CursorHome: [wreg+status,2+status,0+pclath+cstack]
  6030  0D7C  0022               	movlb	2	; select bank2
  6031  0D7D  118C               	bcf	12,3	;volatile
  6032                           
  6033                           ;LCD.c: 87: LCD_WriteData(0x02);
  6034  0D7E  3002               	movlw	2
  6035  0D7F  3187  276E  318D   	fcall	_LCD_WriteData
  6036                           
  6037                           ;LCD.c: 88: _delay((unsigned long)((2)*(32000000/4000.0)));
  6038  0D82  3015               	movlw	21
  6039  0D83  0020               	movlb	0	; select bank0
  6040  0D84  00A3               	movwf	??_LCD_CursorHome
  6041  0D85  30C6               	movlw	198
  6042  0D86                     u3157:	
  6043  0D86  0B89               	decfsz	9,f
  6044  0D87  2D86               	goto	u3157
  6045  0D88  0BA3               	decfsz	??_LCD_CursorHome,f
  6046  0D89  2D86               	goto	u3157
  6047  0D8A  0000               	nop
  6048  0D8B  0008               	return
  6049  0D8C                     __end_of_LCD_CursorHome:	
  6050                           
  6051                           	psect	text26
  6052  076E                     __ptext26:	
  6053 ;; *************** function _LCD_WriteData *****************
  6054 ;; Defined at:
  6055 ;;		line 15 in file "LCD.c"
  6056 ;; Parameters:    Size  Location     Type
  6057 ;;  point           1    wreg     char 
  6058 ;; Auto vars:     Size  Location     Type
  6059 ;;  point           1    2[BANK0 ] char 
  6060 ;; Return value:  Size  Location     Type
  6061 ;;                  1    wreg      void 
  6062 ;; Registers used:
  6063 ;;		wreg, status,2, status,0
  6064 ;; Tracked objects:
  6065 ;;		On entry : 0/0
  6066 ;;		On exit  : 0/0
  6067 ;;		Unchanged: 0/0
  6068 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  6069 ;;      Params:         0       0       0       0       0       0
  6070 ;;      Locals:         0       1       0       0       0       0
  6071 ;;      Temps:          0       2       0       0       0       0
  6072 ;;      Totals:         0       3       0       0       0       0
  6073 ;;Total ram usage:        3 bytes
  6074 ;; Hardware stack levels used:    1
  6075 ;; Hardware stack levels required when called:    3
  6076 ;; This function calls:
  6077 ;;		Nothing
  6078 ;; This function is called by:
  6079 ;;		_LCD_Init
  6080 ;;		_putch
  6081 ;;		_LCD_DisplayClear
  6082 ;;		_LCD_CursorHome
  6083 ;;		_LCD_CursorPosition
  6084 ;;		_LCD_Put
  6085 ;;		_LCD_CursorShift
  6086 ;;		_LCD_DispShift
  6087 ;; This function uses a non-reentrant model
  6088 ;;
  6089                           
  6090                           
  6091                           ;psect for function _LCD_WriteData
  6092  076E                     _LCD_WriteData:	
  6093                           
  6094                           ;incstack = 0
  6095                           ; Regs used in _LCD_WriteData: [wreg+status,2+status,0]
  6096                           ;LCD_WriteData@point stored from wreg
  6097  076E  0020               	movlb	0	; select bank0
  6098  076F  00A2               	movwf	LCD_WriteData@point
  6099                           
  6100                           ;LCD.c: 17: _delay((unsigned long)((80)*(32000000/4000000.0)));
  6101  0770  30D5               	movlw	213
  6102  0771                     u3167:	
  6103  0771  0B89               	decfsz	9,f
  6104  0772  2F71               	goto	u3167
  6105  0773  0000               	nop
  6106                           
  6107                           ;LCD.c: 18: PORTB = ( (((point>>4)&0x0F&0x0C)<<1)|((point>>4)&0x0F&0x03) );
  6108  0774  0020               	movlb	0	; select bank0
  6109  0775  0822               	movf	LCD_WriteData@point,w
  6110  0776  00A0               	movwf	??_LCD_WriteData
  6111  0777  3004               	movlw	4
  6112  0778                     u2485:	
  6113  0778  1003               	clrc
  6114  0779  1BA0               	btfsc	??_LCD_WriteData,7
  6115  077A  1403               	setc
  6116  077B  0CA0               	rrf	??_LCD_WriteData,f
  6117  077C  0B89               	decfsz	9,f
  6118  077D  2F78               	goto	u2485
  6119  077E  3003               	movlw	3
  6120  077F  0520               	andwf	??_LCD_WriteData,w
  6121  0780  00A1               	movwf	??_LCD_WriteData+1
  6122  0781  0E22               	swapf	LCD_WriteData@point,w
  6123  0782  390F               	andlw	15
  6124  0783  1989               	btfsc	9,3
  6125  0784  38F0               	iorlw	240
  6126  0785  390C               	andlw	12
  6127  0786  0709               	addwf	9,w
  6128  0787  0421               	iorwf	??_LCD_WriteData+1,w
  6129  0788  008D               	movwf	13	;volatile
  6130                           
  6131                           ;LCD.c: 19: {LATA4 = 1; _delay((unsigned long)((1)*(32000000/4000000.0))); LATA4 = 0; _d
      +                          elay((unsigned long)((1)*(32000000/4000000.0)));};
  6132  0789  0022               	movlb	2	; select bank2
  6133  078A  160C               	bsf	12,4	;volatile
  6134  078B  3200               	nop2	;2 cycle nop
  6135  078C  3200               	nop2	;2 cycle nop
  6136  078D  3200               	nop2	;2 cycle nop
  6137  078E  3200               	nop2	;2 cycle nop
  6138  078F  0022               	movlb	2	; select bank2
  6139  0790  120C               	bcf	12,4	;volatile
  6140  0791  3200               	nop2	;2 cycle nop
  6141  0792  3200               	nop2	;2 cycle nop
  6142  0793  3200               	nop2	;2 cycle nop
  6143  0794  3200               	nop2	;2 cycle nop
  6144                           
  6145                           ;LCD.c: 20: PORTB = ( ((point&0x0F&0x0C)<<1)|(point&0x0F&0x03) );
  6146  0795  3003               	movlw	3
  6147  0796  0020               	movlb	0	; select bank0
  6148  0797  0522               	andwf	LCD_WriteData@point,w
  6149  0798  00A0               	movwf	??_LCD_WriteData
  6150  0799  0822               	movf	LCD_WriteData@point,w
  6151  079A  390C               	andlw	12
  6152  079B  0709               	addwf	9,w
  6153  079C  0420               	iorwf	??_LCD_WriteData,w
  6154  079D  008D               	movwf	13	;volatile
  6155                           
  6156                           ;LCD.c: 21: {LATA4 = 1; _delay((unsigned long)((1)*(32000000/4000000.0))); LATA4 = 0; _d
      +                          elay((unsigned long)((1)*(32000000/4000000.0)));};
  6157  079E  0022               	movlb	2	; select bank2
  6158  079F  160C               	bsf	12,4	;volatile
  6159  07A0  3200               	nop2	;2 cycle nop
  6160  07A1  3200               	nop2	;2 cycle nop
  6161  07A2  3200               	nop2	;2 cycle nop
  6162  07A3  3200               	nop2	;2 cycle nop
  6163  07A4  0022               	movlb	2	; select bank2
  6164  07A5  120C               	bcf	12,4	;volatile
  6165  07A6  3200               	nop2	;2 cycle nop
  6166  07A7  3200               	nop2	;2 cycle nop
  6167  07A8  3200               	nop2	;2 cycle nop
  6168  07A9  3200               	nop2	;2 cycle nop
  6169  07AA  0008               	return
  6170  07AB                     __end_of_LCD_WriteData:	
  6171                           
  6172                           	psect	text27
  6173  0F67                     __ptext27:	
  6174 ;; *************** function _DAC_WriteVoltage *****************
  6175 ;; Defined at:
  6176 ;;		line 27 in file "MCP4726.c"
  6177 ;; Parameters:    Size  Location     Type
  6178 ;;  volue           2   16[BANK0 ] unsigned int 
  6179 ;; Auto vars:     Size  Location     Type
  6180 ;;		None
  6181 ;; Return value:  Size  Location     Type
  6182 ;;                  1    wreg      char 
  6183 ;; Registers used:
  6184 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6185 ;; Tracked objects:
  6186 ;;		On entry : 0/0
  6187 ;;		On exit  : 0/0
  6188 ;;		Unchanged: 0/0
  6189 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  6190 ;;      Params:         0       2       0       0       0       0
  6191 ;;      Locals:         0       0       0       0       0       0
  6192 ;;      Temps:          0       3       0       0       0       0
  6193 ;;      Totals:         0       5       0       0       0       0
  6194 ;;Total ram usage:        5 bytes
  6195 ;; Hardware stack levels used:    1
  6196 ;; Hardware stack levels required when called:    5
  6197 ;; This function calls:
  6198 ;;		_I2C_Transmit
  6199 ;; This function is called by:
  6200 ;;		_main
  6201 ;; This function uses a non-reentrant model
  6202 ;;
  6203                           
  6204                           
  6205                           ;psect for function _DAC_WriteVoltage
  6206  0F67                     _DAC_WriteVoltage:	
  6207                           
  6208                           ;MCP4726.c: 29: VoltageReg.Command = (uint8_t)(0x0);
  6209                           
  6210                           ;incstack = 0
  6211                           ; Regs used in _DAC_WriteVoltage: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6212  0F67  303F               	movlw	-193
  6213  0F68  0020               	movlb	0	; select bank0
  6214  0F69  05EA               	andwf	_VoltageReg,f
  6215                           
  6216                           ;MCP4726.c: 30: VoltageReg.PowerDown = ConfigReg.PowerDown;
  6217  0F6A  0C6C               	rrf	_ConfigReg,w
  6218  0F6B  3903               	andlw	3
  6219  0F6C  00B2               	movwf	??_DAC_WriteVoltage
  6220  0F6D  0EB2               	swapf	??_DAC_WriteVoltage,f
  6221  0F6E  086A               	movf	_VoltageReg,w
  6222  0F6F  0632               	xorwf	??_DAC_WriteVoltage,w
  6223  0F70  39CF               	andlw	-49
  6224  0F71  0632               	xorwf	??_DAC_WriteVoltage,w
  6225  0F72  00EA               	movwf	_VoltageReg
  6226                           
  6227                           ;MCP4726.c: 31: VoltageReg.Voltage4bits = (uint8_t)((volue&0x0F00)>>8);
  6228  0F73  0831               	movf	DAC_WriteVoltage@volue+1,w
  6229  0F74  00B3               	movwf	??_DAC_WriteVoltage+1
  6230  0F75  0830               	movf	DAC_WriteVoltage@volue,w
  6231  0F76  00B2               	movwf	??_DAC_WriteVoltage
  6232  0F77  0833               	movf	??_DAC_WriteVoltage+1,w
  6233  0F78  00B2               	movwf	??_DAC_WriteVoltage
  6234  0F79  01B3               	clrf	??_DAC_WriteVoltage+1
  6235  0F7A  300F               	movlw	15
  6236  0F7B  0532               	andwf	??_DAC_WriteVoltage,w
  6237  0F7C  00B4               	movwf	??_DAC_WriteVoltage+2
  6238  0F7D  086A               	movf	_VoltageReg,w
  6239  0F7E  0634               	xorwf	??_DAC_WriteVoltage+2,w
  6240  0F7F  39F0               	andlw	-16
  6241  0F80  0634               	xorwf	??_DAC_WriteVoltage+2,w
  6242  0F81  00EA               	movwf	_VoltageReg
  6243                           
  6244                           ;MCP4726.c: 32: VoltageReg.Voltage8bits = (uint8_t)(volue&0x00FF);
  6245  0F82  0830               	movf	DAC_WriteVoltage@volue,w
  6246  0F83  00B2               	movwf	??_DAC_WriteVoltage
  6247  0F84  0832               	movf	??_DAC_WriteVoltage,w
  6248  0F85  00EB               	movwf	_VoltageReg+1
  6249                           
  6250                           ;MCP4726.c: 34: return I2C_Transmit(I2C2_MODULE,0x60,VoltageReg.Voltage_Data,2);
  6251                           ;	Return value of _DAC_WriteVoltage is never used
  6252  0F86  3060               	movlw	96
  6253  0F87  00B2               	movwf	??_DAC_WriteVoltage
  6254  0F88  0832               	movf	??_DAC_WriteVoltage,w
  6255  0F89  00A8               	movwf	I2C_Transmit@address
  6256  0F8A  306A               	movlw	(low (_VoltageReg| 0))& (0+255)
  6257  0F8B  00B3               	movwf	??_DAC_WriteVoltage+1
  6258  0F8C  0833               	movf	??_DAC_WriteVoltage+1,w
  6259  0F8D  00A9               	movwf	I2C_Transmit@pData
  6260  0F8E  3002               	movlw	2
  6261  0F8F  00B4               	movwf	??_DAC_WriteVoltage+2
  6262  0F90  0834               	movf	??_DAC_WriteVoltage+2,w
  6263  0F91  00AA               	movwf	I2C_Transmit@size
  6264  0F92  3001               	movlw	1
  6265  0F93  318E  263F         	fcall	_I2C_Transmit
  6266  0F95  0008               	return
  6267  0F96                     __end_of_DAC_WriteVoltage:	
  6268                           
  6269                           	psect	text28
  6270  0EB0                     __ptext28:	
  6271 ;; *************** function _DAC_Initialize *****************
  6272 ;; Defined at:
  6273 ;;		line 14 in file "MCP4726.c"
  6274 ;; Parameters:    Size  Location     Type
  6275 ;;		None
  6276 ;; Auto vars:     Size  Location     Type
  6277 ;;		None
  6278 ;; Return value:  Size  Location     Type
  6279 ;;                  1    wreg      void 
  6280 ;; Registers used:
  6281 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6282 ;; Tracked objects:
  6283 ;;		On entry : 0/0
  6284 ;;		On exit  : 0/0
  6285 ;;		Unchanged: 0/0
  6286 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  6287 ;;      Params:         0       0       0       0       0       0
  6288 ;;      Locals:         0       0       0       0       0       0
  6289 ;;      Temps:          0       2       0       0       0       0
  6290 ;;      Totals:         0       2       0       0       0       0
  6291 ;;Total ram usage:        2 bytes
  6292 ;; Hardware stack levels used:    1
  6293 ;; Hardware stack levels required when called:    6
  6294 ;; This function calls:
  6295 ;;		_I2C_Init
  6296 ;;		_I2C_Transmit
  6297 ;; This function is called by:
  6298 ;;		_main
  6299 ;; This function uses a non-reentrant model
  6300 ;;
  6301                           
  6302                           
  6303                           ;psect for function _DAC_Initialize
  6304  0EB0                     _DAC_Initialize:	
  6305                           
  6306                           ;MCP4726.c: 16: I2C_Init(I2C2_MODULE,0x00,I2C_MODE_MASTER,I2C_SPEED_STANDARD);
  6307                           
  6308                           ;incstack = 0
  6309                           ; Regs used in _DAC_Initialize: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6310  0EB0  0020               	movlb	0	; select bank0
  6311  0EB1  01A5               	clrf	I2C_Init@address
  6312  0EB2  01A6               	clrf	I2C_Init@mode
  6313  0EB3  01A7               	clrf	I2C_Init@Speed
  6314  0EB4  3001               	movlw	1
  6315  0EB5  3187  27E7  318E   	fcall	_I2C_Init
  6316                           
  6317                           ;MCP4726.c: 18: ConfigReg.Command = (uint8_t)(0x4);
  6318  0EB8  0020               	movlb	0	; select bank0
  6319  0EB9  086C               	movf	_ConfigReg,w
  6320  0EBA  391F               	andlw	-225
  6321  0EBB  3880               	iorlw	128
  6322  0EBC  00EC               	movwf	_ConfigReg
  6323                           
  6324                           ;MCP4726.c: 19: ConfigReg.Gain = 0x00;
  6325  0EBD  106C               	bcf	_ConfigReg,0
  6326                           
  6327                           ;MCP4726.c: 20: ConfigReg.PowerDown = 0x00;
  6328  0EBE  30F9               	movlw	-7
  6329  0EBF  05EC               	andwf	_ConfigReg,f
  6330                           
  6331                           ;MCP4726.c: 21: ConfigReg.Voltage_Ref = 0x00;
  6332  0EC0  30E7               	movlw	-25
  6333  0EC1  05EC               	andwf	_ConfigReg,f
  6334                           
  6335                           ;MCP4726.c: 23: I2C_Transmit(I2C2_MODULE,0x60,ConfigReg.Config_Data,1);
  6336  0EC2  3060               	movlw	96
  6337  0EC3  00B0               	movwf	??_DAC_Initialize
  6338  0EC4  0830               	movf	??_DAC_Initialize,w
  6339  0EC5  00A8               	movwf	I2C_Transmit@address
  6340  0EC6  306C               	movlw	(low (_ConfigReg| 0))& (0+255)
  6341  0EC7  00B1               	movwf	??_DAC_Initialize+1
  6342  0EC8  0831               	movf	??_DAC_Initialize+1,w
  6343  0EC9  00A9               	movwf	I2C_Transmit@pData
  6344  0ECA  01AA               	clrf	I2C_Transmit@size
  6345  0ECB  0AAA               	incf	I2C_Transmit@size,f
  6346  0ECC  3001               	movlw	1
  6347  0ECD  318E  263F         	fcall	_I2C_Transmit
  6348  0ECF  0008               	return
  6349  0ED0                     __end_of_DAC_Initialize:	
  6350                           
  6351                           	psect	text29
  6352  0E3F                     __ptext29:	
  6353 ;; *************** function _I2C_Transmit *****************
  6354 ;; Defined at:
  6355 ;;		line 23 in file "I2C_Common.c"
  6356 ;; Parameters:    Size  Location     Type
  6357 ;;  I2Cx            1    wreg     enum E3267
  6358 ;;  address         1    8[BANK0 ] unsigned char 
  6359 ;;  pData           1    9[BANK0 ] PTR unsigned char 
  6360 ;;		 -> VoltageReg(2), ConfigReg(1), 
  6361 ;;  size            1   10[BANK0 ] unsigned char 
  6362 ;; Auto vars:     Size  Location     Type
  6363 ;;  I2Cx            1   14[BANK0 ] enum E3267
  6364 ;;  result          1   15[BANK0 ] char 
  6365 ;; Return value:  Size  Location     Type
  6366 ;;                  1    wreg      char 
  6367 ;; Registers used:
  6368 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6369 ;; Tracked objects:
  6370 ;;		On entry : 0/0
  6371 ;;		On exit  : 0/0
  6372 ;;		Unchanged: 0/0
  6373 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  6374 ;;      Params:         0       3       0       0       0       0
  6375 ;;      Locals:         0       2       0       0       0       0
  6376 ;;      Temps:          0       3       0       0       0       0
  6377 ;;      Totals:         0       8       0       0       0       0
  6378 ;;Total ram usage:        8 bytes
  6379 ;; Hardware stack levels used:    1
  6380 ;; Hardware stack levels required when called:    4
  6381 ;; This function calls:
  6382 ;;		_I2C2_Transmit
  6383 ;; This function is called by:
  6384 ;;		_DAC_Initialize
  6385 ;;		_DAC_WriteVoltage
  6386 ;; This function uses a non-reentrant model
  6387 ;;
  6388                           
  6389                           
  6390                           ;psect for function _I2C_Transmit
  6391  0E3F                     _I2C_Transmit:	
  6392                           
  6393                           ;incstack = 0
  6394                           ; Regs used in _I2C_Transmit: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6395                           ;I2C_Transmit@I2Cx stored from wreg
  6396  0E3F  0020               	movlb	0	; select bank0
  6397  0E40  00AE               	movwf	I2C_Transmit@I2Cx
  6398                           
  6399                           ;I2C_Common.c: 25: int8_t result;
  6400                           ;I2C_Common.c: 27: switch(I2Cx)
  6401  0E41  2E53               	goto	l3047
  6402  0E42                     l3043:	
  6403                           ;I2C_Common.c: 28: {
  6404                           ;I2C_Common.c: 33: case I2C2_MODULE:
  6405                           
  6406                           
  6407                           ;I2C_Common.c: 34: result = I2C2_Transmit(address,pData,size);
  6408  0E42  0829               	movf	I2C_Transmit@pData,w
  6409  0E43  00AB               	movwf	??_I2C_Transmit
  6410  0E44  082B               	movf	??_I2C_Transmit,w
  6411  0E45  00A0               	movwf	I2C2_Transmit@pData
  6412  0E46  082A               	movf	I2C_Transmit@size,w
  6413  0E47  00AC               	movwf	??_I2C_Transmit+1
  6414  0E48  082C               	movf	??_I2C_Transmit+1,w
  6415  0E49  00A1               	movwf	I2C2_Transmit@size
  6416  0E4A  0828               	movf	I2C_Transmit@address,w
  6417  0E4B  3184  24B1  318E   	fcall	_I2C2_Transmit
  6418  0E4E  0020               	movlb	0	; select bank0
  6419  0E4F  00AD               	movwf	??_I2C_Transmit+2
  6420  0E50  082D               	movf	??_I2C_Transmit+2,w
  6421  0E51  00AF               	movwf	I2C_Transmit@result
  6422                           
  6423                           ;I2C_Common.c: 36: }
  6424                           
  6425                           ;I2C_Common.c: 35: break;
  6426  0E52  2E58               	goto	l3049
  6427  0E53                     l3047:	
  6428  0E53  082E               	movf	I2C_Transmit@I2Cx,w
  6429                           
  6430                           ; Switch size 1, requested type "space"
  6431                           ; Number of cases is 1, Range of values is 1 to 1
  6432                           ; switch strategies available:
  6433                           ; Name         Instructions Cycles
  6434                           ; simple_byte            4     3 (average)
  6435                           ; direct_byte           11     9 (fixed)
  6436                           ; jumptable            263     9 (fixed)
  6437                           ;	Chosen strategy is simple_byte
  6438  0E54  3A01               	xorlw	1	; case 1
  6439  0E55  1903               	skipnz
  6440  0E56  2E42               	goto	l3043
  6441  0E57  2E58               	goto	l3049
  6442  0E58                     l3049:	
  6443                           
  6444                           ;I2C_Common.c: 37: return result;
  6445  0E58  082F               	movf	I2C_Transmit@result,w
  6446  0E59  0008               	return
  6447  0E5A                     __end_of_I2C_Transmit:	
  6448                           
  6449                           	psect	text30
  6450  04B1                     __ptext30:	
  6451 ;; *************** function _I2C2_Transmit *****************
  6452 ;; Defined at:
  6453 ;;		line 52 in file "I2C2.c"
  6454 ;; Parameters:    Size  Location     Type
  6455 ;;  address         1    wreg     unsigned char 
  6456 ;;  pData           1    0[BANK0 ] PTR unsigned char 
  6457 ;;		 -> VoltageReg(2), ConfigReg(1), 
  6458 ;;  size            1    1[BANK0 ] unsigned char 
  6459 ;; Auto vars:     Size  Location     Type
  6460 ;;  address         1    4[BANK0 ] unsigned char 
  6461 ;;  i               1    6[BANK0 ] unsigned char 
  6462 ;;  i               1    5[BANK0 ] unsigned char 
  6463 ;;  result          1    7[BANK0 ] char 
  6464 ;; Return value:  Size  Location     Type
  6465 ;;                  1    wreg      char 
  6466 ;; Registers used:
  6467 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0
  6468 ;; Tracked objects:
  6469 ;;		On entry : 0/0
  6470 ;;		On exit  : 0/0
  6471 ;;		Unchanged: 0/0
  6472 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  6473 ;;      Params:         0       2       0       0       0       0
  6474 ;;      Locals:         0       4       0       0       0       0
  6475 ;;      Temps:          0       2       0       0       0       0
  6476 ;;      Totals:         0       8       0       0       0       0
  6477 ;;Total ram usage:        8 bytes
  6478 ;; Hardware stack levels used:    1
  6479 ;; Hardware stack levels required when called:    3
  6480 ;; This function calls:
  6481 ;;		Nothing
  6482 ;; This function is called by:
  6483 ;;		_I2C_Transmit
  6484 ;; This function uses a non-reentrant model
  6485 ;;
  6486                           
  6487                           
  6488                           ;psect for function _I2C2_Transmit
  6489  04B1                     _I2C2_Transmit:	
  6490                           
  6491                           ;incstack = 0
  6492                           ; Regs used in _I2C2_Transmit: [wreg-fsr1h+status,2+status,0]
  6493                           ;I2C2_Transmit@address stored from wreg
  6494  04B1  0020               	movlb	0	; select bank0
  6495  04B2  00A4               	movwf	I2C2_Transmit@address
  6496                           
  6497                           ;I2C2.c: 54: int8_t result = 0;
  6498  04B3  01A7               	clrf	I2C2_Transmit@result
  6499                           
  6500                           ;I2C2.c: 56: switch(I2C2_Config.Mode)
  6501  04B4  2D3D               	goto	l2963
  6502  04B5                     l2919:	
  6503                           ;I2C2.c: 59: while((SSP2CON2&0x1F)|(SSP2STAT&0x05));
  6504                           
  6505                           ;I2C2.c: 57: {
  6506                           ;I2C2.c: 58: case I2C_MODE_MASTER:
  6507                           
  6508  04B5  3005               	movlw	5
  6509  04B6  0024               	movlb	4	; select bank4
  6510  04B7  051C               	andwf	28,w	;volatile
  6511  04B8  0020               	movlb	0	; select bank0
  6512  04B9  00A2               	movwf	??_I2C2_Transmit
  6513  04BA  0024               	movlb	4	; select bank4
  6514  04BB  081E               	movf	30,w	;volatile
  6515  04BC  391F               	andlw	31
  6516  04BD  0020               	movlb	0	; select bank0
  6517  04BE  0422               	iorwf	??_I2C2_Transmit,w
  6518  04BF  1D03               	btfss	3,2
  6519  04C0  2CB5               	goto	l2919
  6520                           
  6521                           ;I2C2.c: 60: SSP2CON2bits.SEN = 1;
  6522  04C1  0024               	movlb	4	; select bank4
  6523  04C2  141E               	bsf	30,0	;volatile
  6524  04C3                     l2921:	
  6525                           ;I2C2.c: 62: while((SSP2CON2&0x1F)|(SSP2STAT&0x05));
  6526                           
  6527  04C3  3005               	movlw	5
  6528  04C4  0024               	movlb	4	; select bank4
  6529  04C5  051C               	andwf	28,w	;volatile
  6530  04C6  0020               	movlb	0	; select bank0
  6531  04C7  00A2               	movwf	??_I2C2_Transmit
  6532  04C8  0024               	movlb	4	; select bank4
  6533  04C9  081E               	movf	30,w	;volatile
  6534  04CA  391F               	andlw	31
  6535  04CB  0020               	movlb	0	; select bank0
  6536  04CC  0422               	iorwf	??_I2C2_Transmit,w
  6537  04CD  1D03               	btfss	3,2
  6538  04CE  2CC3               	goto	l2921
  6539                           
  6540                           ;I2C2.c: 63: SSP2BUF = address << 1;
  6541  04CF  3524               	lslf	I2C2_Transmit@address,w
  6542  04D0  0024               	movlb	4	; select bank4
  6543  04D1  0099               	movwf	25	;volatile
  6544  04D2                     l91:	
  6545                           ;I2C2.c: 64: while(SSP2STATbits.R_nW);
  6546                           
  6547  04D2  191C               	btfsc	28,2	;volatile
  6548  04D3  2CD2               	goto	l91
  6549                           
  6550                           ;I2C2.c: 66: result = SSP2CON2bits.ACKSTAT;
  6551  04D4  3000               	movlw	0
  6552  04D5  1B1E               	btfsc	30,6	;volatile
  6553  04D6  3001               	movlw	1
  6554  04D7  0020               	movlb	0	; select bank0
  6555  04D8  00A7               	movwf	I2C2_Transmit@result
  6556                           
  6557                           ;I2C2.c: 67: if (!result)
  6558  04D9  0827               	movf	I2C2_Transmit@result,w
  6559  04DA  1D03               	btfss	3,2
  6560  04DB  2D09               	goto	l2945
  6561                           
  6562                           ;I2C2.c: 68: {
  6563                           ;I2C2.c: 69: for(uint8_t i=0;i<size;i++)
  6564  04DC  01A5               	clrf	I2C2_Transmit@i
  6565  04DD  2CE2               	goto	l2943
  6566  04DE                     l2941:	
  6567                           ;I2C2.c: 79: break;
  6568                           
  6569  04DE  3001               	movlw	1
  6570  04DF  00A2               	movwf	??_I2C2_Transmit
  6571  04E0  0822               	movf	??_I2C2_Transmit,w
  6572  04E1  07A5               	addwf	I2C2_Transmit@i,f
  6573  04E2                     l2943:	
  6574  04E2  0821               	movf	I2C2_Transmit@size,w
  6575  04E3  0225               	subwf	I2C2_Transmit@i,w
  6576  04E4  1803               	btfsc	3,0
  6577  04E5  2D09               	goto	l2945
  6578  04E6                     l2931:	
  6579                           ;I2C2.c: 70: {
  6580                           ;I2C2.c: 71: while((SSP2CON2&0x1F)|(SSP2STAT&0x05));
  6581                           
  6582  04E6  3005               	movlw	5
  6583  04E7  0024               	movlb	4	; select bank4
  6584  04E8  051C               	andwf	28,w	;volatile
  6585  04E9  0020               	movlb	0	; select bank0
  6586  04EA  00A2               	movwf	??_I2C2_Transmit
  6587  04EB  0024               	movlb	4	; select bank4
  6588  04EC  081E               	movf	30,w	;volatile
  6589  04ED  391F               	andlw	31
  6590  04EE  0020               	movlb	0	; select bank0
  6591  04EF  0422               	iorwf	??_I2C2_Transmit,w
  6592  04F0  1D03               	btfss	3,2
  6593  04F1  2CE6               	goto	l2931
  6594                           
  6595                           ;I2C2.c: 72: SSP2BUF = *(pData+i);
  6596  04F2  0825               	movf	I2C2_Transmit@i,w
  6597  04F3  0720               	addwf	I2C2_Transmit@pData,w
  6598  04F4  00A2               	movwf	??_I2C2_Transmit
  6599  04F5  0822               	movf	??_I2C2_Transmit,w
  6600  04F6  0086               	movwf	6
  6601  04F7  0187               	clrf	7
  6602  04F8  0801               	movf	1,w
  6603  04F9  0024               	movlb	4	; select bank4
  6604  04FA  0099               	movwf	25	;volatile
  6605  04FB                     l100:	
  6606                           ;I2C2.c: 73: while(SSP2STATbits.R_nW);
  6607                           
  6608  04FB  191C               	btfsc	28,2	;volatile
  6609  04FC  2CFB               	goto	l100
  6610                           
  6611                           ;I2C2.c: 75: result = SSP2CON2bits.ACKSTAT;
  6612  04FD  3000               	movlw	0
  6613  04FE  1B1E               	btfsc	30,6	;volatile
  6614  04FF  3001               	movlw	1
  6615  0500  0020               	movlb	0	; select bank0
  6616  0501  00A7               	movwf	I2C2_Transmit@result
  6617                           
  6618                           ;I2C2.c: 76: if (result)
  6619  0502  0827               	movf	I2C2_Transmit@result,w
  6620  0503  1903               	btfsc	3,2
  6621  0504  2CDE               	goto	l2941
  6622                           
  6623                           ;I2C2.c: 77: {
  6624                           ;I2C2.c: 78: result = 2;
  6625  0505  3002               	movlw	2
  6626  0506  00A2               	movwf	??_I2C2_Transmit
  6627  0507  0822               	movf	??_I2C2_Transmit,w
  6628  0508  00A7               	movwf	I2C2_Transmit@result
  6629  0509                     l2945:	
  6630                           ;I2C2.c: 80: }
  6631                           ;I2C2.c: 81: }
  6632                           ;I2C2.c: 82: }
  6633                           ;I2C2.c: 84: while((SSP2CON2&0x1F)|(SSP2STAT&0x05));
  6634                           
  6635  0509  3005               	movlw	5
  6636  050A  0024               	movlb	4	; select bank4
  6637  050B  051C               	andwf	28,w	;volatile
  6638  050C  0020               	movlb	0	; select bank0
  6639  050D  00A2               	movwf	??_I2C2_Transmit
  6640  050E  0024               	movlb	4	; select bank4
  6641  050F  081E               	movf	30,w	;volatile
  6642  0510  391F               	andlw	31
  6643  0511  0020               	movlb	0	; select bank0
  6644  0512  0422               	iorwf	??_I2C2_Transmit,w
  6645  0513  1D03               	btfss	3,2
  6646  0514  2D09               	goto	l2945
  6647                           
  6648                           ;I2C2.c: 85: SSP2CON2bits.PEN = 1;
  6649  0515  0024               	movlb	4	; select bank4
  6650  0516  151E               	bsf	30,2	;volatile
  6651                           
  6652                           ;I2C2.c: 86: break;
  6653  0517  2D46               	goto	l2965
  6654  0518                     l109:	
  6655                           ;I2C2.c: 88: case I2C_MODE_SLAVE:
  6656                           
  6657                           
  6658                           ;I2C2.c: 89: if((SSP2STATbits.S==0)&&(SSP2STATbits.P==1))
  6659  0518  0024               	movlb	4	; select bank4
  6660  0519  1D9C               	btfss	28,3	;volatile
  6661  051A  1E1C               	btfss	28,4	;volatile
  6662  051B  2D3A               	goto	l2959
  6663                           
  6664                           ;I2C2.c: 90: {
  6665                           ;I2C2.c: 91: for(uint8_t i = 0;i<size;i++)
  6666  051C  0020               	movlb	0	; select bank0
  6667  051D  01A6               	clrf	I2C2_Transmit@i_172
  6668  051E                     l2955:	
  6669  051E  0821               	movf	I2C2_Transmit@size,w
  6670  051F  0226               	subwf	I2C2_Transmit@i_172,w
  6671  0520  1803               	btfsc	3,0
  6672  0521  2D35               	goto	l2957
  6673                           
  6674                           ;I2C2.c: 92: I2C2_Config.SlaveTransmitBuff[i] = pData[i];
  6675  0522  0826               	movf	I2C2_Transmit@i_172,w
  6676  0523  0720               	addwf	I2C2_Transmit@pData,w
  6677  0524  00A2               	movwf	??_I2C2_Transmit
  6678  0525  0822               	movf	??_I2C2_Transmit,w
  6679  0526  0086               	movwf	6
  6680  0527  0187               	clrf	7
  6681  0528  0801               	movf	1,w
  6682  0529  00A3               	movwf	??_I2C2_Transmit+1
  6683  052A  0826               	movf	I2C2_Transmit@i_172,w
  6684  052B  3EC8               	addlw	(low (_I2C2_Config| 0))& (0+255)
  6685  052C  0086               	movwf	6
  6686  052D  0187               	clrf	7
  6687  052E  0823               	movf	??_I2C2_Transmit+1,w
  6688  052F  0081               	movwf	1
  6689  0530  3001               	movlw	1
  6690  0531  00A2               	movwf	??_I2C2_Transmit
  6691  0532  0822               	movf	??_I2C2_Transmit,w
  6692  0533  07A6               	addwf	I2C2_Transmit@i_172,f
  6693  0534  2D1E               	goto	l2955
  6694  0535                     l2957:	
  6695                           
  6696                           ;I2C2.c: 93: result = size;
  6697  0535  0821               	movf	I2C2_Transmit@size,w
  6698  0536  00A2               	movwf	??_I2C2_Transmit
  6699  0537  0822               	movf	??_I2C2_Transmit,w
  6700  0538  00A7               	movwf	I2C2_Transmit@result
  6701                           
  6702                           ;I2C2.c: 94: }
  6703  0539  2D46               	goto	l2965
  6704  053A                     l2959:	
  6705                           
  6706                           ;I2C2.c: 95: else
  6707                           ;I2C2.c: 96: result = 0;
  6708  053A  0020               	movlb	0	; select bank0
  6709  053B  01A7               	clrf	I2C2_Transmit@result
  6710                           
  6711                           ;I2C2.c: 98: }
  6712                           
  6713                           ;I2C2.c: 97: break;
  6714  053C  2D46               	goto	l2965
  6715  053D                     l2963:	
  6716  053D  0021               	movlb	1	; select bank1
  6717  053E  085A               	movf	(_I2C2_Config^(0+128)+18),w
  6718                           
  6719                           ; Switch size 1, requested type "space"
  6720                           ; Number of cases is 2, Range of values is 0 to 1
  6721                           ; switch strategies available:
  6722                           ; Name         Instructions Cycles
  6723                           ; simple_byte            7     4 (average)
  6724                           ; direct_byte           10     6 (fixed)
  6725                           ; jumptable            260     6 (fixed)
  6726                           ;	Chosen strategy is simple_byte
  6727  053F  3A00               	xorlw	0	; case 0
  6728  0540  1903               	skipnz
  6729  0541  2CB5               	goto	l2919
  6730  0542  3A01               	xorlw	1	; case 1
  6731  0543  1903               	skipnz
  6732  0544  2D18               	goto	l109
  6733  0545  2D46               	goto	l2965
  6734  0546                     l2965:	
  6735                           
  6736                           ;I2C2.c: 100: return result;
  6737  0546  0020               	movlb	0	; select bank0
  6738  0547  0827               	movf	I2C2_Transmit@result,w
  6739  0548  0008               	return
  6740  0549                     __end_of_I2C2_Transmit:	
  6741                           
  6742                           	psect	text31
  6743  07E7                     __ptext31:	
  6744 ;; *************** function _I2C_Init *****************
  6745 ;; Defined at:
  6746 ;;		line 6 in file "I2C_Common.c"
  6747 ;; Parameters:    Size  Location     Type
  6748 ;;  I2Cx            1    wreg     enum E3267
  6749 ;;  address         1    5[BANK0 ] unsigned char 
  6750 ;;  mode            1    6[BANK0 ] enum E3258
  6751 ;;  Speed           1    7[BANK0 ] enum E3262
  6752 ;; Auto vars:     Size  Location     Type
  6753 ;;  I2Cx            1   10[BANK0 ] enum E3267
  6754 ;; Return value:  Size  Location     Type
  6755 ;;                  1    wreg      void 
  6756 ;; Registers used:
  6757 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  6758 ;; Tracked objects:
  6759 ;;		On entry : 0/0
  6760 ;;		On exit  : 0/0
  6761 ;;		Unchanged: 0/0
  6762 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  6763 ;;      Params:         0       3       0       0       0       0
  6764 ;;      Locals:         0       1       0       0       0       0
  6765 ;;      Temps:          0       2       0       0       0       0
  6766 ;;      Totals:         0       6       0       0       0       0
  6767 ;;Total ram usage:        6 bytes
  6768 ;; Hardware stack levels used:    1
  6769 ;; Hardware stack levels required when called:    5
  6770 ;; This function calls:
  6771 ;;		_I2C2_Setting
  6772 ;; This function is called by:
  6773 ;;		_DAC_Initialize
  6774 ;; This function uses a non-reentrant model
  6775 ;;
  6776                           
  6777                           
  6778                           ;psect for function _I2C_Init
  6779  07E7                     _I2C_Init:	
  6780                           
  6781                           ;incstack = 0
  6782                           ; Regs used in _I2C_Init: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  6783                           ;I2C_Init@I2Cx stored from wreg
  6784  07E7  0020               	movlb	0	; select bank0
  6785  07E8  00AA               	movwf	I2C_Init@I2Cx
  6786                           
  6787                           ;I2C_Common.c: 8: switch(I2Cx)
  6788  07E9  2FF7               	goto	l3039
  6789  07EA                     l3035:	
  6790                           ;I2C_Common.c: 9: {
  6791                           ;I2C_Common.c: 14: case I2C2_MODULE:
  6792                           
  6793                           
  6794                           ;I2C_Common.c: 15: I2C2_Setting(address,mode,Speed);
  6795  07EA  0826               	movf	I2C_Init@mode,w
  6796  07EB  00A8               	movwf	??_I2C_Init
  6797  07EC  0828               	movf	??_I2C_Init,w
  6798  07ED  00A1               	movwf	I2C2_Setting@mode
  6799  07EE  0827               	movf	I2C_Init@Speed,w
  6800  07EF  00A9               	movwf	??_I2C_Init+1
  6801  07F0  0829               	movf	??_I2C_Init+1,w
  6802  07F1  00A2               	movwf	I2C2_Setting@Speed
  6803  07F2  0825               	movf	I2C_Init@address,w
  6804  07F3  3186  26AA  3187   	fcall	_I2C2_Setting
  6805                           
  6806                           ;I2C_Common.c: 17: }
  6807                           
  6808                           ;I2C_Common.c: 16: break;
  6809  07F6  2FFD               	goto	l191
  6810  07F7                     l3039:	
  6811  07F7  0020               	movlb	0	; select bank0
  6812  07F8  082A               	movf	I2C_Init@I2Cx,w
  6813                           
  6814                           ; Switch size 1, requested type "space"
  6815                           ; Number of cases is 1, Range of values is 1 to 1
  6816                           ; switch strategies available:
  6817                           ; Name         Instructions Cycles
  6818                           ; simple_byte            4     3 (average)
  6819                           ; direct_byte           11     9 (fixed)
  6820                           ; jumptable            263     9 (fixed)
  6821                           ;	Chosen strategy is simple_byte
  6822  07F9  3A01               	xorlw	1	; case 1
  6823  07FA  1903               	skipnz
  6824  07FB  2FEA               	goto	l3035
  6825  07FC  2FFD               	goto	l191
  6826  07FD                     l191:	
  6827                           
  6828                           ;I2C_Common.c: 19: PEIE = 1;
  6829  07FD  170B               	bsf	11,6	;volatile
  6830                           
  6831                           ;I2C_Common.c: 20: GIE = 1;
  6832  07FE  178B               	bsf	11,7	;volatile
  6833  07FF  0008               	return
  6834  0800                     __end_of_I2C_Init:	
  6835                           
  6836                           	psect	text32
  6837  06AA                     __ptext32:	
  6838 ;; *************** function _I2C2_Setting *****************
  6839 ;; Defined at:
  6840 ;;		line 15 in file "I2C2.c"
  6841 ;; Parameters:    Size  Location     Type
  6842 ;;  address         1    wreg     unsigned char 
  6843 ;;  mode            1    1[BANK0 ] enum E3258
  6844 ;;  Speed           1    2[BANK0 ] enum E3262
  6845 ;; Auto vars:     Size  Location     Type
  6846 ;;  address         1    4[BANK0 ] unsigned char 
  6847 ;; Return value:  Size  Location     Type
  6848 ;;                  1    wreg      void 
  6849 ;; Registers used:
  6850 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  6851 ;; Tracked objects:
  6852 ;;		On entry : 0/0
  6853 ;;		On exit  : 0/0
  6854 ;;		Unchanged: 0/0
  6855 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  6856 ;;      Params:         0       2       0       0       0       0
  6857 ;;      Locals:         0       1       0       0       0       0
  6858 ;;      Temps:          0       1       0       0       0       0
  6859 ;;      Totals:         0       4       0       0       0       0
  6860 ;;Total ram usage:        4 bytes
  6861 ;; Hardware stack levels used:    1
  6862 ;; Hardware stack levels required when called:    4
  6863 ;; This function calls:
  6864 ;;		_I2C2_PinInit
  6865 ;; This function is called by:
  6866 ;;		_I2C_Init
  6867 ;; This function uses a non-reentrant model
  6868 ;;
  6869                           
  6870                           
  6871                           ;psect for function _I2C2_Setting
  6872  06AA                     _I2C2_Setting:	
  6873                           
  6874                           ;incstack = 0
  6875                           ; Regs used in _I2C2_Setting: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  6876                           ;I2C2_Setting@address stored from wreg
  6877  06AA  0020               	movlb	0	; select bank0
  6878  06AB  00A4               	movwf	I2C2_Setting@address
  6879                           
  6880                           ;I2C2.c: 17: I2C2_PinInit();
  6881  06AC  318D  2543  3186   	fcall	_I2C2_PinInit
  6882                           
  6883                           ;I2C2.c: 18: I2C2_Config.Mode = mode;
  6884  06AF  0020               	movlb	0	; select bank0
  6885  06B0  0821               	movf	I2C2_Setting@mode,w
  6886  06B1  00A3               	movwf	??_I2C2_Setting
  6887  06B2  0823               	movf	??_I2C2_Setting,w
  6888  06B3  0021               	movlb	1	; select bank1
  6889  06B4  00DA               	movwf	(_I2C2_Config^(0+128)+18)
  6890                           
  6891                           ;I2C2.c: 20: switch(mode)
  6892  06B5  2EDE               	goto	l2915
  6893  06B6                     l74:	
  6894                           ;I2C2.c: 21: {
  6895                           ;I2C2.c: 22: case I2C_MODE_MASTER:
  6896                           
  6897                           
  6898                           ;I2C2.c: 23: SSP2CON1 |= (0x08<<0);
  6899  06B6  0024               	movlb	4	; select bank4
  6900  06B7  159D               	bsf	29,3	;volatile
  6901                           
  6902                           ;I2C2.c: 24: if(Speed==I2C_SPEED_STANDARD)
  6903  06B8  0020               	movlb	0	; select bank0
  6904  06B9  0822               	movf	I2C2_Setting@Speed,w
  6905  06BA  1D03               	btfss	3,2
  6906  06BB  2EC0               	goto	l2893
  6907                           
  6908                           ;I2C2.c: 25: {
  6909                           ;I2C2.c: 26: SSP2STAT |= (1<<7);
  6910  06BC  0024               	movlb	4	; select bank4
  6911  06BD  179C               	bsf	28,7	;volatile
  6912                           
  6913                           ;I2C2.c: 27: SSP2ADD = 0x4F;
  6914  06BE  304F               	movlw	79
  6915  06BF  2ECA               	goto	L7
  6916  06C0                     l2893:	
  6917                           ;I2C2.c: 28: }
  6918                           
  6919                           
  6920                           ;I2C2.c: 29: else if(Speed==I2C_SPEED_HIGH)
  6921  06C0  0020               	movlb	0	; select bank0
  6922  06C1  0322               	decf	I2C2_Setting@Speed,w
  6923  06C2  1D03               	btfss	3,2
  6924  06C3  2ECB               	goto	l2899
  6925                           
  6926                           ;I2C2.c: 30: {
  6927                           ;I2C2.c: 31: SSP2STAT &= ~(1<<7);
  6928  06C4  307F               	movlw	127
  6929  06C5  00A3               	movwf	??_I2C2_Setting
  6930  06C6  0823               	movf	??_I2C2_Setting,w
  6931  06C7  0024               	movlb	4	; select bank4
  6932  06C8  059C               	andwf	28,f	;volatile
  6933                           
  6934                           ;I2C2.c: 32: SSP2ADD = 0x13;
  6935  06C9  3013               	movlw	19
  6936  06CA                     L7:	
  6937  06CA  009A               	movwf	26	;volatile
  6938  06CB                     l2899:	
  6939                           
  6940                           ;I2C2.c: 33: }
  6941                           ;I2C2.c: 34: SSP2CON1bits.SSPEN = 1;
  6942  06CB  0024               	movlb	4	; select bank4
  6943  06CC  2EDC               	goto	l2911
  6944  06CD                     l2901:	
  6945                           ;I2C2.c: 37: case I2C_MODE_SLAVE:
  6946                           
  6947                           ;I2C2.c: 35: break;
  6948                           
  6949                           
  6950                           ;I2C2.c: 38: SSP2STAT = 0x00;
  6951  06CD  0024               	movlb	4	; select bank4
  6952  06CE  019C               	clrf	28	;volatile
  6953                           
  6954                           ;I2C2.c: 39: SSP2CON1 |= (0x06<<0);
  6955  06CF  3006               	movlw	6
  6956  06D0  0020               	movlb	0	; select bank0
  6957  06D1  00A3               	movwf	??_I2C2_Setting
  6958  06D2  0823               	movf	??_I2C2_Setting,w
  6959  06D3  0024               	movlb	4	; select bank4
  6960  06D4  049D               	iorwf	29,f	;volatile
  6961                           
  6962                           ;I2C2.c: 40: SSP2CON2bits.SEN= 1;
  6963  06D5  141E               	bsf	30,0	;volatile
  6964                           
  6965                           ;I2C2.c: 41: SSP2ADD = address << 1;
  6966  06D6  0020               	movlb	0	; select bank0
  6967  06D7  3524               	lslf	I2C2_Setting@address,w
  6968  06D8  0024               	movlb	4	; select bank4
  6969  06D9  009A               	movwf	26	;volatile
  6970                           
  6971                           ;I2C2.c: 42: SSP2MSK = 0xFE;
  6972  06DA  30FE               	movlw	254
  6973  06DB  009B               	movwf	27	;volatile
  6974  06DC                     l2911:	
  6975                           
  6976                           ;I2C2.c: 43: SSP2CON1bits.SSPEN = 1;
  6977  06DC  169D               	bsf	29,5	;volatile
  6978                           
  6979                           ;I2C2.c: 45: }
  6980                           
  6981                           ;I2C2.c: 44: break;
  6982  06DD  2EE7               	goto	l78
  6983  06DE                     l2915:	
  6984  06DE  0020               	movlb	0	; select bank0
  6985  06DF  0821               	movf	I2C2_Setting@mode,w
  6986                           
  6987                           ; Switch size 1, requested type "space"
  6988                           ; Number of cases is 2, Range of values is 0 to 1
  6989                           ; switch strategies available:
  6990                           ; Name         Instructions Cycles
  6991                           ; simple_byte            7     4 (average)
  6992                           ; direct_byte           10     6 (fixed)
  6993                           ; jumptable            260     6 (fixed)
  6994                           ;	Chosen strategy is simple_byte
  6995  06E0  3A00               	xorlw	0	; case 0
  6996  06E1  1903               	skipnz
  6997  06E2  2EB6               	goto	l74
  6998  06E3  3A01               	xorlw	1	; case 1
  6999  06E4  1903               	skipnz
  7000  06E5  2ECD               	goto	l2901
  7001  06E6  2EE7               	goto	l78
  7002  06E7                     l78:	
  7003                           
  7004                           ;I2C2.c: 46: SSP2IE = 1;
  7005  06E7  0021               	movlb	1	; select bank1
  7006  06E8  1414               	bsf	20,0	;volatile
  7007                           
  7008                           ;I2C2.c: 47: BCL2IE = 1;
  7009  06E9  1494               	bsf	20,1	;volatile
  7010                           
  7011                           ;I2C2.c: 48: SSP2IF = 0;
  7012  06EA  0020               	movlb	0	; select bank0
  7013  06EB  1014               	bcf	20,0	;volatile
  7014                           
  7015                           ;I2C2.c: 49: BCL2IF = 0;
  7016  06EC  1094               	bcf	20,1	;volatile
  7017  06ED  0008               	return
  7018  06EE                     __end_of_I2C2_Setting:	
  7019                           
  7020                           	psect	text33
  7021  0D43                     __ptext33:	
  7022 ;; *************** function _I2C2_PinInit *****************
  7023 ;; Defined at:
  7024 ;;		line 9 in file "I2C2.c"
  7025 ;; Parameters:    Size  Location     Type
  7026 ;;		None
  7027 ;; Auto vars:     Size  Location     Type
  7028 ;;		None
  7029 ;; Return value:  Size  Location     Type
  7030 ;;                  1    wreg      void 
  7031 ;; Registers used:
  7032 ;;		wreg, status,2, status,0
  7033 ;; Tracked objects:
  7034 ;;		On entry : 0/0
  7035 ;;		On exit  : 0/0
  7036 ;;		Unchanged: 0/0
  7037 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  7038 ;;      Params:         0       0       0       0       0       0
  7039 ;;      Locals:         0       0       0       0       0       0
  7040 ;;      Temps:          0       1       0       0       0       0
  7041 ;;      Totals:         0       1       0       0       0       0
  7042 ;;Total ram usage:        1 bytes
  7043 ;; Hardware stack levels used:    1
  7044 ;; Hardware stack levels required when called:    3
  7045 ;; This function calls:
  7046 ;;		Nothing
  7047 ;; This function is called by:
  7048 ;;		_I2C2_Setting
  7049 ;; This function uses a non-reentrant model
  7050 ;;
  7051                           
  7052                           
  7053                           ;psect for function _I2C2_PinInit
  7054  0D43                     _I2C2_PinInit:	
  7055                           
  7056                           ;I2C2.c: 11: TRISB |= ((1<<2)|(1<<5));
  7057                           
  7058                           ;incstack = 0
  7059                           ; Regs used in _I2C2_PinInit: [wreg+status,2+status,0]
  7060  0D43  3024               	movlw	36
  7061  0D44  0020               	movlb	0	; select bank0
  7062  0D45  00A0               	movwf	??_I2C2_PinInit
  7063  0D46  0820               	movf	??_I2C2_PinInit,w
  7064  0D47  0021               	movlb	1	; select bank1
  7065  0D48  048D               	iorwf	13,f	;volatile
  7066                           
  7067                           ;I2C2.c: 12: ANSELB &= ~((1<<2)|(1<<5));
  7068  0D49  30DB               	movlw	219
  7069  0D4A  0020               	movlb	0	; select bank0
  7070  0D4B  00A0               	movwf	??_I2C2_PinInit
  7071  0D4C  0820               	movf	??_I2C2_PinInit,w
  7072  0D4D  0023               	movlb	3	; select bank3
  7073  0D4E  058D               	andwf	13,f	;volatile
  7074  0D4F  0008               	return
  7075  0D50                     __end_of_I2C2_PinInit:	
  7076                           
  7077                           	psect	text34
  7078  0F17                     __ptext34:	
  7079 ;; *************** function _Buzzer_Init *****************
  7080 ;; Defined at:
  7081 ;;		line 11 in file "Buzzer.c"
  7082 ;; Parameters:    Size  Location     Type
  7083 ;;		None
  7084 ;; Auto vars:     Size  Location     Type
  7085 ;;		None
  7086 ;; Return value:  Size  Location     Type
  7087 ;;                  1    wreg      void 
  7088 ;; Registers used:
  7089 ;;		wreg, status,2, status,0
  7090 ;; Tracked objects:
  7091 ;;		On entry : 0/0
  7092 ;;		On exit  : 0/0
  7093 ;;		Unchanged: 0/0
  7094 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  7095 ;;      Params:         0       0       0       0       0       0
  7096 ;;      Locals:         0       0       0       0       0       0
  7097 ;;      Temps:          0       1       0       0       0       0
  7098 ;;      Totals:         0       1       0       0       0       0
  7099 ;;Total ram usage:        1 bytes
  7100 ;; Hardware stack levels used:    1
  7101 ;; Hardware stack levels required when called:    3
  7102 ;; This function calls:
  7103 ;;		Nothing
  7104 ;; This function is called by:
  7105 ;;		_main
  7106 ;; This function uses a non-reentrant model
  7107 ;;
  7108                           
  7109                           
  7110                           ;psect for function _Buzzer_Init
  7111  0F17                     _Buzzer_Init:	
  7112                           
  7113                           ;Buzzer.c: 13: TRISA &= ~(0x01<<7);
  7114                           
  7115                           ;incstack = 0
  7116                           ; Regs used in _Buzzer_Init: [wreg+status,2+status,0]
  7117  0F17  307F               	movlw	127
  7118  0F18  0020               	movlb	0	; select bank0
  7119  0F19  00A0               	movwf	??_Buzzer_Init
  7120  0F1A  0820               	movf	??_Buzzer_Init,w
  7121  0F1B  0021               	movlb	1	; select bank1
  7122  0F1C  058C               	andwf	12,f	;volatile
  7123                           
  7124                           ;Buzzer.c: 14: ANSELA &= ~(0x01<<7);
  7125  0F1D  307F               	movlw	127
  7126  0F1E  0020               	movlb	0	; select bank0
  7127  0F1F  00A0               	movwf	??_Buzzer_Init
  7128  0F20  0820               	movf	??_Buzzer_Init,w
  7129  0F21  0023               	movlb	3	; select bank3
  7130  0F22  058C               	andwf	12,f	;volatile
  7131                           
  7132                           ;Buzzer.c: 15: APFCON0 |= (0x01<<3);
  7133  0F23  0022               	movlb	2	; select bank2
  7134  0F24  159D               	bsf	29,3	;volatile
  7135                           
  7136                           ;Buzzer.c: 17: T2CON |= (0x00<<3);
  7137  0F25  0020               	movlb	0	; select bank0
  7138  0F26  081C               	movf	28,w	;volatile
  7139                           
  7140                           ;Buzzer.c: 18: T2CON |= (0x02<<0);
  7141  0F27  149C               	bsf	28,1	;volatile
  7142                           
  7143                           ;Buzzer.c: 19: T2CON |= (0x01<<2);
  7144  0F28  151C               	bsf	28,2	;volatile
  7145                           
  7146                           ;Buzzer.c: 21: TMR2 = 0x00;
  7147  0F29  019A               	clrf	26	;volatile
  7148                           
  7149                           ;Buzzer.c: 22: PR2 = 0xFF;
  7150  0F2A  30FF               	movlw	255
  7151  0F2B  009B               	movwf	27	;volatile
  7152                           
  7153                           ;Buzzer.c: 24: CCP2CON &= ~(0x03<<6);
  7154  0F2C  303F               	movlw	63
  7155  0F2D  00A0               	movwf	??_Buzzer_Init
  7156  0F2E  0820               	movf	??_Buzzer_Init,w
  7157  0F2F  0025               	movlb	5	; select bank5
  7158  0F30  059A               	andwf	26,f	;volatile
  7159                           
  7160                           ;Buzzer.c: 25: CCP2CON |= (0x0C<<0);
  7161  0F31  300C               	movlw	12
  7162  0F32  0020               	movlb	0	; select bank0
  7163  0F33  00A0               	movwf	??_Buzzer_Init
  7164  0F34  0820               	movf	??_Buzzer_Init,w
  7165  0F35  0025               	movlb	5	; select bank5
  7166  0F36  049A               	iorwf	26,f	;volatile
  7167                           
  7168                           ;Buzzer.c: 26: CCPTMRS &= ~(0x03<<2);
  7169  0F37  30F3               	movlw	243
  7170  0F38  0020               	movlb	0	; select bank0
  7171  0F39  00A0               	movwf	??_Buzzer_Init
  7172  0F3A  0820               	movf	??_Buzzer_Init,w
  7173  0F3B  0025               	movlb	5	; select bank5
  7174  0F3C  059E               	andwf	30,f	;volatile
  7175                           
  7176                           ;Buzzer.c: 28: CCPR2L = 0x00;
  7177  0F3D  0198               	clrf	24	;volatile
  7178  0F3E  0008               	return
  7179  0F3F                     __end_of_Buzzer_Init:	
  7180                           
  7181                           	psect	text35
  7182  0D9C                     __ptext35:	
  7183 ;; *************** function _Basic_Init *****************
  7184 ;; Defined at:
  7185 ;;		line 89 in file "main.c"
  7186 ;; Parameters:    Size  Location     Type
  7187 ;;		None
  7188 ;; Auto vars:     Size  Location     Type
  7189 ;;		None
  7190 ;; Return value:  Size  Location     Type
  7191 ;;                  1    wreg      char 
  7192 ;; Registers used:
  7193 ;;		wreg, status,2
  7194 ;; Tracked objects:
  7195 ;;		On entry : 0/0
  7196 ;;		On exit  : 0/0
  7197 ;;		Unchanged: 0/0
  7198 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  7199 ;;      Params:         0       0       0       0       0       0
  7200 ;;      Locals:         0       0       0       0       0       0
  7201 ;;      Temps:          0       0       0       0       0       0
  7202 ;;      Totals:         0       0       0       0       0       0
  7203 ;;Total ram usage:        0 bytes
  7204 ;; Hardware stack levels used:    1
  7205 ;; Hardware stack levels required when called:    3
  7206 ;; This function calls:
  7207 ;;		Nothing
  7208 ;; This function is called by:
  7209 ;;		_main
  7210 ;; This function uses a non-reentrant model
  7211 ;;
  7212                           
  7213                           
  7214                           ;psect for function _Basic_Init
  7215  0D9C                     _Basic_Init:	
  7216                           
  7217                           ;main.c: 91: OSCCON = 0xF0;
  7218                           
  7219                           ;incstack = 0
  7220                           ; Regs used in _Basic_Init: [wreg+status,2]
  7221  0D9C  30F0               	movlw	240
  7222  0D9D  0021               	movlb	1	; select bank1
  7223  0D9E  0099               	movwf	25	;volatile
  7224                           
  7225                           ;main.c: 95: TRISA = 0x00;
  7226  0D9F  018C               	clrf	12	;volatile
  7227                           
  7228                           ;main.c: 96: ANSELA = 0x00;
  7229  0DA0  0023               	movlb	3	; select bank3
  7230  0DA1  018C               	clrf	12	;volatile
  7231                           
  7232                           ;main.c: 98: TRISB = 0x00;
  7233  0DA2  0021               	movlb	1	; select bank1
  7234  0DA3  018D               	clrf	13	;volatile
  7235                           
  7236                           ;main.c: 99: ANSELB = 0x00;
  7237  0DA4  0023               	movlb	3	; select bank3
  7238  0DA5  018D               	clrf	13	;volatile
  7239                           
  7240                           ;main.c: 101: APFCON0 = 0x00;
  7241  0DA6  0022               	movlb	2	; select bank2
  7242  0DA7  019D               	clrf	29	;volatile
  7243                           
  7244                           ;main.c: 102: APFCON1 = 0x00;
  7245  0DA8  019E               	clrf	30	;volatile
  7246                           
  7247                           ;main.c: 104: PORTA = 0x00;
  7248  0DA9  0020               	movlb	0	; select bank0
  7249  0DAA  018C               	clrf	12	;volatile
  7250                           
  7251                           ;main.c: 105: PORTB = 0x00;
  7252  0DAB  018D               	clrf	13	;volatile
  7253  0DAC  0008               	return
  7254  0DAD                     __end_of_Basic_Init:	
  7255                           ;main.c: 107: return 0;
  7256                           ;	Return value of _Basic_Init is never used
  7257                           
  7258                           
  7259                           	psect	intentry
  7260  0004                     __pintentry:	
  7261 ;; *************** function _Handler *****************
  7262 ;; Defined at:
  7263 ;;		line 110 in file "main.c"
  7264 ;; Parameters:    Size  Location     Type
  7265 ;;		None
  7266 ;; Auto vars:     Size  Location     Type
  7267 ;;		None
  7268 ;; Return value:  Size  Location     Type
  7269 ;;                  1    wreg      void 
  7270 ;; Registers used:
  7271 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7272 ;; Tracked objects:
  7273 ;;		On entry : 0/0
  7274 ;;		On exit  : 0/0
  7275 ;;		Unchanged: 0/0
  7276 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  7277 ;;      Params:         0       0       0       0       0       0
  7278 ;;      Locals:         0       0       0       0       0       0
  7279 ;;      Temps:          1       0       0       0       0       0
  7280 ;;      Totals:         1       0       0       0       0       0
  7281 ;;Total ram usage:        1 bytes
  7282 ;; Hardware stack levels used:    1
  7283 ;; Hardware stack levels required when called:    2
  7284 ;; This function calls:
  7285 ;;		_Buzzer_Count1ms
  7286 ;;		_I2C_CommonInterrupt
  7287 ;;		_Timer1_Count1ms
  7288 ;;		_Timer1_DetectAssignCount
  7289 ;;		_Timer6_CheckFlag
  7290 ;;		_mTouch_IntervalDecrement
  7291 ;;		_mTouch_Read
  7292 ;; This function is called by:
  7293 ;;		Interrupt level 1
  7294 ;; This function uses a non-reentrant model
  7295 ;;
  7296                           
  7297  0004                     _Handler:	
  7298                           
  7299                           ;incstack = 0
  7300  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
  7301                           
  7302                           ; Regs used in _Handler: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7303  0005  3180               	pagesel	$
  7304  0006  0020               	movlb	0	; select bank0
  7305  0007  087F               	movf	127,w
  7306  0008  00FB               	movwf	??_Handler
  7307                           
  7308                           ;main.c: 112: if(Timer1_DetectAssignCount())
  7309  0009  318E  2625  3180   	fcall	_Timer1_DetectAssignCount
  7310  000C  3A00               	xorlw	0
  7311  000D  1903               	skipnz
  7312  000E  2812               	goto	i1l2873
  7313                           
  7314                           ;main.c: 113: LATA6 = !LATA6;
  7315  000F  3040               	movlw	64
  7316  0010  0022               	movlb	2	; select bank2
  7317  0011  068C               	xorwf	12,f
  7318  0012                     i1l2873:	
  7319                           
  7320                           ;main.c: 115: if(Timer6_CheckFlag())
  7321  0012  318D  2538  3180   	fcall	_Timer6_CheckFlag
  7322  0015  3A00               	xorlw	0
  7323  0016  1903               	skipnz
  7324  0017  2824               	goto	i1l522
  7325                           
  7326                           ;main.c: 116: {
  7327                           ;main.c: 117: mTouch_IntervalDecrement();
  7328  0018  318D  256C  3180   	fcall	_mTouch_IntervalDecrement
  7329                           
  7330                           ;main.c: 118: Timer1_Count1ms();
  7331  001B  318F  27C6  3180   	fcall	_Timer1_Count1ms
  7332                           
  7333                           ;main.c: 120: mTouch_Read();
  7334  001E  318E  26F1  3180   	fcall	_mTouch_Read
  7335                           
  7336                           ;main.c: 121: Buzzer_Count1ms();
  7337  0021  318D  25E4  3180   	fcall	_Buzzer_Count1ms
  7338  0024                     i1l522:	
  7339                           
  7340                           ;main.c: 122: }
  7341                           ;main.c: 123: I2C_CommonInterrupt();
  7342  0024  318C  24FF         	fcall	_I2C_CommonInterrupt
  7343  0026  087B               	movf	??_Handler,w
  7344  0027  0020               	movlb	0	; select bank0
  7345  0028  00FF               	movwf	127
  7346  0029  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
  7347  002A  0009               	retfie
  7348  002B                     __end_of_Handler:	
  7349                           
  7350                           	psect	text37
  7351  0EF1                     __ptext37:	
  7352 ;; *************** function _mTouch_Read *****************
  7353 ;; Defined at:
  7354 ;;		line 36 in file "mTouch.c"
  7355 ;; Parameters:    Size  Location     Type
  7356 ;;		None
  7357 ;; Auto vars:     Size  Location     Type
  7358 ;;		None
  7359 ;; Return value:  Size  Location     Type
  7360 ;;                  1    wreg      void 
  7361 ;; Registers used:
  7362 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  7363 ;; Tracked objects:
  7364 ;;		On entry : 0/0
  7365 ;;		On exit  : 0/0
  7366 ;;		Unchanged: 0/0
  7367 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  7368 ;;      Params:         0       0       0       0       0       0
  7369 ;;      Locals:         0       0       0       0       0       0
  7370 ;;      Temps:          1       0       0       0       0       0
  7371 ;;      Totals:         1       0       0       0       0       0
  7372 ;;Total ram usage:        1 bytes
  7373 ;; Hardware stack levels used:    1
  7374 ;; This function calls:
  7375 ;;		Nothing
  7376 ;; This function is called by:
  7377 ;;		_Handler
  7378 ;; This function uses a non-reentrant model
  7379 ;;
  7380                           
  7381                           
  7382                           ;psect for function _mTouch_Read
  7383  0EF1                     _mTouch_Read:	
  7384                           
  7385                           ;mTouch.c: 38: static uint8_t channel=0;
  7386                           ;mTouch.c: 40: CPS_PreData[channel] = CPS_Data[channel];
  7387                           
  7388                           ;incstack = 0
  7389                           ; Regs used in _mTouch_Read: [wreg+fsr1l+fsr1h+status,2+status,0]
  7390  0EF1  0875               	movf	mTouch_Read@channel,w
  7391  0EF2  3EC5               	addlw	(low (_CPS_Data| 0))& (0+255)
  7392  0EF3  0086               	movwf	6
  7393  0EF4  0187               	clrf	7
  7394  0EF5  0801               	movf	1,w
  7395  0EF6  00F6               	movwf	??_mTouch_Read
  7396  0EF7  0875               	movf	mTouch_Read@channel,w
  7397  0EF8  3EC2               	addlw	(low (_CPS_PreData| 0))& (0+255)
  7398  0EF9  0086               	movwf	6
  7399  0EFA  0187               	clrf	7
  7400  0EFB  0876               	movf	??_mTouch_Read,w
  7401  0EFC  0081               	movwf	1
  7402                           
  7403                           ;mTouch.c: 42: CPSCON0 &= ~(0x01<<7);;
  7404  0EFD  307F               	movlw	127
  7405  0EFE  00F6               	movwf	??_mTouch_Read
  7406  0EFF  0876               	movf	??_mTouch_Read,w
  7407  0F00  0020               	movlb	0	; select bank0
  7408  0F01  059E               	andwf	30,f	;volatile
  7409                           
  7410                           ;mTouch.c: 43: CPS_Data[channel] = TMR0;
  7411  0F02  0815               	movf	21,w	;volatile
  7412  0F03  00F6               	movwf	??_mTouch_Read
  7413  0F04  0875               	movf	mTouch_Read@channel,w
  7414  0F05  3EC5               	addlw	(low (_CPS_Data| 0))& (0+255)
  7415  0F06  0086               	movwf	6
  7416  0F07  0187               	clrf	7
  7417  0F08  0876               	movf	??_mTouch_Read,w
  7418  0F09  0081               	movwf	1
  7419                           
  7420                           ;mTouch.c: 44: TMR0 = 0x00;
  7421  0F0A  0195               	clrf	21	;volatile
  7422                           
  7423                           ;mTouch.c: 45: CPSCON0 |= (0x01<<7);;
  7424  0F0B  179E               	bsf	30,7	;volatile
  7425                           
  7426                           ;mTouch.c: 47: if(++channel>2)channel = 0;
  7427  0F0C  3001               	movlw	1
  7428  0F0D  00F6               	movwf	??_mTouch_Read
  7429  0F0E  0876               	movf	??_mTouch_Read,w
  7430  0F0F  07F5               	addwf	mTouch_Read@channel,f
  7431  0F10  3003               	movlw	3
  7432  0F11  0275               	subwf	mTouch_Read@channel,w
  7433  0F12  1803               	btfsc	3,0
  7434  0F13  01F5               	clrf	mTouch_Read@channel
  7435                           
  7436                           ;mTouch.c: 48: CPSCON1 = (uint8_t)channel;
  7437  0F14  0875               	movf	mTouch_Read@channel,w
  7438  0F15  009F               	movwf	31	;volatile
  7439  0F16  0008               	return
  7440  0F17                     __end_of_mTouch_Read:	
  7441                           
  7442                           	psect	text38
  7443  0D6C                     __ptext38:	
  7444 ;; *************** function _mTouch_IntervalDecrement *****************
  7445 ;; Defined at:
  7446 ;;		line 51 in file "mTouch.c"
  7447 ;; Parameters:    Size  Location     Type
  7448 ;;		None
  7449 ;; Auto vars:     Size  Location     Type
  7450 ;;		None
  7451 ;; Return value:  Size  Location     Type
  7452 ;;                  1    wreg      void 
  7453 ;; Registers used:
  7454 ;;		wreg, status,2, status,0
  7455 ;; Tracked objects:
  7456 ;;		On entry : 0/0
  7457 ;;		On exit  : 0/0
  7458 ;;		Unchanged: 0/0
  7459 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  7460 ;;      Params:         0       0       0       0       0       0
  7461 ;;      Locals:         0       0       0       0       0       0
  7462 ;;      Temps:          0       0       0       0       0       0
  7463 ;;      Totals:         0       0       0       0       0       0
  7464 ;;Total ram usage:        0 bytes
  7465 ;; Hardware stack levels used:    1
  7466 ;; This function calls:
  7467 ;;		Nothing
  7468 ;; This function is called by:
  7469 ;;		_Handler
  7470 ;; This function uses a non-reentrant model
  7471 ;;
  7472                           
  7473                           
  7474                           ;psect for function _mTouch_IntervalDecrement
  7475  0D6C                     _mTouch_IntervalDecrement:	
  7476                           
  7477                           ;mTouch.c: 53: if(mTouch_Interval[0]>0)
  7478                           
  7479                           ;incstack = 0
  7480                           ; Regs used in _mTouch_IntervalDecrement: [wreg+status,2+status,0]
  7481  0D6C  0870               	movf	_mTouch_Interval,w
  7482  0D6D  1903               	btfsc	3,2
  7483  0D6E  2D71               	goto	i1l409
  7484                           
  7485                           ;mTouch.c: 54: mTouch_Interval[0]--;
  7486  0D6F  3001               	movlw	1
  7487  0D70  02F0               	subwf	_mTouch_Interval,f
  7488  0D71                     i1l409:	
  7489                           
  7490                           ;mTouch.c: 55: if(mTouch_Interval[1]>0)
  7491  0D71  0871               	movf	_mTouch_Interval+1,w
  7492  0D72  1903               	btfsc	3,2
  7493  0D73  2D76               	goto	i1l410
  7494                           
  7495                           ;mTouch.c: 56: mTouch_Interval[1]--;
  7496  0D74  3001               	movlw	1
  7497  0D75  02F1               	subwf	_mTouch_Interval+1,f
  7498  0D76                     i1l410:	
  7499                           
  7500                           ;mTouch.c: 57: if(mTouch_Interval[2]>0)
  7501  0D76  0872               	movf	_mTouch_Interval+2,w
  7502  0D77  1903               	btfsc	3,2
  7503  0D78  0008               	return
  7504                           
  7505                           ;mTouch.c: 58: mTouch_Interval[2]--;
  7506  0D79  3001               	movlw	1
  7507  0D7A  02F2               	subwf	_mTouch_Interval+2,f
  7508  0D7B  0008               	return
  7509  0D7C                     __end_of_mTouch_IntervalDecrement:	
  7510                           
  7511                           	psect	text39
  7512  0D38                     __ptext39:	
  7513 ;; *************** function _Timer6_CheckFlag *****************
  7514 ;; Defined at:
  7515 ;;		line 17 in file "Timer6.c"
  7516 ;; Parameters:    Size  Location     Type
  7517 ;;		None
  7518 ;; Auto vars:     Size  Location     Type
  7519 ;;		None
  7520 ;; Return value:  Size  Location     Type
  7521 ;;                  1    wreg      unsigned char 
  7522 ;; Registers used:
  7523 ;;		wreg
  7524 ;; Tracked objects:
  7525 ;;		On entry : 0/0
  7526 ;;		On exit  : 0/0
  7527 ;;		Unchanged: 0/0
  7528 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  7529 ;;      Params:         0       0       0       0       0       0
  7530 ;;      Locals:         0       0       0       0       0       0
  7531 ;;      Temps:          0       0       0       0       0       0
  7532 ;;      Totals:         0       0       0       0       0       0
  7533 ;;Total ram usage:        0 bytes
  7534 ;; Hardware stack levels used:    1
  7535 ;; This function calls:
  7536 ;;		Nothing
  7537 ;; This function is called by:
  7538 ;;		_Handler
  7539 ;; This function uses a non-reentrant model
  7540 ;;
  7541                           
  7542                           
  7543                           ;psect for function _Timer6_CheckFlag
  7544  0D38                     _Timer6_CheckFlag:	
  7545                           
  7546                           ;Timer6.c: 19: if(TMR6IE&&TMR6IF)
  7547                           
  7548                           ;incstack = 0
  7549                           ; Regs used in _Timer6_CheckFlag: [wreg]
  7550  0D38  0021               	movlb	1	; select bank1
  7551  0D39  1D93               	btfss	19,3	;volatile
  7552  0D3A  2D41               	goto	i1l1681
  7553  0D3B  0020               	movlb	0	; select bank0
  7554  0D3C  1D93               	btfss	19,3	;volatile
  7555  0D3D  2D41               	goto	i1l1681
  7556                           
  7557                           ;Timer6.c: 20: {
  7558                           ;Timer6.c: 21: TMR6IF = 0;
  7559  0D3E  1193               	bcf	19,3	;volatile
  7560                           
  7561                           ;Timer6.c: 22: return 1;
  7562  0D3F  3001               	movlw	1
  7563  0D40  0008               	return
  7564  0D41                     i1l1681:	
  7565                           
  7566                           ;Timer6.c: 23: }
  7567                           ;Timer6.c: 24: return 0;
  7568  0D41  3000               	movlw	0
  7569  0D42  0008               	return
  7570  0D43                     __end_of_Timer6_CheckFlag:	
  7571                           
  7572                           	psect	text40
  7573  0E25                     __ptext40:	
  7574 ;; *************** function _Timer1_DetectAssignCount *****************
  7575 ;; Defined at:
  7576 ;;		line 105 in file "Timer1.c"
  7577 ;; Parameters:    Size  Location     Type
  7578 ;;		None
  7579 ;; Auto vars:     Size  Location     Type
  7580 ;;		None
  7581 ;; Return value:  Size  Location     Type
  7582 ;;                  1    wreg      unsigned char 
  7583 ;; Registers used:
  7584 ;;		wreg
  7585 ;; Tracked objects:
  7586 ;;		On entry : 0/0
  7587 ;;		On exit  : 0/0
  7588 ;;		Unchanged: 0/0
  7589 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  7590 ;;      Params:         0       0       0       0       0       0
  7591 ;;      Locals:         0       0       0       0       0       0
  7592 ;;      Temps:          0       0       0       0       0       0
  7593 ;;      Totals:         0       0       0       0       0       0
  7594 ;;Total ram usage:        0 bytes
  7595 ;; Hardware stack levels used:    1
  7596 ;; This function calls:
  7597 ;;		Nothing
  7598 ;; This function is called by:
  7599 ;;		_Handler
  7600 ;; This function uses a non-reentrant model
  7601 ;;
  7602                           
  7603                           
  7604                           ;psect for function _Timer1_DetectAssignCount
  7605  0E25                     _Timer1_DetectAssignCount:	
  7606                           
  7607                           ;Timer1.c: 107: if(TMR1IF&&TMR1IE)
  7608                           
  7609                           ;incstack = 0
  7610                           ; Regs used in _Timer1_DetectAssignCount: [wreg]
  7611  0E25  0020               	movlb	0	; select bank0
  7612  0E26  1C11               	btfss	17,0	;volatile
  7613  0E27  2E3D               	goto	i1l2561
  7614  0E28  0021               	movlb	1	; select bank1
  7615  0E29  1C11               	btfss	17,0	;volatile
  7616  0E2A  2E3D               	goto	i1l2561
  7617                           
  7618                           ;Timer1.c: 108: {
  7619                           ;Timer1.c: 109: cnts.SigmaDeltaCount+= 10UL;
  7620  0E2B  300A               	movlw	10
  7621  0E2C  07BE               	addwf	_cnts^(0+128),f
  7622  0E2D  3000               	movlw	0
  7623  0E2E  3DBF               	addwfc	(_cnts+1)^(0+128),f
  7624  0E2F  3000               	movlw	0
  7625  0E30  3DC0               	addwfc	(_cnts+2)^(0+128),f
  7626  0E31  3000               	movlw	0
  7627  0E32  3DC1               	addwfc	(_cnts+3)^(0+128),f
  7628                           
  7629                           ;Timer1.c: 111: {TMR1ON = 0; TMR1 = (uint16_t)0xFFFF - 10UL+1; TMR1ON = 1; };
  7630  0E33  0020               	movlb	0	; select bank0
  7631  0E34  1018               	bcf	24,0	;volatile
  7632  0E35  30FF               	movlw	255
  7633  0E36  0097               	movwf	23	;volatile
  7634  0E37  30F6               	movlw	246
  7635  0E38  0096               	movwf	22	;volatile
  7636  0E39  1418               	bsf	24,0	;volatile
  7637                           
  7638                           ;Timer1.c: 113: TMR1IF = 0;
  7639  0E3A  1011               	bcf	17,0	;volatile
  7640                           
  7641                           ;Timer1.c: 115: return 1;
  7642  0E3B  3001               	movlw	1
  7643  0E3C  0008               	return
  7644  0E3D                     i1l2561:	
  7645                           
  7646                           ;Timer1.c: 116: }
  7647                           ;Timer1.c: 117: return 0;
  7648  0E3D  3000               	movlw	0
  7649  0E3E  0008               	return
  7650  0E3F                     __end_of_Timer1_DetectAssignCount:	
  7651                           
  7652                           	psect	text41
  7653  0FC6                     __ptext41:	
  7654 ;; *************** function _Timer1_Count1ms *****************
  7655 ;; Defined at:
  7656 ;;		line 76 in file "Timer1.c"
  7657 ;; Parameters:    Size  Location     Type
  7658 ;;		None
  7659 ;; Auto vars:     Size  Location     Type
  7660 ;;		None
  7661 ;; Return value:  Size  Location     Type
  7662 ;;                  1    wreg      void 
  7663 ;; Registers used:
  7664 ;;		wreg, status,2, status,0, pclath, cstack
  7665 ;; Tracked objects:
  7666 ;;		On entry : 0/0
  7667 ;;		On exit  : 0/0
  7668 ;;		Unchanged: 0/0
  7669 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  7670 ;;      Params:         0       0       0       0       0       0
  7671 ;;      Locals:         0       0       0       0       0       0
  7672 ;;      Temps:          1       0       0       0       0       0
  7673 ;;      Totals:         1       0       0       0       0       0
  7674 ;;Total ram usage:        1 bytes
  7675 ;; Hardware stack levels used:    1
  7676 ;; Hardware stack levels required when called:    1
  7677 ;; This function calls:
  7678 ;;		i1_Buzzer_MiliSecond
  7679 ;; This function is called by:
  7680 ;;		_Handler
  7681 ;; This function uses a non-reentrant model
  7682 ;;
  7683                           
  7684                           
  7685                           ;psect for function _Timer1_Count1ms
  7686  0FC6                     _Timer1_Count1ms:	
  7687                           
  7688                           ;Timer1.c: 78: if(TMR1ON==1)
  7689                           
  7690                           ;incstack = 0
  7691                           ; Regs used in _Timer1_Count1ms: [wreg+status,2+status,0+pclath+cstack]
  7692  0FC6  0020               	movlb	0	; select bank0
  7693  0FC7  1C18               	btfss	24,0	;volatile
  7694  0FC8  0008               	return
  7695                           
  7696                           ;Timer1.c: 79: {
  7697                           ;Timer1.c: 80: tcnt.Delta_t++;
  7698  0FC9  3001               	movlw	1
  7699  0FCA  07E3               	addwf	_tcnt+2,f
  7700  0FCB  3000               	movlw	0
  7701  0FCC  3DE4               	addwfc	_tcnt+3,f
  7702  0FCD  3000               	movlw	0
  7703  0FCE  3DE5               	addwfc	_tcnt+4,f
  7704  0FCF  3000               	movlw	0
  7705  0FD0  3DE6               	addwfc	_tcnt+5,f
  7706                           
  7707                           ;Timer1.c: 81: tcnt.RenewalRersult++;
  7708  0FD1  3001               	movlw	1
  7709  0FD2  07E7               	addwf	_tcnt+6,f
  7710  0FD3  3000               	movlw	0
  7711  0FD4  3DE8               	addwfc	_tcnt+7,f
  7712                           
  7713                           ;Timer1.c: 83: if(tcnt.RenewalRersult>1000)
  7714  0FD5  3003               	movlw	3
  7715  0FD6  0268               	subwf	_tcnt+7,w
  7716  0FD7  30E9               	movlw	233
  7717  0FD8  1903               	skipnz
  7718  0FD9  0267               	subwf	_tcnt+6,w
  7719  0FDA  1C03               	skipc
  7720  0FDB  0008               	return
  7721                           
  7722                           ;Timer1.c: 84: {
  7723                           ;Timer1.c: 85: tcnt.Second_t++;
  7724  0FDC  3001               	movlw	1
  7725  0FDD  00F8               	movwf	??_Timer1_Count1ms
  7726  0FDE  0878               	movf	??_Timer1_Count1ms,w
  7727  0FDF  07E1               	addwf	_tcnt,f
  7728                           
  7729                           ;Timer1.c: 87: if((56<tcnt.Second_t)&&(tcnt.Second_t<60))
  7730  0FE0  3039               	movlw	57
  7731  0FE1  0261               	subwf	_tcnt,w
  7732  0FE2  1C03               	skipc
  7733  0FE3  2FEC               	goto	i1l2535
  7734  0FE4  303C               	movlw	60
  7735  0FE5  0261               	subwf	_tcnt,w
  7736  0FE6  1803               	skipnc
  7737  0FE7  2FEC               	goto	i1l2535
  7738                           
  7739                           ;Timer1.c: 88: {
  7740                           ;Timer1.c: 89: Buzzer_MiliSecond(300);
  7741  0FE8  302C               	movlw	44
  7742  0FE9  00F6               	movwf	i1Buzzer_MiliSecond@time
  7743  0FEA  3001               	movlw	1
  7744  0FEB  2FF9               	goto	L8
  7745  0FEC                     i1l2535:	
  7746                           ;Timer1.c: 90: }
  7747                           
  7748                           
  7749                           ;Timer1.c: 91: else if(tcnt.Second_t>59)
  7750  0FEC  303C               	movlw	60
  7751  0FED  0020               	movlb	0	; select bank0
  7752  0FEE  0261               	subwf	_tcnt,w
  7753  0FEF  1C03               	skipc
  7754  0FF0  2FFC               	goto	i1l2543
  7755                           
  7756                           ;Timer1.c: 92: {
  7757                           ;Timer1.c: 93: tcnt.Second_t = 0;
  7758  0FF1  01E1               	clrf	_tcnt
  7759                           
  7760                           ;Timer1.c: 94: tcnt.Minute_t++;
  7761  0FF2  3001               	movlw	1
  7762  0FF3  00F8               	movwf	??_Timer1_Count1ms
  7763  0FF4  0878               	movf	??_Timer1_Count1ms,w
  7764  0FF5  07E2               	addwf	_tcnt+1,f
  7765                           
  7766                           ;Timer1.c: 96: Buzzer_MiliSecond(600);
  7767  0FF6  3058               	movlw	88
  7768  0FF7  00F6               	movwf	i1Buzzer_MiliSecond@time
  7769  0FF8  3002               	movlw	2
  7770  0FF9                     L8:	
  7771  0FF9  00F7               	movwf	i1Buzzer_MiliSecond@time+1
  7772  0FFA  318D  251C         	fcall	i1_Buzzer_MiliSecond
  7773  0FFC                     i1l2543:	
  7774                           
  7775                           ;Timer1.c: 97: }
  7776                           ;Timer1.c: 99: tcnt.RenewalRersult = 0;
  7777  0FFC  0020               	movlb	0	; select bank0
  7778  0FFD  01E7               	clrf	_tcnt+6
  7779  0FFE  01E8               	clrf	_tcnt+7
  7780  0FFF  0008               	return
  7781  1000                     __end_of_Timer1_Count1ms:	
  7782                           
  7783                           	psect	text42
  7784  0D1C                     __ptext42:	
  7785 ;; *************** function i1_Buzzer_MiliSecond *****************
  7786 ;; Defined at:
  7787 ;;		line 38 in file "Buzzer.c"
  7788 ;; Parameters:    Size  Location     Type
  7789 ;;  time            2    0[COMMON] unsigned int 
  7790 ;; Auto vars:     Size  Location     Type
  7791 ;;		None
  7792 ;; Return value:  Size  Location     Type
  7793 ;;                  1    wreg      void 
  7794 ;; Registers used:
  7795 ;;		wreg, status,2, status,0
  7796 ;; Tracked objects:
  7797 ;;		On entry : 0/0
  7798 ;;		On exit  : 0/0
  7799 ;;		Unchanged: 0/0
  7800 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  7801 ;;      Params:         2       0       0       0       0       0
  7802 ;;      Locals:         0       0       0       0       0       0
  7803 ;;      Temps:          0       0       0       0       0       0
  7804 ;;      Totals:         2       0       0       0       0       0
  7805 ;;Total ram usage:        2 bytes
  7806 ;; Hardware stack levels used:    1
  7807 ;; This function calls:
  7808 ;;		Nothing
  7809 ;; This function is called by:
  7810 ;;		_Timer1_Count1ms
  7811 ;; This function uses a non-reentrant model
  7812 ;;
  7813                           
  7814                           
  7815                           ;psect for function i1_Buzzer_MiliSecond
  7816  0D1C                     i1_Buzzer_MiliSecond:	
  7817                           
  7818                           ;Buzzer.c: 40: if(count==0)
  7819                           
  7820                           ;incstack = 0
  7821                           ; Regs used in i1_Buzzer_MiliSecond: [wreg+status,2+status,0]
  7822  0D1C  0873               	movf	_count,w
  7823  0D1D  0474               	iorwf	_count+1,w
  7824  0D1E  1D03               	btfss	3,2
  7825  0D1F  0008               	return
  7826                           
  7827                           ;Buzzer.c: 41: count = time;
  7828  0D20  0877               	movf	i1Buzzer_MiliSecond@time+1,w
  7829  0D21  00F4               	movwf	_count+1
  7830  0D22  0876               	movf	i1Buzzer_MiliSecond@time,w
  7831  0D23  00F3               	movwf	_count
  7832  0D24  0008               	return
  7833  0D25                     __end_ofi1_Buzzer_MiliSecond:	
  7834                           
  7835                           	psect	text43
  7836  0CFF                     __ptext43:	
  7837 ;; *************** function _I2C_CommonInterrupt *****************
  7838 ;; Defined at:
  7839 ;;		line 58 in file "I2C_Common.c"
  7840 ;; Parameters:    Size  Location     Type
  7841 ;;		None
  7842 ;; Auto vars:     Size  Location     Type
  7843 ;;		None
  7844 ;; Return value:  Size  Location     Type
  7845 ;;                  1    wreg      void 
  7846 ;; Registers used:
  7847 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7848 ;; Tracked objects:
  7849 ;;		On entry : 0/0
  7850 ;;		On exit  : 0/0
  7851 ;;		Unchanged: 0/0
  7852 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  7853 ;;      Params:         0       0       0       0       0       0
  7854 ;;      Locals:         0       0       0       0       0       0
  7855 ;;      Temps:          0       0       0       0       0       0
  7856 ;;      Totals:         0       0       0       0       0       0
  7857 ;;Total ram usage:        0 bytes
  7858 ;; Hardware stack levels used:    1
  7859 ;; Hardware stack levels required when called:    1
  7860 ;; This function calls:
  7861 ;;		_I2C2_Interrupt
  7862 ;; This function is called by:
  7863 ;;		_Handler
  7864 ;; This function uses a non-reentrant model
  7865 ;;
  7866                           
  7867                           
  7868                           ;psect for function _I2C_CommonInterrupt
  7869  0CFF                     _I2C_CommonInterrupt:	
  7870                           
  7871                           ;I2C_Common.c: 61: I2C2_Interrupt();
  7872                           
  7873                           ;incstack = 0
  7874                           ; Regs used in _I2C_CommonInterrupt: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7875  0CFF  3185  25B8         	fcall	_I2C2_Interrupt
  7876  0D01  0008               	return
  7877  0D02                     __end_of_I2C_CommonInterrupt:	
  7878                           
  7879                           	psect	text44
  7880  05B8                     __ptext44:	
  7881 ;; *************** function _I2C2_Interrupt *****************
  7882 ;; Defined at:
  7883 ;;		line 152 in file "I2C2.c"
  7884 ;; Parameters:    Size  Location     Type
  7885 ;;		None
  7886 ;; Auto vars:     Size  Location     Type
  7887 ;;		None
  7888 ;; Return value:  Size  Location     Type
  7889 ;;                  1    wreg      void 
  7890 ;; Registers used:
  7891 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  7892 ;; Tracked objects:
  7893 ;;		On entry : 0/0
  7894 ;;		On exit  : 0/0
  7895 ;;		Unchanged: 0/0
  7896 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  7897 ;;      Params:         0       0       0       0       0       0
  7898 ;;      Locals:         0       0       0       0       0       0
  7899 ;;      Temps:          1       0       0       0       0       0
  7900 ;;      Totals:         1       0       0       0       0       0
  7901 ;;Total ram usage:        1 bytes
  7902 ;; Hardware stack levels used:    1
  7903 ;; This function calls:
  7904 ;;		Nothing
  7905 ;; This function is called by:
  7906 ;;		_I2C_CommonInterrupt
  7907 ;; This function uses a non-reentrant model
  7908 ;;
  7909                           
  7910                           
  7911                           ;psect for function _I2C2_Interrupt
  7912  05B8                     _I2C2_Interrupt:	
  7913                           
  7914                           ;I2C2.c: 154: if(SSP2IF&&SSP2IE)
  7915                           
  7916                           ;incstack = 0
  7917                           ; Regs used in _I2C2_Interrupt: [wreg+fsr1l+fsr1h+status,2+status,0]
  7918  05B8  0020               	movlb	0	; select bank0
  7919  05B9  1C14               	btfss	20,0	;volatile
  7920  05BA  2E04               	goto	i1l2217
  7921  05BB  0021               	movlb	1	; select bank1
  7922  05BC  1C14               	btfss	20,0	;volatile
  7923  05BD  2E04               	goto	i1l2217
  7924                           
  7925                           ;I2C2.c: 155: {
  7926                           ;I2C2.c: 156: if(SSP2STATbits.D_nA)
  7927  05BE  0024               	movlb	4	; select bank4
  7928  05BF  1E9C               	btfss	28,5	;volatile
  7929  05C0  2DDB               	goto	i1l157
  7930                           
  7931                           ;I2C2.c: 157: {
  7932                           ;I2C2.c: 158: if(SSP2STATbits.R_nW)
  7933  05C1  1D1C               	btfss	28,2	;volatile
  7934  05C2  2DCE               	goto	i1l2193
  7935                           
  7936                           ;I2C2.c: 159: {
  7937                           ;I2C2.c: 160: if(!SSP2CON2bits.ACKSTAT)
  7938  05C3  1B1E               	btfsc	30,6	;volatile
  7939  05C4  2E02               	goto	i1l2215
  7940  05C5                     i1l2185:	
  7941                           ;I2C2.c: 161: {
  7942                           ;I2C2.c: 162: while((SSP2CON1bits.CKP)|(SSP2STATbits.BF));
  7943                           
  7944  05C5  081C               	movf	28,w	;volatile
  7945  05C6  3901               	andlw	1
  7946  05C7  00F6               	movwf	??_I2C2_Interrupt
  7947  05C8  0E1D               	swapf	29,w	;volatile
  7948  05C9  3901               	andlw	1
  7949  05CA  0476               	iorwf	??_I2C2_Interrupt,w
  7950  05CB  1D03               	btfss	3,2
  7951  05CC  2DC5               	goto	i1l2185
  7952  05CD  2DEE               	goto	L9
  7953  05CE                     i1l2193:	
  7954                           ;I2C2.c: 166: }
  7955                           ;I2C2.c: 167: }
  7956                           
  7957                           ;I2C2.c: 165: SSP2CON1bits.CKP = 1;
  7958                           
  7959                           ;I2C2.c: 164: I2C2_Config.TransmitPoint++;
  7960                           
  7961                           ;I2C2.c: 163: SSP2BUF = *I2C2_Config.TransmitPoint;
  7962                           
  7963                           
  7964                           ;I2C2.c: 168: else
  7965                           ;I2C2.c: 169: {
  7966                           ;I2C2.c: 170: *I2C2_Config.ReceivePoint = SSP2BUF;
  7967  05CE  0819               	movf	25,w	;volatile
  7968  05CF  00F6               	movwf	??_I2C2_Interrupt
  7969  05D0  0021               	movlb	1	; select bank1
  7970  05D1  0859               	movf	(low ((_I2C2_Config| 0+17)))^(0+128),w
  7971  05D2  0086               	movwf	6
  7972  05D3  0187               	clrf	7
  7973  05D4  0876               	movf	??_I2C2_Interrupt,w
  7974  05D5  0081               	movwf	1
  7975                           
  7976                           ;I2C2.c: 171: I2C2_Config.ReceivePoint++;
  7977  05D6  3001               	movlw	1
  7978  05D7  00F6               	movwf	??_I2C2_Interrupt
  7979  05D8  0876               	movf	??_I2C2_Interrupt,w
  7980  05D9  07D9               	addwf	(low ((_I2C2_Config| 0+17)))^(0+128),f
  7981  05DA  2E00               	goto	i1l2213
  7982  05DB                     i1l157:	
  7983                           ;I2C2.c: 173: }
  7984                           ;I2C2.c: 174: }
  7985                           
  7986                           ;I2C2.c: 172: SSP2CON1bits.CKP = 1;
  7987                           
  7988                           
  7989                           ;I2C2.c: 175: else if(!SSP2STATbits.D_nA)
  7990  05DB  1A9C               	btfsc	28,5	;volatile
  7991  05DC  2E02               	goto	i1l2215
  7992                           
  7993                           ;I2C2.c: 176: {
  7994                           ;I2C2.c: 177: SSP2BUF;
  7995  05DD  0819               	movf	25,w	;volatile
  7996                           
  7997                           ;I2C2.c: 179: if(SSP2STATbits.R_nW)
  7998  05DE  1D1C               	btfss	28,2	;volatile
  7999  05DF  2DFB               	goto	i1l2211
  8000                           
  8001                           ;I2C2.c: 180: {
  8002                           ;I2C2.c: 181: I2C2_Config.TransmitPoint = I2C2_Config.SlaveTransmitBuff;
  8003  05E0  30C8               	movlw	(low (_I2C2_Config| 0))& (0+255)
  8004  05E1  00F6               	movwf	??_I2C2_Interrupt
  8005  05E2  0876               	movf	??_I2C2_Interrupt,w
  8006  05E3  0021               	movlb	1	; select bank1
  8007  05E4  00D8               	movwf	(low ((_I2C2_Config| 0+16)))^(0+128)
  8008  05E5                     i1l2205:	
  8009                           ;I2C2.c: 183: while((SSP2CON1bits.CKP)|(SSP2STATbits.BF));
  8010                           
  8011  05E5  0024               	movlb	4	; select bank4
  8012  05E6  081C               	movf	28,w	;volatile
  8013  05E7  3901               	andlw	1
  8014  05E8  00F6               	movwf	??_I2C2_Interrupt
  8015  05E9  0E1D               	swapf	29,w	;volatile
  8016  05EA  3901               	andlw	1
  8017  05EB  0476               	iorwf	??_I2C2_Interrupt,w
  8018  05EC  1D03               	btfss	3,2
  8019  05ED  2DE5               	goto	i1l2205
  8020  05EE                     L9:	
  8021                           
  8022                           ;I2C2.c: 184: SSP2BUF = *I2C2_Config.TransmitPoint;
  8023  05EE  0021               	movlb	1	; select bank1
  8024  05EF  0858               	movf	(low ((_I2C2_Config| 0+16)))^(0+128),w
  8025  05F0  0086               	movwf	6
  8026  05F1  0187               	clrf	7
  8027  05F2  0801               	movf	1,w
  8028  05F3  0024               	movlb	4	; select bank4
  8029  05F4  0099               	movwf	25	;volatile
  8030                           
  8031                           ;I2C2.c: 185: I2C2_Config.TransmitPoint++;
  8032  05F5  3001               	movlw	1
  8033  05F6  00F6               	movwf	??_I2C2_Interrupt
  8034  05F7  0876               	movf	??_I2C2_Interrupt,w
  8035  05F8  0021               	movlb	1	; select bank1
  8036  05F9  07D8               	addwf	(low ((_I2C2_Config| 0+16)))^(0+128),f
  8037                           
  8038                           ;I2C2.c: 186: }
  8039  05FA  2E00               	goto	i1l2213
  8040  05FB                     i1l2211:	
  8041                           
  8042                           ;I2C2.c: 187: else
  8043                           ;I2C2.c: 188: {
  8044                           ;I2C2.c: 189: I2C2_Config.ReceivePoint = I2C2_Config.SlaveReceiveBuff;
  8045  05FB  30D0               	movlw	(low ((_I2C2_Config| 0+8)))& (0+255)
  8046  05FC  00F6               	movwf	??_I2C2_Interrupt
  8047  05FD  0876               	movf	??_I2C2_Interrupt,w
  8048  05FE  0021               	movlb	1	; select bank1
  8049  05FF  00D9               	movwf	(low ((_I2C2_Config| 0+17)))^(0+128)
  8050  0600                     i1l2213:	
  8051                           
  8052                           ;I2C2.c: 190: }
  8053                           ;I2C2.c: 191: SSP2CON1bits.CKP = 1;
  8054  0600  0024               	movlb	4	; select bank4
  8055  0601  161D               	bsf	29,4	;volatile
  8056  0602                     i1l2215:	
  8057                           
  8058                           ;I2C2.c: 192: }
  8059                           ;I2C2.c: 193: SSP2IF = 0;
  8060  0602  0020               	movlb	0	; select bank0
  8061  0603  1014               	bcf	20,0	;volatile
  8062  0604                     i1l2217:	
  8063                           
  8064                           ;I2C2.c: 194: }
  8065                           ;I2C2.c: 196: if(BCL2IE&&BCL2IF)
  8066  0604  0021               	movlb	1	; select bank1
  8067  0605  1C94               	btfss	20,1	;volatile
  8068  0606  0008               	return
  8069  0607  0020               	movlb	0	; select bank0
  8070  0608  1C94               	btfss	20,1	;volatile
  8071  0609  0008               	return
  8072                           
  8073                           ;I2C2.c: 197: BCL2IF = 0;
  8074  060A  1094               	bcf	20,1	;volatile
  8075  060B  0008               	return
  8076  060C                     __end_of_I2C2_Interrupt:	
  8077                           
  8078                           	psect	text45
  8079  0DE4                     __ptext45:	
  8080 ;; *************** function _Buzzer_Count1ms *****************
  8081 ;; Defined at:
  8082 ;;		line 44 in file "Buzzer.c"
  8083 ;; Parameters:    Size  Location     Type
  8084 ;;		None
  8085 ;; Auto vars:     Size  Location     Type
  8086 ;;		None
  8087 ;; Return value:  Size  Location     Type
  8088 ;;                  1    wreg      void 
  8089 ;; Registers used:
  8090 ;;		wreg, status,2, status,0, pclath, cstack
  8091 ;; Tracked objects:
  8092 ;;		On entry : 0/0
  8093 ;;		On exit  : 0/0
  8094 ;;		Unchanged: 0/0
  8095 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  8096 ;;      Params:         0       0       0       0       0       0
  8097 ;;      Locals:         0       0       0       0       0       0
  8098 ;;      Temps:          0       0       0       0       0       0
  8099 ;;      Totals:         0       0       0       0       0       0
  8100 ;;Total ram usage:        0 bytes
  8101 ;; Hardware stack levels used:    1
  8102 ;; Hardware stack levels required when called:    1
  8103 ;; This function calls:
  8104 ;;		_Buzzer_SetDuty
  8105 ;; This function is called by:
  8106 ;;		_Handler
  8107 ;; This function uses a non-reentrant model
  8108 ;;
  8109                           
  8110                           
  8111                           ;psect for function _Buzzer_Count1ms
  8112  0DE4                     _Buzzer_Count1ms:	
  8113                           
  8114                           ;Buzzer.c: 46: if(count>0)
  8115                           
  8116                           ;incstack = 0
  8117                           ; Regs used in _Buzzer_Count1ms: [wreg+status,2+status,0+pclath+cstack]
  8118  0DE4  0873               	movf	_count,w
  8119  0DE5  0474               	iorwf	_count+1,w
  8120  0DE6  1903               	btfsc	3,2
  8121  0DE7  2DF3               	goto	i1l2341
  8122                           
  8123                           ;Buzzer.c: 47: {
  8124                           ;Buzzer.c: 48: count--;
  8125  0DE8  3001               	movlw	1
  8126  0DE9  02F3               	subwf	_count,f
  8127  0DEA  3000               	movlw	0
  8128  0DEB  3BF4               	subwfb	_count+1,f
  8129                           
  8130                           ;Buzzer.c: 49: Buzzer_SetDuty(0x01FF);
  8131  0DEC  30FF               	movlw	255
  8132  0DED  00F6               	movwf	Buzzer_SetDuty@duty
  8133  0DEE  3001               	movlw	1
  8134  0DEF  00F7               	movwf	Buzzer_SetDuty@duty+1
  8135  0DF0  318E  265A         	fcall	_Buzzer_SetDuty
  8136                           
  8137                           ;Buzzer.c: 50: }
  8138  0DF2  0008               	return
  8139  0DF3                     i1l2341:	
  8140                           
  8141                           ;Buzzer.c: 51: else
  8142                           ;Buzzer.c: 52: {
  8143                           ;Buzzer.c: 53: Buzzer_SetDuty(0x0000);
  8144  0DF3  3000               	movlw	0
  8145  0DF4  00F6               	movwf	Buzzer_SetDuty@duty
  8146  0DF5  00F7               	movwf	Buzzer_SetDuty@duty+1
  8147  0DF6  318E  265A         	fcall	_Buzzer_SetDuty
  8148  0DF8  0008               	return
  8149  0DF9                     __end_of_Buzzer_Count1ms:	
  8150                           
  8151                           	psect	text46
  8152  0E5A                     __ptext46:	
  8153 ;; *************** function _Buzzer_SetDuty *****************
  8154 ;; Defined at:
  8155 ;;		line 31 in file "Buzzer.c"
  8156 ;; Parameters:    Size  Location     Type
  8157 ;;  duty            2    0[COMMON] unsigned int 
  8158 ;; Auto vars:     Size  Location     Type
  8159 ;;  CCP2CON_Pre     1    4[COMMON] unsigned char 
  8160 ;; Return value:  Size  Location     Type
  8161 ;;                  1    wreg      void 
  8162 ;; Registers used:
  8163 ;;		wreg, status,2, status,0
  8164 ;; Tracked objects:
  8165 ;;		On entry : 0/0
  8166 ;;		On exit  : 0/0
  8167 ;;		Unchanged: 0/0
  8168 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  8169 ;;      Params:         2       0       0       0       0       0
  8170 ;;      Locals:         1       0       0       0       0       0
  8171 ;;      Temps:          2       0       0       0       0       0
  8172 ;;      Totals:         5       0       0       0       0       0
  8173 ;;Total ram usage:        5 bytes
  8174 ;; Hardware stack levels used:    1
  8175 ;; This function calls:
  8176 ;;		Nothing
  8177 ;; This function is called by:
  8178 ;;		_Buzzer_Count1ms
  8179 ;; This function uses a non-reentrant model
  8180 ;;
  8181                           
  8182                           
  8183                           ;psect for function _Buzzer_SetDuty
  8184  0E5A                     _Buzzer_SetDuty:	
  8185                           
  8186                           ;Buzzer.c: 33: uint8_t CCP2CON_Pre = CCP2CON & ~(0x03<<4);
  8187                           
  8188                           ;incstack = 0
  8189                           ; Regs used in _Buzzer_SetDuty: [wreg+status,2+status,0]
  8190  0E5A  0025               	movlb	5	; select bank5
  8191  0E5B  081A               	movf	26,w	;volatile
  8192  0E5C  39CF               	andlw	207
  8193  0E5D  00F8               	movwf	??_Buzzer_SetDuty
  8194  0E5E  0878               	movf	??_Buzzer_SetDuty,w
  8195  0E5F  00FA               	movwf	Buzzer_SetDuty@CCP2CON_Pre
  8196                           
  8197                           ;Buzzer.c: 34: CCPR2L = (duty>>2);
  8198  0E60  0877               	movf	Buzzer_SetDuty@duty+1,w
  8199  0E61  00F9               	movwf	??_Buzzer_SetDuty+1
  8200  0E62  0876               	movf	Buzzer_SetDuty@duty,w
  8201  0E63  00F8               	movwf	??_Buzzer_SetDuty
  8202  0E64  36F9               	lsrf	??_Buzzer_SetDuty+1,f
  8203  0E65  0CF8               	rrf	??_Buzzer_SetDuty,f
  8204  0E66  36F9               	lsrf	??_Buzzer_SetDuty+1,f
  8205  0E67  0CF8               	rrf	??_Buzzer_SetDuty,f
  8206  0E68  0878               	movf	??_Buzzer_SetDuty,w
  8207  0E69  0098               	movwf	24	;volatile
  8208                           
  8209                           ;Buzzer.c: 35: CCP2CON = CCP2CON_Pre | ((duty&0x03)<<4);
  8210  0E6A  0876               	movf	Buzzer_SetDuty@duty,w
  8211  0E6B  3903               	andlw	3
  8212  0E6C  00F8               	movwf	??_Buzzer_SetDuty
  8213  0E6D  3003               	movlw	3
  8214  0E6E                     u148_25:	
  8215  0E6E  35F8               	lslf	??_Buzzer_SetDuty,f
  8216  0E6F  3EFF               	addlw	-1
  8217  0E70  1D03               	skipz
  8218  0E71  2E6E               	goto	u148_25
  8219  0E72  3578               	lslf	??_Buzzer_SetDuty,w
  8220  0E73  047A               	iorwf	Buzzer_SetDuty@CCP2CON_Pre,w
  8221  0E74  009A               	movwf	26	;volatile
  8222  0E75  0008               	return
  8223  0E76                     __end_of_Buzzer_SetDuty:	
  8224  007E                     btemp	set	126	;btemp
  8225  007E                     int$flags	set	126
  8226  007E                     wtemp0	set	126


Data Sizes:
    Strings     328
    Constant    73
    Data        90
    BSS         47
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      6      12
    BANK0            80     65      77
    BANK1            80      4      63
    BANK2            80      0      60
    BANK3            80      0       0
    BANK4            48      0       0

Pointer List with Targets:

    printf@f	PTR const unsigned char  size(2) Largest target is 17
		 -> STR_7(CODE[17]), STR_6(CODE[5]), STR_5(CODE[5]), STR_4(CODE[17]), 
		 -> STR_3(CODE[16]), STR_2(CODE[17]), STR_1(CODE[17]), 

    printf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_printf(BANK0[2]), 

    H7826_01_Gain	PTR const unsigned char [15] size(2) Largest target is 7
		 -> STR_52(CODE[7]), STR_51(CODE[7]), STR_50(CODE[7]), STR_49(CODE[7]), 
		 -> STR_48(CODE[7]), STR_47(CODE[7]), STR_46(CODE[7]), STR_45(CODE[6]), 
		 -> STR_44(CODE[6]), STR_43(CODE[6]), STR_42(CODE[6]), STR_41(CODE[5]), 
		 -> STR_40(CODE[5]), STR_39(CODE[5]), STR_38(CODE[5]), 

    H7826_Gain	PTR const unsigned char [15] size(2) Largest target is 8
		 -> STR_37(CODE[8]), STR_36(CODE[8]), STR_35(CODE[8]), STR_34(CODE[7]), 
		 -> STR_33(CODE[7]), STR_32(CODE[7]), STR_31(CODE[7]), STR_30(CODE[7]), 
		 -> STR_29(CODE[6]), STR_28(CODE[6]), STR_27(CODE[6]), STR_26(CODE[6]), 
		 -> STR_25(CODE[5]), STR_24(CODE[5]), STR_23(CODE[5]), 

    DAC_VoltageTable	PTR const unsigned char [15] size(2) Largest target is 6
		 -> STR_22(CODE[5]), STR_21(CODE[6]), STR_20(CODE[5]), STR_19(CODE[6]), 
		 -> STR_18(CODE[5]), STR_17(CODE[6]), STR_16(CODE[5]), STR_15(CODE[6]), 
		 -> STR_14(CODE[5]), STR_13(CODE[6]), STR_12(CODE[5]), STR_11(CODE[6]), 
		 -> STR_10(CODE[5]), STR_9(CODE[6]), STR_8(CODE[5]), 

    I2C_Transmit@pData	PTR unsigned char  size(1) Largest target is 2
		 -> VoltageReg(BANK0[2]), ConfigReg(BANK0[1]), 

    I2C2_Transmit@pData	PTR unsigned char  size(1) Largest target is 2
		 -> VoltageReg(BANK0[2]), ConfigReg(BANK0[1]), 

    S46$ReceivePoint	PTR unsigned char  size(1) Largest target is 21
		 -> I2C2_Config(BANK1[19]), 

    I2C2_Config.ReceivePoint	PTR unsigned char  size(1) Largest target is 21
		 -> I2C2_Config.SlaveReceiveBuff(BANK1[8]), I2C2_Config(BANK1[19]), 

    S46$TransmitPoint	PTR unsigned char  size(1) Largest target is 21
		 -> I2C2_Config(BANK1[19]), 

    I2C2_Config.TransmitPoint	PTR unsigned char  size(1) Largest target is 21
		 -> I2C2_Config.SlaveTransmitBuff(BANK1[8]), I2C2_Config(BANK1[19]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _Handler in COMMON

    _Timer1_Count1ms->i1_Buzzer_MiliSecond
    _I2C_CommonInterrupt->_I2C2_Interrupt
    _Buzzer_Count1ms->_Buzzer_SetDuty

Critical Paths under _main in BANK0

    _main->_printf
    _printf->_Timer1_GetCPM
    _putch->_LCD_WriteData
    ___llmod->___lldiv
    _mTouch_Init->_mTouch_PortInit
    _mTouch_Check->_Buzzer_MiliSecond
    _Timer1_GetCPM->_Timer1_GetCPS
    _Timer1_GetCPS->___lldiv
    ___lldiv->___lmul
    _LCD_Init->_LCD_DisplayClear
    _LCD_DisplayClear->_LCD_WriteData
    _LCD_CursorPosition->_LCD_WriteData
    _LCD_CursorHome->_LCD_WriteData
    _DAC_WriteVoltage->_I2C_Transmit
    _DAC_Initialize->_I2C_Transmit
    _I2C_Transmit->_I2C2_Transmit
    _I2C_Init->_I2C2_Setting
    _I2C2_Setting->_I2C2_PinInit

Critical Paths under _Handler in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _Handler in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _Handler in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _Handler in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _Handler in BANK4

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     4      0   10659
                                              0 BANK1      4     4      0
                         _Basic_Init
                        _Buzzer_Init
                     _DAC_Initialize
                   _DAC_WriteVoltage
                     _LCD_CursorHome
                 _LCD_CursorPosition
                   _LCD_DisplayClear
                           _LCD_Init
                 _Timer1_ClearRecord
                      _Timer1_GetCPM
                      _Timer1_GetCPS
                 _Timer1_GetCountSum
                   _Timer1_GetMinute
                   _Timer1_GetSecond
                        _Timer1_Init
                  _Timer1_StartCount
                   _Timer1_StopCount
                        _Timer6_Init
                       _mTouch_Check
                        _mTouch_Init
                             _printf
 ---------------------------------------------------------------------------------
 (1) _printf                                              35    25     10    3317
                                             38 BANK0     27    17     10
                      _Timer1_GetCPM (ARG)
                      _Timer1_GetCPS (ARG)
                 _Timer1_GetCountSum (ARG)
                   _Timer1_GetMinute (ARG)
                   _Timer1_GetSecond (ARG)
                            ___lldiv
                            ___llmod
                             ___wmul
                            _isdigit
                              _putch
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0     155
                                              3 BANK0      1     1      0
                      _LCD_WriteData
 ---------------------------------------------------------------------------------
 (2) _isdigit                                              2     2      0      99
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     290
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (2) ___llmod                                             10     2      8     386
                                             26 BANK0     10     2      8
                            ___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (1) _mTouch_Init                                          1     1      0       0
                                              1 BANK0      1     1      0
                    _mTouch_PortInit
 ---------------------------------------------------------------------------------
 (2) _mTouch_PortInit                                      1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _mTouch_Check                                         6     6      0     378
                                              2 BANK0      6     6      0
                  _Buzzer_MiliSecond
 ---------------------------------------------------------------------------------
 (2) _Buzzer_MiliSecond                                    2     0      2     192
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (1) _Timer6_Init                                          1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Timer1_StopCount                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Timer1_StartCount                                    0     0      0       0
                 _Timer1_ClearRecord
 ---------------------------------------------------------------------------------
 (2) _Timer1_ClearRecord                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Timer1_Init                                          1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Timer1_GetSecond                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Timer1_GetMinute                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Timer1_GetCountSum                                   4     0      4       0
                                              0 BANK0      4     0      4
 ---------------------------------------------------------------------------------
 (1) _Timer1_GetCPM                                        8     4      4    1471
                                             30 BANK0      8     4      4
                      _Timer1_GetCPS
                             ___lmul
 ---------------------------------------------------------------------------------
 (1) _Timer1_GetCPS                                        4     0      4     993
                                             26 BANK0      4     0      4
                            ___lldiv
                             ___lmul
 ---------------------------------------------------------------------------------
 (2) ___lmul                                              12     4      8     444
                                              0 BANK0     12     4      8
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             14     6      8     549
                                             12 BANK0     14     6      8
                             ___lmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _LCD_Init                                             2     2      0     248
                                              4 BANK0      2     2      0
                   _LCD_DisplayClear
                      _LCD_WriteData
 ---------------------------------------------------------------------------------
 (2) _LCD_DisplayClear                                     1     1      0     124
                                              3 BANK0      1     1      0
                      _LCD_WriteData
 ---------------------------------------------------------------------------------
 (1) _LCD_CursorPosition                                   3     2      1     648
                                              3 BANK0      3     2      1
                      _LCD_WriteData
 ---------------------------------------------------------------------------------
 (1) _LCD_CursorHome                                       1     1      0     124
                                              3 BANK0      1     1      0
                      _LCD_WriteData
 ---------------------------------------------------------------------------------
 (3) _LCD_WriteData                                        3     3      0     124
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (1) _DAC_WriteVoltage                                     5     3      2    1454
                                             16 BANK0      5     3      2
                       _I2C_Transmit
 ---------------------------------------------------------------------------------
 (1) _DAC_Initialize                                       2     2      0    1902
                                             16 BANK0      2     2      0
                           _I2C_Init
                       _I2C_Transmit
 ---------------------------------------------------------------------------------
 (2) _I2C_Transmit                                         8     5      3    1238
                                              8 BANK0      8     5      3
                      _I2C2_Transmit
 ---------------------------------------------------------------------------------
 (3) _I2C2_Transmit                                        8     6      2     618
                                              0 BANK0      8     6      2
 ---------------------------------------------------------------------------------
 (2) _I2C_Init                                             6     3      3     664
                                              5 BANK0      6     3      3
                       _I2C2_Setting
 ---------------------------------------------------------------------------------
 (3) _I2C2_Setting                                         4     2      2     309
                                              1 BANK0      4     2      2
                       _I2C2_PinInit
 ---------------------------------------------------------------------------------
 (4) _I2C2_PinInit                                         1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Buzzer_Init                                          1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Basic_Init                                           0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _Handler                                              1     1      0     269
                                              5 COMMON     1     1      0
                    _Buzzer_Count1ms
                _I2C_CommonInterrupt
                    _Timer1_Count1ms
           _Timer1_DetectAssignCount
                   _Timer6_CheckFlag
           _mTouch_IntervalDecrement
                        _mTouch_Read
 ---------------------------------------------------------------------------------
 (6) _mTouch_Read                                          1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (6) _mTouch_IntervalDecrement                             0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _Timer6_CheckFlag                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _Timer1_DetectAssignCount                             0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _Timer1_Count1ms                                      1     1      0      74
                                              2 COMMON     1     1      0
                i1_Buzzer_MiliSecond
 ---------------------------------------------------------------------------------
 (7) i1_Buzzer_MiliSecond                                  2     0      2      74
                                              0 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (6) _I2C_CommonInterrupt                                  0     0      0       0
                     _I2C2_Interrupt
 ---------------------------------------------------------------------------------
 (7) _I2C2_Interrupt                                       1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (6) _Buzzer_Count1ms                                      0     0      0     195
                     _Buzzer_SetDuty
 ---------------------------------------------------------------------------------
 (7) _Buzzer_SetDuty                                       5     3      2     195
                                              0 COMMON     5     3      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Basic_Init
   _Buzzer_Init
   _DAC_Initialize
     _I2C_Init
       _I2C2_Setting
         _I2C2_PinInit
     _I2C_Transmit
       _I2C2_Transmit
   _DAC_WriteVoltage
     _I2C_Transmit
       _I2C2_Transmit
   _LCD_CursorHome
     _LCD_WriteData
   _LCD_CursorPosition
     _LCD_WriteData
   _LCD_DisplayClear
     _LCD_WriteData
   _LCD_Init
     _LCD_DisplayClear
       _LCD_WriteData
     _LCD_WriteData
   _Timer1_ClearRecord
   _Timer1_GetCPM
     _Timer1_GetCPS
       ___lldiv
         ___lmul (ARG)
       ___lmul
     ___lmul
   _Timer1_GetCPS
     ___lldiv
       ___lmul (ARG)
     ___lmul
   _Timer1_GetCountSum
   _Timer1_GetMinute
   _Timer1_GetSecond
   _Timer1_Init
   _Timer1_StartCount
     _Timer1_ClearRecord
   _Timer1_StopCount
   _Timer6_Init
   _mTouch_Check
     _Buzzer_MiliSecond
   _mTouch_Init
     _mTouch_PortInit
   _printf
     _Timer1_GetCPM (ARG)
       _Timer1_GetCPS
         ___lldiv
           ___lmul (ARG)
         ___lmul
       ___lmul
     _Timer1_GetCPS (ARG)
       ___lldiv
         ___lmul (ARG)
       ___lmul
     _Timer1_GetCountSum (ARG)
     _Timer1_GetMinute (ARG)
     _Timer1_GetSecond (ARG)
     ___lldiv (ARG)
       ___lmul (ARG)
     ___llmod (ARG)
       ___lldiv (ARG)
         ___lmul (ARG)
     ___wmul (ARG)
     _isdigit (ARG)
     _putch (ARG)
       _LCD_WriteData

 _Handler (ROOT)
   _Buzzer_Count1ms
     _Buzzer_SetDuty
   _I2C_CommonInterrupt
     _I2C2_Interrupt
   _Timer1_Count1ms
     i1_Buzzer_MiliSecond
   _Timer1_DetectAssignCount
   _Timer6_CheckFlag
   _mTouch_IntervalDecrement
   _mTouch_Read

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             170      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      6       C       2       85.7%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0      D4       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BANK0               50     41      4D       6       96.2%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BITBANK1            50      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BANK1               50      4      3F       8       78.8%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BITBANK2            50      0       0       9        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BANK2               50      0      3C      10       75.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BITBANK3            50      0       0      11        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BANK3               50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BITBANK4            30      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BANK4               30      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
DATA                 0      0      D4      15        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.41 build -162212810 
Symbol Table                                                                                   Wed Jun 28 21:26:52 2017

                   _LCD_CursorHome 0D7C           __end_of_Timer1_StopCount 0D0B  
                      __CFG_CP$OFF 0000                                 l74 06B6  
                               l91 04D2                                 l78 06E7  
                   I2C2_Transmit@i 0025              ??_I2C_CommonInterrupt 0077  
              ___wmul@multiplicand 0022                                l100 04FB  
                              l109 0518                                l191 07FD  
                              l560 00CE                                l563 00F0  
                              l565 00D0                                l549 0084  
                              l718 0E7F                                l566 0127  
                              l576 0186                                l593 0225  
                              _GIE 005F                                _PR2 001B  
                  _Buzzer_Count1ms 0DE4                       __CFG_CPD$OFF 0000  
                              _PR6 041D                       __CFG_BORV$LO 0000  
                              wreg 0009                         _Basic_Init 0D9C  
                     __CFG_LVP$OFF 0000         ??_Timer1_DetectAssignCount 0076  
                             l3011 061D                               l3021 064B  
                             l3013 062B                               l3025 0656  
                             l3113 071D                               l3035 07EA  
                             l3043 0E42                               l3107 06F7  
                             l3109 0705                               l3117 0728  
                             l3039 07F7                               l3047 0E53  
                             l3049 0E58                               l3313 0667  
                             l3083 0D6A                               l3403 0147  
                             l3325 06A8                               l3431 01AF  
                             l3423 01A2                               l3415 017A  
                             l3089 0E79                               l3425 01A5  
                             l3409 014D                               l3361 0089  
                             l3521 0404                               l3443 01CF  
                             l3363 0092                               l3355 007F  
                             l2901 06CD                               l3453 01DD  
                             l3437 01BE                               l3533 041E  
                             l3509 03EA                               l2911 06DC  
                             l3439 01C2                               l3447 01D7  
                             l3367 009F                               l3455 0063  
                             l3527 0413                               l3519 0402  
                             l2921 04C3                               l3385 0101  
                             l3377 00D2                               l2915 06DE  
                             l2931 04E6                               l3539 042A  
                             l2941 04DE                               l3549 04A4  
                             l2943 04E2                               l2919 04B5  
                             l3399 0136                               l2945 0509  
                             l2955 051E                               l2963 053D  
                             l3499 048D                               l2893 06C0  
                             l2957 0535                               l2965 0546  
                             l2959 053A                               l2993 0F9F  
                             l2899 06CB                               l2997 0FA9  
                ?_DAC_WriteVoltage 0030                               STR_1 026F  
                             STR_2 0280                               STR_3 0291  
                             STR_4 0280                               STR_5 03B2  
                             STR_6 03B2                               STR_7 0280  
                             STR_8 0399                               STR_9 0349  
                             u3107 056B                               u3117 0580  
                             u3127 0595                               u3137 0D96  
                             u2505 0FAA                               u3147 0E21  
                             u2515 0FB1                               u3157 0D86  
                             u3167 0771                               u3097 0552  
                             u2545 0620                               u2705 0713  
                             u2715 071E                               u2485 0778  
                             u2565 062C                               u2645 0E80  
                             u2735 0E16                               u2575 0640  
                             u2655 0E85                               u2585 064C  
                             u2755 068E                               _PEIE 005E  
                             u2685 06FA                               u2855 0170  
                             u2895 0195              Buzzer_MiliSecond@time 0020  
                             _TMR0 0015                               _TMR1 0016  
                             _TMR2 001A                               _TMR6 041C  
                  _sense_parameter 026C                               _WPUB 020D  
                     __CFG_WRT$OFF 0000                 ??_DAC_WriteVoltage 0032  
                             _cnts 00BE                               _main 03B7  
                 __end_of_I2C_Init 0800                               _tcnt 0061  
                             fsr0h 0005                               fsr1h 0007  
                             indf0 0000                               fsr0l 0004  
                             indf1 0001                               fsr1l 0006  
                             btemp 007E                      __CFG_BOREN$ON 0000  
                  ??_I2C2_Transmit 0022                               start 002B  
                    __CFG_IESO$OFF 0000                    __end_of_Handler 002B  
           __end_of_LCD_CursorHome 0D8C                      _LCD_WriteData 076E  
                    __CFG_MCLRE$ON 0000                   ??_I2C2_Interrupt 0076  
         __end_of_LCD_DisplayClear 0D9C              __size_of_I2C_Transmit 001B  
                 __end_of_LCD_Init 05B8                      __CFG_PLLEN$ON 0000  
                            ?_main 0076                              STR_10 039E  
                            STR_11 034F                              STR_20 038F  
                            STR_12 03A3                              STR_21 0343  
                            STR_13 0355                              STR_30 02EA  
                            STR_22 0394                              STR_14 03A8  
                            STR_31 02E3                              STR_23 037B  
                            STR_15 035B                              STR_32 02F1  
                            STR_24 0376                              STR_40 0380  
                            STR_16 03AD                              STR_33 02B9  
                            STR_25 0385                              STR_41 0371  
                            STR_17 0361                      __CFG_WDTE$OFF 0000  
                            STR_34 02FF                              STR_26 0337  
                            STR_50 0306                              STR_42 031F  
                            STR_18 038A                              STR_35 02B1  
                            STR_27 030D                              STR_51 02C0  
                            STR_43 0325                              STR_19 033D  
                            STR_36 02A9                              STR_28 0319  
                            STR_52 02C7                              STR_44 032B  
                            STR_37 02A1                              STR_29 0331  
                            STR_45 0313                              STR_46 02CE  
                            STR_38 0367                              STR_47 02F8  
                            STR_39 036C                              STR_48 02D5  
                            STR_49 02DC                    __end_of___lldiv 065F  
                            _T1CON 0018                    __end_of___llmod 0731  
                            _T2CON 001C                              _LATA3 0863  
                            _LATA4 0864                              _LATA6 0866  
                            _T6CON 041E        __size_of_Timer1_ClearRecord 0015  
                            i1l410 0D76                              i1l157 05DB  
                            i1l409 0D71                              i1l522 0024  
                            _PORTA 000C                              _PORTB 000D  
                            _TRISA 008C                              _TRISB 008D  
                I2C2_Transmit@size 0021                ___lmul@multiplicand 0024  
                    __CFG_PWRTE$ON 0000                     __CFG_FCMEN$OFF 0000  
                  __end_of_dpowers 024E                              _count 0073  
                  __end_of_isdigit 0D6C                  ??_Timer1_Count1ms 0078  
                            _putch 0D25                      ??_Buzzer_Init 0020  
            __end_of_Timer1_GetCPM 0F67              __end_of_Timer1_GetCPS 076E  
      __size_of_Timer1_GetCountSum 0011                              status 0003  
                            wtemp0 007E                  _Buzzer_MiliSecond 0D2E  
                     _I2C_Transmit 0E3F                 _LCD_CursorPosition 0E0E  
                   ?_LCD_WriteData 0076                 ?_Buzzer_MiliSecond 0020  
                 ??_DAC_Initialize 0030                    ?_LCD_CursorHome 0076  
                  __initialization 002D                       __end_of_main 04B1  
          __end_of_Buzzer_Count1ms 0DF9                ?_LCD_CursorPosition 0023  
              ??_Buzzer_MiliSecond 0022                             ??_main 00DB  
             __end_of_mTouch_Check 06AA            __end_of_sense_parameter 026F  
                      ?_Basic_Init 0076                             _BCL2IE 04A1  
                           _BCL2IF 00A1                   ___llmod@dividend 003E  
             __size_of_mTouch_Init 0013               __size_of_mTouch_Read 0026  
                           _CCPR2L 0298               ??_LCD_CursorPosition 0024  
                           _ANSELA 018C                             ?_putch 0076  
                           _ANSELB 018D                             _T1GCON 0019  
                           i1l2211 05FB                             i1l2213 0600  
                           i1l2205 05E5                             i1l2215 0602  
                           i1l2217 0604                             i1l2341 0DF3  
                           i1l2185 05C5                             i1l2193 05CE  
                           i1l2543 0FFC                             i1l2535 0FEC  
                           i1l2561 0E3D                             i1l1681 0D41  
               I2C2_Transmit@i_172 0026                             i1l2873 0012  
                  _mTouch_Interval 0070          __end_of_Buzzer_MiliSecond 0D38  
                           u148_25 0E6E                             _OSCCON 0099  
               I2C2_Transmit@pData 0020                             _TMR1IE 0488  
                           _TMR1IF 0088                          ??_Handler 007B  
                           _TMR6IE 049B                             _TMR1ON 00C0  
                           _TMR6IF 009B                             _SSP2IE 04A0  
                           _SSP2IF 00A0           _mTouch_IntervalDecrement 0D6C  
                ?_Timer1_GetMinute 0076                  ?_Timer1_GetSecond 0076  
                  _mTouch_PortInit 0D50                      ??_Timer1_Init 0020  
              __end_of_Buzzer_Init 0F3F                      ??_Timer6_Init 0020  
               ??_Timer1_GetMinute 0020                 ??_Timer1_GetSecond 0020  
                           ___lmul 0F96                             ___wmul 0E76  
                        ??___lldiv 0034                          ??___llmod 0042  
                           _printf 005E                   I2C_Transmit@I2Cx 002E  
                        ??_isdigit 0020                          ?_I2C_Init 0025  
                           putch@c 0023                   I2C_Transmit@size 002A  
          __end_of__initialization 005A                          ?_LCD_Init 0076  
                  ??_LCD_WriteData 0020                  ?_Timer6_CheckFlag 0076  
     __size_ofi1_Buzzer_MiliSecond 0009                         _VoltageReg 006A  
               ??_Timer6_CheckFlag 0076                 Buzzer_SetDuty@duty 0076  
                   __pcstackCOMMON 0076                __size_of_Basic_Init 0011  
                     __pidataBANK1 0E92                       __pidataBANK2 07AB  
                 ?_Buzzer_Count1ms 0076                  ?_Timer1_StopCount 0076  
                    __end_of_putch 0D2E                __end_of_Timer1_Init 0EF1  
              __end_of_Timer6_Init 0DD1                 ??_Timer1_StopCount 0020  
        Buzzer_SetDuty@CCP2CON_Pre 007A                         ??_I2C_Init 0028  
                          ??_putch 0023            __end_of_mTouch_PortInit 0D5D  
                       __pbssBANK0 0061                         __pbssBANK1 00BE  
       __size_of_Buzzer_MiliSecond 000A                        _Buzzer_Init 0F17  
                       ??_LCD_Init 0024            __size_of_Buzzer_SetDuty 001C  
                    _DAC_DataTable 024E                       I2C_Init@I2Cx 002A  
      __end_of_I2C_CommonInterrupt 0D02                       I2C_Init@mode 0026  
                       __pmaintext 03B7                            ?___lmul 0020  
                          ?___wmul 0020          __size_of_DAC_WriteVoltage 002F  
                       __pintentry 0004              __size_of_mTouch_Check 004B  
                          _CCP2CON 029A                  ?_LCD_DisplayClear 0076  
                   ___lmul@product 0028                            _APFCON0 011D  
                          _APFCON1 011E                            _CCPTMRS 029E  
                          ?_printf 0046                    _Timer1_Count1ms 0FC6  
               ??_LCD_DisplayClear 0023                            _CPSCON0 001E  
                          _CPSCON1 001F                            _SSP2ADD 021A  
                          _SSP2BUF 0219                            _SSP2MSK 021B  
              I2C2_Transmit@result 0027                   ??_LCD_CursorHome 0023  
                          _Handler 0004                 mTouch_Read@channel 0075  
                     _mTouch_Check 065F              __end_of_I2C2_Transmit 0549  
                      _Timer1_Init 0ED0                        _Timer6_Init 0DBE  
__size_of_Timer1_DetectAssignCount 001A                    __size_of___lmul 0030  
        ?_Timer1_DetectAssignCount 0076                            ___lldiv 060C  
                  __size_of___wmul 001C                            ___llmod 06EE  
                  __CFG_STVREN$OFF 0000         __end_of_Timer1_ClearRecord 0E0E  
                          __ptext1 005E                            __ptext2 0D25  
                          __ptext3 0D5D                            __ptext4 0E76  
                          __ptext5 06EE                            __ptext6 0DD1  
                          __ptext7 0D50                            __ptext8 065F  
                          __ptext9 0D2E                    __size_of_printf 01C8  
                          _dpowers 0226                            _isdigit 0D5D  
                     ??_Basic_Init 0020         ??_mTouch_IntervalDecrement 0076  
                          clrloop0 0D11         __end_of_Timer1_GetCountSum 0DBE  
             end_of_initialization 005A                   ?_mTouch_PortInit 0076  
                          init_ram 0D16                            initloop 0D17  
                    ?_I2C2_PinInit 0076                        _I2C2_Config 00C8  
                  ___lldiv@divisor 002C                      ?_I2C2_Setting 0021  
                  ___lldiv@counter 0039                  I2C_Transmit@pData 0029  
          __end_of_Timer1_Count1ms 1000                            printf@c 0060  
                          printf@f 0046                 __end_of_Basic_Init 0DAD  
                 _DAC_VoltageTable 00A0                       __pstringtext 0226  
           __size_of_Timer1_GetCPM 0028             __size_of_Timer1_GetCPS 003D  
        __size_of_Timer1_GetMinute 0003          __size_of_Timer1_GetSecond 0003  
              i1_Buzzer_MiliSecond 0D1C                   __CFG_FOSC$INTOSC 0000  
                    ??_mTouch_Init 0021                      ??_mTouch_Read 0076  
          __size_of_I2C2_Interrupt 0054                  __size_of_I2C_Init 0019  
                       _state_mode 0069        __size_of_LCD_CursorPosition 0017  
                   ??_I2C2_PinInit 0020                     _Buzzer_SetDuty 0E5A  
             ?i1_Buzzer_MiliSecond 0076                        printf@width 005E  
                   ??_I2C2_Setting 0023                      _H7826_01_Gain 0120  
                __size_of_LCD_Init 006F                  _Timer1_StartCount 0D0B  
                 _DAC_WriteVoltage 0F67                 ?_Timer1_StartCount 0076  
                   __end_of___lmul 0FC6                     __end_of___wmul 0E92  
                        _ConfigReg 006C          __size_of_Timer6_CheckFlag 000B  
              ??_Timer1_StartCount 0020            __size_of_DAC_Initialize 0020  
                   __end_of_printf 0226                start_initialization 002D  
        __size_of_Timer1_StopCount 0003             __end_of_Buzzer_SetDuty 0E76  
                     ?_Buzzer_Init 0076                __end_of_mTouch_Init 0DE4  
              __end_of_mTouch_Read 0F17                      _Timer1_GetCPM 0F3F  
                    _Timer1_GetCPS 0731              ??i1_Buzzer_MiliSecond 0078  
              I2C2_Setting@address 0024                    ___llmod@divisor 003A  
        __end_of_Timer1_StartCount 0D10                    ___llmod@counter 0043  
             LCD_CursorPosition@tx 0025               LCD_CursorPosition@ty 0023  
            __end_of_LCD_WriteData 07AB                   ?_Timer1_Count1ms 0076  
                         ??___lmul 0028                           ??___wmul 0024  
                      __pdataBANK1 00A0                        __pdataBANK2 0120  
                         ??_printf 0050           __size_of_Buzzer_Count1ms 0015  
                      __pbssCOMMON 0070                          ___latbits 0001  
                    __pcstackBANK0 0020                      __pcstackBANK1 00DB  
 __end_of_mTouch_IntervalDecrement 0D7C          __size_of_LCD_DisplayClear 0010  
                  ?_Buzzer_SetDuty 0076                 _Timer1_GetCPM$1068 0042  
                   ?_Timer1_GetCPM 003E                     ?_Timer1_GetCPS 003A  
 __end_of_Timer1_DetectAssignCount 0E3F                    I2C_Init@address 0025  
                         ?_Handler 0076                      ?_I2C_Transmit 0028  
                    I2C_Init@Speed 0027                       ?_Timer1_Init 0076  
            DAC_WriteVoltage@volue 0030                       ?_Timer6_Init 0076  
                         ?___lldiv 002C                           ?___llmod 003A  
     __size_of_I2C_CommonInterrupt 0003                   _Timer1_GetMinute 0D02  
                 _Timer1_GetSecond 0D05               __end_of_I2C2_PinInit 0D50  
                         ?_isdigit 0076                           _I2C_Init 07E7  
             __end_of_I2C2_Setting 06EE                     _I2C2_Interrupt 05B8  
                       _H7826_Gain 013E                        _mTouch_Init 0DD1  
                      _mTouch_Read 0EF1                 _Timer1_ClearRecord 0DF9  
                   __size_of_putch 0009                           _LCD_Init 0549  
                   ___wmul@product 0024                           _CPS_Data 00C5  
                   ??_I2C_Transmit 002B                ?_Timer1_ClearRecord 0076  
       __size_of_Timer1_StartCount 0005                          clear_ram0 0D10  
               _Timer1_GetCountSum 0DAD               I2C2_Transmit@address 0024  
                         _SSP2CON1 021D                           _SSP2CON2 021E  
                         _SSP2STAT 021C                ?_Timer1_GetCountSum 0020  
                 _Timer6_CheckFlag 0D38                  ___wmul@multiplier 0020  
                 mTouch_Check@chan 0027                     _DAC_Initialize 0EB0  
             ??_Timer1_ClearRecord 0020             __end_of_I2C2_Interrupt 060C  
                       printf@flag 005D                         printf@prec 0056  
           __size_of_I2C2_Transmit 0098                    ??_Timer1_GetCPM 0042  
                 _Timer1_StopCount 0D08                    ??_Timer1_GetCPS 003E  
         __end_of_DAC_WriteVoltage 0F96                        _CPS_PreData 00C2  
                ___lmul@multiplier 0020                  ??_Buzzer_Count1ms 007B  
             ??_Timer1_GetCountSum 0024                   __size_of_Handler 0027  
             __size_of_Buzzer_Init 0028           _Timer1_DetectAssignCount 0E25  
         __size_of_mTouch_PortInit 000D  __size_of_mTouch_IntervalDecrement 0010  
        ?_mTouch_IntervalDecrement 0076            __size_of_LCD_CursorHome 0010  
           __end_of_DAC_Initialize 0ED0                   __size_of___lldiv 0053  
                 __size_of___llmod 0043                 LCD_WriteData@point 0022  
                      _isdigit$777 0020                    ?_I2C2_Interrupt 0076  
                 __size_of_isdigit 000F         __end_of_LCD_CursorPosition 0E25  
                         __ptext10 0DBE                           __ptext11 0D08  
                         __ptext20 0F96                           __ptext12 0D0B  
                         __ptext21 060C                           __ptext13 0DF9  
                         __ptext30 04B1                           __ptext22 0549  
                         __ptext14 0ED0                           __ptext31 07E7  
                         __ptext23 0D8C                           __ptext15 0D05  
                         __ptext40 0E25                           __ptext32 06AA  
                         __ptext24 0E0E                           __ptext16 0D02  
                         __ptext41 0FC6                           __ptext33 0D43  
                         __ptext25 0D7C                           __ptext17 0DAD  
                         __ptext42 0D1C                           __ptext34 0F17  
                         __ptext26 076E                           __ptext18 0F3F  
                         __ptext43 0CFF                           __ptext35 0D9C  
                         __ptext27 0F67                           __ptext19 0731  
                         __ptext44 05B8                           __ptext28 0EB0  
                         __ptext45 0DE4                           __ptext37 0EF1  
                         __ptext29 0E3F                           __ptext46 0E5A  
                         __ptext38 0D6C                           __ptext39 0D38  
                 _LCD_DisplayClear 0D8C                       _SSP2CON1bits 021D  
                     _SSP2CON2bits 021E              __end_of_DAC_DataTable 026C  
                    __size_of_main 00FA                      _I2C2_Transmit 04B1  
             __size_of_Timer1_Init 0021                           int$flags 007E  
            __size_of_I2C2_PinInit 000D                I2C_Transmit@address 0028  
             __size_of_Timer6_Init 0013                    ?_DAC_Initialize 0076  
                        printf@val 0058              __size_of_I2C2_Setting 0044  
                     _SSP2STATbits 021C               __end_of_I2C_Transmit 0E5A  
                I2C2_Setting@Speed 0022                   ??_Buzzer_SetDuty 0078  
      __end_ofi1_Buzzer_MiliSecond 0D25                           isdigit@c 0021  
          i1Buzzer_MiliSecond@time 0076                           intlevel1 0000  
              _I2C_CommonInterrupt 0CFF                   ___lldiv@dividend 0030  
         __end_of_Timer1_GetMinute 0D05           __end_of_Timer1_GetSecond 0D08  
                __CFG_CLKOUTEN$OFF 0000                       _I2C2_PinInit 0D43  
                    ?_mTouch_Check 0076                     ?_I2C2_Transmit 0020  
                     _I2C2_Setting 06AA                           printf@ap 005C  
               I2C_Transmit@result 002F                  ??_mTouch_PortInit 0020  
                 I2C2_Setting@mode 0021               ?_I2C_CommonInterrupt 0076  
                       _OPTION_REG 0095           __size_of_Timer1_Count1ms 003A  
                 ___lldiv@quotient 0035                       ?_mTouch_Init 0076  
                     ?_mTouch_Read 0076             __size_of_LCD_WriteData 003D  
         __end_of_Timer6_CheckFlag 0D43                     ??_mTouch_Check 0022  
