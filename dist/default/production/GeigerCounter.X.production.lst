

Microchip Technology PIC LITE Macro Assembler V1.41 build -162212810 
<<<<<<< HEAD
                                                                                               Fri Mar  3 09:24:47 2017
=======
                                                                                               Fri Mar  3 08:06:44 2017
>>>>>>> master

Microchip Technology Omniscient Code Generator v1.41 (Free mode) build 201701250102
     1                           	processor	16F1827
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	stringtext,global,class=STRCODE,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
     9                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    11                           	psect	text1,local,class=CODE,merge=1,delta=2
    12                           	psect	text2,local,class=CODE,merge=1,delta=2,group=2
    13                           	psect	text3,local,class=CODE,merge=1,delta=2,group=2
    14                           	psect	text4,local,class=CODE,merge=1,delta=2
    15                           	psect	text5,local,class=CODE,merge=1,delta=2
    16                           	psect	text6,local,class=CODE,merge=1,delta=2
    17                           	psect	text7,local,class=CODE,merge=1,delta=2
    18                           	psect	text8,local,class=CODE,merge=1,delta=2
    19                           	psect	text9,local,class=CODE,merge=1,delta=2
    20                           	psect	text10,local,class=CODE,merge=1,delta=2
    21                           	psect	intentry,global,class=CODE,delta=2
    22                           	psect	text12,local,class=CODE,merge=1,delta=2
    23                           	dabs	1,0x7E,2
    24  0000                     
    25                           ; Version 1.41
    26                           ; Generated 25/01/2017 GMT
    27                           ; 
    28                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    29                           ; All rights reserved.
    30                           ; 
    31                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    32                           ; 
    33                           ; Redistribution and use in source and binary forms, with or without modification, are
    34                           ; permitted provided that the following conditions are met:
    35                           ; 
    36                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    37                           ;        conditions and the following disclaimer.
    38                           ; 
    39                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    40                           ;        of conditions and the following disclaimer in the documentation and/or other
    41                           ;        materials provided with the distribution.
    42                           ; 
    43                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    44                           ;        software without specific prior written permission.
    45                           ; 
    46                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    47                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    48                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    49                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    50                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    51                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    52                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    53                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    54                           ; 
    55                           ; 
    56                           ; Code-generator required, PIC16F1827 Definitions
    57                           ; 
    58                           ; SFR Addresses
    59  0000                     	;# 
    60  0001                     	;# 
    61  0002                     	;# 
    62  0003                     	;# 
    63  0004                     	;# 
    64  0005                     	;# 
    65  0006                     	;# 
    66  0007                     	;# 
    67  0008                     	;# 
    68  0009                     	;# 
    69  000A                     	;# 
    70  000B                     	;# 
    71  000C                     	;# 
    72  000D                     	;# 
    73  0011                     	;# 
    74  0012                     	;# 
    75  0013                     	;# 
    76  0014                     	;# 
    77  0015                     	;# 
    78  0016                     	;# 
    79  0016                     	;# 
    80  0017                     	;# 
    81  0018                     	;# 
    82  0019                     	;# 
    83  001A                     	;# 
    84  001B                     	;# 
    85  001C                     	;# 
    86  001E                     	;# 
    87  001F                     	;# 
    88  008C                     	;# 
    89  008D                     	;# 
    90  0091                     	;# 
    91  0092                     	;# 
    92  0093                     	;# 
    93  0094                     	;# 
    94  0095                     	;# 
    95  0096                     	;# 
    96  0097                     	;# 
    97  0098                     	;# 
    98  0099                     	;# 
    99  009A                     	;# 
   100  009B                     	;# 
   101  009B                     	;# 
   102  009C                     	;# 
   103  009D                     	;# 
   104  009E                     	;# 
   105  010C                     	;# 
   106  010D                     	;# 
   107  0111                     	;# 
   108  0112                     	;# 
   109  0113                     	;# 
   110  0114                     	;# 
   111  0115                     	;# 
   112  0116                     	;# 
   113  0117                     	;# 
   114  0118                     	;# 
   115  0119                     	;# 
   116  011A                     	;# 
   117  011B                     	;# 
   118  011D                     	;# 
   119  011E                     	;# 
   120  018C                     	;# 
   121  018D                     	;# 
   122  0191                     	;# 
   123  0191                     	;# 
   124  0192                     	;# 
   125  0193                     	;# 
   126  0193                     	;# 
   127  0193                     	;# 
   128  0194                     	;# 
   129  0195                     	;# 
   130  0196                     	;# 
   131  0199                     	;# 
   132  019A                     	;# 
   133  019B                     	;# 
   134  019B                     	;# 
   135  019B                     	;# 
   136  019B                     	;# 
   137  019C                     	;# 
   138  019C                     	;# 
   139  019D                     	;# 
   140  019E                     	;# 
   141  019F                     	;# 
   142  020C                     	;# 
   143  020D                     	;# 
   144  0211                     	;# 
   145  0211                     	;# 
   146  0212                     	;# 
   147  0212                     	;# 
   148  0213                     	;# 
   149  0213                     	;# 
   150  0214                     	;# 
   151  0214                     	;# 
   152  0215                     	;# 
   153  0215                     	;# 
   154  0215                     	;# 
   155  0216                     	;# 
   156  0216                     	;# 
   157  0217                     	;# 
   158  0217                     	;# 
   159  0219                     	;# 
   160  021A                     	;# 
   161  021B                     	;# 
   162  021C                     	;# 
   163  021D                     	;# 
   164  021E                     	;# 
   165  021F                     	;# 
   166  0291                     	;# 
   167  0291                     	;# 
   168  0292                     	;# 
   169  0293                     	;# 
   170  0294                     	;# 
   171  0295                     	;# 
   172  0295                     	;# 
   173  0296                     	;# 
   174  0298                     	;# 
   175  0298                     	;# 
   176  0299                     	;# 
   177  029A                     	;# 
   178  029B                     	;# 
   179  029C                     	;# 
   180  029C                     	;# 
   181  029D                     	;# 
   182  029E                     	;# 
   183  029E                     	;# 
   184  0311                     	;# 
   185  0311                     	;# 
   186  0312                     	;# 
   187  0313                     	;# 
   188  0318                     	;# 
   189  0318                     	;# 
   190  0319                     	;# 
   191  031A                     	;# 
   192  0394                     	;# 
   193  0395                     	;# 
   194  0396                     	;# 
   195  039A                     	;# 
   196  039C                     	;# 
   197  039D                     	;# 
   198  039E                     	;# 
   199  039F                     	;# 
   200  0415                     	;# 
   201  0416                     	;# 
   202  0417                     	;# 
   203  041C                     	;# 
   204  041D                     	;# 
   205  041E                     	;# 
   206  0FE4                     	;# 
   207  0FE5                     	;# 
   208  0FE6                     	;# 
   209  0FE7                     	;# 
   210  0FE8                     	;# 
   211  0FE9                     	;# 
   212  0FEA                     	;# 
   213  0FEB                     	;# 
   214  0FED                     	;# 
   215  0FEE                     	;# 
   216  0FEF                     	;# 
   217  0000                     	;# 
   218  0001                     	;# 
   219  0002                     	;# 
   220  0003                     	;# 
   221  0004                     	;# 
   222  0005                     	;# 
   223  0006                     	;# 
   224  0007                     	;# 
   225  0008                     	;# 
   226  0009                     	;# 
   227  000A                     	;# 
   228  000B                     	;# 
   229  000C                     	;# 
   230  000D                     	;# 
   231  0011                     	;# 
   232  0012                     	;# 
   233  0013                     	;# 
   234  0014                     	;# 
   235  0015                     	;# 
   236  0016                     	;# 
   237  0016                     	;# 
   238  0017                     	;# 
   239  0018                     	;# 
   240  0019                     	;# 
   241  001A                     	;# 
   242  001B                     	;# 
   243  001C                     	;# 
   244  001E                     	;# 
   245  001F                     	;# 
   246  008C                     	;# 
   247  008D                     	;# 
   248  0091                     	;# 
   249  0092                     	;# 
   250  0093                     	;# 
   251  0094                     	;# 
   252  0095                     	;# 
   253  0096                     	;# 
   254  0097                     	;# 
   255  0098                     	;# 
   256  0099                     	;# 
   257  009A                     	;# 
   258  009B                     	;# 
   259  009B                     	;# 
   260  009C                     	;# 
   261  009D                     	;# 
   262  009E                     	;# 
   263  010C                     	;# 
   264  010D                     	;# 
   265  0111                     	;# 
   266  0112                     	;# 
   267  0113                     	;# 
   268  0114                     	;# 
   269  0115                     	;# 
   270  0116                     	;# 
   271  0117                     	;# 
   272  0118                     	;# 
   273  0119                     	;# 
   274  011A                     	;# 
   275  011B                     	;# 
   276  011D                     	;# 
   277  011E                     	;# 
   278  018C                     	;# 
   279  018D                     	;# 
   280  0191                     	;# 
   281  0191                     	;# 
   282  0192                     	;# 
   283  0193                     	;# 
   284  0193                     	;# 
   285  0193                     	;# 
   286  0194                     	;# 
   287  0195                     	;# 
   288  0196                     	;# 
   289  0199                     	;# 
   290  019A                     	;# 
   291  019B                     	;# 
   292  019B                     	;# 
   293  019B                     	;# 
   294  019B                     	;# 
   295  019C                     	;# 
   296  019C                     	;# 
   297  019D                     	;# 
   298  019E                     	;# 
   299  019F                     	;# 
   300  020C                     	;# 
   301  020D                     	;# 
   302  0211                     	;# 
   303  0211                     	;# 
   304  0212                     	;# 
   305  0212                     	;# 
   306  0213                     	;# 
   307  0213                     	;# 
   308  0214                     	;# 
   309  0214                     	;# 
   310  0215                     	;# 
   311  0215                     	;# 
   312  0215                     	;# 
   313  0216                     	;# 
   314  0216                     	;# 
   315  0217                     	;# 
   316  0217                     	;# 
   317  0219                     	;# 
   318  021A                     	;# 
   319  021B                     	;# 
   320  021C                     	;# 
   321  021D                     	;# 
   322  021E                     	;# 
   323  021F                     	;# 
   324  0291                     	;# 
   325  0291                     	;# 
   326  0292                     	;# 
   327  0293                     	;# 
   328  0294                     	;# 
   329  0295                     	;# 
   330  0295                     	;# 
   331  0296                     	;# 
   332  0298                     	;# 
   333  0298                     	;# 
   334  0299                     	;# 
   335  029A                     	;# 
   336  029B                     	;# 
   337  029C                     	;# 
   338  029C                     	;# 
   339  029D                     	;# 
   340  029E                     	;# 
   341  029E                     	;# 
   342  0311                     	;# 
   343  0311                     	;# 
   344  0312                     	;# 
   345  0313                     	;# 
   346  0318                     	;# 
   347  0318                     	;# 
   348  0319                     	;# 
   349  031A                     	;# 
   350  0394                     	;# 
   351  0395                     	;# 
   352  0396                     	;# 
   353  039A                     	;# 
   354  039C                     	;# 
   355  039D                     	;# 
   356  039E                     	;# 
   357  039F                     	;# 
   358  0415                     	;# 
   359  0416                     	;# 
   360  0417                     	;# 
   361  041C                     	;# 
   362  041D                     	;# 
   363  041E                     	;# 
   364  0FE4                     	;# 
   365  0FE5                     	;# 
   366  0FE6                     	;# 
   367  0FE7                     	;# 
   368  0FE8                     	;# 
   369  0FE9                     	;# 
   370  0FEA                     	;# 
   371  0FEB                     	;# 
   372  0FED                     	;# 
   373  0FEE                     	;# 
   374  0FEF                     	;# 
   375  0000                     	;# 
   376  0001                     	;# 
   377  0002                     	;# 
   378  0003                     	;# 
   379  0004                     	;# 
   380  0005                     	;# 
   381  0006                     	;# 
   382  0007                     	;# 
   383  0008                     	;# 
   384  0009                     	;# 
   385  000A                     	;# 
   386  000B                     	;# 
   387  000C                     	;# 
   388  000D                     	;# 
   389  0011                     	;# 
   390  0012                     	;# 
   391  0013                     	;# 
   392  0014                     	;# 
   393  0015                     	;# 
   394  0016                     	;# 
   395  0016                     	;# 
   396  0017                     	;# 
   397  0018                     	;# 
   398  0019                     	;# 
   399  001A                     	;# 
   400  001B                     	;# 
   401  001C                     	;# 
   402  001E                     	;# 
   403  001F                     	;# 
   404  008C                     	;# 
   405  008D                     	;# 
   406  0091                     	;# 
   407  0092                     	;# 
   408  0093                     	;# 
   409  0094                     	;# 
   410  0095                     	;# 
   411  0096                     	;# 
   412  0097                     	;# 
   413  0098                     	;# 
   414  0099                     	;# 
   415  009A                     	;# 
   416  009B                     	;# 
   417  009B                     	;# 
   418  009C                     	;# 
   419  009D                     	;# 
   420  009E                     	;# 
   421  010C                     	;# 
   422  010D                     	;# 
   423  0111                     	;# 
   424  0112                     	;# 
   425  0113                     	;# 
   426  0114                     	;# 
   427  0115                     	;# 
   428  0116                     	;# 
   429  0117                     	;# 
   430  0118                     	;# 
   431  0119                     	;# 
   432  011A                     	;# 
   433  011B                     	;# 
   434  011D                     	;# 
   435  011E                     	;# 
   436  018C                     	;# 
   437  018D                     	;# 
   438  0191                     	;# 
   439  0191                     	;# 
   440  0192                     	;# 
   441  0193                     	;# 
   442  0193                     	;# 
   443  0193                     	;# 
   444  0194                     	;# 
   445  0195                     	;# 
   446  0196                     	;# 
   447  0199                     	;# 
   448  019A                     	;# 
   449  019B                     	;# 
   450  019B                     	;# 
   451  019B                     	;# 
   452  019B                     	;# 
   453  019C                     	;# 
   454  019C                     	;# 
   455  019D                     	;# 
   456  019E                     	;# 
   457  019F                     	;# 
   458  020C                     	;# 
   459  020D                     	;# 
   460  0211                     	;# 
   461  0211                     	;# 
   462  0212                     	;# 
   463  0212                     	;# 
   464  0213                     	;# 
   465  0213                     	;# 
   466  0214                     	;# 
   467  0214                     	;# 
   468  0215                     	;# 
   469  0215                     	;# 
   470  0215                     	;# 
   471  0216                     	;# 
   472  0216                     	;# 
   473  0217                     	;# 
   474  0217                     	;# 
   475  0219                     	;# 
   476  021A                     	;# 
   477  021B                     	;# 
   478  021C                     	;# 
   479  021D                     	;# 
   480  021E                     	;# 
   481  021F                     	;# 
   482  0291                     	;# 
   483  0291                     	;# 
   484  0292                     	;# 
   485  0293                     	;# 
   486  0294                     	;# 
   487  0295                     	;# 
   488  0295                     	;# 
   489  0296                     	;# 
   490  0298                     	;# 
   491  0298                     	;# 
   492  0299                     	;# 
   493  029A                     	;# 
   494  029B                     	;# 
   495  029C                     	;# 
   496  029C                     	;# 
   497  029D                     	;# 
   498  029E                     	;# 
   499  029E                     	;# 
   500  0311                     	;# 
   501  0311                     	;# 
   502  0312                     	;# 
   503  0313                     	;# 
   504  0318                     	;# 
   505  0318                     	;# 
   506  0319                     	;# 
   507  031A                     	;# 
   508  0394                     	;# 
   509  0395                     	;# 
   510  0396                     	;# 
   511  039A                     	;# 
   512  039C                     	;# 
   513  039D                     	;# 
   514  039E                     	;# 
   515  039F                     	;# 
   516  0415                     	;# 
   517  0416                     	;# 
   518  0417                     	;# 
   519  041C                     	;# 
   520  041D                     	;# 
   521  041E                     	;# 
   522  0FE4                     	;# 
   523  0FE5                     	;# 
   524  0FE6                     	;# 
   525  0FE7                     	;# 
   526  0FE8                     	;# 
   527  0FE9                     	;# 
   528  0FEA                     	;# 
   529  0FEB                     	;# 
   530  0FED                     	;# 
   531  0FEE                     	;# 
   532  0FEF                     	;# 
   533                           
   534                           	psect	stringtext
   535  023C                     __pstringtext:	
   536  023C                     _dpowers:	
   537  023C  3401               	retlw	1
   538  023D  3400               	retlw	0
   539  023E  340A               	retlw	10
   540  023F  3400               	retlw	0
   541  0240  3464               	retlw	100
   542  0241  3400               	retlw	0
   543  0242  34E8               	retlw	232
   544  0243  3403               	retlw	3
   545  0244  3410               	retlw	16
   546  0245  3427               	retlw	39
   547  0246                     __end_of_dpowers:	
   548  0016                     _TMR1	set	22
   549  0019                     _T1GCON	set	25
   550  0018                     _T1CON	set	24
   551  000D                     _PORTB	set	13
   552  000C                     _PORTA	set	12
   553  0064                     _RA4	set	100
   554  0063                     _RA3	set	99
   555  00C0                     _TMR1ON	set	192
   556  005F                     _GIE	set	95
   557  005E                     _PEIE	set	94
   558  0088                     _TMR1IF	set	136
   559  008D                     _TRISB	set	141
   560  008C                     _TRISA	set	140
   561  0099                     _OSCCON	set	153
   562  0488                     _TMR1IE	set	1160
   563  011E                     _APFCON1	set	286
   564  011D                     _APFCON0	set	285
   565  018D                     _ANSELB	set	397
   566  018C                     _ANSELA	set	396
   567  0246                     STR_3:	
   568  0246  3425               	retlw	37	;'%'
   569  0247  3430               	retlw	48	;'0'
   570  0248  3438               	retlw	56	;'8'
   571  0249  346C               	retlw	108	;'l'
   572  024A  3458               	retlw	88	;'X'
   573  024B  3420               	retlw	32	;' '
   574  024C  3400               	retlw	0
   575  024D                     STR_6:	
   576  024D  3420               	retlw	32	;' '
   577  024E  3425               	retlw	37	;'%'
   578  024F  3430               	retlw	48	;'0'
   579  0250  3438               	retlw	56	;'8'
   580  0251  344C               	retlw	76	;'L'
   581  0252  3458               	retlw	88	;'X'
   582  0253  3400               	retlw	0
   583  0254                     STR_4:	
   584  0254  3420               	retlw	32	;' '
   585  0255  3425               	retlw	37	;'%'
   586  0256  3430               	retlw	48	;'0'
   587  0257  3432               	retlw	50	;'2'
   588  0258  3458               	retlw	88	;'X'
   589  0259  3400               	retlw	0
   590  025A                     STR_5:	
   591  025A  3420               	retlw	32	;' '
   592  025B  3425               	retlw	37	;'%'
   593  025C  3430               	retlw	48	;'0'
   594  025D  3434               	retlw	52	;'4'
   595  025E  3458               	retlw	88	;'X'
   596  025F  3400               	retlw	0
   597  0260                     STR_1:	
   598  0260  3425               	retlw	37	;'%'
   599  0261  3464               	retlw	100	;'d'
   600  0262  3420               	retlw	32	;' '
   601  0263  3425               	retlw	37	;'%'
   602  0264  3464               	retlw	100	;'d'
   603  0265  3400               	retlw	0
   604  0266                     STR_2:	
   605  0266  340D               	retlw	13
   606  0267  3400               	retlw	0
   607                           
   608                           ; #config settings
   609  0000                     
   610                           	psect	cinit
   611  0012                     start_initialization:	
   612  0012                     __initialization:	
   613                           
   614                           ; Clear objects allocated to COMMON
   615  0012  01FC               	clrf	__pbssCOMMON& (0+127)
   616                           
   617                           ; Clear objects allocated to BANK0
   618  0013  0020               	movlb	0	; select bank0
   619  0014  01C5               	clrf	__pbssBANK0& (0+127)
   620  0015  01C6               	clrf	(__pbssBANK0+1)& (0+127)
   621  0016  01C7               	clrf	(__pbssBANK0+2)& (0+127)
   622  0017  01C8               	clrf	(__pbssBANK0+3)& (0+127)
   623  0018                     end_of_initialization:	
   624                           ;End of C runtime variable initialization code
   625                           
   626  0018                     __end_of__initialization:	
   627  0018  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
   628  0019  0020               	movlb	0
   629  001A  3181  2953         	ljmp	_main	;jump to C main() function
   630                           
   631                           	psect	bssCOMMON
   632  007C                     __pbssCOMMON:	
   633  007C                     _outptr:	
   634  007C                     	ds	1
   635                           
   636                           	psect	bssBANK0
   637  0045                     __pbssBANK0:	
   638  0045                     _xfunc_in:	
   639  0045                     	ds	2
   640  0047                     _xfunc_out:	
   641  0047                     	ds	2
   642                           
   643                           	psect	cstackCOMMON
   644  0070                     __pcstackCOMMON:	
   645  0070                     ?_Basic_Init:	
   646  0070                     ?_Timer1_Init:	
   647                           ; 1 bytes @ 0x0
   648                           
   649  0070                     ?_LCD_Init:	
   650                           ; 1 bytes @ 0x0
   651                           
   652  0070                     ?_Timer1_Handler:	
   653                           ; 1 bytes @ 0x0
   654                           
   655  0070                     ??_Timer1_Handler:	
   656                           ; 1 bytes @ 0x0
   657                           
   658  0070                     ?_LCD_DisplayClear:	
   659                           ; 1 bytes @ 0x0
   660                           
   661  0070                     ?_main:	
   662                           ; 1 bytes @ 0x0
   663                           
   664  0070                     ?_Handler:	
   665                           ; 1 bytes @ 0x0
   666                           
   667  0070                     ??_Handler:	
   668                           ; 1 bytes @ 0x0
   669                           
   670  0070                     ?_LCD_WriteData:	
   671                           ; 1 bytes @ 0x0
   672                           
   673                           
   674                           ; 1 bytes @ 0x0
   675  0070                     	ds	1
   676  0071                     ??_Basic_Init:	
   677  0071                     ??_Timer1_Init:	
   678                           ; 1 bytes @ 0x1
   679                           
   680  0071                     ??_LCD_WriteData:	
   681                           ; 1 bytes @ 0x1
   682                           
   683  0071                     ?___lwdiv:	
   684                           ; 1 bytes @ 0x1
   685                           
   686  0071                     ___lwdiv@divisor:	
   687                           ; 2 bytes @ 0x1
   688                           
   689                           
   690                           ; 2 bytes @ 0x1
   691  0071                     	ds	2
   692  0073                     LCD_WriteData@point:	
   693  0073                     ___lwdiv@dividend:	
   694                           ; 1 bytes @ 0x3
   695                           
   696                           
   697                           ; 2 bytes @ 0x3
   698  0073                     	ds	1
   699  0074                     ?_LCD_Put:	
   700  0074                     ?_LCD_CursorPosition:	
   701                           ; 1 bytes @ 0x4
   702                           
   703  0074                     ??_LCD_DisplayClear:	
   704                           ; 1 bytes @ 0x4
   705                           
   706  0074                     LCD_Put@word:	
   707                           ; 1 bytes @ 0x4
   708                           
   709  0074                     LCD_CursorPosition@ty:	
   710                           ; 1 bytes @ 0x4
   711                           
   712                           
   713                           ; 1 bytes @ 0x4
   714  0074                     	ds	1
   715  0075                     ??_LCD_Init:	
   716  0075                     ??_LCD_Put:	
   717                           ; 1 bytes @ 0x5
   718                           
   719  0075                     ??_LCD_CursorPosition:	
   720                           ; 1 bytes @ 0x5
   721                           
   722  0075                     ??___lwdiv:	
   723                           ; 1 bytes @ 0x5
   724                           
   725                           
   726                           ; 1 bytes @ 0x5
   727  0075                     	ds	1
   728  0076                     LCD_CursorPosition@tx:	
   729  0076                     ___lwdiv@quotient:	
   730                           ; 1 bytes @ 0x6
   731                           
   732                           
<<<<<<< HEAD
   733                           ; 2 bytes @ 0x6
   734  0076                     	ds	2
   735  0078                     ___lwdiv@counter:	
   736                           
   737                           ; 1 bytes @ 0x8
   738  0078                     	ds	1
   739  0079                     ??___lwmod:	
   740                           
   741                           ; 1 bytes @ 0x9
   742  0079                     	ds	1
   743  007A                     ___lwmod@counter:	
   744                           
   745                           ; 1 bytes @ 0xA
   746  007A                     	ds	1
   747  007B                     ??_main:	
   748                           
   749                           ; 1 bytes @ 0xB
   750  007B                     	ds	1
   751                           
   752                           	psect	cstackBANK0
   753  0020                     __pcstackBANK0:	
   754  0020                     ?___lwmod:	
   755  0020                     ___lwmod@divisor:	
   756                           ; 2 bytes @ 0x0
   757                           
   758                           
   759                           ; 2 bytes @ 0x0
   760  0020                     	ds	2
   761  0022                     ___lwmod@dividend:	
   762                           
   763                           ; 2 bytes @ 0x2
   764  0022                     	ds	2
   765  0024                     ?_sprintf:	
   766  0024                     sprintf@f:	
   767                           ; 2 bytes @ 0x4
   768                           
   769                           
   770                           ; 2 bytes @ 0x4
   771  0024                     	ds	6
   772  002A                     ??_sprintf:	
   773                           
   774                           ; 1 bytes @ 0xA
   775  002A                     	ds	4
   776  002E                     sprintf@ap:	
   777                           
   778                           ; 1 bytes @ 0xE
   779  002E                     	ds	1
   780  002F                     sprintf@flag:	
   781                           
   782                           ; 1 bytes @ 0xF
   783  002F                     	ds	1
   784  0030                     sprintf@prec:	
   785                           
   786                           ; 1 bytes @ 0x10
   787  0030                     	ds	1
   788  0031                     sprintf@val:	
   789                           
   790                           ; 2 bytes @ 0x11
   791  0031                     	ds	2
   792  0033                     sprintf@sp:	
   793                           
   794                           ; 1 bytes @ 0x13
   795  0033                     	ds	1
   796  0034                     sprintf@c:	
   797                           
   798                           ; 1 bytes @ 0x14
   799  0034                     	ds	1
   800  0035                     main@buff:	
   801                           
   802                           ; 10 bytes @ 0x15
   803  0035                     	ds	10
   804  003F                     main@j:	
   805                           
   806                           ; 2 bytes @ 0x1F
   807  003F                     	ds	2
   808  0041                     main@i:	
   809                           
   810                           ; 2 bytes @ 0x21
   811  0041                     	ds	2
   812  0043                     main@p:	
   813                           
   814                           ; 2 bytes @ 0x23
   815  0043                     	ds	2
   816                           
   817                           	psect	maintext
   818  0153                     __pmaintext:	
   819 ;;
   820 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
   821 ;;
   822 ;; *************** function _main *****************
   823 ;; Defined at:
   824 ;;		line 13 in file "main.c"
   825 ;; Parameters:    Size  Location     Type
   826 ;;		None
   827 ;; Auto vars:     Size  Location     Type
   828 ;;  p               2   35[BANK0 ] unsigned int 
   829 ;;  buff           10   21[BANK0 ] unsigned char [10]
   830 ;;  i               2   33[BANK0 ] unsigned int 
   831 ;;  j               2   31[BANK0 ] unsigned int 
   832 ;; Return value:  Size  Location     Type
   833 ;;                  1    wreg      char 
   834 ;; Registers used:
   835 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
   836 ;; Tracked objects:
   837 ;;		On entry : B1F/0
   838 ;;		On exit  : 0/0
   839 ;;		Unchanged: 0/0
   840 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
   841 ;;      Params:         0       0       0       0       0       0
   842 ;;      Locals:         0      16       0       0       0       0
   843 ;;      Temps:          1       0       0       0       0       0
   844 ;;      Totals:         1      16       0       0       0       0
   845 ;;Total ram usage:       17 bytes
   846 ;; Hardware stack levels required when called:    5
   847 ;; This function calls:
   848 ;;		_Basic_Init
   849 ;;		_LCD_CursorPosition
   850 ;;		_LCD_Init
   851 ;;		_LCD_Put
   852 ;;		_Timer1_Init
   853 ;;		_sprintf
   854 ;; This function is called by:
   855 ;;		Startup code after reset
   856 ;; This function uses a non-reentrant model
   857 ;;
   858                           
   859                           
   860                           ;psect for function _main
   861  0153                     _main:	
   862                           
   863                           ;main.c: 15: Basic_Init();
   864                           
   865                           ;incstack = 0
   866                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
   867  0153  3182  2296  3181   	fcall	_Basic_Init
   868                           
   869                           ;main.c: 17: Timer1_Init();
   870  0156  3182  2268  3181   	fcall	_Timer1_Init
   871                           
   872                           ;main.c: 20: LCD_Init();
   873  0159  3180  20EA  3181   	fcall	_LCD_Init
   874                           
   875                           ;main.c: 21: xfunc_out = (void(*)(unsigned char))(LCD_Put);
   876  015C  30C3               	movlw	low _LCD_Put
   877  015D  0020               	movlb	0	; select bank0
   878  015E  00C7               	movwf	_xfunc_out
   879  015F  3002               	movlw	high _LCD_Put
   880  0160  00C8               	movwf	_xfunc_out+1
   881                           
   882                           ;main.c: 23: uint16_t j = 0;
   883  0161  01BF               	clrf	main@j
   884  0162  01C0               	clrf	main@j+1
   885                           
   886                           ;main.c: 24: uint16_t i=500;
   887  0163  30F4               	movlw	244
   888  0164  00C1               	movwf	main@i
   889  0165  3001               	movlw	1
   890  0166  00C2               	movwf	main@i+1
   891  0167                     l2203:	
   892                           ;main.c: 26: uint8_t buff[10];
   893                           ;main.c: 27: while(1)
   894                           
   895                           
   896                           ;main.c: 28: {
   897                           ;main.c: 29: uint16_t p = 0;
   898  0167  01C3               	clrf	main@p
   899  0168  01C4               	clrf	main@p+1
   900                           
   901                           ;main.c: 35: LCD_CursorPosition(0,1);
   902  0169  01F4               	clrf	LCD_CursorPosition@ty
   903  016A  0AF4               	incf	LCD_CursorPosition@ty,f
   904  016B  3000               	movlw	0
   905  016C  3182  2281  3181   	fcall	_LCD_CursorPosition
   906                           
   907                           ;main.c: 36: sprintf(buff,"%d %d",i++,j++);
   908  016F  3060               	movlw	low (STR_1| (0+32768))
   909  0170  0020               	movlb	0	; select bank0
   910  0171  00A4               	movwf	sprintf@f
   911  0172  3082               	movlw	high (STR_1| (0+32768))
   912  0173  00A5               	movwf	sprintf@f+1
   913  0174  0842               	movf	main@i+1,w
   914  0175  00A7               	movwf	?_sprintf+3
   915  0176  0841               	movf	main@i,w
   916  0177  00A6               	movwf	?_sprintf+2
   917  0178  0840               	movf	main@j+1,w
   918  0179  00A9               	movwf	?_sprintf+5
   919  017A  083F               	movf	main@j,w
   920  017B  00A8               	movwf	?_sprintf+4
   921  017C  3035               	movlw	(low (main@buff| 0))& (0+255)
   922  017D  3180  201C  3181   	fcall	_sprintf
   923  0180  3001               	movlw	1
   924  0181  0020               	movlb	0	; select bank0
   925  0182  07BF               	addwf	main@j,f
   926  0183  3000               	movlw	0
   927  0184  3DC0               	addwfc	main@j+1,f
   928  0185  3001               	movlw	1
   929  0186  07C1               	addwf	main@i,f
   930  0187  3000               	movlw	0
   931  0188  3DC2               	addwfc	main@i+1,f
   932  0189                     l2215:	
   933                           ;main.c: 37: while(buff[p])
   934                           
   935  0189  0843               	movf	main@p,w
   936  018A  3E35               	addlw	(low (main@buff| 0))& (0+255)
   937  018B  0086               	movwf	6
   938  018C  0187               	clrf	7
   939  018D  0801               	movf	1,w
   940  018E  1903               	btfsc	3,2
   941  018F  2967               	goto	l2203
   942                           
   943                           ;main.c: 38: {
   944                           ;main.c: 39: LCD_Put(buff[p]);
   945  0190  0843               	movf	main@p,w
   946  0191  3E35               	addlw	(low (main@buff| 0))& (0+255)
   947  0192  0086               	movwf	6
   948  0193  0187               	clrf	7
   949  0194  0801               	movf	1,w
   950  0195  00FB               	movwf	??_main
   951  0196  087B               	movf	??_main,w
   952  0197  00F4               	movwf	LCD_Put@word
   953  0198  3182  22C3  3181   	fcall	_LCD_Put
   954                           
   955                           ;main.c: 40: p++;
   956  019B  3001               	movlw	1
   957  019C  0020               	movlb	0	; select bank0
   958  019D  07C3               	addwf	main@p,f
   959  019E  3000               	movlw	0
   960  019F  3DC4               	addwfc	main@p+1,f
   961  01A0  2989               	goto	l2215
   962  01A1                     __end_of_main:	
   963                           ;main.c: 41: }
   964                           ;main.c: 42: }
   965                           ;main.c: 44: return 0;
   966                           ;	Return value of _main is never used
   967                           
   968                           
   969                           	psect	text1
   970  001C                     __ptext1:	
   971 ;; *************** function _sprintf *****************
   972 ;; Defined at:
   973 ;;		line 492 in file "/opt/microchip/xc8/v1.41/sources/common/doprnt.c"
   974 ;; Parameters:    Size  Location     Type
   975 ;;  sp              1    wreg     PTR unsigned char 
   976 ;;		 -> main@buff(10), 
   977 ;;  f               2    4[BANK0 ] PTR const unsigned char 
   978 ;;		 -> STR_1(6), 
   979 ;; Auto vars:     Size  Location     Type
   980 ;;  sp              1   19[BANK0 ] PTR unsigned char 
   981 ;;		 -> main@buff(10), 
   982 ;;  tmpval          4    0        struct .
   983 ;;  val             2   17[BANK0 ] unsigned int 
   984 ;;  cp              2    0        PTR const unsigned char 
   985 ;;  len             2    0        unsigned int 
   986 ;;  c               1   20[BANK0 ] char 
   987 ;;  prec            1   16[BANK0 ] char 
   988 ;;  flag            1   15[BANK0 ] unsigned char 
   989 ;;  ap              1   14[BANK0 ] PTR void [1]
   990 ;;		 -> ?_sprintf(2), 
   991 ;; Return value:  Size  Location     Type
   992 ;;                  2    4[BANK0 ] int 
   993 ;; Registers used:
   994 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
   995 ;; Tracked objects:
   996 ;;		On entry : 0/0
   997 ;;		On exit  : 0/0
   998 ;;		Unchanged: 0/0
   999 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  1000 ;;      Params:         0       6       0       0       0       0
  1001 ;;      Locals:         0       7       0       0       0       0
  1002 ;;      Temps:          0       4       0       0       0       0
  1003 ;;      Totals:         0      17       0       0       0       0
  1004 ;;Total ram usage:       17 bytes
  1005 ;; Hardware stack levels used:    1
  1006 ;; Hardware stack levels required when called:    3
  1007 ;; This function calls:
  1008 ;;		___lwdiv
  1009 ;;		___lwmod
  1010 ;; This function is called by:
  1011 ;;		_main
  1012 ;; This function uses a non-reentrant model
  1013 ;;
  1014                           
  1015                           
  1016                           ;psect for function _sprintf
  1017  001C                     _sprintf:	
  1018                           
  1019                           ;incstack = 0
  1020                           ; Regs used in _sprintf: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  1021                           ;sprintf@sp stored from wreg
  1022  001C  0020               	movlb	0	; select bank0
  1023  001D  00B3               	movwf	sprintf@sp
  1024                           
  1025                           ;doprnt.c: 494: va_list ap;
  1026                           ;doprnt.c: 499: signed char c;
  1027                           ;doprnt.c: 506: signed char prec;
  1028                           ;doprnt.c: 508: unsigned char flag;
  1029                           ;doprnt.c: 523: union {
  1030                           ;doprnt.c: 524: unsigned long vd;
  1031                           ;doprnt.c: 525: double integ;
  1032                           ;doprnt.c: 526: } tmpval;
  1033                           ;doprnt.c: 528: unsigned int val;
  1034                           ;doprnt.c: 529: unsigned len;
  1035                           ;doprnt.c: 530: const char * cp;
  1036                           ;doprnt.c: 533: *ap = __va_start();
  1037  001E  3026               	movlw	(low ((?_sprintf| 0+2)))& (0+255)
  1038  001F  00AA               	movwf	??_sprintf
  1039  0020  082A               	movf	??_sprintf,w
  1040  0021  00AE               	movwf	sprintf@ap
  1041  0022                     l2189:	
  1042                           ;doprnt.c: 536: while(c = *f++) {
  1043                           
  1044  0022  0825               	movf	sprintf@f+1,w
  1045  0023  00AB               	movwf	??_sprintf+1
  1046  0024  0824               	movf	sprintf@f,w
  1047  0025  00AA               	movwf	??_sprintf
  1048  0026  0AA4               	incf	sprintf@f,f
  1049  0027  1903               	skipnz
  1050  0028  0AA5               	incf	sprintf@f+1,f
  1051  0029  082A               	movf	??_sprintf,w
  1052  002A  0084               	movwf	4
  1053  002B  082B               	movf	??_sprintf+1,w
  1054  002C  0085               	movwf	5
  1055  002D  0800               	movf	0,w	;code access
  1056  002E  00AC               	movwf	??_sprintf+2
  1057  002F  082C               	movf	??_sprintf+2,w
  1058  0030  00B4               	movwf	sprintf@c
  1059  0031  0834               	movf	sprintf@c,w
  1060  0032  1903               	btfsc	3,2
  1061  0033  28E5               	goto	l2191
  1062                           
  1063                           ;doprnt.c: 538: if(c != '%')
  1064  0034  3025               	movlw	37
  1065  0035  0634               	xorwf	sprintf@c,w
  1066  0036  1903               	btfsc	3,2
  1067  0037  2844               	goto	l2145
  1068                           
  1069                           ;doprnt.c: 540: {
  1070                           ;doprnt.c: 541: ((*sp++ = (c)));
  1071  0038  0834               	movf	sprintf@c,w
  1072  0039  00AA               	movwf	??_sprintf
  1073  003A  0833               	movf	sprintf@sp,w
  1074  003B  0086               	movwf	6
  1075  003C  0187               	clrf	7
  1076  003D  082A               	movf	??_sprintf,w
  1077  003E  0081               	movwf	1
  1078  003F  3001               	movlw	1
  1079  0040  00AA               	movwf	??_sprintf
  1080  0041  082A               	movf	??_sprintf,w
  1081  0042  07B3               	addwf	sprintf@sp,f
  1082                           
  1083                           ;doprnt.c: 542: continue;
  1084  0043  2822               	goto	l2189
  1085  0044                     l2145:	
  1086                           
  1087                           ;doprnt.c: 543: }
  1088                           ;doprnt.c: 548: flag = 0;
  1089  0044  01AF               	clrf	sprintf@flag
  1090                           
  1091                           ;doprnt.c: 822: }
  1092                           
  1093                           ;doprnt.c: 813: continue;
  1094                           
  1095                           ;doprnt.c: 802: default:
  1096                           
  1097                           ;doprnt.c: 698: case 'i':
  1098                           ;doprnt.c: 699: break;
  1099                           
  1100                           ;doprnt.c: 697: case 'd':
  1101                           
  1102                           ;doprnt.c: 638: goto alldone;
  1103                           
  1104                           ;doprnt.c: 637: case 0:
  1105                           
  1106                           ;doprnt.c: 635: switch(c = *f++) {
  1107  0045  0825               	movf	sprintf@f+1,w
  1108  0046  00AB               	movwf	??_sprintf+1
  1109  0047  0824               	movf	sprintf@f,w
  1110  0048  00AA               	movwf	??_sprintf
  1111  0049  0AA4               	incf	sprintf@f,f
  1112  004A  1903               	skipnz
  1113  004B  0AA5               	incf	sprintf@f+1,f
  1114  004C  082A               	movf	??_sprintf,w
  1115  004D  0084               	movwf	4
  1116  004E  082B               	movf	??_sprintf+1,w
  1117  004F  0085               	movwf	5
  1118  0050  0800               	movf	0,w	;code access
  1119  0051  00B4               	movwf	sprintf@c
  1120                           
  1121                           ; Switch size 1, requested type "space"
  1122                           ; Number of cases is 3, Range of values is 0 to 105
  1123                           ; switch strategies available:
  1124                           ; Name         Instructions Cycles
  1125                           ; simple_byte           10     6 (average)
  1126                           ; direct_byte          218     6 (fixed)
  1127                           ; jumptable            260     6 (fixed)
  1128                           ;	Chosen strategy is simple_byte
  1129  0052  3A00               	xorlw	0	; case 0
  1130  0053  1903               	skipnz
  1131  0054  28E5               	goto	l2191
  1132  0055  3A64               	xorlw	100	; case 100
  1133  0056  1903               	skipnz
  1134  0057  285C               	goto	l2151
  1135  0058  3A0D               	xorlw	13	; case 105
  1136  0059  1903               	skipnz
  1137  005A  285C               	goto	l2151
  1138  005B  2822               	goto	l2189
  1139  005C                     l2151:	
  1140                           
  1141                           ;doprnt.c: 1253: {
  1142                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  1143  005C  082E               	movf	sprintf@ap,w
  1144  005D  0086               	movwf	6
  1145  005E  0187               	clrf	7
  1146  005F  3F40               	moviw [0]fsr1
  1147  0060  00B1               	movwf	sprintf@val
  1148  0061  3F41               	moviw [1]fsr1
  1149  0062  00B2               	movwf	sprintf@val+1
  1150  0063  3002               	movlw	2
  1151  0064  00AA               	movwf	??_sprintf
  1152  0065  082A               	movf	??_sprintf,w
  1153  0066  07AE               	addwf	sprintf@ap,f
  1154                           
  1155                           ;doprnt.c: 1261: if((int)val < 0) {
  1156  0067  1FB2               	btfss	sprintf@val+1,7
  1157  0068  2872               	goto	l2161
  1158                           
  1159                           ;doprnt.c: 1262: flag |= 0x03;
  1160  0069  3003               	movlw	3
  1161  006A  00AA               	movwf	??_sprintf
  1162  006B  082A               	movf	??_sprintf,w
  1163  006C  04AF               	iorwf	sprintf@flag,f
  1164                           
  1165                           ;doprnt.c: 1263: val = -val;
  1166  006D  09B1               	comf	sprintf@val,f
  1167  006E  09B2               	comf	sprintf@val+1,f
  1168  006F  0AB1               	incf	sprintf@val,f
  1169  0070  1903               	skipnz
  1170  0071  0AB2               	incf	sprintf@val+1,f
  1171  0072                     l2161:	
  1172                           
  1173                           ;doprnt.c: 1264: }
  1174                           ;doprnt.c: 1266: }
  1175                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  1176  0072  01B4               	clrf	sprintf@c
  1177  0073  0AB4               	incf	sprintf@c,f
  1178  0074  3005               	movlw	5
  1179  0075  0634               	xorwf	sprintf@c,w
  1180  0076  1903               	btfsc	3,2
  1181  0077  2897               	goto	l2173
  1182  0078                     l2167:	
  1183                           
  1184                           ;doprnt.c: 1306: if(val < dpowers[c])
  1185  0078  0834               	movf	sprintf@c,w
  1186  0079  00AA               	movwf	??_sprintf
  1187  007A  01AB               	clrf	??_sprintf+1
  1188  007B  35AA               	lslf	??_sprintf,f
  1189  007C  0DAB               	rlf	??_sprintf+1,f
  1190  007D  303C               	movlw	low (_dpowers| (0+32768))
  1191  007E  072A               	addwf	??_sprintf,w
  1192  007F  0084               	movwf	4
  1193  0080  3082               	movlw	high (_dpowers| (0+32768))
  1194  0081  3D2B               	addwfc	??_sprintf+1,w
  1195  0082  0085               	movwf	5
  1196  0083  3F00               	moviw [0]fsr0
  1197  0084  00AC               	movwf	??_sprintf+2
  1198  0085  3F01               	moviw [1]fsr0
  1199  0086  00AD               	movwf	??_sprintf+3
  1200  0087  082D               	movf	??_sprintf+3,w
  1201  0088  0232               	subwf	sprintf@val+1,w
  1202  0089  1D03               	skipz
  1203  008A  288D               	goto	u1915
  1204  008B  082C               	movf	??_sprintf+2,w
  1205  008C  0231               	subwf	sprintf@val,w
  1206  008D                     u1915:	
  1207  008D  1C03               	btfss	3,0
  1208  008E  2897               	goto	l2173
  1209                           
  1210                           ;doprnt.c: 1307: break;
  1211  008F  3001               	movlw	1
  1212  0090  00AA               	movwf	??_sprintf
  1213  0091  082A               	movf	??_sprintf,w
  1214  0092  07B4               	addwf	sprintf@c,f
  1215  0093  3005               	movlw	5
  1216  0094  0634               	xorwf	sprintf@c,w
  1217  0095  1D03               	btfss	3,2
  1218  0096  2878               	goto	l2167
  1219  0097                     l2173:	
  1220                           
  1221                           ;doprnt.c: 1422: {
  1222                           ;doprnt.c: 1438: if(flag & 0x03)
  1223  0097  082F               	movf	sprintf@flag,w
  1224  0098  3903               	andlw	3
  1225  0099  1903               	btfsc	3,2
  1226  009A  28A6               	goto	l2179
  1227                           
  1228                           ;doprnt.c: 1439: ((*sp++ = ('-')));
  1229  009B  302D               	movlw	45
  1230  009C  00AA               	movwf	??_sprintf
  1231  009D  0833               	movf	sprintf@sp,w
  1232  009E  0086               	movwf	6
  1233  009F  0187               	clrf	7
  1234  00A0  082A               	movf	??_sprintf,w
  1235  00A1  0081               	movwf	1
  1236  00A2  3001               	movlw	1
  1237  00A3  00AA               	movwf	??_sprintf
  1238  00A4  082A               	movf	??_sprintf,w
  1239  00A5  07B3               	addwf	sprintf@sp,f
  1240  00A6                     l2179:	
  1241                           
  1242                           ;doprnt.c: 1469: }
  1243                           ;doprnt.c: 1472: prec = c;
  1244  00A6  0834               	movf	sprintf@c,w
  1245  00A7  00AA               	movwf	??_sprintf
  1246  00A8  082A               	movf	??_sprintf,w
  1247  00A9  00B0               	movwf	sprintf@prec
  1248  00AA                     l2187:	
  1249                           ;doprnt.c: 1474: while(prec--) {
  1250                           
  1251  00AA  30FF               	movlw	255
  1252  00AB  00AA               	movwf	??_sprintf
  1253  00AC  082A               	movf	??_sprintf,w
  1254  00AD  07B0               	addwf	sprintf@prec,f
  1255  00AE  0A30               	incf	sprintf@prec,w
  1256  00AF  1903               	btfsc	3,2
  1257  00B0  2822               	goto	l2189
  1258                           
  1259                           ;doprnt.c: 1478: {
  1260                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  1261  00B1  300A               	movlw	10
  1262  00B2  00A0               	movwf	___lwmod@divisor
  1263  00B3  3000               	movlw	0
  1264  00B4  00A1               	movwf	___lwmod@divisor+1
  1265  00B5  0830               	movf	sprintf@prec,w
  1266  00B6  00AA               	movwf	??_sprintf
  1267  00B7  01AB               	clrf	??_sprintf+1
  1268  00B8  35AA               	lslf	??_sprintf,f
  1269  00B9  0DAB               	rlf	??_sprintf+1,f
  1270  00BA  303C               	movlw	low (_dpowers| (0+32768))
  1271  00BB  072A               	addwf	??_sprintf,w
  1272  00BC  0084               	movwf	4
  1273  00BD  3082               	movlw	high (_dpowers| (0+32768))
  1274  00BE  3D2B               	addwfc	??_sprintf+1,w
  1275  00BF  0085               	movwf	5
  1276  00C0  3F00               	moviw [0]fsr0
  1277  00C1  00F1               	movwf	___lwdiv@divisor
  1278  00C2  3F01               	moviw [1]fsr0
  1279  00C3  00F2               	movwf	___lwdiv@divisor+1
  1280  00C4  0832               	movf	sprintf@val+1,w
  1281  00C5  00F4               	movwf	___lwdiv@dividend+1
  1282  00C6  0831               	movf	sprintf@val,w
  1283  00C7  00F3               	movwf	___lwdiv@dividend
  1284  00C8  3181  21DB  3180   	fcall	___lwdiv
  1285  00CB  0872               	movf	?___lwdiv+1,w
  1286  00CC  0020               	movlb	0	; select bank0
  1287  00CD  00A3               	movwf	___lwmod@dividend+1
  1288  00CE  0871               	movf	?___lwdiv,w
  1289  00CF  00A2               	movwf	___lwmod@dividend
  1290  00D0  3182  220F  3180   	fcall	___lwmod
  1291  00D3  0020               	movlb	0	; select bank0
  1292  00D4  0820               	movf	?___lwmod,w
  1293  00D5  3E30               	addlw	48
  1294  00D6  00AC               	movwf	??_sprintf+2
  1295  00D7  082C               	movf	??_sprintf+2,w
  1296  00D8  00B4               	movwf	sprintf@c
  1297                           
  1298                           ;doprnt.c: 1523: }
  1299                           ;doprnt.c: 1524: ((*sp++ = (c)));
  1300  00D9  0834               	movf	sprintf@c,w
  1301  00DA  00AA               	movwf	??_sprintf
  1302  00DB  0833               	movf	sprintf@sp,w
  1303  00DC  0086               	movwf	6
  1304  00DD  0187               	clrf	7
  1305  00DE  082A               	movf	??_sprintf,w
  1306  00DF  0081               	movwf	1
  1307  00E0  3001               	movlw	1
  1308  00E1  00AA               	movwf	??_sprintf
  1309  00E2  082A               	movf	??_sprintf,w
  1310  00E3  07B3               	addwf	sprintf@sp,f
  1311  00E4  28AA               	goto	l2187
  1312  00E5                     l2191:	
  1313                           ;doprnt.c: 1525: }
  1314                           ;doprnt.c: 1533: }
  1315                           ;doprnt.c: 1535: alldone:
  1316                           
  1317                           
  1318                           ;doprnt.c: 1538: *sp = 0;
  1319  00E5  0833               	movf	sprintf@sp,w
  1320  00E6  0086               	movwf	6
  1321  00E7  0187               	clrf	7
  1322  00E8  0181               	clrf	1
  1323  00E9  0008               	return
  1324  00EA                     __end_of_sprintf:	
  1325                           ;doprnt.c: 1540: return 0;
  1326                           ;	Return value of _sprintf is never used
  1327                           
  1328                           
  1329                           	psect	text2
  1330  020F                     __ptext2:	
  1331 ;; *************** function ___lwmod *****************
  1332 ;; Defined at:
  1333 ;;		line 6 in file "/opt/microchip/xc8/v1.41/sources/common/lwmod.c"
  1334 ;; Parameters:    Size  Location     Type
  1335 ;;  divisor         2    0[BANK0 ] unsigned int 
  1336 ;;  dividend        2    2[BANK0 ] unsigned int 
  1337 ;; Auto vars:     Size  Location     Type
  1338 ;;  counter         1   10[COMMON] unsigned char 
  1339 ;; Return value:  Size  Location     Type
  1340 ;;                  2    0[BANK0 ] unsigned int 
  1341 ;; Registers used:
  1342 ;;		wreg, status,2, status,0
  1343 ;; Tracked objects:
  1344 ;;		On entry : 0/0
  1345 ;;		On exit  : 0/0
  1346 ;;		Unchanged: 0/0
  1347 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  1348 ;;      Params:         0       4       0       0       0       0
  1349 ;;      Locals:         1       0       0       0       0       0
  1350 ;;      Temps:          1       0       0       0       0       0
  1351 ;;      Totals:         2       4       0       0       0       0
  1352 ;;Total ram usage:        6 bytes
  1353 ;; Hardware stack levels used:    1
  1354 ;; Hardware stack levels required when called:    2
  1355 ;; This function calls:
  1356 ;;		Nothing
  1357 ;; This function is called by:
  1358 ;;		_sprintf
  1359 ;; This function uses a non-reentrant model
  1360 ;;
  1361                           
  1362                           
  1363                           ;psect for function ___lwmod
  1364  020F                     ___lwmod:	
  1365                           
  1366                           ;incstack = 0
  1367                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  1368  020F  0020               	movlb	0	; select bank0
  1369  0210  0820               	movf	___lwmod@divisor,w
  1370  0211  0421               	iorwf	___lwmod@divisor+1,w
  1371  0212  1903               	btfsc	3,2
  1372  0213  2A37               	goto	l2133
  1373  0214  01FA               	clrf	___lwmod@counter
  1374  0215  0AFA               	incf	___lwmod@counter,f
  1375  0216                     l2123:	
  1376  0216  1BA1               	btfsc	___lwmod@divisor+1,7
  1377  0217  2A22               	goto	l2125
  1378  0218  3001               	movlw	1
  1379  0219                     u1835:	
  1380  0219  35A0               	lslf	___lwmod@divisor,f
  1381  021A  0DA1               	rlf	___lwmod@divisor+1,f
  1382  021B  0B89               	decfsz	9,f
  1383  021C  2A19               	goto	u1835
  1384  021D  3001               	movlw	1
  1385  021E  00F9               	movwf	??___lwmod
  1386  021F  0879               	movf	??___lwmod,w
  1387  0220  07FA               	addwf	___lwmod@counter,f
  1388  0221  2A16               	goto	l2123
  1389  0222                     l2125:	
  1390  0222  0821               	movf	___lwmod@divisor+1,w
  1391  0223  0223               	subwf	___lwmod@dividend+1,w
  1392  0224  1D03               	skipz
  1393  0225  2A28               	goto	u1855
  1394  0226  0820               	movf	___lwmod@divisor,w
  1395  0227  0222               	subwf	___lwmod@dividend,w
  1396  0228                     u1855:	
  1397  0228  1C03               	skipc
  1398  0229  2A2E               	goto	l2129
  1399  022A  0820               	movf	___lwmod@divisor,w
  1400  022B  02A2               	subwf	___lwmod@dividend,f
  1401  022C  0821               	movf	___lwmod@divisor+1,w
  1402  022D  3BA3               	subwfb	___lwmod@dividend+1,f
  1403  022E                     l2129:	
  1404  022E  3001               	movlw	1
  1405  022F                     u1865:	
  1406  022F  36A1               	lsrf	___lwmod@divisor+1,f
  1407  0230  0CA0               	rrf	___lwmod@divisor,f
  1408  0231  0B89               	decfsz	9,f
  1409  0232  2A2F               	goto	u1865
  1410  0233  3001               	movlw	1
  1411  0234  02FA               	subwf	___lwmod@counter,f
  1412  0235  1D03               	btfss	3,2
  1413  0236  2A22               	goto	l2125
  1414  0237                     l2133:	
  1415  0237  0823               	movf	___lwmod@dividend+1,w
  1416  0238  00A1               	movwf	?___lwmod+1
  1417  0239  0822               	movf	___lwmod@dividend,w
  1418  023A  00A0               	movwf	?___lwmod
  1419  023B  0008               	return
  1420  023C                     __end_of___lwmod:	
  1421                           
  1422                           	psect	text3
  1423  01DB                     __ptext3:	
  1424 ;; *************** function ___lwdiv *****************
  1425 ;; Defined at:
  1426 ;;		line 6 in file "/opt/microchip/xc8/v1.41/sources/common/lwdiv.c"
  1427 ;; Parameters:    Size  Location     Type
  1428 ;;  divisor         2    1[COMMON] unsigned int 
  1429 ;;  dividend        2    3[COMMON] unsigned int 
  1430 ;; Auto vars:     Size  Location     Type
  1431 ;;  quotient        2    6[COMMON] unsigned int 
  1432 ;;  counter         1    8[COMMON] unsigned char 
  1433 ;; Return value:  Size  Location     Type
  1434 ;;                  2    1[COMMON] unsigned int 
  1435 ;; Registers used:
  1436 ;;		wreg, status,2, status,0
  1437 ;; Tracked objects:
  1438 ;;		On entry : 0/0
  1439 ;;		On exit  : 0/0
  1440 ;;		Unchanged: 0/0
  1441 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  1442 ;;      Params:         4       0       0       0       0       0
  1443 ;;      Locals:         3       0       0       0       0       0
  1444 ;;      Temps:          1       0       0       0       0       0
  1445 ;;      Totals:         8       0       0       0       0       0
  1446 ;;Total ram usage:        8 bytes
  1447 ;; Hardware stack levels used:    1
  1448 ;; Hardware stack levels required when called:    2
  1449 ;; This function calls:
  1450 ;;		Nothing
  1451 ;; This function is called by:
  1452 ;;		_sprintf
  1453 ;; This function uses a non-reentrant model
  1454 ;;
  1455                           
  1456                           
  1457                           ;psect for function ___lwdiv
  1458  01DB                     ___lwdiv:	
  1459                           
  1460                           ;incstack = 0
  1461                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  1462  01DB  01F6               	clrf	___lwdiv@quotient
  1463  01DC  01F7               	clrf	___lwdiv@quotient+1
  1464  01DD  0871               	movf	___lwdiv@divisor,w
  1465  01DE  0472               	iorwf	___lwdiv@divisor+1,w
  1466  01DF  1903               	btfsc	3,2
  1467  01E0  2A0A               	goto	l1705
  1468  01E1  01F8               	clrf	___lwdiv@counter
  1469  01E2  0AF8               	incf	___lwdiv@counter,f
  1470  01E3                     l1693:	
  1471  01E3  1BF2               	btfsc	___lwdiv@divisor+1,7
  1472  01E4  29EF               	goto	l1695
  1473  01E5  3001               	movlw	1
  1474  01E6                     u1255:	
  1475  01E6  35F1               	lslf	___lwdiv@divisor,f
  1476  01E7  0DF2               	rlf	___lwdiv@divisor+1,f
  1477  01E8  0B89               	decfsz	9,f
  1478  01E9  29E6               	goto	u1255
  1479  01EA  3001               	movlw	1
  1480  01EB  00F5               	movwf	??___lwdiv
  1481  01EC  0875               	movf	??___lwdiv,w
  1482  01ED  07F8               	addwf	___lwdiv@counter,f
  1483  01EE  29E3               	goto	l1693
  1484  01EF                     l1695:	
  1485  01EF  3001               	movlw	1
  1486  01F0                     u1275:	
  1487  01F0  35F6               	lslf	___lwdiv@quotient,f
  1488  01F1  0DF7               	rlf	___lwdiv@quotient+1,f
  1489  01F2  0B89               	decfsz	9,f
  1490  01F3  29F0               	goto	u1275
  1491  01F4  0872               	movf	___lwdiv@divisor+1,w
  1492  01F5  0274               	subwf	___lwdiv@dividend+1,w
  1493  01F6  1D03               	skipz
  1494  01F7  29FA               	goto	u1285
  1495  01F8  0871               	movf	___lwdiv@divisor,w
  1496  01F9  0273               	subwf	___lwdiv@dividend,w
  1497  01FA                     u1285:	
  1498  01FA  1C03               	skipc
  1499  01FB  2A01               	goto	l1701
  1500  01FC  0871               	movf	___lwdiv@divisor,w
  1501  01FD  02F3               	subwf	___lwdiv@dividend,f
  1502  01FE  0872               	movf	___lwdiv@divisor+1,w
  1503  01FF  3BF4               	subwfb	___lwdiv@dividend+1,f
  1504  0200  1476               	bsf	___lwdiv@quotient,0
  1505  0201                     l1701:	
  1506  0201  3001               	movlw	1
  1507  0202                     u1295:	
  1508  0202  36F2               	lsrf	___lwdiv@divisor+1,f
  1509  0203  0CF1               	rrf	___lwdiv@divisor,f
  1510  0204  0B89               	decfsz	9,f
  1511  0205  2A02               	goto	u1295
  1512  0206  3001               	movlw	1
  1513  0207  02F8               	subwf	___lwdiv@counter,f
  1514  0208  1D03               	btfss	3,2
  1515  0209  29EF               	goto	l1695
  1516  020A                     l1705:	
  1517  020A  0877               	movf	___lwdiv@quotient+1,w
  1518  020B  00F2               	movwf	?___lwdiv+1
  1519  020C  0876               	movf	___lwdiv@quotient,w
  1520  020D  00F1               	movwf	?___lwdiv
  1521  020E  0008               	return
  1522  020F                     __end_of___lwdiv:	
  1523                           
  1524                           	psect	text4
  1525  0268                     __ptext4:	
  1526 ;; *************** function _Timer1_Init *****************
  1527 ;; Defined at:
  1528 ;;		line 3 in file "Timer1.c"
  1529 ;; Parameters:    Size  Location     Type
  1530 ;;		None
  1531 ;; Auto vars:     Size  Location     Type
  1532 ;;		None
  1533 ;; Return value:  Size  Location     Type
  1534 ;;                  1    wreg      void 
  1535 ;; Registers used:
  1536 ;;		wreg, status,2, status,0
  1537 ;; Tracked objects:
  1538 ;;		On entry : 0/0
  1539 ;;		On exit  : 0/0
  1540 ;;		Unchanged: 0/0
  1541 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  1542 ;;      Params:         0       0       0       0       0       0
  1543 ;;      Locals:         0       0       0       0       0       0
  1544 ;;      Temps:          1       0       0       0       0       0
  1545 ;;      Totals:         1       0       0       0       0       0
  1546 ;;Total ram usage:        1 bytes
  1547 ;; Hardware stack levels used:    1
  1548 ;; Hardware stack levels required when called:    2
  1549 ;; This function calls:
  1550 ;;		Nothing
  1551 ;; This function is called by:
  1552 ;;		_main
  1553 ;; This function uses a non-reentrant model
  1554 ;;
  1555                           
  1556                           
  1557                           ;psect for function _Timer1_Init
  1558  0268                     _Timer1_Init:	
  1559                           
  1560                           ;Timer1.c: 5: TRISB |= (1<<6);
  1561                           
  1562                           ;incstack = 0
  1563                           ; Regs used in _Timer1_Init: [wreg+status,2+status,0]
  1564  0268  0021               	movlb	1	; select bank1
  1565  0269  170D               	bsf	13,6	;volatile
  1566                           
  1567                           ;Timer1.c: 6: ANSELB &= ~(1<<6);
  1568  026A  30BF               	movlw	191
  1569  026B  00F1               	movwf	??_Timer1_Init
  1570  026C  0871               	movf	??_Timer1_Init,w
  1571  026D  0023               	movlb	3	; select bank3
  1572  026E  058D               	andwf	13,f	;volatile
  1573                           
  1574                           ;Timer1.c: 8: T1CON |= (0x01<<2);
  1575  026F  0020               	movlb	0	; select bank0
  1576  0270  1518               	bsf	24,2	;volatile
  1577                           
  1578                           ;Timer1.c: 9: T1CON &= ~(0x01<<3);
  1579  0271  30F7               	movlw	247
  1580  0272  00F1               	movwf	??_Timer1_Init
  1581  0273  0871               	movf	??_Timer1_Init,w
  1582  0274  0598               	andwf	24,f	;volatile
  1583                           
  1584                           ;Timer1.c: 10: T1CON |= (0x00<<4);
  1585  0275  0818               	movf	24,w	;volatile
  1586                           
  1587                           ;Timer1.c: 11: T1CON |= (0x02<<6);
  1588  0276  1798               	bsf	24,7	;volatile
  1589                           
  1590                           ;Timer1.c: 13: T1GCON = 0x00;
  1591  0277  0199               	clrf	25	;volatile
  1592                           
  1593                           ;Timer1.c: 15: TMR1 = 0x0000;
  1594  0278  0196               	clrf	22	;volatile
  1595  0279  0197               	clrf	23	;volatile
  1596                           
  1597                           ;Timer1.c: 17: TMR1IE = 1;
  1598  027A  0021               	movlb	1	; select bank1
  1599  027B  1411               	bsf	17,0	;volatile
  1600                           
  1601                           ;Timer1.c: 18: TMR1IF = 0;
  1602  027C  0020               	movlb	0	; select bank0
  1603  027D  1011               	bcf	17,0	;volatile
  1604                           
  1605                           ;Timer1.c: 19: PEIE = 1;
  1606  027E  170B               	bsf	11,6	;volatile
  1607                           
  1608                           ;Timer1.c: 20: GIE = 1;
  1609  027F  178B               	bsf	11,7	;volatile
  1610  0280  0008               	return
  1611  0281                     __end_of_Timer1_Init:	
  1612                           
  1613                           	psect	text5
  1614  02C3                     __ptext5:	
  1615 ;; *************** function _LCD_Put *****************
  1616 ;; Defined at:
  1617 ;;		line 54 in file "LCD.c"
  1618 ;; Parameters:    Size  Location     Type
  1619 ;;  word            1    4[COMMON] char 
  1620 ;; Auto vars:     Size  Location     Type
  1621 ;;		None
  1622 ;; Return value:  Size  Location     Type
  1623 ;;                  1    wreg      void 
  1624 ;; Registers used:
  1625 ;;		wreg, status,2, status,0, pclath, cstack
  1626 ;; Tracked objects:
  1627 ;;		On entry : 0/0
  1628 ;;		On exit  : 0/0
  1629 ;;		Unchanged: 0/0
  1630 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  1631 ;;      Params:         1       0       0       0       0       0
  1632 ;;      Locals:         0       0       0       0       0       0
  1633 ;;      Temps:          0       0       0       0       0       0
  1634 ;;      Totals:         1       0       0       0       0       0
  1635 ;;Total ram usage:        1 bytes
  1636 ;; Hardware stack levels used:    1
  1637 ;; Hardware stack levels required when called:    3
  1638 ;; This function calls:
  1639 ;;		_LCD_WriteData
  1640 ;; This function is called by:
  1641 ;;		_main
  1642 ;;		_xputc
  1643 ;; This function uses a non-reentrant model
  1644 ;;
  1645                           
  1646                           
  1647                           ;psect for function _LCD_Put
  1648  02C3                     _LCD_Put:	
  1649                           
  1650                           ;LCD.c: 56: RA4 = 1;
  1651                           
  1652                           ;incstack = 0
  1653                           ; Regs used in _LCD_Put: [wreg+status,2+status,0+pclath+cstack]
  1654  02C3  0020               	movlb	0	; select bank0
  1655  02C4  160C               	bsf	12,4	;volatile
  1656                           
  1657                           ;LCD.c: 57: LCD_WriteData(word);
  1658  02C5  0874               	movf	LCD_Put@word,w
  1659  02C6  3181  21A1         	fcall	_LCD_WriteData
  1660  02C8  0008               	return
  1661  02C9                     __end_of_LCD_Put:	
  1662                           
  1663                           	psect	text6
  1664  00EA                     __ptext6:	
  1665 ;; *************** function _LCD_Init *****************
  1666 ;; Defined at:
  1667 ;;		line 28 in file "LCD.c"
  1668 ;; Parameters:    Size  Location     Type
  1669 ;;		None
  1670 ;; Auto vars:     Size  Location     Type
  1671 ;;		None
  1672 ;; Return value:  Size  Location     Type
  1673 ;;                  1    wreg      void 
  1674 ;; Registers used:
  1675 ;;		wreg, status,2, status,0, pclath, cstack
  1676 ;; Tracked objects:
  1677 ;;		On entry : 0/0
  1678 ;;		On exit  : 0/0
  1679 ;;		Unchanged: 0/0
  1680 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  1681 ;;      Params:         0       0       0       0       0       0
  1682 ;;      Locals:         0       0       0       0       0       0
  1683 ;;      Temps:          2       0       0       0       0       0
  1684 ;;      Totals:         2       0       0       0       0       0
  1685 ;;Total ram usage:        2 bytes
  1686 ;; Hardware stack levels used:    1
  1687 ;; Hardware stack levels required when called:    4
  1688 ;; This function calls:
  1689 ;;		_LCD_DisplayClear
  1690 ;;		_LCD_WriteData
  1691 ;; This function is called by:
  1692 ;;		_main
  1693 ;; This function uses a non-reentrant model
  1694 ;;
  1695                           
  1696                           
  1697                           ;psect for function _LCD_Init
  1698  00EA                     _LCD_Init:	
  1699                           
  1700                           ;LCD.c: 30: RA4 = 0;
  1701                           
  1702                           ;incstack = 0
  1703                           ; Regs used in _LCD_Init: [wreg+status,2+status,0+pclath+cstack]
  1704  00EA  0020               	movlb	0	; select bank0
  1705  00EB  120C               	bcf	12,4	;volatile
  1706                           
  1707                           ;LCD.c: 31: RA3 = 0;
  1708  00EC  118C               	bcf	12,3	;volatile
  1709                           
  1710                           ;LCD.c: 33: _delay((unsigned long)((30)*(32000000/4000.0)));
  1711  00ED  3002               	movlw	2
  1712  00EE  00F6               	movwf	??_LCD_Init+1
  1713  00EF  3038               	movlw	56
  1714  00F0  00F5               	movwf	??_LCD_Init
  1715  00F1  30AD               	movlw	173
  1716  00F2                     u1977:	
  1717  00F2  0B89               	decfsz	9,f
  1718  00F3  28F2               	goto	u1977
  1719  00F4  0BF5               	decfsz	??_LCD_Init,f
  1720  00F5  28F2               	goto	u1977
  1721  00F6  0BF6               	decfsz	??_LCD_Init+1,f
  1722  00F7  28F2               	goto	u1977
  1723  00F8  0000               	nop
  1724                           
  1725                           ;LCD.c: 34: PORTB = ( ((0x03&0x0C)<<1)|(0x03&0x03) );
  1726  00F9  3003               	movlw	3
  1727  00FA  0020               	movlb	0	; select bank0
  1728  00FB  008D               	movwf	13	;volatile
  1729                           
  1730                           ;LCD.c: 35: {RA3 = 1; _delay((unsigned long)((1)*(32000000/4000000.0))); RA3 = 0; _delay
      +                          ((unsigned long)((1)*(32000000/4000000.0)));};
  1731  00FC  158C               	bsf	12,3	;volatile
  1732  00FD  3200               	nop2	;2 cycle nop
  1733  00FE  3200               	nop2	;2 cycle nop
  1734  00FF  3200               	nop2	;2 cycle nop
  1735  0100  3200               	nop2	;2 cycle nop
  1736  0101  0020               	movlb	0	; select bank0
  1737  0102  118C               	bcf	12,3	;volatile
  1738  0103  3200               	nop2	;2 cycle nop
  1739  0104  3200               	nop2	;2 cycle nop
  1740  0105  3200               	nop2	;2 cycle nop
  1741  0106  3200               	nop2	;2 cycle nop
  1742                           
  1743                           ;LCD.c: 36: _delay((unsigned long)((5)*(32000000/4000.0)));
  1744  0107  3034               	movlw	52
  1745  0108  00F5               	movwf	??_LCD_Init
  1746  0109  30F2               	movlw	242
  1747  010A                     u1987:	
  1748  010A  0B89               	decfsz	9,f
  1749  010B  290A               	goto	u1987
  1750  010C  0BF5               	decfsz	??_LCD_Init,f
  1751  010D  290A               	goto	u1987
  1752                           
  1753                           ;LCD.c: 37: {RA3 = 1; _delay((unsigned long)((1)*(32000000/4000000.0))); RA3 = 0; _delay
      +                          ((unsigned long)((1)*(32000000/4000000.0)));};
  1754  010E  0020               	movlb	0	; select bank0
  1755  010F  158C               	bsf	12,3	;volatile
  1756  0110  3200               	nop2	;2 cycle nop
  1757  0111  3200               	nop2	;2 cycle nop
  1758  0112  3200               	nop2	;2 cycle nop
  1759  0113  3200               	nop2	;2 cycle nop
  1760  0114  0020               	movlb	0	; select bank0
  1761  0115  118C               	bcf	12,3	;volatile
  1762  0116  3200               	nop2	;2 cycle nop
  1763  0117  3200               	nop2	;2 cycle nop
  1764  0118  3200               	nop2	;2 cycle nop
  1765  0119  3200               	nop2	;2 cycle nop
  1766                           
  1767                           ;LCD.c: 38: _delay((unsigned long)((400)*(32000000/4000000.0)));
  1768  011A  3005               	movlw	5
  1769  011B  00F5               	movwf	??_LCD_Init
  1770  011C  3026               	movlw	38
  1771  011D                     u1997:	
  1772  011D  0B89               	decfsz	9,f
  1773  011E  291D               	goto	u1997
  1774  011F  0BF5               	decfsz	??_LCD_Init,f
  1775  0120  291D               	goto	u1997
  1776  0121  3200               	nop2
  1777                           
  1778                           ;LCD.c: 39: {RA3 = 1; _delay((unsigned long)((1)*(32000000/4000000.0))); RA3 = 0; _delay
      +                          ((unsigned long)((1)*(32000000/4000000.0)));};
  1779  0122  0020               	movlb	0	; select bank0
  1780  0123  158C               	bsf	12,3	;volatile
  1781  0124  3200               	nop2	;2 cycle nop
  1782  0125  3200               	nop2	;2 cycle nop
  1783  0126  3200               	nop2	;2 cycle nop
  1784  0127  3200               	nop2	;2 cycle nop
  1785  0128  0020               	movlb	0	; select bank0
  1786  0129  118C               	bcf	12,3	;volatile
  1787  012A  3200               	nop2	;2 cycle nop
  1788  012B  3200               	nop2	;2 cycle nop
  1789  012C  3200               	nop2	;2 cycle nop
  1790  012D  3200               	nop2	;2 cycle nop
  1791                           
  1792                           ;LCD.c: 40: _delay((unsigned long)((400)*(32000000/4000000.0)));
  1793  012E  3005               	movlw	5
  1794  012F  00F5               	movwf	??_LCD_Init
  1795  0130  3026               	movlw	38
  1796  0131                     u2007:	
  1797  0131  0B89               	decfsz	9,f
  1798  0132  2931               	goto	u2007
  1799  0133  0BF5               	decfsz	??_LCD_Init,f
  1800  0134  2931               	goto	u2007
  1801  0135  3200               	nop2
  1802                           
  1803                           ;LCD.c: 41: PORTB = ( ((0x02&0x0C)<<1)|(0x02&0x03) );
  1804  0136  3002               	movlw	2
  1805  0137  0020               	movlb	0	; select bank0
  1806  0138  008D               	movwf	13	;volatile
  1807                           
  1808                           ;LCD.c: 42: {RA3 = 1; _delay((unsigned long)((1)*(32000000/4000000.0))); RA3 = 0; _delay
      +                          ((unsigned long)((1)*(32000000/4000000.0)));};
  1809  0139  158C               	bsf	12,3	;volatile
  1810  013A  3200               	nop2	;2 cycle nop
  1811  013B  3200               	nop2	;2 cycle nop
  1812  013C  3200               	nop2	;2 cycle nop
  1813  013D  3200               	nop2	;2 cycle nop
  1814  013E  0020               	movlb	0	; select bank0
  1815  013F  118C               	bcf	12,3	;volatile
  1816  0140  3200               	nop2	;2 cycle nop
  1817  0141  3200               	nop2	;2 cycle nop
  1818  0142  3200               	nop2	;2 cycle nop
  1819  0143  3200               	nop2	;2 cycle nop
  1820                           
  1821                           ;LCD.c: 44: LCD_WriteData(0x28);
  1822  0144  3028               	movlw	40
  1823  0145  3181  21A1  3180   	fcall	_LCD_WriteData
  1824                           
  1825                           ;LCD.c: 45: LCD_WriteData(0x0c);
  1826  0148  300C               	movlw	12
  1827  0149  3181  21A1  3180   	fcall	_LCD_WriteData
  1828                           
  1829                           ;LCD.c: 46: LCD_DisplayClear();
  1830  014C  3182  22AB  3180   	fcall	_LCD_DisplayClear
  1831                           
  1832                           ;LCD.c: 47: LCD_WriteData(0x06);
  1833  014F  3006               	movlw	6
  1834  0150  3181  21A1         	fcall	_LCD_WriteData
  1835  0152  0008               	return
  1836  0153                     __end_of_LCD_Init:	
  1837                           
  1838                           	psect	text7
  1839  02AB                     __ptext7:	
  1840 ;; *************** function _LCD_DisplayClear *****************
  1841 ;; Defined at:
  1842 ;;		line 64 in file "LCD.c"
  1843 ;; Parameters:    Size  Location     Type
  1844 ;;		None
  1845 ;; Auto vars:     Size  Location     Type
  1846 ;;		None
  1847 ;; Return value:  Size  Location     Type
  1848 ;;                  1    wreg      void 
  1849 ;; Registers used:
  1850 ;;		wreg, status,2, status,0, pclath, cstack
  1851 ;; Tracked objects:
  1852 ;;		On entry : 0/0
  1853 ;;		On exit  : 0/0
  1854 ;;		Unchanged: 0/0
  1855 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  1856 ;;      Params:         0       0       0       0       0       0
  1857 ;;      Locals:         0       0       0       0       0       0
  1858 ;;      Temps:          1       0       0       0       0       0
  1859 ;;      Totals:         1       0       0       0       0       0
  1860 ;;Total ram usage:        1 bytes
  1861 ;; Hardware stack levels used:    1
  1862 ;; Hardware stack levels required when called:    3
  1863 ;; This function calls:
  1864 ;;		_LCD_WriteData
  1865 ;; This function is called by:
  1866 ;;		_LCD_Init
  1867 ;; This function uses a non-reentrant model
  1868 ;;
  1869                           
  1870                           
  1871                           ;psect for function _LCD_DisplayClear
  1872  02AB                     _LCD_DisplayClear:	
  1873                           
  1874                           ;LCD.c: 66: RA4 = 0;
  1875                           
  1876                           ;incstack = 0
  1877                           ; Regs used in _LCD_DisplayClear: [wreg+status,2+status,0+pclath+cstack]
  1878  02AB  0020               	movlb	0	; select bank0
  1879  02AC  120C               	bcf	12,4	;volatile
  1880                           
  1881                           ;LCD.c: 67: LCD_WriteData(0x01);
  1882  02AD  3001               	movlw	1
  1883  02AE  3181  21A1  3182   	fcall	_LCD_WriteData
  1884                           
  1885                           ;LCD.c: 68: _delay((unsigned long)((2)*(32000000/4000.0)));
  1886  02B1  3015               	movlw	21
  1887  02B2  00F4               	movwf	??_LCD_DisplayClear
  1888  02B3  30C6               	movlw	198
  1889  02B4                     u2017:	
  1890  02B4  0B89               	decfsz	9,f
  1891  02B5  2AB4               	goto	u2017
  1892  02B6  0BF4               	decfsz	??_LCD_DisplayClear,f
  1893  02B7  2AB4               	goto	u2017
  1894  02B8  3200               	nop2
  1895  02B9  0008               	return
  1896  02BA                     __end_of_LCD_DisplayClear:	
  1897                           
  1898                           	psect	text8
  1899  0281                     __ptext8:	
  1900 ;; *************** function _LCD_CursorPosition *****************
  1901 ;; Defined at:
  1902 ;;		line 86 in file "LCD.c"
  1903 ;; Parameters:    Size  Location     Type
  1904 ;;  tx              1    wreg     unsigned char 
  1905 ;;  ty              1    4[COMMON] unsigned char 
  1906 ;; Auto vars:     Size  Location     Type
  1907 ;;  tx              1    6[COMMON] unsigned char 
  1908 ;; Return value:  Size  Location     Type
  1909 ;;                  1    wreg      void 
  1910 ;; Registers used:
  1911 ;;		wreg, status,2, status,0, pclath, cstack
  1912 ;; Tracked objects:
  1913 ;;		On entry : 0/0
  1914 ;;		On exit  : 0/0
  1915 ;;		Unchanged: 0/0
  1916 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  1917 ;;      Params:         1       0       0       0       0       0
  1918 ;;      Locals:         1       0       0       0       0       0
  1919 ;;      Temps:          1       0       0       0       0       0
  1920 ;;      Totals:         3       0       0       0       0       0
  1921 ;;Total ram usage:        3 bytes
  1922 ;; Hardware stack levels used:    1
  1923 ;; Hardware stack levels required when called:    3
  1924 ;; This function calls:
  1925 ;;		_LCD_WriteData
  1926 ;; This function is called by:
  1927 ;;		_main
  1928 ;; This function uses a non-reentrant model
  1929 ;;
  1930                           
  1931                           
  1932                           ;psect for function _LCD_CursorPosition
  1933  0281                     _LCD_CursorPosition:	
  1934                           
  1935                           ;incstack = 0
  1936                           ; Regs used in _LCD_CursorPosition: [wreg+status,2+status,0+pclath+cstack]
  1937                           ;LCD_CursorPosition@tx stored from wreg
  1938  0281  00F6               	movwf	LCD_CursorPosition@tx
  1939                           
  1940                           ;LCD.c: 88: RA4 = 0;
  1941  0282  0020               	movlb	0	; select bank0
  1942  0283  120C               	bcf	12,4	;volatile
  1943                           
  1944                           ;LCD.c: 89: LCD_WriteData(0x80|tx|(0x40*ty));
  1945  0284  0874               	movf	LCD_CursorPosition@ty,w
  1946  0285  00F5               	movwf	??_LCD_CursorPosition
  1947  0286  3005               	movlw	5
  1948  0287                     u1375:	
  1949  0287  35F5               	lslf	??_LCD_CursorPosition,f
  1950  0288  3EFF               	addlw	-1
  1951  0289  1D03               	skipz
  1952  028A  2A87               	goto	u1375
  1953  028B  3575               	lslf	??_LCD_CursorPosition,w
  1954  028C  0476               	iorwf	LCD_CursorPosition@tx,w
  1955  028D  3880               	iorlw	-128
  1956  028E  3181  21A1  3182   	fcall	_LCD_WriteData
  1957                           
  1958                           ;LCD.c: 90: _delay((unsigned long)((40)*(32000000/4000000.0)));
  1959  0291  306A               	movlw	106
  1960  0292                     u2027:	
  1961  0292  0B89               	decfsz	9,f
  1962  0293  2A92               	goto	u2027
  1963  0294  3200               	nop2
  1964  0295  0008               	return
  1965  0296                     __end_of_LCD_CursorPosition:	
  1966                           
  1967                           	psect	text9
  1968  01A1                     __ptext9:	
  1969 ;; *************** function _LCD_WriteData *****************
  1970 ;; Defined at:
  1971 ;;		line 15 in file "LCD.c"
  1972 ;; Parameters:    Size  Location     Type
  1973 ;;  point           1    wreg     char 
  1974 ;; Auto vars:     Size  Location     Type
  1975 ;;  point           1    3[COMMON] char 
  1976 ;; Return value:  Size  Location     Type
  1977 ;;                  1    wreg      void 
  1978 ;; Registers used:
  1979 ;;		wreg, status,2, status,0
  1980 ;; Tracked objects:
  1981 ;;		On entry : 0/0
  1982 ;;		On exit  : 0/0
  1983 ;;		Unchanged: 0/0
  1984 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  1985 ;;      Params:         0       0       0       0       0       0
  1986 ;;      Locals:         1       0       0       0       0       0
  1987 ;;      Temps:          2       0       0       0       0       0
  1988 ;;      Totals:         3       0       0       0       0       0
  1989 ;;Total ram usage:        3 bytes
  1990 ;; Hardware stack levels used:    1
  1991 ;; Hardware stack levels required when called:    2
  1992 ;; This function calls:
  1993 ;;		Nothing
  1994 ;; This function is called by:
  1995 ;;		_LCD_Init
  1996 ;;		_LCD_Put
  1997 ;;		_LCD_DisplayClear
  1998 ;;		_LCD_CursorPosition
  1999 ;;		_LCD_CursorHome
  2000 ;;		_LCD_CursorShift
  2001 ;;		_LCD_DispShift
  2002 ;; This function uses a non-reentrant model
  2003 ;;
  2004                           
  2005                           
  2006                           ;psect for function _LCD_WriteData
  2007  01A1                     _LCD_WriteData:	
  2008                           
  2009                           ;incstack = 0
  2010                           ; Regs used in _LCD_WriteData: [wreg+status,2+status,0]
  2011                           ;LCD_WriteData@point stored from wreg
  2012  01A1  00F3               	movwf	LCD_WriteData@point
  2013                           
  2014                           ;LCD.c: 17: _delay((unsigned long)((80)*(32000000/4000000.0)));
  2015  01A2  30D5               	movlw	213
  2016  01A3                     u2037:	
  2017  01A3  0B89               	decfsz	9,f
  2018  01A4  29A3               	goto	u2037
  2019  01A5  0000               	nop
  2020                           
  2021                           ;LCD.c: 18: PORTB = ( (((point>>4)&0x0F&0x0C)<<1)|((point>>4)&0x0F&0x03) );
  2022  01A6  0873               	movf	LCD_WriteData@point,w
  2023  01A7  00F1               	movwf	??_LCD_WriteData
  2024  01A8  3004               	movlw	4
  2025  01A9                     u915:	
  2026  01A9  1003               	clrc
  2027  01AA  1BF1               	btfsc	??_LCD_WriteData,7
  2028  01AB  1403               	setc
  2029  01AC  0CF1               	rrf	??_LCD_WriteData,f
  2030  01AD  0B89               	decfsz	9,f
  2031  01AE  29A9               	goto	u915
  2032  01AF  3003               	movlw	3
  2033  01B0  0571               	andwf	??_LCD_WriteData,w
  2034  01B1  00F2               	movwf	??_LCD_WriteData+1
  2035  01B2  0E73               	swapf	LCD_WriteData@point,w
  2036  01B3  390F               	andlw	15
  2037  01B4  1989               	btfsc	9,3
  2038  01B5  38F0               	iorlw	240
  2039  01B6  390C               	andlw	12
  2040  01B7  0709               	addwf	9,w
  2041  01B8  0472               	iorwf	??_LCD_WriteData+1,w
  2042  01B9  0020               	movlb	0	; select bank0
  2043  01BA  008D               	movwf	13	;volatile
  2044                           
  2045                           ;LCD.c: 19: {RA3 = 1; _delay((unsigned long)((1)*(32000000/4000000.0))); RA3 = 0; _delay
      +                          ((unsigned long)((1)*(32000000/4000000.0)));};
  2046  01BB  158C               	bsf	12,3	;volatile
  2047  01BC  3200               	nop2	;2 cycle nop
  2048  01BD  3200               	nop2	;2 cycle nop
  2049  01BE  3200               	nop2	;2 cycle nop
  2050  01BF  3200               	nop2	;2 cycle nop
  2051  01C0  0020               	movlb	0	; select bank0
  2052  01C1  118C               	bcf	12,3	;volatile
  2053  01C2  3200               	nop2	;2 cycle nop
  2054  01C3  3200               	nop2	;2 cycle nop
  2055  01C4  3200               	nop2	;2 cycle nop
  2056  01C5  3200               	nop2	;2 cycle nop
  2057                           
  2058                           ;LCD.c: 20: PORTB = ( ((point&0x0F&0x0C)<<1)|(point&0x0F&0x03) );
  2059  01C6  3003               	movlw	3
  2060  01C7  0573               	andwf	LCD_WriteData@point,w
  2061  01C8  00F1               	movwf	??_LCD_WriteData
  2062  01C9  0873               	movf	LCD_WriteData@point,w
  2063  01CA  390C               	andlw	12
  2064  01CB  0709               	addwf	9,w
  2065  01CC  0471               	iorwf	??_LCD_WriteData,w
  2066  01CD  0020               	movlb	0	; select bank0
  2067  01CE  008D               	movwf	13	;volatile
  2068                           
  2069                           ;LCD.c: 21: {RA3 = 1; _delay((unsigned long)((1)*(32000000/4000000.0))); RA3 = 0; _delay
      +                          ((unsigned long)((1)*(32000000/4000000.0)));};
  2070  01CF  158C               	bsf	12,3	;volatile
  2071  01D0  3200               	nop2	;2 cycle nop
  2072  01D1  3200               	nop2	;2 cycle nop
  2073  01D2  3200               	nop2	;2 cycle nop
  2074  01D3  3200               	nop2	;2 cycle nop
  2075  01D4  0020               	movlb	0	; select bank0
  2076  01D5  118C               	bcf	12,3	;volatile
  2077  01D6  3200               	nop2	;2 cycle nop
  2078  01D7  3200               	nop2	;2 cycle nop
  2079  01D8  3200               	nop2	;2 cycle nop
  2080  01D9  3200               	nop2	;2 cycle nop
  2081  01DA  0008               	return
  2082  01DB                     __end_of_LCD_WriteData:	
  2083                           
  2084                           	psect	text10
  2085  0296                     __ptext10:	
  2086 ;; *************** function _Basic_Init *****************
  2087 ;; Defined at:
  2088 ;;		line 47 in file "main.c"
  2089 ;; Parameters:    Size  Location     Type
  2090 ;;		None
  2091 ;; Auto vars:     Size  Location     Type
  2092 ;;		None
  2093 ;; Return value:  Size  Location     Type
  2094 ;;                  1    wreg      char 
  2095 ;; Registers used:
  2096 ;;		wreg, status,2
  2097 ;; Tracked objects:
  2098 ;;		On entry : 0/0
  2099 ;;		On exit  : 0/0
  2100 ;;		Unchanged: 0/0
  2101 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  2102 ;;      Params:         0       0       0       0       0       0
  2103 ;;      Locals:         0       0       0       0       0       0
  2104 ;;      Temps:          0       0       0       0       0       0
  2105 ;;      Totals:         0       0       0       0       0       0
  2106 ;;Total ram usage:        0 bytes
  2107 ;; Hardware stack levels used:    1
  2108 ;; Hardware stack levels required when called:    2
  2109 ;; This function calls:
  2110 ;;		Nothing
  2111 ;; This function is called by:
  2112 ;;		_main
  2113 ;; This function uses a non-reentrant model
  2114 ;;
  2115                           
  2116                           
  2117                           ;psect for function _Basic_Init
  2118  0296                     _Basic_Init:	
  2119                           
  2120                           ;main.c: 49: OSCCON = 0xF3;
  2121                           
  2122                           ;incstack = 0
  2123                           ; Regs used in _Basic_Init: [wreg+status,2]
  2124  0296  30F3               	movlw	243
  2125  0297  0021               	movlb	1	; select bank1
  2126  0298  0099               	movwf	25	;volatile
  2127                           
  2128                           ;main.c: 53: TRISA = 0x07;
  2129  0299  3007               	movlw	7
  2130  029A  008C               	movwf	12	;volatile
  2131                           
  2132                           ;main.c: 54: ANSELA = 0x07;
  2133  029B  3007               	movlw	7
  2134  029C  0023               	movlb	3	; select bank3
  2135  029D  008C               	movwf	12	;volatile
  2136                           
  2137                           ;main.c: 56: TRISB = 0x40;
  2138  029E  3040               	movlw	64
  2139  029F  0021               	movlb	1	; select bank1
  2140  02A0  008D               	movwf	13	;volatile
  2141                           
  2142                           ;main.c: 57: ANSELB = 0x00;
  2143  02A1  0023               	movlb	3	; select bank3
  2144  02A2  018D               	clrf	13	;volatile
  2145                           
  2146                           ;main.c: 59: APFCON0 = 0x08;
  2147  02A3  3008               	movlw	8
  2148  02A4  0022               	movlb	2	; select bank2
  2149  02A5  009D               	movwf	29	;volatile
  2150                           
  2151                           ;main.c: 60: APFCON1 = 0x00;
  2152  02A6  019E               	clrf	30	;volatile
  2153                           
  2154                           ;main.c: 62: PORTA = 0x00;
  2155  02A7  0020               	movlb	0	; select bank0
  2156  02A8  018C               	clrf	12	;volatile
  2157                           
  2158                           ;main.c: 63: PORTB = 0x00;
  2159  02A9  018D               	clrf	13	;volatile
  2160  02AA  0008               	return
  2161  02AB                     __end_of_Basic_Init:	
  2162                           ;main.c: 65: return 0;
  2163                           ;	Return value of _Basic_Init is never used
  2164                           
  2165                           
  2166                           	psect	intentry
  2167  0004                     __pintentry:	
  2168 ;; *************** function _Handler *****************
  2169 ;; Defined at:
  2170 ;;		line 68 in file "main.c"
  2171 ;; Parameters:    Size  Location     Type
  2172 ;;		None
  2173 ;; Auto vars:     Size  Location     Type
  2174 ;;		None
  2175 ;; Return value:  Size  Location     Type
  2176 ;;                  1    wreg      void 
  2177 ;; Registers used:
  2178 ;;		status,2, status,0, pclath, cstack
  2179 ;; Tracked objects:
  2180 ;;		On entry : 0/0
  2181 ;;		On exit  : 0/0
  2182 ;;		Unchanged: 0/0
  2183 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  2184 ;;      Params:         0       0       0       0       0       0
  2185 ;;      Locals:         0       0       0       0       0       0
  2186 ;;      Temps:          1       0       0       0       0       0
  2187 ;;      Totals:         1       0       0       0       0       0
  2188 ;;Total ram usage:        1 bytes
  2189 ;; Hardware stack levels used:    1
  2190 ;; Hardware stack levels required when called:    1
  2191 ;; This function calls:
  2192 ;;		_Timer1_Handler
  2193 ;; This function is called by:
  2194 ;;		Interrupt level 1
  2195 ;; This function uses a non-reentrant model
  2196 ;;
  2197                           
  2198  0004                     _Handler:	
  2199                           
  2200                           ;incstack = 0
  2201  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
  2202                           
  2203                           ; Regs used in _Handler: [status,2+status,0+pclath+cstack]
  2204  0005  3180               	pagesel	$
  2205  0006  0020               	movlb	0	; select bank0
  2206  0007  087F               	movf	127,w
  2207  0008  00F0               	movwf	??_Handler
  2208                           
  2209                           ;main.c: 70: Timer1_Handler();
  2210  0009  3182  22BA         	fcall	_Timer1_Handler
  2211  000B  0870               	movf	??_Handler,w
  2212  000C  0020               	movlb	0	; select bank0
  2213  000D  00FF               	movwf	127
  2214  000E  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
  2215  000F  0009               	retfie
  2216  0010                     __end_of_Handler:	
  2217                           
  2218                           	psect	text12
  2219  02BA                     __ptext12:	
  2220 ;; *************** function _Timer1_Handler *****************
  2221 ;; Defined at:
  2222 ;;		line 33 in file "Timer1.c"
  2223 ;; Parameters:    Size  Location     Type
  2224 ;;		None
  2225 ;; Auto vars:     Size  Location     Type
  2226 ;;		None
  2227 ;; Return value:  Size  Location     Type
  2228 ;;                  1    wreg      void 
  2229 ;; Registers used:
  2230 ;;		None
  2231 ;; Tracked objects:
  2232 ;;		On entry : 0/0
  2233 ;;		On exit  : 0/0
  2234 ;;		Unchanged: 0/0
  2235 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  2236 ;;      Params:         0       0       0       0       0       0
  2237 ;;      Locals:         0       0       0       0       0       0
  2238 ;;      Temps:          0       0       0       0       0       0
  2239 ;;      Totals:         0       0       0       0       0       0
  2240 ;;Total ram usage:        0 bytes
  2241 ;; Hardware stack levels used:    1
  2242 ;; This function calls:
  2243 ;;		Nothing
  2244 ;; This function is called by:
  2245 ;;		_Handler
  2246 ;; This function uses a non-reentrant model
  2247 ;;
  2248                           
  2249                           
  2250                           ;psect for function _Timer1_Handler
  2251  02BA                     _Timer1_Handler:	
  2252                           
  2253                           ;Timer1.c: 35: if(TMR1IF&&TMR1IE)
  2254                           
  2255                           ;incstack = 0
  2256                           ; Regs used in _Timer1_Handler: []
  2257  02BA  0020               	movlb	0	; select bank0
  2258  02BB  1C11               	btfss	17,0	;volatile
  2259  02BC  0008               	return
  2260  02BD  0021               	movlb	1	; select bank1
  2261  02BE  1C11               	btfss	17,0	;volatile
  2262  02BF  0008               	return
  2263                           
  2264                           ;Timer1.c: 36: {
  2265                           ;Timer1.c: 37: TMR1IF = 0;
  2266  02C0  0020               	movlb	0	; select bank0
  2267  02C1  1011               	bcf	17,0	;volatile
  2268  02C2  0008               	return
  2269  02C3                     __end_of_Timer1_Handler:	
  2270  007E                     btemp	set	126	;btemp
  2271  007E                     int$flags	set	126
  2272  007E                     wtemp0	set	126
=======
   733                           ;main.c: 16: xfunc_out = (void(*)(unsigned char))(LCD_Put);
   734  043C  30D4               	movlw	low _LCD_Put
   735  043D  0020               	movlb	0	; select bank0
   736  043E  00DA               	movwf	_xfunc_out
   737  043F  3003               	movlw	high _LCD_Put
   738  0440  00DB               	movwf	_xfunc_out+1
   739  0441                     l1681:	
   740                           ;main.c: 18: while(1)
   741                           
   742                           
   743                           ;main.c: 19: {
   744                           ;main.c: 20: LCD_CursorPosition(0,0);
   745  0441  01F3               	clrf	LCD_CursorPosition@ty
   746  0442  3000               	movlw	0
   747  0443  3184  2421  3184   	fcall	_LCD_CursorPosition
   748                           
   749                           ;main.c: 21: xprintf("Hellow World");
   750  0446  3000               	movlw	low (STR_1| (0+32768))
   751  0447  0020               	movlb	0	; select bank0
   752  0448  00D0               	movwf	xprintf@fmt
   753  0449  3088               	movlw	high (STR_1| (0+32768))
   754  044A  00D1               	movwf	xprintf@fmt+1
   755  044B  3183  23E9  3184   	fcall	_xprintf
   756  044E  2C41               	goto	l1681
   757  044F                     __end_of_main:	
   758                           ;main.c: 22: }
   759                           ;main.c: 23: return 0;
   760                           ;	Return value of _main is never used
   761                           
   762                           
   763                           	psect	text1
   764  03E9                     __ptext1:	
   765 ;; *************** function _xprintf *****************
   766 ;; Defined at:
   767 ;;		line 165 in file "xprintf.c"
   768 ;; Parameters:    Size  Location     Type
   769 ;;  fmt             2   48[BANK0 ] PTR const unsigned char 
   770 ;;		 -> STR_6(7), STR_5(6), STR_4(6), STR_3(7), 
   771 ;;		 -> STR_1(13), 
   772 ;; Auto vars:     Size  Location     Type
   773 ;;  arp             1   55[BANK0 ] PTR void [1]
   774 ;;		 -> ?_xfprintf(1), ?_xsprintf(1), ?_xprintf(1), 
   775 ;; Return value:  Size  Location     Type
   776 ;;                  1    wreg      void 
   777 ;; Registers used:
   778 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
   779 ;; Tracked objects:
   780 ;;		On entry : 0/0
   781 ;;		On exit  : 0/0
   782 ;;		Unchanged: 0/0
   783 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
   784 ;;      Params:         0       6       0       0       0       0
   785 ;;      Locals:         0       1       0       0       0       0
   786 ;;      Temps:          0       1       0       0       0       0
   787 ;;      Totals:         0       8       0       0       0       0
   788 ;;Total ram usage:        8 bytes
   789 ;; Hardware stack levels used:    1
   790 ;; Hardware stack levels required when called:    5
   791 ;; This function calls:
   792 ;;		_xvprintf
   793 ;; This function is called by:
   794 ;;		_main
   795 ;;		_put_dump
   796 ;; This function uses a non-reentrant model
   797 ;;
   798                           
   799                           
   800                           ;psect for function _xprintf
   801  03E9                     _xprintf:	
   802                           
   803                           ;xprintf.c: 170: va_list arp;
   804                           ;xprintf.c: 173: *arp = __va_start();
   805                           
   806                           ;incstack = 0
   807                           ; Regs used in _xprintf: [wreg-fsr1h+status,2+status,0+pclath+cstack]
   808  03E9  3052               	movlw	(low ((?_xprintf| 0+2)))& (0+255)
   809  03EA  0020               	movlb	0	; select bank0
   810  03EB  00D6               	movwf	??_xprintf
   811  03EC  0856               	movf	??_xprintf,w
   812  03ED  00D7               	movwf	xprintf@arp
   813                           
   814                           ;xprintf.c: 174: xvprintf(fmt, arp);
   815  03EE  0851               	movf	xprintf@fmt+1,w
   816  03EF  00A1               	movwf	xvprintf@fmt+1
   817  03F0  0850               	movf	xprintf@fmt,w
   818  03F1  00A0               	movwf	xvprintf@fmt
   819  03F2  3057               	movlw	(low (xprintf@arp| 0))& (0+255)
   820  03F3  00D6               	movwf	??_xprintf
   821  03F4  0856               	movf	??_xprintf,w
   822  03F5  00A2               	movwf	xvprintf@arp
   823  03F6  3185  25CE         	fcall	_xvprintf
   824  03F8  0008               	return
   825  03F9                     __end_of_xprintf:	
   826                           
   827                           	psect	text2
   828  05CE                     __ptext2:	
   829 ;; *************** function _xvprintf *****************
   830 ;; Defined at:
   831 ;;		line 88 in file "xprintf.c"
   832 ;; Parameters:    Size  Location     Type
   833 ;;  fmt             2    0[BANK0 ] PTR const unsigned char 
   834 ;;		 -> STR_6(7), STR_5(6), STR_4(6), STR_3(7), 
   835 ;;		 -> STR_1(13), 
   836 ;;  arp             1    2[BANK0 ] PTR PTR void 
   837 ;;		 -> xfprintf@arp(1), xsprintf@arp(1), xprintf@arp(1), 
   838 ;; Auto vars:     Size  Location     Type
   839 ;;  s              16    7[BANK0 ] unsigned char [16]
   840 ;;  v               4   38[BANK0 ] unsigned long 
   841 ;;  i               2   44[BANK0 ] unsigned int 
   842 ;;  f               2   42[BANK0 ] unsigned int 
   843 ;;  j               2   36[BANK0 ] unsigned int 
   844 ;;  w               2   34[BANK0 ] unsigned int 
   845 ;;  r               2   32[BANK0 ] unsigned int 
   846 ;;  c               1   47[BANK0 ] unsigned char 
   847 ;;  d               1   46[BANK0 ] unsigned char 
   848 ;;  p               1   31[BANK0 ] PTR unsigned char 
   849 ;;		 -> ?_xfprintf(1), ?_xsprintf(1), ?_xprintf(1), 
   850 ;; Return value:  Size  Location     Type
   851 ;;                  1    wreg      void 
   852 ;; Registers used:
   853 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
   854 ;; Tracked objects:
   855 ;;		On entry : 0/0
   856 ;;		On exit  : 0/0
   857 ;;		Unchanged: 0/0
   858 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
   859 ;;      Params:         0       3       0       0       0       0
   860 ;;      Locals:         0      41       0       0       0       0
   861 ;;      Temps:          0       4       0       0       0       0
   862 ;;      Totals:         0      48       0       0       0       0
   863 ;;Total ram usage:       48 bytes
   864 ;; Hardware stack levels used:    1
   865 ;; Hardware stack levels required when called:    4
   866 ;; This function calls:
   867 ;;		___lldiv
   868 ;;		___llmod
   869 ;;		___wmul
   870 ;;		_xputc
   871 ;;		_xputs
   872 ;; This function is called by:
   873 ;;		_xprintf
   874 ;;		_xsprintf
   875 ;;		_xfprintf
   876 ;; This function uses a non-reentrant model
   877 ;;
   878                           
   879                           
   880                           ;psect for function _xvprintf
   881  05CE                     _xvprintf:	
   882  05CE                     l108:	
   883                           ;incstack = 0
   884                           ; Regs used in _xvprintf: [wreg-fsr1h+status,2+status,0+pclath+cstack]
   885                           ;xprintf.c: 93: unsigned int r, i, j, w, f;
   886                           ;xprintf.c: 94: unsigned long v;
   887                           ;xprintf.c: 95: char s[16], c, d, *p;
   888                           ;xprintf.c: 98: for (;;) {
   889                           
   890                           
   891                           ;xprintf.c: 99: c = *fmt++;
   892  05CE  0020               	movlb	0	; select bank0
   893  05CF  0820               	movf	xvprintf@fmt,w
   894  05D0  0084               	movwf	4
   895  05D1  0821               	movf	xvprintf@fmt+1,w
   896  05D2  0085               	movwf	5
   897  05D3  0800               	movf	0,w	;code access
   898  05D4  00A3               	movwf	??_xvprintf
   899  05D5  0823               	movf	??_xvprintf,w
   900  05D6  00CF               	movwf	xvprintf@c
   901  05D7  3001               	movlw	1
   902  05D8  07A0               	addwf	xvprintf@fmt,f
   903  05D9  3000               	movlw	0
   904  05DA  3DA1               	addwfc	xvprintf@fmt+1,f
   905                           
   906                           ;xprintf.c: 100: if (!c) break;
   907  05DB  084F               	movf	xvprintf@c,w
   908  05DC  1903               	btfsc	3,2
   909  05DD  0008               	return
   910                           
   911                           ;xprintf.c: 101: if (c != '%') {
   912  05DE  3025               	movlw	37
   913  05DF  064F               	xorwf	xvprintf@c,w
   914  05E0  1903               	btfsc	3,2
   915  05E1  2DE7               	goto	l1423
   916                           
   917                           ;xprintf.c: 102: xputc(c); continue;
   918  05E2  084F               	movf	xvprintf@c,w
   919  05E3  3184  246A  3185   	fcall	_xputc
   920  05E6  2DCE               	goto	l108
   921  05E7                     l1423:	
   922                           
   923                           ;xprintf.c: 103: }
   924                           ;xprintf.c: 104: f = 0;
   925  05E7  0020               	movlb	0	; select bank0
   926  05E8  01CA               	clrf	xvprintf@f
   927  05E9  01CB               	clrf	xvprintf@f+1
   928                           
   929                           ;xprintf.c: 105: c = *fmt++;
   930  05EA  0820               	movf	xvprintf@fmt,w
   931  05EB  0084               	movwf	4
   932  05EC  0821               	movf	xvprintf@fmt+1,w
   933  05ED  0085               	movwf	5
   934  05EE  0800               	movf	0,w	;code access
   935  05EF  00A3               	movwf	??_xvprintf
   936  05F0  0823               	movf	??_xvprintf,w
   937  05F1  00CF               	movwf	xvprintf@c
   938  05F2  3001               	movlw	1
   939  05F3  07A0               	addwf	xvprintf@fmt,f
   940  05F4  3000               	movlw	0
   941  05F5  3DA1               	addwfc	xvprintf@fmt+1,f
   942                           
   943                           ;xprintf.c: 106: if (c == '0') {
   944  05F6  3030               	movlw	48
   945  05F7  064F               	xorwf	xvprintf@c,w
   946  05F8  1D03               	btfss	3,2
   947  05F9  2DFC               	goto	l1437
   948                           
   949                           ;xprintf.c: 107: f = 1; c = *fmt++;
   950  05FA  3001               	movlw	1
   951  05FB  2E01               	goto	L6
   952  05FC                     l1437:	
   953                           ;xprintf.c: 108: } else {
   954                           
   955                           
   956                           ;xprintf.c: 109: if (c == '-') {
   957  05FC  302D               	movlw	45
   958  05FD  064F               	xorwf	xvprintf@c,w
   959  05FE  1D03               	btfss	3,2
   960  05FF  2E10               	goto	l1445
   961                           
   962                           ;xprintf.c: 110: f = 2; c = *fmt++;
   963  0600  3002               	movlw	2
   964  0601                     L6:	
   965  0601  00CA               	movwf	xvprintf@f
   966  0602  3000               	movlw	0
   967  0603  00CB               	movwf	xvprintf@f+1
   968  0604  0820               	movf	xvprintf@fmt,w
   969  0605  0084               	movwf	4
   970  0606  0821               	movf	xvprintf@fmt+1,w
   971  0607  0085               	movwf	5
   972  0608  0800               	movf	0,w	;code access
   973  0609  00A3               	movwf	??_xvprintf
   974  060A  0823               	movf	??_xvprintf,w
   975  060B  00CF               	movwf	xvprintf@c
   976  060C  3001               	movlw	1
   977  060D  07A0               	addwf	xvprintf@fmt,f
   978  060E  3000               	movlw	0
   979  060F  3DA1               	addwfc	xvprintf@fmt+1,f
   980  0610                     l1445:	
   981                           
   982                           ;xprintf.c: 111: }
   983                           ;xprintf.c: 112: }
   984                           ;xprintf.c: 113: for (w = 0; c >= '0' && c <= '9'; c = *fmt++)
   985  0610  01C2               	clrf	xvprintf@w
   986  0611  01C3               	clrf	xvprintf@w+1
   987  0612  2E3A               	goto	l1453
   988  0613                     l1447:	
   989                           
   990                           ;xprintf.c: 114: w = w * 10 + c - '0';
   991  0613  084F               	movf	xvprintf@c,w
   992  0614  00A3               	movwf	??_xvprintf
   993  0615  01A4               	clrf	??_xvprintf+1
   994  0616  0843               	movf	xvprintf@w+1,w
   995  0617  00F1               	movwf	___wmul@multiplier+1
   996  0618  0842               	movf	xvprintf@w,w
   997  0619  00F0               	movwf	___wmul@multiplier
   998  061A  300A               	movlw	10
   999  061B  00F2               	movwf	___wmul@multiplicand
  1000  061C  3000               	movlw	0
  1001  061D  00F3               	movwf	___wmul@multiplicand+1
  1002  061E  3184  244F  3185   	fcall	___wmul
  1003  0621  0020               	movlb	0	; select bank0
  1004  0622  0823               	movf	??_xvprintf,w
  1005  0623  0770               	addwf	?___wmul,w
  1006  0624  00A5               	movwf	??_xvprintf+2
  1007  0625  0824               	movf	??_xvprintf+1,w
  1008  0626  3D71               	addwfc	?___wmul+1,w
  1009  0627  00A6               	movwf	??_xvprintf+3
  1010  0628  0825               	movf	??_xvprintf+2,w
  1011  0629  3ED0               	addlw	208
  1012  062A  00C2               	movwf	xvprintf@w
  1013  062B  30FF               	movlw	255
  1014  062C  3D26               	addwfc	??_xvprintf+3,w
  1015  062D  00C3               	movwf	xvprintf@w+1
  1016  062E  0820               	movf	xvprintf@fmt,w
  1017  062F  0084               	movwf	4
  1018  0630  0821               	movf	xvprintf@fmt+1,w
  1019  0631  0085               	movwf	5
  1020  0632  0800               	movf	0,w	;code access
  1021  0633  00A3               	movwf	??_xvprintf
  1022  0634  0823               	movf	??_xvprintf,w
  1023  0635  00CF               	movwf	xvprintf@c
  1024  0636  3001               	movlw	1
  1025  0637  07A0               	addwf	xvprintf@fmt,f
  1026  0638  3000               	movlw	0
  1027  0639  3DA1               	addwfc	xvprintf@fmt+1,f
  1028  063A                     l1453:	
  1029  063A  3030               	movlw	48
  1030  063B  024F               	subwf	xvprintf@c,w
  1031  063C  1C03               	skipc
  1032  063D  2E42               	goto	l1457
  1033  063E  303A               	movlw	58
  1034  063F  024F               	subwf	xvprintf@c,w
  1035  0640  1C03               	skipc
  1036  0641  2E13               	goto	l1447
  1037  0642                     l1457:	
  1038                           
  1039                           ;xprintf.c: 115: if (c == 'l' || c == 'L') {
  1040  0642  306C               	movlw	108
  1041  0643  064F               	xorwf	xvprintf@c,w
  1042  0644  1903               	btfsc	3,2
  1043  0645  2E4A               	goto	l123
  1044  0646  304C               	movlw	76
  1045  0647  064F               	xorwf	xvprintf@c,w
  1046  0648  1D03               	btfss	3,2
  1047  0649  2E57               	goto	l1465
  1048  064A                     l123:	
  1049                           
  1050                           ;xprintf.c: 116: f |= 4; c = *fmt++;
  1051  064A  154A               	bsf	xvprintf@f,2
  1052  064B  0820               	movf	xvprintf@fmt,w
  1053  064C  0084               	movwf	4
  1054  064D  0821               	movf	xvprintf@fmt+1,w
  1055  064E  0085               	movwf	5
  1056  064F  0800               	movf	0,w	;code access
  1057  0650  00A3               	movwf	??_xvprintf
  1058  0651  0823               	movf	??_xvprintf,w
  1059  0652  00CF               	movwf	xvprintf@c
  1060  0653  3001               	movlw	1
  1061  0654  07A0               	addwf	xvprintf@fmt,f
  1062  0655  3000               	movlw	0
  1063  0656  3DA1               	addwfc	xvprintf@fmt+1,f
  1064  0657                     l1465:	
  1065                           
  1066                           ;xprintf.c: 117: }
  1067                           ;xprintf.c: 118: if (!c) break;
  1068  0657  084F               	movf	xvprintf@c,w
  1069  0658  1903               	btfsc	3,2
  1070  0659  0008               	return
  1071                           
  1072                           ;xprintf.c: 119: d = c;
  1073  065A  084F               	movf	xvprintf@c,w
  1074  065B  00A3               	movwf	??_xvprintf
  1075  065C  0823               	movf	??_xvprintf,w
  1076  065D  00CE               	movwf	xvprintf@d
  1077                           
  1078                           ;xprintf.c: 120: if (d >= 'a') d -= 0x20;
  1079  065E  3061               	movlw	97
  1080  065F  024E               	subwf	xvprintf@d,w
  1081  0660  1C03               	skipc
  1082  0661  2ECD               	goto	l1507
  1083  0662  3020               	movlw	32
  1084  0663  02CE               	subwf	xvprintf@d,f
  1085                           
  1086                           ;xprintf.c: 121: switch (d) {
  1087  0664  2ECD               	goto	l1507
  1088  0665                     l1473:	
  1089                           ;xprintf.c: 122: case 'S' :
  1090                           
  1091                           
  1092                           ;xprintf.c: 123: p = (*(char* *)__va_arg((*(char* **)arp), (char*)0));
  1093  0665  0822               	movf	xvprintf@arp,w
  1094  0666  0086               	movwf	6
  1095  0667  0187               	clrf	7
  1096  0668  3F40               	moviw [0]fsr1
  1097  0669  0084               	movwf	4
  1098  066A  0185               	clrf	5
  1099  066B  0A81               	incf	1,f
  1100  066C  0800               	movf	0,w
  1101  066D  00A3               	movwf	??_xvprintf
  1102  066E  0823               	movf	??_xvprintf,w
  1103  066F  00BF               	movwf	xvprintf@p
  1104                           
  1105                           ;xprintf.c: 124: for (j = 0; p[j]; j++) ;
  1106  0670  01C4               	clrf	xvprintf@j
  1107  0671  01C5               	clrf	xvprintf@j+1
  1108  0672                     l1479:	
  1109  0672  0844               	movf	xvprintf@j,w
  1110  0673  073F               	addwf	xvprintf@p,w
  1111  0674  00A3               	movwf	??_xvprintf
  1112  0675  0823               	movf	??_xvprintf,w
  1113  0676  0086               	movwf	6
  1114  0677  0187               	clrf	7
  1115  0678  0801               	movf	1,w
  1116  0679  1903               	btfsc	3,2
  1117  067A  2E84               	goto	l1483
  1118  067B  3001               	movlw	1
  1119  067C  07C4               	addwf	xvprintf@j,f
  1120  067D  3000               	movlw	0
  1121  067E  3DC5               	addwfc	xvprintf@j+1,f
  1122  067F  2E72               	goto	l1479
  1123  0680                     l1481:	
  1124                           ;xprintf.c: 125: while (!(f & 2) && j++ < w) xputc(' ');
  1125                           
  1126  0680  3020               	movlw	32
  1127  0681  3184  246A  3185   	fcall	_xputc
  1128  0684                     l1483:	
  1129  0684  0020               	movlb	0	; select bank0
  1130  0685  18CA               	btfsc	xvprintf@f,1
  1131  0686  2E96               	goto	l1487
  1132  0687  0845               	movf	xvprintf@j+1,w
  1133  0688  00A4               	movwf	??_xvprintf+1
  1134  0689  0844               	movf	xvprintf@j,w
  1135  068A  00A3               	movwf	??_xvprintf
  1136  068B  0AC4               	incf	xvprintf@j,f
  1137  068C  1903               	skipnz
  1138  068D  0AC5               	incf	xvprintf@j+1,f
  1139  068E  0843               	movf	xvprintf@w+1,w
  1140  068F  0224               	subwf	??_xvprintf+1,w
  1141  0690  1D03               	skipz
  1142  0691  2E94               	goto	u1185
  1143  0692  0842               	movf	xvprintf@w,w
  1144  0693  0223               	subwf	??_xvprintf,w
  1145  0694                     u1185:	
  1146  0694  1C03               	skipc
  1147  0695  2E80               	goto	l1481
  1148  0696                     l1487:	
  1149                           
  1150                           ;xprintf.c: 126: xputs(p);
  1151  0696  083F               	movf	xvprintf@p,w
  1152  0697  3183  23F9  3185   	fcall	_xputs
  1153  069A                     l1491:	
  1154                           ;xprintf.c: 127: while (j++ < w) xputc(' ');
  1155                           
  1156  069A  0020               	movlb	0	; select bank0
  1157  069B  0845               	movf	xvprintf@j+1,w
  1158  069C  00A4               	movwf	??_xvprintf+1
  1159  069D  0844               	movf	xvprintf@j,w
  1160  069E  00A3               	movwf	??_xvprintf
  1161  069F  0AC4               	incf	xvprintf@j,f
  1162  06A0  1903               	skipnz
  1163  06A1  0AC5               	incf	xvprintf@j+1,f
  1164  06A2  0843               	movf	xvprintf@w+1,w
  1165  06A3  0224               	subwf	??_xvprintf+1,w
  1166  06A4  1D03               	skipz
  1167  06A5  2EA8               	goto	u1195
  1168  06A6  0842               	movf	xvprintf@w,w
  1169  06A7  0223               	subwf	??_xvprintf,w
  1170  06A8                     u1195:	
  1171  06A8  1803               	btfsc	3,0
  1172  06A9  2DCE               	goto	l108
  1173  06AA  3020               	movlw	32
  1174  06AB  3184  246A  3185   	fcall	_xputc
  1175  06AE  2E9A               	goto	l1491
  1176  06AF                     l1493:	
  1177                           ;xprintf.c: 129: case 'C' :
  1178                           
  1179                           ;xprintf.c: 128: continue;
  1180                           
  1181                           
  1182                           ;xprintf.c: 130: xputc((char)(*(int *)__va_arg((*(int **)arp), (int)0))); continue;
  1183  06AF  0822               	movf	xvprintf@arp,w
  1184  06B0  0086               	movwf	6
  1185  06B1  0187               	clrf	7
  1186  06B2  0801               	movf	1,w
  1187  06B3  0084               	movwf	4
  1188  06B4  0185               	clrf	5
  1189  06B5  3002               	movlw	2
  1190  06B6  0781               	addwf	1,f
  1191  06B7  0800               	movf	0,w
  1192  06B8  3184  246A  3185   	fcall	_xputc
  1193  06BB  2DCE               	goto	l108
  1194  06BC                     l1495:	
  1195                           ;xprintf.c: 131: case 'B' :
  1196                           
  1197                           
  1198                           ;xprintf.c: 132: r = 2; break;
  1199  06BC  3002               	movlw	2
  1200  06BD  0020               	movlb	0	; select bank0
  1201  06BE  2EC4               	goto	L3
  1202  06BF                     l1497:	
  1203                           ;xprintf.c: 133: case 'O' :
  1204                           
  1205                           
  1206                           ;xprintf.c: 134: r = 8; break;
  1207  06BF  3008               	movlw	8
  1208  06C0  2EC4               	goto	L3
  1209  06C1                     l1499:	
  1210                           ;xprintf.c: 135: case 'D' :
  1211                           
  1212                           
  1213                           ;xprintf.c: 136: case 'U' :
  1214                           ;xprintf.c: 137: r = 10; break;
  1215  06C1  300A               	movlw	10
  1216  06C2  2EC4               	goto	L3
  1217  06C3                     l1501:	
  1218                           ;xprintf.c: 138: case 'X' :
  1219                           
  1220                           
  1221                           ;xprintf.c: 139: r = 16; break;
  1222  06C3  3010               	movlw	16
  1223  06C4                     L3:	
  1224  06C4  00C0               	movwf	xvprintf@r
  1225  06C5  3000               	movlw	0
  1226  06C6  00C1               	movwf	xvprintf@r+1
  1227  06C7  2EE5               	goto	l141
  1228  06C8                     l1503:	
  1229                           ;xprintf.c: 140: default:
  1230                           
  1231                           
  1232                           ;xprintf.c: 141: xputc(c); continue;
  1233  06C8  084F               	movf	xvprintf@c,w
  1234  06C9  3184  246A  3185   	fcall	_xputc
  1235  06CC  2DCE               	goto	l108
  1236  06CD                     l1507:	
  1237                           ;xprintf.c: 142: }
  1238                           
  1239  06CD  0020               	movlb	0	; select bank0
  1240  06CE  084E               	movf	xvprintf@d,w
  1241                           
  1242                           ; Switch size 1, requested type "space"
  1243                           ; Number of cases is 7, Range of values is 66 to 88
  1244                           ; switch strategies available:
  1245                           ; Name         Instructions Cycles
  1246                           ; simple_byte           22    12 (average)
  1247                           ; direct_byte           55     9 (fixed)
  1248                           ; jumptable            263     9 (fixed)
  1249                           ;	Chosen strategy is simple_byte
  1250  06CF  3A42               	xorlw	66	; case 66
  1251  06D0  1903               	skipnz
  1252  06D1  2EBC               	goto	l1495
  1253  06D2  3A01               	xorlw	1	; case 67
  1254  06D3  1903               	skipnz
  1255  06D4  2EAF               	goto	l1493
  1256  06D5  3A07               	xorlw	7	; case 68
  1257  06D6  1903               	skipnz
  1258  06D7  2EC1               	goto	l1499
  1259  06D8  3A0B               	xorlw	11	; case 79
  1260  06D9  1903               	skipnz
  1261  06DA  2EBF               	goto	l1497
  1262  06DB  3A1C               	xorlw	28	; case 83
  1263  06DC  1903               	skipnz
  1264  06DD  2E65               	goto	l1473
  1265  06DE  3A06               	xorlw	6	; case 85
  1266  06DF  1903               	skipnz
  1267  06E0  2EC1               	goto	l1499
  1268  06E1  3A0D               	xorlw	13	; case 88
  1269  06E2  1903               	skipnz
  1270  06E3  2EC3               	goto	l1501
  1271  06E4  2EC8               	goto	l1503
  1272  06E5                     l141:	
  1273                           
  1274                           ;xprintf.c: 145: v = (f & 4) ? (*(long *)__va_arg((*(long **)arp), (long)0)) : ((d == 'D
      +                          ') ? (long)(*(int *)__va_arg((*(int **)arp), (int)0)) : (long)(*(unsigned int *)__va_arg
      +                          ((*(unsigned int **)arp), (unsigned int)0)));
  1275  06E5  0020               	movlb	0	; select bank0
  1276  06E6  194A               	btfsc	xvprintf@f,2
  1277  06E7  2F1D               	goto	l1517
  1278  06E8  3044               	movlw	68
  1279  06E9  064E               	xorwf	xvprintf@d,w
  1280  06EA  1903               	btfsc	3,2
  1281  06EB  2EFF               	goto	l1513
  1282  06EC  0822               	movf	xvprintf@arp,w
  1283  06ED  0086               	movwf	6
  1284  06EE  0187               	clrf	7
  1285  06EF  0801               	movf	1,w
  1286  06F0  0084               	movwf	4
  1287  06F1  0185               	clrf	5
  1288  06F2  3002               	movlw	2
  1289  06F3  0781               	addwf	1,f
  1290  06F4  3F00               	moviw [0]fsr0
  1291  06F5  00A3               	movwf	??_xvprintf
  1292  06F6  3F01               	moviw [1]fsr0
  1293  06F7  00A4               	movwf	??_xvprintf+1
  1294  06F8  0823               	movf	??_xvprintf,w
  1295  06F9  00B7               	movwf	_xvprintf$154
  1296  06FA  0824               	movf	??_xvprintf+1,w
  1297  06FB  00B8               	movwf	_xvprintf$154+1
  1298  06FC  01B9               	clrf	_xvprintf$154+2
  1299  06FD  01BA               	clrf	_xvprintf$154+3
  1300  06FE  2F14               	goto	l1515
  1301  06FF                     l1513:	
  1302  06FF  0822               	movf	xvprintf@arp,w
  1303  0700  0086               	movwf	6
  1304  0701  0187               	clrf	7
  1305  0702  0801               	movf	1,w
  1306  0703  0084               	movwf	4
  1307  0704  0185               	clrf	5
  1308  0705  3002               	movlw	2
  1309  0706  0781               	addwf	1,f
  1310  0707  3F00               	moviw [0]fsr0
  1311  0708  00A3               	movwf	??_xvprintf
  1312  0709  3F01               	moviw [1]fsr0
  1313  070A  00A4               	movwf	??_xvprintf+1
  1314  070B  0823               	movf	??_xvprintf,w
  1315  070C  00B7               	movwf	_xvprintf$154
  1316  070D  0824               	movf	??_xvprintf+1,w
  1317  070E  00B8               	movwf	_xvprintf$154+1
  1318  070F  0D89               	rlf	9,f
  1319  0710  3B89               	subwfb	9,f
  1320  0711  0989               	comf	9,f
  1321  0712  00B9               	movwf	_xvprintf$154+2
  1322  0713  00BA               	movwf	_xvprintf$154+3
  1323  0714                     l1515:	
  1324  0714  083A               	movf	_xvprintf$154+3,w
  1325  0715  00C9               	movwf	xvprintf@v+3
  1326  0716  0839               	movf	_xvprintf$154+2,w
  1327  0717  00C8               	movwf	xvprintf@v+2
  1328  0718  0838               	movf	_xvprintf$154+1,w
  1329  0719  00C7               	movwf	xvprintf@v+1
  1330  071A  0837               	movf	_xvprintf$154,w
  1331  071B  00C6               	movwf	xvprintf@v
  1332  071C  2F2D               	goto	l1519
  1333  071D                     l1517:	
  1334  071D  0822               	movf	xvprintf@arp,w
  1335  071E  0086               	movwf	6
  1336  071F  0187               	clrf	7
  1337  0720  0801               	movf	1,w
  1338  0721  0084               	movwf	4
  1339  0722  0185               	clrf	5
  1340  0723  3004               	movlw	4
  1341  0724  0781               	addwf	1,f
  1342  0725  3F00               	moviw [0]fsr0
  1343  0726  00C6               	movwf	xvprintf@v
  1344  0727  3F01               	moviw [1]fsr0
  1345  0728  00C7               	movwf	xvprintf@v+1
  1346  0729  3F02               	moviw [2]fsr0
  1347  072A  00C8               	movwf	xvprintf@v+2
  1348  072B  3F03               	moviw [3]fsr0
  1349  072C  00C9               	movwf	xvprintf@v+3
  1350  072D                     l1519:	
  1351                           
  1352                           ;xprintf.c: 146: if (d == 'D' && (v & 0x80000000)) {
  1353  072D  3044               	movlw	68
  1354  072E  064E               	xorwf	xvprintf@d,w
  1355  072F  1903               	btfsc	3,2
  1356  0730  1FC9               	btfss	xvprintf@v+3,7
  1357  0731  2F3E               	goto	l1525
  1358                           
  1359                           ;xprintf.c: 147: v = 0 - v;
  1360  0732  09C6               	comf	xvprintf@v,f
  1361  0733  09C7               	comf	xvprintf@v+1,f
  1362  0734  09C8               	comf	xvprintf@v+2,f
  1363  0735  09C9               	comf	xvprintf@v+3,f
  1364  0736  0AC6               	incf	xvprintf@v,f
  1365  0737  1903               	skipnz
  1366  0738  0AC7               	incf	xvprintf@v+1,f
  1367  0739  1903               	skipnz
  1368  073A  0AC8               	incf	xvprintf@v+2,f
  1369  073B  1903               	skipnz
  1370  073C  0AC9               	incf	xvprintf@v+3,f
  1371                           
  1372                           ;xprintf.c: 148: f |= 8;
  1373  073D  15CA               	bsf	xvprintf@f,3
  1374  073E                     l1525:	
  1375                           
  1376                           ;xprintf.c: 149: }
  1377                           ;xprintf.c: 150: i = 0;
  1378  073E  01CC               	clrf	xvprintf@i
  1379  073F  01CD               	clrf	xvprintf@i+1
  1380  0740                     l1527:	
  1381                           ;xprintf.c: 151: do {
  1382                           
  1383                           
  1384                           ;xprintf.c: 152: d = (char)(v % r); v /= r;
  1385  0740  0840               	movf	xvprintf@r,w
  1386  0741  00F0               	movwf	___llmod@divisor
  1387  0742  0841               	movf	xvprintf@r+1,w
  1388  0743  00F1               	movwf	___llmod@divisor+1
  1389  0744  01F2               	clrf	___llmod@divisor+2
  1390  0745  01F3               	clrf	___llmod@divisor+3
  1391  0746  0849               	movf	xvprintf@v+3,w
  1392  0747  00F7               	movwf	___llmod@dividend+3
  1393  0748  0848               	movf	xvprintf@v+2,w
  1394  0749  00F6               	movwf	___llmod@dividend+2
  1395  074A  0847               	movf	xvprintf@v+1,w
  1396  074B  00F5               	movwf	___llmod@dividend+1
  1397  074C  0846               	movf	xvprintf@v,w
  1398  074D  00F4               	movwf	___llmod@dividend
  1399  074E  3184  24D1  3185   	fcall	___llmod
  1400  0751  0870               	movf	?___llmod,w
  1401  0752  0020               	movlb	0	; select bank0
  1402  0753  00A3               	movwf	??_xvprintf
  1403  0754  0823               	movf	??_xvprintf,w
  1404  0755  00CE               	movwf	xvprintf@d
  1405  0756  0840               	movf	xvprintf@r,w
  1406  0757  00F0               	movwf	___lldiv@divisor
  1407  0758  0841               	movf	xvprintf@r+1,w
  1408  0759  00F1               	movwf	___lldiv@divisor+1
  1409  075A  01F2               	clrf	___lldiv@divisor+2
  1410  075B  01F3               	clrf	___lldiv@divisor+3
  1411  075C  0849               	movf	xvprintf@v+3,w
  1412  075D  00F7               	movwf	___lldiv@dividend+3
  1413  075E  0848               	movf	xvprintf@v+2,w
  1414  075F  00F6               	movwf	___lldiv@dividend+2
  1415  0760  0847               	movf	xvprintf@v+1,w
  1416  0761  00F5               	movwf	___lldiv@dividend+1
  1417  0762  0846               	movf	xvprintf@v,w
  1418  0763  00F4               	movwf	___lldiv@dividend
  1419  0764  3185  2513  3185   	fcall	___lldiv
  1420  0767  0873               	movf	?___lldiv+3,w
  1421  0768  0020               	movlb	0	; select bank0
  1422  0769  00C9               	movwf	xvprintf@v+3
  1423  076A  0872               	movf	?___lldiv+2,w
  1424  076B  00C8               	movwf	xvprintf@v+2
  1425  076C  0871               	movf	?___lldiv+1,w
  1426  076D  00C7               	movwf	xvprintf@v+1
  1427  076E  0870               	movf	?___lldiv,w
  1428  076F  00C6               	movwf	xvprintf@v
  1429                           
  1430                           ;xprintf.c: 153: if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
  1431  0770  300A               	movlw	10
  1432  0771  024E               	subwf	xvprintf@d,w
  1433  0772  1C03               	skipc
  1434  0773  2F82               	goto	l1541
  1435  0774  3078               	movlw	120
  1436  0775  064F               	xorwf	xvprintf@c,w
  1437  0776  1903               	btfsc	3,2
  1438  0777  2F7A               	goto	l1537
  1439  0778  3007               	movlw	7
  1440  0779  2F7B               	goto	L4
  1441  077A                     l1537:	
  1442  077A  3027               	movlw	39
  1443  077B                     L4:	
  1444  077B  00BB               	movwf	_xvprintf$155
  1445  077C  3000               	movlw	0
  1446  077D  00BC               	movwf	_xvprintf$155+1
  1447  077E  083B               	movf	_xvprintf$155,w
  1448  077F  00A3               	movwf	??_xvprintf
  1449  0780  0823               	movf	??_xvprintf,w
  1450  0781  07CE               	addwf	xvprintf@d,f
  1451  0782                     l1541:	
  1452                           
  1453                           ;xprintf.c: 154: s[i++] = d + '0';
  1454  0782  084E               	movf	xvprintf@d,w
  1455  0783  3E30               	addlw	48
  1456  0784  00A3               	movwf	??_xvprintf
  1457  0785  084C               	movf	xvprintf@i,w
  1458  0786  3E27               	addlw	(low (xvprintf@s| 0))& (0+255)
  1459  0787  0086               	movwf	6
  1460  0788  0187               	clrf	7
  1461  0789  0823               	movf	??_xvprintf,w
  1462  078A  0081               	movwf	1
  1463  078B  3001               	movlw	1
  1464  078C  07CC               	addwf	xvprintf@i,f
  1465  078D  3000               	movlw	0
  1466  078E  3DCD               	addwfc	xvprintf@i+1,f
  1467                           
  1468                           ;xprintf.c: 155: } while (v && i < sizeof(s));
  1469  078F  0849               	movf	xvprintf@v+3,w
  1470  0790  0448               	iorwf	xvprintf@v+2,w
  1471  0791  0447               	iorwf	xvprintf@v+1,w
  1472  0792  0446               	iorwf	xvprintf@v,w
  1473  0793  1903               	skipnz
  1474  0794  2F9C               	goto	l164
  1475  0795  3000               	movlw	0
  1476  0796  024D               	subwf	xvprintf@i+1,w
  1477  0797  3010               	movlw	16
  1478  0798  1903               	skipnz
  1479  0799  024C               	subwf	xvprintf@i,w
  1480  079A  1C03               	skipc
  1481  079B  2F40               	goto	l1527
  1482  079C                     l164:	
  1483                           
  1484                           ;xprintf.c: 156: if (f & 8) s[i++] = '-';
  1485  079C  1DCA               	btfss	xvprintf@f,3
  1486  079D  2FAA               	goto	l1553
  1487  079E  302D               	movlw	45
  1488  079F  00A3               	movwf	??_xvprintf
  1489  07A0  084C               	movf	xvprintf@i,w
  1490  07A1  3E27               	addlw	(low (xvprintf@s| 0))& (0+255)
  1491  07A2  0086               	movwf	6
  1492  07A3  0187               	clrf	7
  1493  07A4  0823               	movf	??_xvprintf,w
  1494  07A5  0081               	movwf	1
  1495  07A6  3001               	movlw	1
  1496  07A7  07CC               	addwf	xvprintf@i,f
  1497  07A8  3000               	movlw	0
  1498  07A9  3DCD               	addwfc	xvprintf@i+1,f
  1499  07AA                     l1553:	
  1500                           
  1501                           ;xprintf.c: 157: j = i; d = (f & 1) ? '0' : ' ';
  1502  07AA  084D               	movf	xvprintf@i+1,w
  1503  07AB  00C5               	movwf	xvprintf@j+1
  1504  07AC  084C               	movf	xvprintf@i,w
  1505  07AD  00C4               	movwf	xvprintf@j
  1506  07AE  184A               	btfsc	xvprintf@f,0
  1507  07AF  2FB2               	goto	l1559
  1508  07B0  3020               	movlw	32
  1509  07B1  2FB3               	goto	L5
  1510  07B2                     l1559:	
  1511  07B2  3030               	movlw	48
  1512  07B3                     L5:	
  1513  07B3  00BD               	movwf	_xvprintf$156
  1514  07B4  3000               	movlw	0
  1515  07B5  00BE               	movwf	_xvprintf$156+1
  1516  07B6  083D               	movf	_xvprintf$156,w
  1517  07B7  00A3               	movwf	??_xvprintf
  1518  07B8  0823               	movf	??_xvprintf,w
  1519  07B9  00CE               	movwf	xvprintf@d
  1520                           
  1521                           ;xprintf.c: 158: while (!(f & 2) && j++ < w) xputc(d);
  1522  07BA  2FBF               	goto	l1563
  1523  07BB                     l1561:	
  1524  07BB  084E               	movf	xvprintf@d,w
  1525  07BC  3184  246A  3185   	fcall	_xputc
  1526  07BF                     l1563:	
  1527  07BF  0020               	movlb	0	; select bank0
  1528  07C0  18CA               	btfsc	xvprintf@f,1
  1529  07C1  2FD1               	goto	l1567
  1530  07C2  0845               	movf	xvprintf@j+1,w
  1531  07C3  00A4               	movwf	??_xvprintf+1
  1532  07C4  0844               	movf	xvprintf@j,w
  1533  07C5  00A3               	movwf	??_xvprintf
  1534  07C6  0AC4               	incf	xvprintf@j,f
  1535  07C7  1903               	skipnz
  1536  07C8  0AC5               	incf	xvprintf@j+1,f
  1537  07C9  0843               	movf	xvprintf@w+1,w
  1538  07CA  0224               	subwf	??_xvprintf+1,w
  1539  07CB  1D03               	skipz
  1540  07CC  2FCF               	goto	u1315
  1541  07CD  0842               	movf	xvprintf@w,w
  1542  07CE  0223               	subwf	??_xvprintf,w
  1543  07CF                     u1315:	
  1544  07CF  1C03               	skipc
  1545  07D0  2FBB               	goto	l1561
  1546  07D1                     l1567:	
  1547                           ;xprintf.c: 159: do xputc(s[--i]); while(i);
  1548                           
  1549  07D1  3001               	movlw	1
  1550  07D2  02CC               	subwf	xvprintf@i,f
  1551  07D3  3000               	movlw	0
  1552  07D4  3BCD               	subwfb	xvprintf@i+1,f
  1553  07D5  084C               	movf	xvprintf@i,w
  1554  07D6  3E27               	addlw	(low (xvprintf@s| 0))& (0+255)
  1555  07D7  0086               	movwf	6
  1556  07D8  0187               	clrf	7
  1557  07D9  0801               	movf	1,w
  1558  07DA  3184  246A  3185   	fcall	_xputc
  1559  07DD  0020               	movlb	0	; select bank0
  1560  07DE  084C               	movf	xvprintf@i,w
  1561  07DF  044D               	iorwf	xvprintf@i+1,w
  1562  07E0  1903               	btfsc	3,2
  1563  07E1  2FE7               	goto	l1573
  1564  07E2  2FD1               	goto	l1567
  1565  07E3                     l1571:	
  1566                           ;xprintf.c: 160: while (j++ < w) xputc(' ');
  1567                           
  1568  07E3  3020               	movlw	32
  1569  07E4  3184  246A  3185   	fcall	_xputc
  1570  07E7                     l1573:	
  1571  07E7  0020               	movlb	0	; select bank0
  1572  07E8  0845               	movf	xvprintf@j+1,w
  1573  07E9  00A4               	movwf	??_xvprintf+1
  1574  07EA  0844               	movf	xvprintf@j,w
  1575  07EB  00A3               	movwf	??_xvprintf
  1576  07EC  0AC4               	incf	xvprintf@j,f
  1577  07ED  1903               	skipnz
  1578  07EE  0AC5               	incf	xvprintf@j+1,f
  1579  07EF  0843               	movf	xvprintf@w+1,w
  1580  07F0  0224               	subwf	??_xvprintf+1,w
  1581  07F1  1D03               	skipz
  1582  07F2  2FF5               	goto	u1335
  1583  07F3  0842               	movf	xvprintf@w,w
  1584  07F4  0223               	subwf	??_xvprintf,w
  1585  07F5                     u1335:	
  1586  07F5  1803               	btfsc	3,0
  1587  07F6  2DCE               	goto	l108
  1588  07F7  2FE3               	goto	l1571
  1589  07F8                     __end_of_xvprintf:	
  1590                           ;xprintf.c: 161: }
  1591                           
  1592                           
  1593                           	psect	text3
  1594  03F9                     __ptext3:	
  1595 ;; *************** function _xputs *****************
  1596 ;; Defined at:
  1597 ;;		line 44 in file "xprintf.c"
  1598 ;; Parameters:    Size  Location     Type
  1599 ;;  str             1    wreg     PTR const unsigned char 
  1600 ;;		 -> ?_xfprintf(1), ?_xsprintf(1), ?_xprintf(1), 
  1601 ;; Auto vars:     Size  Location     Type
  1602 ;;  str             1    7[COMMON] PTR const unsigned char 
  1603 ;;		 -> ?_xfprintf(1), ?_xsprintf(1), ?_xprintf(1), 
  1604 ;; Return value:  Size  Location     Type
  1605 ;;                  1    wreg      void 
  1606 ;; Registers used:
  1607 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  1608 ;; Tracked objects:
  1609 ;;		On entry : 0/0
  1610 ;;		On exit  : 0/0
  1611 ;;		Unchanged: 0/0
  1612 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  1613 ;;      Params:         0       0       0       0       0       0
  1614 ;;      Locals:         1       0       0       0       0       0
  1615 ;;      Temps:          1       0       0       0       0       0
  1616 ;;      Totals:         2       0       0       0       0       0
  1617 ;;Total ram usage:        2 bytes
  1618 ;; Hardware stack levels used:    1
  1619 ;; Hardware stack levels required when called:    3
  1620 ;; This function calls:
  1621 ;;		_xputc
  1622 ;; This function is called by:
  1623 ;;		_xvprintf
  1624 ;; This function uses a non-reentrant model
  1625 ;;
  1626                           
  1627                           
  1628                           ;psect for function _xputs
  1629  03F9                     _xputs:	
  1630                           
  1631                           ;incstack = 0
  1632                           ; Regs used in _xputs: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  1633                           ;xputs@str stored from wreg
  1634  03F9  00F7               	movwf	xputs@str
  1635  03FA                     l1345:	
  1636                           ;xprintf.c: 48: while (*str)
  1637                           
  1638  03FA  0877               	movf	xputs@str,w
  1639  03FB  0086               	movwf	6
  1640  03FC  0187               	clrf	7
  1641  03FD  0801               	movf	1,w
  1642  03FE  1903               	btfsc	3,2
  1643  03FF  0008               	return
  1644                           
  1645                           ;xprintf.c: 49: xputc(*str++);
  1646  0400  0877               	movf	xputs@str,w
  1647  0401  0086               	movwf	6
  1648  0402  0187               	clrf	7
  1649  0403  0801               	movf	1,w
  1650  0404  3184  246A  3183   	fcall	_xputc
  1651  0407  3001               	movlw	1
  1652  0408  00F6               	movwf	??_xputs
  1653  0409  0876               	movf	??_xputs,w
  1654  040A  07F7               	addwf	xputs@str,f
  1655  040B  2BFA               	goto	l1345
  1656  040C                     __end_of_xputs:	
  1657                           
  1658                           	psect	text4
  1659  046A                     __ptext4:	
  1660 ;; *************** function _xputc *****************
  1661 ;; Defined at:
  1662 ;;		line 26 in file "xprintf.c"
  1663 ;; Parameters:    Size  Location     Type
  1664 ;;  c               1    wreg     unsigned char 
  1665 ;; Auto vars:     Size  Location     Type
  1666 ;;  c               1    5[COMMON] unsigned char 
  1667 ;; Return value:  Size  Location     Type
  1668 ;;                  1    wreg      void 
  1669 ;; Registers used:
  1670 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  1671 ;; Tracked objects:
  1672 ;;		On entry : 0/0
  1673 ;;		On exit  : 0/0
  1674 ;;		Unchanged: 0/0
  1675 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  1676 ;;      Params:         0       0       0       0       0       0
  1677 ;;      Locals:         1       0       0       0       0       0
  1678 ;;      Temps:          1       0       0       0       0       0
  1679 ;;      Totals:         2       0       0       0       0       0
  1680 ;;Total ram usage:        2 bytes
  1681 ;; Hardware stack levels used:    1
  1682 ;; Hardware stack levels required when called:    2
  1683 ;; This function calls:
  1684 ;;		Absolute function
  1685 ;;		_LCD_Put
  1686 ;; This function is called by:
  1687 ;;		_xputs
  1688 ;;		_xvprintf
  1689 ;;		_xfputs
  1690 ;;		_put_dump
  1691 ;;		_xgets
  1692 ;; This function uses a non-reentrant model
  1693 ;;
  1694                           
  1695                           
  1696                           ;psect for function _xputc
  1697  046A                     _xputc:	
  1698                           
  1699                           ;incstack = 0
  1700                           ; Regs used in _xputc: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  1701                           ;xputc@c stored from wreg
  1702  046A  00F5               	movwf	xputc@c
  1703  046B  300A               	movlw	10
  1704  046C  0675               	xorwf	xputc@c,w
  1705  046D  1D03               	btfss	3,2
  1706  046E  2C79               	goto	l1327
  1707  046F  3027               	movlw	(low (STR_2| (0+32768)))& (0+255)
  1708  0470  00F4               	movwf	??_xputc
  1709  0471  0874               	movf	??_xputc,w
  1710  0472  00F3               	movwf	LCD_Put@word
  1711  0473  0020               	movlb	0	; select bank0
  1712  0474  085B               	movf	_xfunc_out+1,w
  1713  0475  008A               	movwf	10
  1714  0476  085A               	movf	_xfunc_out,w
  1715  0477  000A               	callw
  1716  0478  3184               	pagesel	$
  1717  0479                     l1327:	
  1718                           
  1719                           ;xprintf.c: 30: if (outptr) {
  1720  0479  0020               	movlb	0	; select bank0
  1721  047A  085C               	movf	_outptr,w
  1722  047B  1903               	btfsc	3,2
  1723  047C  2C89               	goto	l1335
  1724                           
  1725                           ;xprintf.c: 31: *outptr++ = (unsigned char)c;
  1726  047D  0875               	movf	xputc@c,w
  1727  047E  00F4               	movwf	??_xputc
  1728  047F  085C               	movf	_outptr,w
  1729  0480  0086               	movwf	6
  1730  0481  0187               	clrf	7
  1731  0482  0874               	movf	??_xputc,w
  1732  0483  0081               	movwf	1
  1733  0484  3001               	movlw	1
  1734  0485  00F4               	movwf	??_xputc
  1735  0486  0874               	movf	??_xputc,w
  1736  0487  07DC               	addwf	_outptr,f
  1737                           
  1738                           ;xprintf.c: 32: return;
  1739  0488  0008               	return
  1740  0489                     l1335:	
  1741                           
  1742                           ;xprintf.c: 33: }
  1743                           ;xprintf.c: 35: if (xfunc_out) xfunc_out((unsigned char)c);
  1744  0489  085A               	movf	_xfunc_out,w
  1745  048A  045B               	iorwf	_xfunc_out+1,w
  1746  048B  1903               	btfsc	3,2
  1747  048C  0008               	return
  1748  048D  0875               	movf	xputc@c,w
  1749  048E  00F4               	movwf	??_xputc
  1750  048F  0874               	movf	??_xputc,w
  1751  0490  00F3               	movwf	LCD_Put@word
  1752  0491  085B               	movf	_xfunc_out+1,w
  1753  0492  008A               	movwf	10
  1754  0493  085A               	movf	_xfunc_out,w
  1755  0494  000A               	callw
  1756  0495  3184               	pagesel	$
  1757  0496  0008               	return
  1758  0497                     __end_of_xputc:	
  1759                           
  1760                           	psect	text5
  1761  03D4                     __ptext5:	
  1762 ;; *************** function _LCD_Put *****************
  1763 ;; Defined at:
  1764 ;;		line 54 in file "LCD.c"
  1765 ;; Parameters:    Size  Location     Type
  1766 ;;  word            1    3[COMMON] char 
  1767 ;; Auto vars:     Size  Location     Type
  1768 ;;		None
  1769 ;; Return value:  Size  Location     Type
  1770 ;;                  1    wreg      void 
  1771 ;; Registers used:
  1772 ;;		wreg, status,2, status,0, pclath, cstack
  1773 ;; Tracked objects:
  1774 ;;		On entry : 0/0
  1775 ;;		On exit  : 0/0
  1776 ;;		Unchanged: 0/0
  1777 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  1778 ;;      Params:         1       0       0       0       0       0
  1779 ;;      Locals:         0       0       0       0       0       0
  1780 ;;      Temps:          0       0       0       0       0       0
  1781 ;;      Totals:         1       0       0       0       0       0
  1782 ;;Total ram usage:        1 bytes
  1783 ;; Hardware stack levels used:    1
  1784 ;; Hardware stack levels required when called:    1
  1785 ;; This function calls:
  1786 ;;		_LCD_WriteData
  1787 ;; This function is called by:
  1788 ;;		_main
  1789 ;;		_xputc
  1790 ;; This function uses a non-reentrant model
  1791 ;;
  1792                           
  1793                           
  1794                           ;psect for function _LCD_Put
  1795  03D4                     _LCD_Put:	
  1796                           
  1797                           ;LCD.c: 56: RA4 = 1;
  1798                           
  1799                           ;incstack = 0
  1800                           ; Regs used in _LCD_Put: [wreg+status,2+status,0+pclath+cstack]
  1801  03D4  0020               	movlb	0	; select bank0
  1802  03D5  160C               	bsf	12,4	;volatile
  1803                           
  1804                           ;LCD.c: 57: LCD_WriteData(word);
  1805  03D6  0873               	movf	LCD_Put@word,w
  1806  03D7  3184  2497         	fcall	_LCD_WriteData
  1807  03D9  0008               	return
  1808  03DA                     __end_of_LCD_Put:	
  1809                           
  1810                           	psect	text6
  1811  044F                     __ptext6:	
  1812 ;; *************** function ___wmul *****************
  1813 ;; Defined at:
  1814 ;;		line 15 in file "/opt/microchip/xc8/v1.41/sources/common/Umul16.c"
  1815 ;; Parameters:    Size  Location     Type
  1816 ;;  multiplier      2    0[COMMON] unsigned int 
  1817 ;;  multiplicand    2    2[COMMON] unsigned int 
  1818 ;; Auto vars:     Size  Location     Type
  1819 ;;  product         2    4[COMMON] unsigned int 
  1820 ;; Return value:  Size  Location     Type
  1821 ;;                  2    0[COMMON] unsigned int 
  1822 ;; Registers used:
  1823 ;;		wreg, status,2, status,0
  1824 ;; Tracked objects:
  1825 ;;		On entry : 0/0
  1826 ;;		On exit  : 0/0
  1827 ;;		Unchanged: 0/0
  1828 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  1829 ;;      Params:         4       0       0       0       0       0
  1830 ;;      Locals:         2       0       0       0       0       0
  1831 ;;      Temps:          0       0       0       0       0       0
  1832 ;;      Totals:         6       0       0       0       0       0
  1833 ;;Total ram usage:        6 bytes
  1834 ;; Hardware stack levels used:    1
  1835 ;; This function calls:
  1836 ;;		Nothing
  1837 ;; This function is called by:
  1838 ;;		_xvprintf
  1839 ;; This function uses a non-reentrant model
  1840 ;;
  1841                           
  1842                           
  1843                           ;psect for function ___wmul
  1844  044F                     ___wmul:	
  1845                           
  1846                           ;incstack = 0
  1847                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  1848  044F  01F4               	clrf	___wmul@product
  1849  0450  01F5               	clrf	___wmul@product+1
  1850  0451                     l1349:	
  1851  0451  1C70               	btfss	___wmul@multiplier,0
  1852  0452  2C57               	goto	l345
  1853  0453  0872               	movf	___wmul@multiplicand,w
  1854  0454  07F4               	addwf	___wmul@product,f
  1855  0455  0873               	movf	___wmul@multiplicand+1,w
  1856  0456  3DF5               	addwfc	___wmul@product+1,f
  1857  0457                     l345:	
  1858  0457  3001               	movlw	1
  1859  0458                     u905:	
  1860  0458  35F2               	lslf	___wmul@multiplicand,f
  1861  0459  0DF3               	rlf	___wmul@multiplicand+1,f
  1862  045A  0B89               	decfsz	9,f
  1863  045B  2C58               	goto	u905
  1864  045C  3001               	movlw	1
  1865  045D                     u915:	
  1866  045D  36F1               	lsrf	___wmul@multiplier+1,f
  1867  045E  0CF0               	rrf	___wmul@multiplier,f
  1868  045F  0B89               	decfsz	9,f
  1869  0460  2C5D               	goto	u915
  1870  0461  0870               	movf	___wmul@multiplier,w
  1871  0462  0471               	iorwf	___wmul@multiplier+1,w
  1872  0463  1D03               	btfss	3,2
  1873  0464  2C51               	goto	l1349
  1874  0465  0875               	movf	___wmul@product+1,w
  1875  0466  00F1               	movwf	?___wmul+1
  1876  0467  0874               	movf	___wmul@product,w
  1877  0468  00F0               	movwf	?___wmul
  1878  0469  0008               	return
  1879  046A                     __end_of___wmul:	
  1880                           
  1881                           	psect	text7
  1882  04D1                     __ptext7:	
  1883 ;; *************** function ___llmod *****************
  1884 ;; Defined at:
  1885 ;;		line 6 in file "/opt/microchip/xc8/v1.41/sources/common/llmod.c"
  1886 ;; Parameters:    Size  Location     Type
  1887 ;;  divisor         4    0[COMMON] unsigned long 
  1888 ;;  dividend        4    4[COMMON] unsigned long 
  1889 ;; Auto vars:     Size  Location     Type
  1890 ;;  counter         1    9[COMMON] unsigned char 
  1891 ;; Return value:  Size  Location     Type
  1892 ;;                  4    0[COMMON] unsigned long 
  1893 ;; Registers used:
  1894 ;;		wreg, status,2, status,0
  1895 ;; Tracked objects:
  1896 ;;		On entry : 0/0
  1897 ;;		On exit  : 0/0
  1898 ;;		Unchanged: 0/0
  1899 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  1900 ;;      Params:         8       0       0       0       0       0
  1901 ;;      Locals:         1       0       0       0       0       0
  1902 ;;      Temps:          1       0       0       0       0       0
  1903 ;;      Totals:        10       0       0       0       0       0
  1904 ;;Total ram usage:       10 bytes
  1905 ;; Hardware stack levels used:    1
  1906 ;; This function calls:
  1907 ;;		Nothing
  1908 ;; This function is called by:
  1909 ;;		_xvprintf
  1910 ;; This function uses a non-reentrant model
  1911 ;;
  1912                           
  1913                           
  1914                           ;psect for function ___llmod
  1915  04D1                     ___llmod:	
  1916                           
  1917                           ;incstack = 0
  1918                           ; Regs used in ___llmod: [wreg+status,2+status,0]
  1919  04D1  0873               	movf	___llmod@divisor+3,w
  1920  04D2  0472               	iorwf	___llmod@divisor+2,w
  1921  04D3  0471               	iorwf	___llmod@divisor+1,w
  1922  04D4  0470               	iorwf	___llmod@divisor,w
  1923  04D5  1903               	skipnz
  1924  04D6  2D0A               	goto	l1401
  1925  04D7  01F9               	clrf	___llmod@counter
  1926  04D8  0AF9               	incf	___llmod@counter,f
  1927  04D9                     l1391:	
  1928  04D9  1BF3               	btfsc	___llmod@divisor+3,7
  1929  04DA  2CE7               	goto	l1393
  1930  04DB  3001               	movlw	1
  1931  04DC                     u1015:	
  1932  04DC  35F0               	lslf	___llmod@divisor,f
  1933  04DD  0DF1               	rlf	___llmod@divisor+1,f
  1934  04DE  0DF2               	rlf	___llmod@divisor+2,f
  1935  04DF  0DF3               	rlf	___llmod@divisor+3,f
  1936  04E0  0B89               	decfsz	9,f
  1937  04E1  2CDC               	goto	u1015
  1938  04E2  3001               	movlw	1
  1939  04E3  00F8               	movwf	??___llmod
  1940  04E4  0878               	movf	??___llmod,w
  1941  04E5  07F9               	addwf	___llmod@counter,f
  1942  04E6  2CD9               	goto	l1391
  1943  04E7                     l1393:	
  1944  04E7  0873               	movf	___llmod@divisor+3,w
  1945  04E8  0277               	subwf	___llmod@dividend+3,w
  1946  04E9  1D03               	skipz
  1947  04EA  2CF5               	goto	u1035
  1948  04EB  0872               	movf	___llmod@divisor+2,w
  1949  04EC  0276               	subwf	___llmod@dividend+2,w
  1950  04ED  1D03               	skipz
  1951  04EE  2CF5               	goto	u1035
  1952  04EF  0871               	movf	___llmod@divisor+1,w
  1953  04F0  0275               	subwf	___llmod@dividend+1,w
  1954  04F1  1D03               	skipz
  1955  04F2  2CF5               	goto	u1035
  1956  04F3  0870               	movf	___llmod@divisor,w
  1957  04F4  0274               	subwf	___llmod@dividend,w
  1958  04F5                     u1035:	
  1959  04F5  1C03               	skipc
  1960  04F6  2CFF               	goto	l1397
  1961  04F7  0870               	movf	___llmod@divisor,w
  1962  04F8  02F4               	subwf	___llmod@dividend,f
  1963  04F9  0871               	movf	___llmod@divisor+1,w
  1964  04FA  3BF5               	subwfb	___llmod@dividend+1,f
  1965  04FB  0872               	movf	___llmod@divisor+2,w
  1966  04FC  3BF6               	subwfb	___llmod@dividend+2,f
  1967  04FD  0873               	movf	___llmod@divisor+3,w
  1968  04FE  3BF7               	subwfb	___llmod@dividend+3,f
  1969  04FF                     l1397:	
  1970  04FF  3001               	movlw	1
  1971  0500                     u1045:	
  1972  0500  36F3               	lsrf	___llmod@divisor+3,f
  1973  0501  0CF2               	rrf	___llmod@divisor+2,f
  1974  0502  0CF1               	rrf	___llmod@divisor+1,f
  1975  0503  0CF0               	rrf	___llmod@divisor,f
  1976  0504  0B89               	decfsz	9,f
  1977  0505  2D00               	goto	u1045
  1978  0506  3001               	movlw	1
  1979  0507  02F9               	subwf	___llmod@counter,f
  1980  0508  1D03               	btfss	3,2
  1981  0509  2CE7               	goto	l1393
  1982  050A                     l1401:	
  1983  050A  0877               	movf	___llmod@dividend+3,w
  1984  050B  00F3               	movwf	?___llmod+3
  1985  050C  0876               	movf	___llmod@dividend+2,w
  1986  050D  00F2               	movwf	?___llmod+2
  1987  050E  0875               	movf	___llmod@dividend+1,w
  1988  050F  00F1               	movwf	?___llmod+1
  1989  0510  0874               	movf	___llmod@dividend,w
  1990  0511  00F0               	movwf	?___llmod
  1991  0512  0008               	return
  1992  0513                     __end_of___llmod:	
  1993                           
  1994                           	psect	text8
  1995  0513                     __ptext8:	
  1996 ;; *************** function ___lldiv *****************
  1997 ;; Defined at:
  1998 ;;		line 6 in file "/opt/microchip/xc8/v1.41/sources/common/lldiv.c"
  1999 ;; Parameters:    Size  Location     Type
  2000 ;;  divisor         4    0[COMMON] unsigned long 
  2001 ;;  dividend        4    4[COMMON] unsigned long 
  2002 ;; Auto vars:     Size  Location     Type
  2003 ;;  quotient        4    9[COMMON] unsigned long 
  2004 ;;  counter         1   13[COMMON] unsigned char 
  2005 ;; Return value:  Size  Location     Type
  2006 ;;                  4    0[COMMON] unsigned long 
  2007 ;; Registers used:
  2008 ;;		wreg, status,2, status,0
  2009 ;; Tracked objects:
  2010 ;;		On entry : 0/0
  2011 ;;		On exit  : 0/0
  2012 ;;		Unchanged: 0/0
  2013 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  2014 ;;      Params:         8       0       0       0       0       0
  2015 ;;      Locals:         5       0       0       0       0       0
  2016 ;;      Temps:          1       0       0       0       0       0
  2017 ;;      Totals:        14       0       0       0       0       0
  2018 ;;Total ram usage:       14 bytes
  2019 ;; Hardware stack levels used:    1
  2020 ;; This function calls:
  2021 ;;		Nothing
  2022 ;; This function is called by:
  2023 ;;		_xvprintf
  2024 ;; This function uses a non-reentrant model
  2025 ;;
  2026                           
  2027                           
  2028                           ;psect for function ___lldiv
  2029  0513                     ___lldiv:	
  2030                           
  2031                           ;incstack = 0
  2032                           ; Regs used in ___lldiv: [wreg+status,2+status,0]
  2033  0513  3000               	movlw	0
  2034  0514  00FC               	movwf	___lldiv@quotient+3
  2035  0515  3000               	movlw	0
  2036  0516  00FB               	movwf	___lldiv@quotient+2
  2037  0517  3000               	movlw	0
  2038  0518  00FA               	movwf	___lldiv@quotient+1
  2039  0519  3000               	movlw	0
  2040  051A  00F9               	movwf	___lldiv@quotient
  2041  051B  0873               	movf	___lldiv@divisor+3,w
  2042  051C  0472               	iorwf	___lldiv@divisor+2,w
  2043  051D  0471               	iorwf	___lldiv@divisor+1,w
  2044  051E  0470               	iorwf	___lldiv@divisor,w
  2045  051F  1903               	skipnz
  2046  0520  2D5C               	goto	l1381
  2047  0521  01FD               	clrf	___lldiv@counter
  2048  0522  0AFD               	incf	___lldiv@counter,f
  2049  0523                     l1367:	
  2050  0523  1BF3               	btfsc	___lldiv@divisor+3,7
  2051  0524  2D31               	goto	l1369
  2052  0525  3001               	movlw	1
  2053  0526                     u945:	
  2054  0526  35F0               	lslf	___lldiv@divisor,f
  2055  0527  0DF1               	rlf	___lldiv@divisor+1,f
  2056  0528  0DF2               	rlf	___lldiv@divisor+2,f
  2057  0529  0DF3               	rlf	___lldiv@divisor+3,f
  2058  052A  0B89               	decfsz	9,f
  2059  052B  2D26               	goto	u945
  2060  052C  3001               	movlw	1
  2061  052D  00F8               	movwf	??___lldiv
  2062  052E  0878               	movf	??___lldiv,w
  2063  052F  07FD               	addwf	___lldiv@counter,f
  2064  0530  2D23               	goto	l1367
  2065  0531                     l1369:	
  2066  0531  3001               	movlw	1
  2067  0532                     u965:	
  2068  0532  35F9               	lslf	___lldiv@quotient,f
  2069  0533  0DFA               	rlf	___lldiv@quotient+1,f
  2070  0534  0DFB               	rlf	___lldiv@quotient+2,f
  2071  0535  0DFC               	rlf	___lldiv@quotient+3,f
  2072  0536  0B89               	decfsz	9,f
  2073  0537  2D32               	goto	u965
  2074  0538  0873               	movf	___lldiv@divisor+3,w
  2075  0539  0277               	subwf	___lldiv@dividend+3,w
  2076  053A  1D03               	skipz
  2077  053B  2D46               	goto	u975
  2078  053C  0872               	movf	___lldiv@divisor+2,w
  2079  053D  0276               	subwf	___lldiv@dividend+2,w
  2080  053E  1D03               	skipz
  2081  053F  2D46               	goto	u975
  2082  0540  0871               	movf	___lldiv@divisor+1,w
  2083  0541  0275               	subwf	___lldiv@dividend+1,w
  2084  0542  1D03               	skipz
  2085  0543  2D46               	goto	u975
  2086  0544  0870               	movf	___lldiv@divisor,w
  2087  0545  0274               	subwf	___lldiv@dividend,w
  2088  0546                     u975:	
  2089  0546  1C03               	skipc
  2090  0547  2D51               	goto	l1377
  2091  0548  0870               	movf	___lldiv@divisor,w
  2092  0549  02F4               	subwf	___lldiv@dividend,f
  2093  054A  0871               	movf	___lldiv@divisor+1,w
  2094  054B  3BF5               	subwfb	___lldiv@dividend+1,f
  2095  054C  0872               	movf	___lldiv@divisor+2,w
  2096  054D  3BF6               	subwfb	___lldiv@dividend+2,f
  2097  054E  0873               	movf	___lldiv@divisor+3,w
  2098  054F  3BF7               	subwfb	___lldiv@dividend+3,f
  2099  0550  1479               	bsf	___lldiv@quotient,0
  2100  0551                     l1377:	
  2101  0551  3001               	movlw	1
  2102  0552                     u985:	
  2103  0552  36F3               	lsrf	___lldiv@divisor+3,f
  2104  0553  0CF2               	rrf	___lldiv@divisor+2,f
  2105  0554  0CF1               	rrf	___lldiv@divisor+1,f
  2106  0555  0CF0               	rrf	___lldiv@divisor,f
  2107  0556  0B89               	decfsz	9,f
  2108  0557  2D52               	goto	u985
  2109  0558  3001               	movlw	1
  2110  0559  02FD               	subwf	___lldiv@counter,f
  2111  055A  1D03               	btfss	3,2
  2112  055B  2D31               	goto	l1369
  2113  055C                     l1381:	
  2114  055C  087C               	movf	___lldiv@quotient+3,w
  2115  055D  00F3               	movwf	?___lldiv+3
  2116  055E  087B               	movf	___lldiv@quotient+2,w
  2117  055F  00F2               	movwf	?___lldiv+2
  2118  0560  087A               	movf	___lldiv@quotient+1,w
  2119  0561  00F1               	movwf	?___lldiv+1
  2120  0562  0879               	movf	___lldiv@quotient,w
  2121  0563  00F0               	movwf	?___lldiv
  2122  0564  0008               	return
  2123  0565                     __end_of___lldiv:	
  2124                           
  2125                           	psect	text9
  2126  0565                     __ptext9:	
  2127 ;; *************** function _LCD_Init *****************
  2128 ;; Defined at:
  2129 ;;		line 28 in file "LCD.c"
  2130 ;; Parameters:    Size  Location     Type
  2131 ;;		None
  2132 ;; Auto vars:     Size  Location     Type
  2133 ;;		None
  2134 ;; Return value:  Size  Location     Type
  2135 ;;                  1    wreg      void 
  2136 ;; Registers used:
  2137 ;;		wreg, status,2, status,0, pclath, cstack
  2138 ;; Tracked objects:
  2139 ;;		On entry : 0/0
  2140 ;;		On exit  : 0/0
  2141 ;;		Unchanged: 0/0
  2142 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  2143 ;;      Params:         0       0       0       0       0       0
  2144 ;;      Locals:         0       0       0       0       0       0
  2145 ;;      Temps:          2       0       0       0       0       0
  2146 ;;      Totals:         2       0       0       0       0       0
  2147 ;;Total ram usage:        2 bytes
  2148 ;; Hardware stack levels used:    1
  2149 ;; Hardware stack levels required when called:    2
  2150 ;; This function calls:
  2151 ;;		_LCD_DisplayClear
  2152 ;;		_LCD_WriteData
  2153 ;; This function is called by:
  2154 ;;		_main
  2155 ;; This function uses a non-reentrant model
  2156 ;;
  2157                           
  2158                           
  2159                           ;psect for function _LCD_Init
  2160  0565                     _LCD_Init:	
  2161                           
  2162                           ;LCD.c: 30: RA4 = 0;
  2163                           
  2164                           ;incstack = 0
  2165                           ; Regs used in _LCD_Init: [wreg+status,2+status,0+pclath+cstack]
  2166  0565  0020               	movlb	0	; select bank0
  2167  0566  120C               	bcf	12,4	;volatile
  2168                           
  2169                           ;LCD.c: 31: RA3 = 0;
  2170  0567  118C               	bcf	12,3	;volatile
  2171                           
  2172                           ;LCD.c: 33: _delay((unsigned long)((30)*(32000000/4000.0)));
  2173  0568  3002               	movlw	2
  2174  0569  00F5               	movwf	??_LCD_Init+1
  2175  056A  3038               	movlw	56
  2176  056B  00F4               	movwf	??_LCD_Init
  2177  056C  30AD               	movlw	173
  2178  056D                     u1537:	
  2179  056D  0B89               	decfsz	9,f
  2180  056E  2D6D               	goto	u1537
  2181  056F  0BF4               	decfsz	??_LCD_Init,f
  2182  0570  2D6D               	goto	u1537
  2183  0571  0BF5               	decfsz	??_LCD_Init+1,f
  2184  0572  2D6D               	goto	u1537
  2185  0573  0000               	nop
  2186                           
  2187                           ;LCD.c: 34: PORTB = ( ((0x03&0x0C)<<1)|(0x03&0x03) );
  2188  0574  3003               	movlw	3
  2189  0575  0020               	movlb	0	; select bank0
  2190  0576  008D               	movwf	13	;volatile
  2191                           
  2192                           ;LCD.c: 35: {RA3 = 1; _delay((unsigned long)((1)*(32000000/4000000.0))); RA3 = 0; _delay
      +                          ((unsigned long)((1)*(32000000/4000000.0)));};
  2193  0577  158C               	bsf	12,3	;volatile
  2194  0578  3200               	nop2	;2 cycle nop
  2195  0579  3200               	nop2	;2 cycle nop
  2196  057A  3200               	nop2	;2 cycle nop
  2197  057B  3200               	nop2	;2 cycle nop
  2198  057C  0020               	movlb	0	; select bank0
  2199  057D  118C               	bcf	12,3	;volatile
  2200  057E  3200               	nop2	;2 cycle nop
  2201  057F  3200               	nop2	;2 cycle nop
  2202  0580  3200               	nop2	;2 cycle nop
  2203  0581  3200               	nop2	;2 cycle nop
  2204                           
  2205                           ;LCD.c: 36: _delay((unsigned long)((5)*(32000000/4000.0)));
  2206  0582  3034               	movlw	52
  2207  0583  00F4               	movwf	??_LCD_Init
  2208  0584  30F2               	movlw	242
  2209  0585                     u1547:	
  2210  0585  0B89               	decfsz	9,f
  2211  0586  2D85               	goto	u1547
  2212  0587  0BF4               	decfsz	??_LCD_Init,f
  2213  0588  2D85               	goto	u1547
  2214                           
  2215                           ;LCD.c: 37: {RA3 = 1; _delay((unsigned long)((1)*(32000000/4000000.0))); RA3 = 0; _delay
      +                          ((unsigned long)((1)*(32000000/4000000.0)));};
  2216  0589  0020               	movlb	0	; select bank0
  2217  058A  158C               	bsf	12,3	;volatile
  2218  058B  3200               	nop2	;2 cycle nop
  2219  058C  3200               	nop2	;2 cycle nop
  2220  058D  3200               	nop2	;2 cycle nop
  2221  058E  3200               	nop2	;2 cycle nop
  2222  058F  0020               	movlb	0	; select bank0
  2223  0590  118C               	bcf	12,3	;volatile
  2224  0591  3200               	nop2	;2 cycle nop
  2225  0592  3200               	nop2	;2 cycle nop
  2226  0593  3200               	nop2	;2 cycle nop
  2227  0594  3200               	nop2	;2 cycle nop
  2228                           
  2229                           ;LCD.c: 38: _delay((unsigned long)((400)*(32000000/4000000.0)));
  2230  0595  3005               	movlw	5
  2231  0596  00F4               	movwf	??_LCD_Init
  2232  0597  3026               	movlw	38
  2233  0598                     u1557:	
  2234  0598  0B89               	decfsz	9,f
  2235  0599  2D98               	goto	u1557
  2236  059A  0BF4               	decfsz	??_LCD_Init,f
  2237  059B  2D98               	goto	u1557
  2238  059C  3200               	nop2
  2239                           
  2240                           ;LCD.c: 39: {RA3 = 1; _delay((unsigned long)((1)*(32000000/4000000.0))); RA3 = 0; _delay
      +                          ((unsigned long)((1)*(32000000/4000000.0)));};
  2241  059D  0020               	movlb	0	; select bank0
  2242  059E  158C               	bsf	12,3	;volatile
  2243  059F  3200               	nop2	;2 cycle nop
  2244  05A0  3200               	nop2	;2 cycle nop
  2245  05A1  3200               	nop2	;2 cycle nop
  2246  05A2  3200               	nop2	;2 cycle nop
  2247  05A3  0020               	movlb	0	; select bank0
  2248  05A4  118C               	bcf	12,3	;volatile
  2249  05A5  3200               	nop2	;2 cycle nop
  2250  05A6  3200               	nop2	;2 cycle nop
  2251  05A7  3200               	nop2	;2 cycle nop
  2252  05A8  3200               	nop2	;2 cycle nop
  2253                           
  2254                           ;LCD.c: 40: _delay((unsigned long)((400)*(32000000/4000000.0)));
  2255  05A9  3005               	movlw	5
  2256  05AA  00F4               	movwf	??_LCD_Init
  2257  05AB  3026               	movlw	38
  2258  05AC                     u1567:	
  2259  05AC  0B89               	decfsz	9,f
  2260  05AD  2DAC               	goto	u1567
  2261  05AE  0BF4               	decfsz	??_LCD_Init,f
  2262  05AF  2DAC               	goto	u1567
  2263  05B0  3200               	nop2
  2264                           
  2265                           ;LCD.c: 41: PORTB = ( ((0x02&0x0C)<<1)|(0x02&0x03) );
  2266  05B1  3002               	movlw	2
  2267  05B2  0020               	movlb	0	; select bank0
  2268  05B3  008D               	movwf	13	;volatile
  2269                           
  2270                           ;LCD.c: 42: {RA3 = 1; _delay((unsigned long)((1)*(32000000/4000000.0))); RA3 = 0; _delay
      +                          ((unsigned long)((1)*(32000000/4000000.0)));};
  2271  05B4  158C               	bsf	12,3	;volatile
  2272  05B5  3200               	nop2	;2 cycle nop
  2273  05B6  3200               	nop2	;2 cycle nop
  2274  05B7  3200               	nop2	;2 cycle nop
  2275  05B8  3200               	nop2	;2 cycle nop
  2276  05B9  0020               	movlb	0	; select bank0
  2277  05BA  118C               	bcf	12,3	;volatile
  2278  05BB  3200               	nop2	;2 cycle nop
  2279  05BC  3200               	nop2	;2 cycle nop
  2280  05BD  3200               	nop2	;2 cycle nop
  2281  05BE  3200               	nop2	;2 cycle nop
  2282                           
  2283                           ;LCD.c: 44: LCD_WriteData(0x28);
  2284  05BF  3028               	movlw	40
  2285  05C0  3184  2497  3185   	fcall	_LCD_WriteData
  2286                           
  2287                           ;LCD.c: 45: LCD_WriteData(0x0c);
  2288  05C3  300C               	movlw	12
  2289  05C4  3184  2497  3185   	fcall	_LCD_WriteData
  2290                           
  2291                           ;LCD.c: 46: LCD_DisplayClear();
  2292  05C7  3183  23DA  3185   	fcall	_LCD_DisplayClear
  2293                           
  2294                           ;LCD.c: 47: LCD_WriteData(0x06);
  2295  05CA  3006               	movlw	6
  2296  05CB  3184  2497         	fcall	_LCD_WriteData
  2297  05CD  0008               	return
  2298  05CE                     __end_of_LCD_Init:	
  2299                           
  2300                           	psect	text10
  2301  03DA                     __ptext10:	
  2302 ;; *************** function _LCD_DisplayClear *****************
  2303 ;; Defined at:
  2304 ;;		line 64 in file "LCD.c"
  2305 ;; Parameters:    Size  Location     Type
  2306 ;;		None
  2307 ;; Auto vars:     Size  Location     Type
  2308 ;;		None
  2309 ;; Return value:  Size  Location     Type
  2310 ;;                  1    wreg      void 
  2311 ;; Registers used:
  2312 ;;		wreg, status,2, status,0, pclath, cstack
  2313 ;; Tracked objects:
  2314 ;;		On entry : 0/0
  2315 ;;		On exit  : 0/0
  2316 ;;		Unchanged: 0/0
  2317 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  2318 ;;      Params:         0       0       0       0       0       0
  2319 ;;      Locals:         0       0       0       0       0       0
  2320 ;;      Temps:          1       0       0       0       0       0
  2321 ;;      Totals:         1       0       0       0       0       0
  2322 ;;Total ram usage:        1 bytes
  2323 ;; Hardware stack levels used:    1
  2324 ;; Hardware stack levels required when called:    1
  2325 ;; This function calls:
  2326 ;;		_LCD_WriteData
  2327 ;; This function is called by:
  2328 ;;		_LCD_Init
  2329 ;; This function uses a non-reentrant model
  2330 ;;
  2331                           
  2332                           
  2333                           ;psect for function _LCD_DisplayClear
  2334  03DA                     _LCD_DisplayClear:	
  2335                           
  2336                           ;LCD.c: 66: RA4 = 0;
  2337                           
  2338                           ;incstack = 0
  2339                           ; Regs used in _LCD_DisplayClear: [wreg+status,2+status,0+pclath+cstack]
  2340  03DA  0020               	movlb	0	; select bank0
  2341  03DB  120C               	bcf	12,4	;volatile
  2342                           
  2343                           ;LCD.c: 67: LCD_WriteData(0x01);
  2344  03DC  3001               	movlw	1
  2345  03DD  3184  2497  3183   	fcall	_LCD_WriteData
  2346                           
  2347                           ;LCD.c: 68: _delay((unsigned long)((2)*(32000000/4000.0)));
  2348  03E0  3015               	movlw	21
  2349  03E1  00F3               	movwf	??_LCD_DisplayClear
  2350  03E2  30C6               	movlw	198
  2351  03E3                     u1577:	
  2352  03E3  0B89               	decfsz	9,f
  2353  03E4  2BE3               	goto	u1577
  2354  03E5  0BF3               	decfsz	??_LCD_DisplayClear,f
  2355  03E6  2BE3               	goto	u1577
  2356  03E7  3200               	nop2
  2357  03E8  0008               	return
  2358  03E9                     __end_of_LCD_DisplayClear:	
  2359                           
  2360                           	psect	text11
  2361  0421                     __ptext11:	
  2362 ;; *************** function _LCD_CursorPosition *****************
  2363 ;; Defined at:
  2364 ;;		line 86 in file "LCD.c"
  2365 ;; Parameters:    Size  Location     Type
  2366 ;;  tx              1    wreg     unsigned char 
  2367 ;;  ty              1    3[COMMON] unsigned char 
  2368 ;; Auto vars:     Size  Location     Type
  2369 ;;  tx              1    5[COMMON] unsigned char 
  2370 ;; Return value:  Size  Location     Type
  2371 ;;                  1    wreg      void 
  2372 ;; Registers used:
  2373 ;;		wreg, status,2, status,0, pclath, cstack
  2374 ;; Tracked objects:
  2375 ;;		On entry : 0/0
  2376 ;;		On exit  : 0/0
  2377 ;;		Unchanged: 0/0
  2378 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  2379 ;;      Params:         1       0       0       0       0       0
  2380 ;;      Locals:         1       0       0       0       0       0
  2381 ;;      Temps:          1       0       0       0       0       0
  2382 ;;      Totals:         3       0       0       0       0       0
  2383 ;;Total ram usage:        3 bytes
  2384 ;; Hardware stack levels used:    1
  2385 ;; Hardware stack levels required when called:    1
  2386 ;; This function calls:
  2387 ;;		_LCD_WriteData
  2388 ;; This function is called by:
  2389 ;;		_main
  2390 ;; This function uses a non-reentrant model
  2391 ;;
  2392                           
  2393                           
  2394                           ;psect for function _LCD_CursorPosition
  2395  0421                     _LCD_CursorPosition:	
  2396                           
  2397                           ;incstack = 0
  2398                           ; Regs used in _LCD_CursorPosition: [wreg+status,2+status,0+pclath+cstack]
  2399                           ;LCD_CursorPosition@tx stored from wreg
  2400  0421  00F5               	movwf	LCD_CursorPosition@tx
  2401                           
  2402                           ;LCD.c: 88: RA4 = 0;
  2403  0422  0020               	movlb	0	; select bank0
  2404  0423  120C               	bcf	12,4	;volatile
  2405                           
  2406                           ;LCD.c: 89: LCD_WriteData(0x80|tx|(0x40*ty));
  2407  0424  0873               	movf	LCD_CursorPosition@ty,w
  2408  0425  00F4               	movwf	??_LCD_CursorPosition
  2409  0426  3005               	movlw	5
  2410  0427                     u1345:	
  2411  0427  35F4               	lslf	??_LCD_CursorPosition,f
  2412  0428  3EFF               	addlw	-1
  2413  0429  1D03               	skipz
  2414  042A  2C27               	goto	u1345
  2415  042B  3574               	lslf	??_LCD_CursorPosition,w
  2416  042C  0475               	iorwf	LCD_CursorPosition@tx,w
  2417  042D  3880               	iorlw	-128
  2418  042E  3184  2497  3184   	fcall	_LCD_WriteData
  2419                           
  2420                           ;LCD.c: 90: _delay((unsigned long)((40)*(32000000/4000000.0)));
  2421  0431  306A               	movlw	106
  2422  0432                     u1587:	
  2423  0432  0B89               	decfsz	9,f
  2424  0433  2C32               	goto	u1587
  2425  0434  3200               	nop2
  2426  0435  0008               	return
  2427  0436                     __end_of_LCD_CursorPosition:	
  2428                           
  2429                           	psect	text12
  2430  0497                     __ptext12:	
  2431 ;; *************** function _LCD_WriteData *****************
  2432 ;; Defined at:
  2433 ;;		line 15 in file "LCD.c"
  2434 ;; Parameters:    Size  Location     Type
  2435 ;;  point           1    wreg     char 
  2436 ;; Auto vars:     Size  Location     Type
  2437 ;;  point           1    2[COMMON] char 
  2438 ;; Return value:  Size  Location     Type
  2439 ;;                  1    wreg      void 
  2440 ;; Registers used:
  2441 ;;		wreg, status,2, status,0
  2442 ;; Tracked objects:
  2443 ;;		On entry : 0/0
  2444 ;;		On exit  : 0/0
  2445 ;;		Unchanged: 0/0
  2446 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  2447 ;;      Params:         0       0       0       0       0       0
  2448 ;;      Locals:         1       0       0       0       0       0
  2449 ;;      Temps:          2       0       0       0       0       0
  2450 ;;      Totals:         3       0       0       0       0       0
  2451 ;;Total ram usage:        3 bytes
  2452 ;; Hardware stack levels used:    1
  2453 ;; This function calls:
  2454 ;;		Nothing
  2455 ;; This function is called by:
  2456 ;;		_LCD_Init
  2457 ;;		_LCD_Put
  2458 ;;		_LCD_DisplayClear
  2459 ;;		_LCD_CursorPosition
  2460 ;;		_LCD_CursorHome
  2461 ;;		_LCD_CursorShift
  2462 ;;		_LCD_DispShift
  2463 ;; This function uses a non-reentrant model
  2464 ;;
  2465                           
  2466                           
  2467                           ;psect for function _LCD_WriteData
  2468  0497                     _LCD_WriteData:	
  2469                           
  2470                           ;incstack = 0
  2471                           ; Regs used in _LCD_WriteData: [wreg+status,2+status,0]
  2472                           ;LCD_WriteData@point stored from wreg
  2473  0497  00F2               	movwf	LCD_WriteData@point
  2474                           
  2475                           ;LCD.c: 17: _delay((unsigned long)((80)*(32000000/4000000.0)));
  2476  0498  30D5               	movlw	213
  2477  0499                     u1597:	
  2478  0499  0B89               	decfsz	9,f
  2479  049A  2C99               	goto	u1597
  2480  049B  0000               	nop
  2481                           
  2482                           ;LCD.c: 18: PORTB = ( (((point>>4)&0x0F&0x0C)<<1)|((point>>4)&0x0F&0x03) );
  2483  049C  0872               	movf	LCD_WriteData@point,w
  2484  049D  00F0               	movwf	??_LCD_WriteData
  2485  049E  3004               	movlw	4
  2486  049F                     u845:	
  2487  049F  1003               	clrc
  2488  04A0  1BF0               	btfsc	??_LCD_WriteData,7
  2489  04A1  1403               	setc
  2490  04A2  0CF0               	rrf	??_LCD_WriteData,f
  2491  04A3  0B89               	decfsz	9,f
  2492  04A4  2C9F               	goto	u845
  2493  04A5  3003               	movlw	3
  2494  04A6  0570               	andwf	??_LCD_WriteData,w
  2495  04A7  00F1               	movwf	??_LCD_WriteData+1
  2496  04A8  0E72               	swapf	LCD_WriteData@point,w
  2497  04A9  390F               	andlw	15
  2498  04AA  1989               	btfsc	9,3
  2499  04AB  38F0               	iorlw	240
  2500  04AC  390C               	andlw	12
  2501  04AD  0709               	addwf	9,w
  2502  04AE  0471               	iorwf	??_LCD_WriteData+1,w
  2503  04AF  0020               	movlb	0	; select bank0
  2504  04B0  008D               	movwf	13	;volatile
  2505                           
  2506                           ;LCD.c: 19: {RA3 = 1; _delay((unsigned long)((1)*(32000000/4000000.0))); RA3 = 0; _delay
      +                          ((unsigned long)((1)*(32000000/4000000.0)));};
  2507  04B1  158C               	bsf	12,3	;volatile
  2508  04B2  3200               	nop2	;2 cycle nop
  2509  04B3  3200               	nop2	;2 cycle nop
  2510  04B4  3200               	nop2	;2 cycle nop
  2511  04B5  3200               	nop2	;2 cycle nop
  2512  04B6  0020               	movlb	0	; select bank0
  2513  04B7  118C               	bcf	12,3	;volatile
  2514  04B8  3200               	nop2	;2 cycle nop
  2515  04B9  3200               	nop2	;2 cycle nop
  2516  04BA  3200               	nop2	;2 cycle nop
  2517  04BB  3200               	nop2	;2 cycle nop
  2518                           
  2519                           ;LCD.c: 20: PORTB = ( ((point&0x0F&0x0C)<<1)|(point&0x0F&0x03) );
  2520  04BC  3003               	movlw	3
  2521  04BD  0572               	andwf	LCD_WriteData@point,w
  2522  04BE  00F0               	movwf	??_LCD_WriteData
  2523  04BF  0872               	movf	LCD_WriteData@point,w
  2524  04C0  390C               	andlw	12
  2525  04C1  0709               	addwf	9,w
  2526  04C2  0470               	iorwf	??_LCD_WriteData,w
  2527  04C3  0020               	movlb	0	; select bank0
  2528  04C4  008D               	movwf	13	;volatile
  2529                           
  2530                           ;LCD.c: 21: {RA3 = 1; _delay((unsigned long)((1)*(32000000/4000000.0))); RA3 = 0; _delay
      +                          ((unsigned long)((1)*(32000000/4000000.0)));};
  2531  04C5  158C               	bsf	12,3	;volatile
  2532  04C6  3200               	nop2	;2 cycle nop
  2533  04C7  3200               	nop2	;2 cycle nop
  2534  04C8  3200               	nop2	;2 cycle nop
  2535  04C9  3200               	nop2	;2 cycle nop
  2536  04CA  0020               	movlb	0	; select bank0
  2537  04CB  118C               	bcf	12,3	;volatile
  2538  04CC  3200               	nop2	;2 cycle nop
  2539  04CD  3200               	nop2	;2 cycle nop
  2540  04CE  3200               	nop2	;2 cycle nop
  2541  04CF  3200               	nop2	;2 cycle nop
  2542  04D0  0008               	return
  2543  04D1                     __end_of_LCD_WriteData:	
  2544                           
  2545                           	psect	text13
  2546  040C                     __ptext13:	
  2547 ;; *************** function _Basic_Init *****************
  2548 ;; Defined at:
  2549 ;;		line 26 in file "main.c"
  2550 ;; Parameters:    Size  Location     Type
  2551 ;;		None
  2552 ;; Auto vars:     Size  Location     Type
  2553 ;;		None
  2554 ;; Return value:  Size  Location     Type
  2555 ;;                  1    wreg      char 
  2556 ;; Registers used:
  2557 ;;		wreg, status,2
  2558 ;; Tracked objects:
  2559 ;;		On entry : 0/0
  2560 ;;		On exit  : 0/0
  2561 ;;		Unchanged: 0/0
  2562 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4
  2563 ;;      Params:         0       0       0       0       0       0
  2564 ;;      Locals:         0       0       0       0       0       0
  2565 ;;      Temps:          0       0       0       0       0       0
  2566 ;;      Totals:         0       0       0       0       0       0
  2567 ;;Total ram usage:        0 bytes
  2568 ;; Hardware stack levels used:    1
  2569 ;; This function calls:
  2570 ;;		Nothing
  2571 ;; This function is called by:
  2572 ;;		_main
  2573 ;; This function uses a non-reentrant model
  2574 ;;
  2575                           
  2576                           
  2577                           ;psect for function _Basic_Init
  2578  040C                     _Basic_Init:	
  2579                           
  2580                           ;main.c: 28: OSCCON = 0xF3;
  2581                           
  2582                           ;incstack = 0
  2583                           ; Regs used in _Basic_Init: [wreg+status,2]
  2584  040C  30F3               	movlw	243
  2585  040D  0021               	movlb	1	; select bank1
  2586  040E  0099               	movwf	25	;volatile
  2587                           
  2588                           ;main.c: 32: TRISA = 0x07;
  2589  040F  3007               	movlw	7
  2590  0410  008C               	movwf	12	;volatile
  2591                           
  2592                           ;main.c: 33: ANSELA = 0x07;
  2593  0411  3007               	movlw	7
  2594  0412  0023               	movlb	3	; select bank3
  2595  0413  008C               	movwf	12	;volatile
  2596                           
  2597                           ;main.c: 35: TRISB = 0x40;
  2598  0414  3040               	movlw	64
  2599  0415  0021               	movlb	1	; select bank1
  2600  0416  008D               	movwf	13	;volatile
  2601                           
  2602                           ;main.c: 36: ANSELB = 0x00;
  2603  0417  0023               	movlb	3	; select bank3
  2604  0418  018D               	clrf	13	;volatile
  2605                           
  2606                           ;main.c: 38: APFCON0 = 0x08;
  2607  0419  3008               	movlw	8
  2608  041A  0022               	movlb	2	; select bank2
  2609  041B  009D               	movwf	29	;volatile
  2610                           
  2611                           ;main.c: 39: APFCON1 = 0x00;
  2612  041C  019E               	clrf	30	;volatile
  2613                           
  2614                           ;main.c: 41: PORTA = 0x00;
  2615  041D  0020               	movlb	0	; select bank0
  2616  041E  018C               	clrf	12	;volatile
  2617                           
  2618                           ;main.c: 42: PORTB = 0x00;
  2619  041F  018D               	clrf	13	;volatile
  2620  0420  0008               	return
  2621  0421                     __end_of_Basic_Init:	
  2622                           ;main.c: 44: return 0;
  2623                           ;	Return value of _Basic_Init is never used
  2624                           
  2625  007E                     btemp	set	126	;btemp
  2626  007E                     wtemp0	set	126
>>>>>>> master


Data Sizes:
    Strings     34
    Constant    10
    Data        0
    BSS         5
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     12      13
    BANK0            80     37      41
    BANK1            80      0       0
    BANK2            80      0       0
    BANK3            80      0       0
    BANK4            48      0       0

Pointer List with Targets:

    sprintf@f	PTR const unsigned char  size(2) Largest target is 6
		 -> STR_1(CODE[6]), 

    sprintf@sp	PTR unsigned char  size(1) Largest target is 10
		 -> main@buff(BANK0[10]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    xfunc_in	PTR FTN()unsigned char  size(2) Largest target is 1
		 -> Absolute function(), 

    outptr	PTR unsigned char  size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    xfunc_out	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), LCD_Put(), 


Critical Paths under _main in COMMON

    _sprintf->___lwmod
    ___lwmod->___lwdiv
    _LCD_Put->_LCD_WriteData
    _LCD_Init->_LCD_DisplayClear
    _LCD_DisplayClear->_LCD_WriteData
    _LCD_CursorPosition->_LCD_WriteData

Critical Paths under _Handler in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_sprintf
    _sprintf->___lwmod

Critical Paths under _Handler in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _Handler in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _Handler in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _Handler in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _Handler in BANK4

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                17    17      0    2368
                                             11 COMMON     1     1      0
                                             21 BANK0     16    16      0
                         _Basic_Init
                 _LCD_CursorPosition
                           _LCD_Init
                            _LCD_Put
                        _Timer1_Init
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             25    19      6    1482
                                              4 BANK0     17    11      6
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              6     2      4     386
                                              9 COMMON     2     2      0
                                              0 BANK0      4     0      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              8     4      4     290
                                              1 COMMON     8     4      4
 ---------------------------------------------------------------------------------
 (1) _Timer1_Init                                          1     1      0       0
                                              1 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _LCD_Put                                              1     0      1     249
                                              4 COMMON     1     0      1
                      _LCD_WriteData
 ---------------------------------------------------------------------------------
 (1) _LCD_Init                                             2     2      0     176
                                              5 COMMON     2     2      0
                   _LCD_DisplayClear
                      _LCD_WriteData
 ---------------------------------------------------------------------------------
 (2) _LCD_DisplayClear                                     1     1      0      88
                                              4 COMMON     1     1      0
                      _LCD_WriteData
 ---------------------------------------------------------------------------------
 (1) _LCD_CursorPosition                                   3     2      1     196
                                              4 COMMON     3     2      1
                      _LCD_WriteData
 ---------------------------------------------------------------------------------
 (2) _LCD_WriteData                                        3     3      0      88
                                              1 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (1) _Basic_Init                                           0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _Handler                                              1     1      0       0
                                              0 COMMON     1     1      0
                     _Timer1_Handler
 ---------------------------------------------------------------------------------
 (5) _Timer1_Handler                                       0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Basic_Init
   _LCD_CursorPosition
     _LCD_WriteData
   _LCD_Init
     _LCD_DisplayClear
       _LCD_WriteData
     _LCD_WriteData
   _LCD_Put
     _LCD_WriteData
   _Timer1_Init
   _sprintf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)

 _Handler (ROOT)
   _Timer1_Handler

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             170      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      C       D       2       92.9%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0      36       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BANK0               50     25      29       6       51.2%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BITBANK1            50      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BANK1               50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BITBANK2            50      0       0       9        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BANK2               50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BITBANK3            50      0       0      11        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BANK3               50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BITBANK4            30      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BANK4               30      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
DATA                 0      0      36      15        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.41 build -162212810 
<<<<<<< HEAD
Symbol Table                                                                                   Fri Mar  3 09:24:47 2017

                __CFG_CP$OFF 0000                          _GIE 005F                          _RA3 0063  
                        _RA4 0064                 __CFG_CPD$OFF 0000                          u915 01A9  
               __CFG_BORV$LO 0000                          wreg 0009                   _Basic_Init 0296  
               __CFG_LVP$OFF 0000              __end_of_LCD_Put 02C9                         l2123 0216  
                       l2203 0167                         l2125 0222                         l2133 0237  
                       l2151 005C                         l2215 0189                         l2129 022E  
                       l2161 0072                         l2145 0044                         l1701 0201  
                       l2173 0097                         l2167 0078                         l2191 00E5  
                       l1705 020A                         l2187 00AA                         l2179 00A6  
                       l2189 0022                         l1693 01E3                         l1695 01EF  
                       STR_1 0260                 __CFG_WDTE$ON 0000                         STR_2 0266  
                       STR_3 0246                         STR_4 0254                         STR_5 025A  
                       STR_6 024D                         u2007 0131                         u2017 02B4  
                       u2027 0292                         u2037 01A3                         u1255 01E6  
                       u1275 01F0                         u1285 01FA                         u1375 0287  
                       u1295 0202                         u1835 0219                         u1915 008D  
                       u1855 0228                         u1865 022F                         _PEIE 005E  
                       u1977 00F2                         u1987 010A                         u1997 011D  
                       _TMR1 0016                 __CFG_WRT$OFF 0000                         _main 0153  
                       fsr0h 0005                         fsr1h 0007                         indf0 0000  
                       fsr0l 0004                         indf1 0001                         fsr1l 0006  
                       btemp 007E                __CFG_BOREN$ON 0000                         start 0010  
              __CFG_IESO$OFF 0000              __end_of_Handler 0010                _LCD_WriteData 01A1  
              __CFG_MCLRE$ON 0000     __end_of_LCD_DisplayClear 02BA             __end_of_LCD_Init 0153  
              __CFG_PLLEN$ON 0000                  LCD_Put@word 0074                        ?_main 0070  
                      _T1CON 0018              __end_of___lwdiv 020F              __end_of___lwmod 023C  
                      _PORTA 000C                        _PORTB 000D                        _TRISA 008C  
                      _TRISB 008D                __CFG_PWRTE$ON 0000               __CFG_FCMEN$OFF 0000  
            __end_of_dpowers 0246                        main@i 0041                        main@j 003F  
                      main@p 0043                        status 0003                        wtemp0 007E  
            __end_of_sprintf 00EA           _LCD_CursorPosition 0281               ?_LCD_WriteData 0070  
            __initialization 0012                 __end_of_main 01A1          ?_LCD_CursorPosition 0074  
                     ??_main 007B                    ??_LCD_Put 0075                  ?_Basic_Init 0070  
             _Timer1_Handler 02BA         ??_LCD_CursorPosition 0075                       _ANSELA 018C  
                     _ANSELB 018D                       _T1GCON 0019                       _OSCCON 0099  
                     _TMR1IE 0488                       _TMR1IF 0088                    ??_Handler 0070  
                     _TMR1ON 00C0                ??_Timer1_Init 0071                    ??___lwdiv 0075  
                  ??___lwmod 0079                       _outptr 007C       __end_of_Timer1_Handler 02C3  
                  ??_sprintf 002A      __end_of__initialization 0018                    ?_LCD_Init 0070  
            ??_LCD_WriteData 0071               __pcstackCOMMON 0070          __size_of_Basic_Init 0015  
        __end_of_Timer1_Init 0281              ?_Timer1_Handler 0070                   __pbssBANK0 0045  
                 ??_LCD_Init 0075                   __pmaintext 0153                   __pintentry 0004  
          ?_LCD_DisplayClear 0070                      _APFCON0 011D                      _APFCON1 011E  
         ??_LCD_DisplayClear 0074                      _LCD_Put 02C3                      _Handler 0004  
                _Timer1_Init 0268                      ___lwdiv 01DB                      ___lwmod 020F  
            __CFG_STVREN$OFF 0000                      __ptext1 001C                      __ptext2 020F  
                    __ptext3 01DB                      __ptext4 0268                      __ptext5 02C3  
                    __ptext6 00EA                      __ptext7 02AB                      __ptext8 0281  
                    __ptext9 01A1                      _dpowers 023C                 ??_Basic_Init 0071  
                    _sprintf 001C         end_of_initialization 0018           __end_of_Basic_Init 02AB  
               __pstringtext 023C             __CFG_FOSC$INTOSC 0000  __size_of_LCD_CursorPosition 0015  
          __size_of_LCD_Init 0069             ??_Timer1_Handler 0070          start_initialization 0012  
       LCD_CursorPosition@tx 0076         LCD_CursorPosition@ty 0074        __end_of_LCD_WriteData 01DB  
                   ?_LCD_Put 0074                  __pbssCOMMON 007C                    ___latbits 0001  
              __pcstackBANK0 0020    __size_of_LCD_DisplayClear 000F                     ?_Handler 0070  
                sprintf@flag 002F                  sprintf@prec 0030                 ?_Timer1_Init 0070  
           ___lwdiv@dividend 0073                     ?___lwdiv 0071                     ?___lwmod 0020  
           ___lwdiv@quotient 0076                     ?_sprintf 0024                     _LCD_Init 00EA  
                  _xfunc_out 0047             __size_of_LCD_Put 0006             __size_of_Handler 000C  
           __size_of___lwdiv 0034             __size_of___lwmod 002D           LCD_WriteData@point 0073  
                 sprintf@val 0031              ___lwdiv@divisor 0071   __end_of_LCD_CursorPosition 0296  
            ___lwdiv@counter 0078                     __ptext10 0296                     __ptext12 02BA  
           _LCD_DisplayClear 02AB             __size_of_sprintf 00CE                __size_of_main 004E  
       __size_of_Timer1_Init 0019                     int$flags 007E                     main@buff 0035  
                   _xfunc_in 0045                     intlevel1 0000                    sprintf@ap 002E  
                  sprintf@sp 0033             ___lwmod@dividend 0022            __CFG_CLKOUTEN$OFF 0000  
                   sprintf@c 0034                     sprintf@f 0024              ___lwmod@divisor 0020  
            ___lwmod@counter 007A       __size_of_LCD_WriteData 003A      __size_of_Timer1_Handler 0009  
=======
Symbol Table                                                                                   Fri Mar  3 08:06:44 2017

                __CFG_CP$OFF 0000          ___wmul@multiplicand 0072                          l123 064A  
                        l108 05CE                          l141 06E5                          l164 079C  
                        l345 0457                          _RA3 0063                          _RA4 0064  
               __CFG_CPD$OFF 0000                          u905 0458                          u915 045D  
                        u845 049F                          u945 0526                          u965 0532  
                        u975 0546                          u985 0552                 __CFG_BORV$LO 0000  
                        wreg 0009                   _Basic_Init 040C                 __CFG_LVP$OFF 0000  
            __end_of_LCD_Put 03DA                         l1401 050A                         l1501 06C3  
                       l1335 0489                         l1327 0479                         l1503 06C8  
                       l1423 05E7                         l1345 03FA                         l1513 06FF  
                       l1515 0714                         l1507 06CD                         l1381 055C  
                       l1349 0451                         l1541 0782                         l1525 073E  
                       l1517 071D                         l1453 063A                         l1445 0610  
                       l1437 05FC                         l1367 0523                         l1391 04D9  
                       l1527 0740                         l1519 072D                         l1447 0613  
                       l1377 0551                         l1369 0531                         l1393 04E7  
                       l1561 07BB                         l1553 07AA                         l1537 077A  
                       l1481 0680                         l1473 0665                         l1465 0657  
                       l1457 0642                         l1571 07E3                         l1563 07BF  
                       l1491 069A                         l1483 0684                         l1397 04FF  
                       l1573 07E7                         l1493 06AF                         l1567 07D1  
                       l1559 07B2                         l1495 06BC                         l1487 0696  
                       l1479 0672                         l1497 06BF                         l1681 0441  
                       l1499 06C1                         STR_1 0800                         STR_2 0827  
                       STR_3 080D                         STR_4 081B                         STR_5 0821  
                       STR_6 0814                         u1015 04DC                         u1035 04F5  
                       u1045 0500                         u1315 07CF                         u1335 07F5  
                       u1345 0427                         u1185 0694                         u1195 06A8  
                       u1537 056D                         u1547 0585                         u1557 0598  
                       u1567 05AC                         u1577 03E3                         u1587 0432  
                       u1597 0499                 __CFG_WRT$OFF 0000                         _main 0436  
                       fsr0h 0005                         fsr1h 0007                         indf0 0000  
                       fsr0l 0004                         indf1 0001                         fsr1l 0006  
                       btemp 007E                __CFG_BOREN$ON 0000                         start 0002  
              __CFG_IESO$OFF 0000                _LCD_WriteData 0497                __CFG_MCLRE$ON 0000  
   __end_of_LCD_DisplayClear 03E9             __end_of_LCD_Init 05CE                __CFG_PLLEN$ON 0000  
                LCD_Put@word 0073                        ?_main 0070                __CFG_WDTE$OFF 0000  
            __end_of___lldiv 0565              __end_of___llmod 0513                        _PORTA 000C  
                      _PORTB 000D                        _TRISA 008C                        _TRISB 008D  
              __CFG_PWRTE$ON 0000               __CFG_FCMEN$OFF 0000                        _xputc 046A  
                      _xputs 03F9                        pclath 000A                        status 0003  
                      wtemp0 007E              __end_of_xprintf 03F9           _LCD_CursorPosition 0421  
             ?_LCD_WriteData 0070              __initialization 07F8                 __end_of_main 044F  
        ?_LCD_CursorPosition 0073                       ??_main 007E                    ??_LCD_Put 0074  
                ?_Basic_Init 0070             ___llmod@dividend 0074         ??_LCD_CursorPosition 0074  
                     _ANSELA 018C                       _ANSELB 018D                       ?_xputc 0070  
                     ?_xputs 0070                       _OSCCON 0099                       ___wmul 044F  
                  ??___lldiv 0078                    ??___llmod 0078                       _outptr 005C  
                     xputc@c 0075                    ??_xprintf 0056      __end_of__initialization 07FD  
                  ?_LCD_Init 0070              ??_LCD_WriteData 0070             __end_of_xvprintf 07F8  
             __pcstackCOMMON 0070          __size_of_Basic_Init 0015                __end_of_xputc 0497  
              __end_of_xputs 040C                      ??_xputc 0074                      ??_xputs 0076  
                 __pbssBANK0 0058                   ??_LCD_Init 0074                   __pmaintext 0436  
                    ?___wmul 0070            ?_LCD_DisplayClear 0070                      _APFCON0 011D  
                    _APFCON1 011E           ??_LCD_DisplayClear 0073                      _LCD_Put 03D4  
               _xvprintf$154 0037                 _xvprintf$155 003B                 _xvprintf$156 003D  
                    ___lldiv 0513              __size_of___wmul 001B                      ___llmod 04D1  
            __CFG_STVREN$OFF 0000                      __ptext1 03E9                      __ptext2 05CE  
                    __ptext3 03F9                      __ptext4 046A                      __ptext5 03D4  
                    __ptext6 044F                      __ptext7 04D1                      __ptext8 0513  
                    __ptext9 0565                    ?_xvprintf 0020                 ??_Basic_Init 0070  
       end_of_initialization 07FD                      _xprintf 03E9              ___lldiv@divisor 0070  
            ___lldiv@counter 007D           __end_of_Basic_Init 0421                 __pstringtext 0800  
           __CFG_FOSC$INTOSC 0000                   ??_xvprintf 0023  __size_of_LCD_CursorPosition 0015  
          __size_of_LCD_Init 0069               __end_of___wmul 046A          start_initialization 07F8  
            ___llmod@divisor 0070              ___llmod@counter 0079         LCD_CursorPosition@tx 0075  
       LCD_CursorPosition@ty 0073        __end_of_LCD_WriteData 04D1                     ??___wmul 0074  
                   ?_LCD_Put 0073                    ___latbits 0001                __pcstackBANK0 0020  
  __size_of_LCD_DisplayClear 000F                     ?___lldiv 0070                     ?___llmod 0070  
          __size_of_xvprintf 022A                     ?_xprintf 0050               __size_of_xputc 002D  
             __size_of_xputs 0013                     _LCD_Init 0565               ___wmul@product 0074  
          ___wmul@multiplier 0070                    _xfunc_out 005A             __size_of_LCD_Put 0006  
           __size_of___lldiv 0052             __size_of___llmod 0042           LCD_WriteData@point 0072  
 __end_of_LCD_CursorPosition 0436                     __ptext10 03DA                     __ptext11 0421  
                   __ptext12 0497                     __ptext13 040C             _LCD_DisplayClear 03DA  
           __size_of_xprintf 0010                __size_of_main 0019                     _xfunc_in 0058  
                   _xvprintf 05CE                   xprintf@arp 0057                   xprintf@fmt 0050  
           ___lldiv@dividend 0074            __CFG_CLKOUTEN$OFF 0000                  xvprintf@arp 0022  
                xvprintf@fmt 0020             ___lldiv@quotient 0079       __size_of_LCD_WriteData 003A  
                   xputs@str 0077                    xvprintf@c 004F                    xvprintf@d 004E  
                  xvprintf@f 004A                    xvprintf@i 004C                    xvprintf@j 0044  
                  xvprintf@p 003F                    xvprintf@r 0040                    xvprintf@s 0027  
                  xvprintf@v 0046                    xvprintf@w 0042  
>>>>>>> master
